// Generated by Haxe 4.0.0+ef18b627e
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.escape = function(s) {
	return s.replace(EReg.escapeRe,"\\$&");
};
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var _$EnumValue_EnumValue_$Impl_$ = {};
$hxClasses["_EnumValue.EnumValue_Impl_"] = _$EnumValue_EnumValue_$Impl_$;
_$EnumValue_EnumValue_$Impl_$.__name__ = "_EnumValue.EnumValue_Impl_";
_$EnumValue_EnumValue_$Impl_$.match = function(this1,pattern) {
	return false;
};
var com_genome2d_proto_GPrototypeHelper = function() { };
$hxClasses["com.genome2d.proto.GPrototypeHelper"] = com_genome2d_proto_GPrototypeHelper;
com_genome2d_proto_GPrototypeHelper.__name__ = "com.genome2d.proto.GPrototypeHelper";
com_genome2d_proto_GPrototypeHelper.g2d_GComponent = null;
com_genome2d_proto_GPrototypeHelper.g2d_GCameraController = null;
com_genome2d_proto_GPrototypeHelper.g2d_CameraController = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTextureSettings = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTextureBase = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTextureAtlas = null;
com_genome2d_proto_GPrototypeHelper.g2d_GIntPoint = null;
com_genome2d_proto_GPrototypeHelper.g2d_GAStarNode = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUISkin = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIShapeSkin = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIParticleSkin = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIElement = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIInputField = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTweenStep = null;
com_genome2d_proto_GPrototypeHelper.g2d_GFloatInterp = null;
com_genome2d_proto_GPrototypeHelper.g2d_GCurveInterp = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTweenSequence = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTransition = null;
com_genome2d_proto_GPrototypeHelper.g2d_GFont = null;
com_genome2d_proto_GPrototypeHelper.g2d_GPostProcess = null;
com_genome2d_proto_GPrototypeHelper.g2d_GFilterPP = null;
com_genome2d_proto_GPrototypeHelper.g2d_GBloomPP = null;
com_genome2d_proto_GPrototypeHelper.g2d_GParticleEmitterModule = null;
com_genome2d_proto_GPrototypeHelper.g2d_GSPHVelocityModule = null;
com_genome2d_proto_GPrototypeHelper.g2d_GScriptModule = null;
com_genome2d_proto_GPrototypeHelper.g2d_GParticleEmitter = null;
com_genome2d_proto_GPrototypeHelper.g2d_GIntRectangle = null;
com_genome2d_proto_GPrototypeHelper.g2d_GSimpleParticleSystemD = null;
com_genome2d_proto_GPrototypeHelper.g2d_GParticleSystemD = null;
com_genome2d_proto_GPrototypeHelper.g2d_GCurve = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTileMap = null;
com_genome2d_proto_GPrototypeHelper.g2d_GText = null;
com_genome2d_proto_GPrototypeHelper.g2d_GParticleSystemComponent = null;
com_genome2d_proto_GPrototypeHelper.g2d_GParticleSystem = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTiledSprite = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTexturedQuad = null;
com_genome2d_proto_GPrototypeHelper.g2d_GSliceSprite = null;
com_genome2d_proto_GPrototypeHelper.g2d_GSlice3Sprite = null;
com_genome2d_proto_GPrototypeHelper.g2d_GShape = null;
com_genome2d_proto_GPrototypeHelper.g2d_GScriptComponent = null;
com_genome2d_proto_GPrototypeHelper.g2d_GScript = null;
com_genome2d_proto_GPrototypeHelper.g2d_GLevel = null;
com_genome2d_proto_GPrototypeHelper.g2d_GAnimator = null;
com_genome2d_proto_GPrototypeHelper.g2d_GFrameAnimator = null;
com_genome2d_proto_GPrototypeHelper.g2d_GFrameAnimation = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTexture = null;
com_genome2d_proto_GPrototypeHelper.g2d_GNode = null;
com_genome2d_proto_GPrototypeHelper.g2d_GSprite = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIFontSkin = null;
com_genome2d_proto_GPrototypeHelper.g2d_GTextureFont = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUITextureSkin = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUISkinSheet = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUILayout = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIVerticalLayout = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUIHorizontalLayout = null;
com_genome2d_proto_GPrototypeHelper.g2d_GUI = null;
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.indexOf = function(a,obj,i) {
	var len = a.length;
	if(i < 0) {
		i += len;
		if(i < 0) {
			i = 0;
		}
	}
	while(i < len) {
		if(((a[i]) === obj)) {
			return i;
		}
		++i;
	}
	return -1;
};
HxOverrides.lastIndexOf = function(a,obj,i) {
	var len = a.length;
	if(i >= len) {
		i = len - 1;
	} else if(i < 0) {
		i += len;
	}
	while(i >= 0) {
		if(((a[i]) === obj)) {
			return i;
		}
		--i;
	}
	return -1;
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.list = function(it) {
	var l = new haxe_ds_List();
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		l.add(i1);
	}
	return l;
};
Lambda.map = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(x1));
	}
	return _g;
};
Lambda.mapi = function(it,f) {
	var i = 0;
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(i++,x1));
	}
	return _g;
};
Lambda.flatten = function(it) {
	var _g = [];
	var e = $getIterator(it);
	while(e.hasNext()) {
		var e1 = e.next();
		var x = $getIterator(e1);
		while(x.hasNext()) {
			var x1 = x.next();
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.flatMap = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		_g.push(f(x1));
	}
	var _g1 = [];
	var e = $getIterator(_g);
	while(e.hasNext()) {
		var e1 = e.next();
		var x2 = $getIterator(e1);
		while(x2.hasNext()) {
			var x3 = x2.next();
			_g1.push(x3);
		}
	}
	return _g1;
};
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Lambda.concat = function(a,b) {
	var l = [];
	var x = $getIterator(a);
	while(x.hasNext()) {
		var x1 = x.next();
		l.push(x1);
	}
	var x2 = $getIterator(b);
	while(x2.hasNext()) {
		var x3 = x2.next();
		l.push(x3);
	}
	return l;
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	if(o == null) {
		return null;
	}
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.is = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.downcast = function(value,c) {
	if(js_Boot.__downcastCheck(value,c)) {
		return value;
	} else {
		return null;
	}
};
Std.instance = function(value,c) {
	return js_Boot.__downcastCheck(value,c) ? value : null;
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.int = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,get_length: function() {
		return this.b.length;
	}
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCodePoint(c);
	}
	,addSub: function(s,pos,len) {
		this.b += len == null ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
	,__properties__: {get_length:"get_length"}
};
var haxe_SysTools = function() { };
$hxClasses["haxe.SysTools"] = haxe_SysTools;
haxe_SysTools.__name__ = "haxe.SysTools";
haxe_SysTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
haxe_SysTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		var result_b = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += bs == null ? "null" : "" + bs;
					result_b += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b1 = "";
		var _g3 = 0;
		var _g11 = argument.length;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var c2 = HxOverrides.cca(argument,i1);
			if(haxe_SysTools.winMetaCharacters.indexOf(c2) >= 0) {
				result_b1 += String.fromCodePoint(94);
			}
			result_b1 += String.fromCodePoint(c2);
		}
		return result_b1;
	} else {
		return argument;
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.contains = function(s,value) {
	return s.indexOf(value) != -1;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.iterator = function(s) {
	return new haxe_iterators_StringIterator(s);
};
StringTools.keyValueIterator = function(s) {
	return new haxe_iterators_StringKeyValueIterator(s);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	} else if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	} else {
		return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
	}
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var argument1 = argument;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument1)) {
		var result_b = "";
		var needquote = argument1.indexOf(" ") != -1 || argument1.indexOf("\t") != -1 || argument1 == "";
		if(needquote) {
			result_b += "\"";
		}
		var bs_buf = new StringBuf();
		var _g = 0;
		var _g1 = argument1.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = HxOverrides.cca(argument1,i);
			if(_g2 == null) {
				var c = _g2;
				if(bs_buf.b.length > 0) {
					result_b += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b += String.fromCodePoint(c);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b += Std.string(bs);
					result_b += Std.string(bs);
					bs_buf = new StringBuf();
					result_b += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					var c1 = _g2;
					if(bs_buf.b.length > 0) {
						result_b += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b += String.fromCodePoint(c1);
				}
			}
		}
		result_b += Std.string(bs_buf.b);
		if(needquote) {
			result_b += Std.string(bs_buf.b);
			result_b += "\"";
		}
		argument1 = result_b;
	}
	if(escapeMetaCharacters) {
		var result_b1 = "";
		var _g3 = 0;
		var _g11 = argument1.length;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var c2 = HxOverrides.cca(argument1,i1);
			if(haxe_SysTools.winMetaCharacters.indexOf(c2) >= 0) {
				result_b1 += String.fromCodePoint(94);
			}
			result_b1 += String.fromCodePoint(c2);
		}
		return result_b1;
	} else {
		return argument1;
	}
};
StringTools.utf16CodePointAt = function(s,index) {
	var c = s.charCodeAt(index);
	if(c >= 55296 && c <= 56319) {
		c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
	}
	return c;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getClass = function(o) {
	return js_Boot.getClass(o);
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.getEnumName = function(e) {
	return e.__ename__;
};
Type.resolveClass = function(name) {
	return $hxClasses[name];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEmptyInstance = function(cl) {
	return Object.create(cl.prototype);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return $hxEnums[e.__enum__].__constructs__[e._hx_index];
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
Type.enumIndex = function(e) {
	return e._hx_index;
};
Type.allEnums = function(e) {
	return e.__empty_constructs__.slice();
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.add = function(a,b) {
	return a + b;
};
_$UInt_UInt_$Impl_$.div = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) / _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.mul = function(a,b) {
	return a * b;
};
_$UInt_UInt_$Impl_$.sub = function(a,b) {
	return a - b;
};
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.lt = function(a,b) {
	return _$UInt_UInt_$Impl_$.gt(b,a);
};
_$UInt_UInt_$Impl_$.lte = function(a,b) {
	return _$UInt_UInt_$Impl_$.gte(b,a);
};
_$UInt_UInt_$Impl_$.and = function(a,b) {
	return a & b;
};
_$UInt_UInt_$Impl_$.or = function(a,b) {
	return a | b;
};
_$UInt_UInt_$Impl_$.xor = function(a,b) {
	return a ^ b;
};
_$UInt_UInt_$Impl_$.shl = function(a,b) {
	return a << b;
};
_$UInt_UInt_$Impl_$.shr = function(a,b) {
	return a >>> b;
};
_$UInt_UInt_$Impl_$.ushr = function(a,b) {
	return a >>> b;
};
_$UInt_UInt_$Impl_$.mod = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) % _$UInt_UInt_$Impl_$.toFloat(b) | 0;
};
_$UInt_UInt_$Impl_$.addWithFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) + b;
};
_$UInt_UInt_$Impl_$.mulWithFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) * b;
};
_$UInt_UInt_$Impl_$.divFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) / b;
};
_$UInt_UInt_$Impl_$.floatDiv = function(a,b) {
	return a / _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.subFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) - b;
};
_$UInt_UInt_$Impl_$.floatSub = function(a,b) {
	return a - _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.gtFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) > b;
};
_$UInt_UInt_$Impl_$.equalsInt = function(a,b) {
	return a == b;
};
_$UInt_UInt_$Impl_$.notEqualsInt = function(a,b) {
	return a != b;
};
_$UInt_UInt_$Impl_$.equalsFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) == b;
};
_$UInt_UInt_$Impl_$.notEqualsFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) != b;
};
_$UInt_UInt_$Impl_$.gteFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) >= b;
};
_$UInt_UInt_$Impl_$.floatGt = function(a,b) {
	return a > _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.floatGte = function(a,b) {
	return a >= _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.ltFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) < b;
};
_$UInt_UInt_$Impl_$.lteFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) <= b;
};
_$UInt_UInt_$Impl_$.floatLt = function(a,b) {
	return a < _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.floatLte = function(a,b) {
	return a <= _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.modFloat = function(a,b) {
	return _$UInt_UInt_$Impl_$.toFloat(a) % b;
};
_$UInt_UInt_$Impl_$.floatMod = function(a,b) {
	return a % _$UInt_UInt_$Impl_$.toFloat(b);
};
_$UInt_UInt_$Impl_$.negBits = function(this1) {
	return ~this1;
};
_$UInt_UInt_$Impl_$.prefixIncrement = function(this1) {
	return ++this1;
};
_$UInt_UInt_$Impl_$.postfixIncrement = function(this1) {
	return this1++;
};
_$UInt_UInt_$Impl_$.prefixDecrement = function(this1) {
	return --this1;
};
_$UInt_UInt_$Impl_$.postfixDecrement = function(this1) {
	return this1--;
};
_$UInt_UInt_$Impl_$.toString = function(this1,radix) {
	return Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1));
};
_$UInt_UInt_$Impl_$.toInt = function(this1) {
	return this1;
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get_nodeName: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.nodeName;
	}
	,set_nodeName: function(v) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.nodeName = v;
	}
	,get_nodeValue: function() {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.nodeValue;
	}
	,set_nodeValue: function(v) {
		if(this.nodeType == Xml.Document || this.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.nodeValue = v;
	}
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,remove: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		this.attributeMap.remove(att);
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return HxOverrides.iter(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstChild: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.children[0];
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,ensureElementType: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
	}
	,__class__: Xml
	,__properties__: {set_nodeValue:"set_nodeValue",get_nodeValue:"get_nodeValue",set_nodeName:"set_nodeName",get_nodeName:"get_nodeName"}
};
var com_genome2d_project_GProject = function(p_config) {
	this.g2d_config = p_config;
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	this.g2d_genome = com_genome2d_Genome2D.g2d_instance;
	if(this.g2d_config.initGenome) {
		this.initGenome();
	} else {
		this.init();
	}
};
$hxClasses["com.genome2d.project.GProject"] = com_genome2d_project_GProject;
com_genome2d_project_GProject.__name__ = "com.genome2d.project.GProject";
com_genome2d_project_GProject.prototype = {
	g2d_genome: null
	,getGenome: function() {
		return this.g2d_genome;
	}
	,g2d_config: null
	,g2d_assetManager: null
	,initGenome: function() {
		var p_arg1 = "initGenome";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/project/GProject.hx", lineNumber : 114, className : "com.genome2d.project.GProject", methodName : "initGenome"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.g2d_genome.g2d_onFailed.addOnce($bind(this,this.genomeFailed_handler));
		this.g2d_genome.g2d_onInitialized.addOnce($bind(this,this.genomeInitialized_handler));
		this.g2d_genome.init(this.g2d_config.contextConfig);
	}
	,init: function() {
	}
	,genomeInitialized_handler: function() {
		var p_arg1 = "genomeInitialized";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/project/GProject.hx", lineNumber : 127, className : "com.genome2d.project.GProject", methodName : "genomeInitialized_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.g2d_assetManager = new com_genome2d_assets_GAssetManager();
		this.init();
	}
	,genomeFailed_handler: function(p_msg) {
		var p_arg1 = "genomeFailed";
		var p_arg2 = p_msg;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/project/GProject.hx", lineNumber : 133, className : "com.genome2d.project.GProject", methodName : "genomeFailed_handler"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	,__class__: com_genome2d_project_GProject
};
var com_dinox_Main = function(p_init) {
	if(p_init == null) {
		p_init = 0;
	}
	this.initType = 0;
	this.initType = p_init;
	var contextConfig = new com_genome2d_context_GContextConfig(null);
	var config = new com_genome2d_project_GProjectConfig(contextConfig);
	config.initGenome = this.initType == 0;
	com_genome2d_project_GProject.call(this,config);
	var p_arg1 = null;
	var p_arg2 = null;
	var p_arg3 = null;
	var p_arg4 = null;
	var p_arg5 = null;
	var p_arg6 = null;
	var p_arg7 = null;
	var p_arg8 = null;
	var p_arg9 = null;
	var p_arg10 = null;
	var p_arg11 = null;
	var p_arg12 = null;
	var p_arg13 = null;
	var p_arg14 = null;
	var p_arg15 = null;
	var p_arg16 = null;
	var p_arg17 = null;
	var p_arg18 = null;
	var p_arg19 = null;
	var p_arg20 = null;
	var pos = { fileName : "src/com/dinox/Main.hx", lineNumber : 30, className : "com.dinox.Main", methodName : "new"};
	if(com_genome2d_debug_GDebug.showPriority <= 3) {
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
		}
		var msg = "INFO: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
	}
};
$hxClasses["com.dinox.Main"] = com_dinox_Main;
com_dinox_Main.__name__ = "com.dinox.Main";
com_dinox_Main.main = function() {
	var inst = new com_dinox_Main();
};
com_dinox_Main.__super__ = com_genome2d_project_GProject;
com_dinox_Main.prototype = $extend(com_genome2d_project_GProject.prototype,{
	initType: null
	,core: null
	,container: null
	,containerCamera: null
	,init: function() {
		this.core = new com_dinox_model_Core(this.getGenome().g2d_root);
	}
	,__class__: com_dinox_Main
});
var com_dinox_model_AssetsWrapper = function(p_assetsLoaded_handler,p_assetFailed_handler) {
	this.assetsLoaded_handler = p_assetsLoaded_handler;
	this.assetFailed_handler = p_assetFailed_handler;
	this.addAssetsFromURL();
	this.loadAssetsQueue();
};
$hxClasses["com.dinox.model.AssetsWrapper"] = com_dinox_model_AssetsWrapper;
com_dinox_model_AssetsWrapper.__name__ = "com.dinox.model.AssetsWrapper";
com_dinox_model_AssetsWrapper.prototype = {
	assetsLoaded_handler: null
	,assetFailed_handler: null
	,addAssetsFromURL: function() {
		com_genome2d_assets_GStaticAssetManager.addFromUrl("assets/2048.png","dinos");
	}
	,loadAssetsQueue: function() {
		com_genome2d_assets_GStaticAssetManager.loadQueue($bind(this,this.assetsLoaded),this.assetFailed_handler);
	}
	,assetsLoaded: function() {
		com_genome2d_textures_GTextureManager.createTexture(com_genome2d_assets_GStaticAssetManager.getImageAssetById("dinos").g2d_id,com_genome2d_assets_GStaticAssetManager.getImageAssetById("dinos"));
		this.assetsLoaded_handler();
	}
	,__class__: com_dinox_model_AssetsWrapper
};
var com_genome2d_proto_IGPrototypable = function() { };
$hxClasses["com.genome2d.proto.IGPrototypable"] = com_genome2d_proto_IGPrototypable;
com_genome2d_proto_IGPrototypable.__name__ = "com.genome2d.proto.IGPrototypable";
com_genome2d_proto_IGPrototypable.__isInterface__ = true;
com_genome2d_proto_IGPrototypable.prototype = {
	g2d_prototypeStates: null
	,g2d_currentState: null
	,getPrototype: null
	,bindPrototype: null
	,toReference: null
	,setPrototypeState: null
	,__class__: com_genome2d_proto_IGPrototypable
};
var com_genome2d_components_GComponent = function() {
	this.g2d_currentState = "default";
	this.g2d_started = false;
	this.g2d_enabled = true;
	this.g2d_active = true;
};
$hxClasses["com.genome2d.components.GComponent"] = com_genome2d_components_GComponent;
com_genome2d_components_GComponent.__name__ = "com.genome2d.components.GComponent";
com_genome2d_components_GComponent.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_components_GComponent.prototype = {
	g2d_userData: null
	,get_userData: function() {
		if(this.g2d_userData == null) {
			this.g2d_userData = new haxe_ds_StringMap();
		}
		return this.g2d_userData;
	}
	,g2d_active: null
	,isActive: function() {
		return this.g2d_active;
	}
	,setActive: function(p_value) {
		this.g2d_active = p_value;
	}
	,g2d_enabled: null
	,get_enabled: function() {
		return this.g2d_enabled;
	}
	,set_enabled: function(p_value) {
		this.g2d_enabled = p_value;
		if(this.g2d_enabled && !this.g2d_started) {
			this.g2d_start();
		}
		return this.g2d_enabled;
	}
	,g2d_started: null
	,g2d_node: null
	,get_node: function() {
		return this.g2d_node;
	}
	,init: function() {
	}
	,g2d_start: function() {
		if(this.g2d_active && !this.g2d_started) {
			this.g2d_started = true;
			this.onStart();
		}
	}
	,onStart: function() {
	}
	,g2d_dispose: function() {
		this.onDispose();
		this.g2d_active = false;
		this.g2d_node = null;
	}
	,onDispose: function() {
	}
	,toReference: function() {
		return null;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GComponent");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GComponent");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_components_GComponent
	,__properties__: {get_node:"get_node",set_enabled:"set_enabled",get_enabled:"get_enabled",get_userData:"get_userData"}
};
var com_genome2d_components_GCameraController = function() {
	this.renderTarget = null;
	this.backgroundAlpha = 0;
	this.backgroundBlue = 0;
	this.backgroundGreen = 0;
	this.backgroundRed = 0;
	this.mouseEnabled = true;
	this.g2d_capturedThisFrame = false;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.GCameraController"] = com_genome2d_components_GCameraController;
com_genome2d_components_GCameraController.__name__ = "com.genome2d.components.GCameraController";
com_genome2d_components_GCameraController.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_GCameraController.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	g2d_viewRectangle: null
	,g2d_capturedThisFrame: null
	,g2d_renderedNodesCount: null
	,mouseEnabled: null
	,g2d_onMouseInput: null
	,get_onMouseInput: function() {
		if(this.g2d_onMouseInput == null) {
			this.g2d_onMouseInput = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseInput;
	}
	,backgroundRed: null
	,backgroundGreen: null
	,backgroundBlue: null
	,backgroundAlpha: null
	,renderTarget: null
	,viewport: null
	,id: null
	,getBackgroundColor: function() {
		var alpha = (this.backgroundAlpha * 255 | 0) << 24;
		var red = (this.backgroundRed * 255 | 0) << 16;
		var green = (this.backgroundGreen * 255 | 0) << 8;
		var blue = this.backgroundBlue * 255 | 0;
		return alpha + red + green + blue;
	}
	,g2d_contextCamera: null
	,get_contextCamera: function() {
		return this.g2d_contextCamera;
	}
	,setView: function(p_normalizedX,p_normalizedY,p_normalizedWidth,p_normalizedHeight) {
		this.g2d_contextCamera.normalizedViewX = p_normalizedX;
		this.g2d_contextCamera.normalizedViewY = p_normalizedY;
		this.g2d_contextCamera.normalizedViewWidth = p_normalizedWidth;
		this.g2d_contextCamera.normalizedViewHeight = p_normalizedHeight;
	}
	,get_zoom: function() {
		return this.g2d_contextCamera.scaleX;
	}
	,set_zoom: function(p_value) {
		return this.g2d_contextCamera.scaleX = this.g2d_contextCamera.scaleY = p_value;
	}
	,init: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		this.g2d_contextCamera = new com_genome2d_context_GCamera(com_genome2d_node_GNode.g2d_core.g2d_context);
		this.g2d_viewRectangle = new com_genome2d_geom_GRectangle(0,0,0,0);
		var tmp = this.g2d_node;
		var _this1 = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		if(tmp != com_genome2d_node_GNode.g2d_core.g2d_root && this.g2d_node.isOnStage()) {
			var _this2 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_addCameraController(this);
		}
		var _this3 = this.g2d_node;
		if(_this3.g2d_onAddedToStage == null) {
			_this3.g2d_onAddedToStage = new com_genome2d_callbacks_GCallback0();
		}
		_this3.g2d_onAddedToStage.add($bind(this,this.g2d_onAddedToStage));
		var _this4 = this.g2d_node;
		if(_this4.g2d_onRemovedFromStage == null) {
			_this4.g2d_onRemovedFromStage = new com_genome2d_callbacks_GCallback0();
		}
		_this4.g2d_onRemovedFromStage.add($bind(this,this.g2d_onRemovedFromStage));
	}
	,render: function() {
		if(!this.g2d_node.g2d_active) {
			return;
		}
		this.g2d_renderedNodesCount = 0;
		this.g2d_contextCamera.x = this.g2d_node.g2d_worldX;
		this.g2d_contextCamera.y = this.g2d_node.g2d_worldY;
		this.g2d_contextCamera.rotation = this.g2d_node.g2d_worldRotation;
		if(this.g2d_contextCamera.normalizedViewWidth <= 0 || this.g2d_contextCamera.normalizedViewHeight <= 0) {
			return;
		}
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_context.setActiveCamera(this.g2d_contextCamera);
		if(this.renderTarget != null) {
			var _this1 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			var previousRenderTarget = com_genome2d_node_GNode.g2d_core.g2d_context.getRenderTarget();
			var _this2 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_context.setRenderTarget(this.renderTarget);
			var _this3 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_root.render(false,false,this.g2d_contextCamera,false,false);
			var _this4 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_context.setRenderTarget(previousRenderTarget);
		} else {
			var _this5 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_root.render(false,false,this.g2d_contextCamera,false,false);
		}
	}
	,g2d_invalidateViewRect: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var stageRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		this.g2d_viewRectangle.setTo(stageRect.width * this.g2d_contextCamera.normalizedViewX,stageRect.height * this.g2d_contextCamera.normalizedViewY,stageRect.width * this.g2d_contextCamera.normalizedViewWidth,stageRect.height * this.g2d_contextCamera.normalizedViewHeight);
	}
	,captureMouseInput: function(p_input) {
		if(this.g2d_capturedThisFrame || !this.g2d_node.g2d_active) {
			return;
		}
		this.g2d_capturedThisFrame = true;
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var stageRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		this.g2d_viewRectangle.setTo(stageRect.width * this.g2d_contextCamera.normalizedViewX,stageRect.height * this.g2d_contextCamera.normalizedViewY,stageRect.width * this.g2d_contextCamera.normalizedViewWidth,stageRect.height * this.g2d_contextCamera.normalizedViewHeight);
		if(!p_input.mouseOut && !this.g2d_viewRectangle.contains(p_input.contextX,p_input.contextY)) {
			return;
		}
		var tx = p_input.contextX - this.g2d_viewRectangle.x - this.g2d_viewRectangle.width / 2;
		var ty = p_input.contextY - this.g2d_viewRectangle.y - this.g2d_viewRectangle.height / 2;
		var cos = Math.cos(-this.g2d_node.g2d_worldRotation);
		var sin = Math.sin(-this.g2d_node.g2d_worldRotation);
		var rx = tx * cos - ty * sin;
		var ry = ty * cos + tx * sin;
		rx /= this.g2d_contextCamera.scaleX;
		ry /= this.g2d_contextCamera.scaleX;
		p_input.worldX = rx + this.g2d_node.g2d_worldX;
		p_input.worldY = ry + this.g2d_node.g2d_worldY;
		p_input.camera = this;
		if(!p_input.captured && this.g2d_onMouseInput != null) {
			this.g2d_onMouseInput.dispatch(p_input);
		}
		var _this1 = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_root.captureMouseInput(p_input);
	}
	,onDispose: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_removeCameraController(this);
		var _this1 = this.g2d_node;
		if(_this1.g2d_onAddedToStage == null) {
			_this1.g2d_onAddedToStage = new com_genome2d_callbacks_GCallback0();
		}
		_this1.g2d_onAddedToStage.remove($bind(this,this.g2d_onAddedToStage));
		var _this2 = this.g2d_node;
		if(_this2.g2d_onRemovedFromStage == null) {
			_this2.g2d_onRemovedFromStage = new com_genome2d_callbacks_GCallback0();
		}
		_this2.g2d_onRemovedFromStage.remove($bind(this,this.g2d_onRemovedFromStage));
	}
	,g2d_onAddedToStage: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_addCameraController(this);
	}
	,g2d_onRemovedFromStage: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_removeCameraController(this);
	}
	,setViewport: function(p_width,p_height,p_resize) {
		if(p_resize == null) {
			p_resize = true;
		}
		if(this.viewport != null) {
			this.viewport.dispose();
		}
		this.viewport = new com_genome2d_context_GViewport(this,p_width,p_height,p_resize);
	}
	,worldToScreen: function(p_world,p_result) {
		var tx = p_world.x - this.g2d_node.g2d_worldX;
		var ty = p_world.y - this.g2d_node.g2d_worldY;
		tx *= this.g2d_contextCamera.scaleX;
		ty *= this.g2d_contextCamera.scaleX;
		var cos = Math.cos(this.g2d_node.g2d_worldRotation);
		var sin = Math.sin(this.g2d_node.g2d_worldRotation);
		var rx = tx * cos - ty * sin;
		var ry = ty * cos + tx * sin;
		if(p_result == null) {
			p_result = new com_genome2d_geom_GPoint(0,0);
		}
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var stageRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		this.g2d_viewRectangle.setTo(stageRect.width * this.g2d_contextCamera.normalizedViewX,stageRect.height * this.g2d_contextCamera.normalizedViewY,stageRect.width * this.g2d_contextCamera.normalizedViewWidth,stageRect.height * this.g2d_contextCamera.normalizedViewHeight);
		p_result.x = rx + this.g2d_viewRectangle.x + this.g2d_viewRectangle.width / 2;
		p_result.y = ry - this.g2d_viewRectangle.y - this.g2d_viewRectangle.height / 2;
		return p_result;
	}
	,screenToWorld: function(p_screen,p_result) {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var stageRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		this.g2d_viewRectangle.setTo(stageRect.width * this.g2d_contextCamera.normalizedViewX,stageRect.height * this.g2d_contextCamera.normalizedViewY,stageRect.width * this.g2d_contextCamera.normalizedViewWidth,stageRect.height * this.g2d_contextCamera.normalizedViewHeight);
		var tx = p_screen.x - this.g2d_viewRectangle.x - this.g2d_viewRectangle.width / 2;
		var ty = p_screen.y - this.g2d_viewRectangle.y - this.g2d_viewRectangle.height / 2;
		var cos = Math.cos(-this.g2d_node.g2d_worldRotation);
		var sin = Math.sin(-this.g2d_node.g2d_worldRotation);
		var rx = tx * cos - ty * sin;
		var ry = ty * cos + tx * sin;
		rx /= this.g2d_contextCamera.scaleX;
		ry /= this.g2d_contextCamera.scaleX;
		if(p_result == null) {
			p_result = new com_genome2d_geom_GPoint(0,0);
		}
		p_result.x = rx + this.g2d_node.g2d_worldX;
		p_result.y = ry + this.g2d_node.g2d_worldY;
		return p_result;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GCameraController");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GCameraController");
	}
	,__class__: com_genome2d_components_GCameraController
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_zoom:"set_zoom",get_zoom:"get_zoom",get_contextCamera:"get_contextCamera",get_onMouseInput:"get_onMouseInput"})
});
var com_dinox_model_CameraController = function() {
	com_genome2d_components_GCameraController.call(this);
};
$hxClasses["com.dinox.model.CameraController"] = com_dinox_model_CameraController;
com_dinox_model_CameraController.__name__ = "com.dinox.model.CameraController";
com_dinox_model_CameraController.__super__ = com_genome2d_components_GCameraController;
com_dinox_model_CameraController.prototype = $extend(com_genome2d_components_GCameraController.prototype,{
	getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"CameraController");
		return com_genome2d_components_GCameraController.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GCameraController.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"CameraController");
	}
	,__class__: com_dinox_model_CameraController
});
var com_dinox_model_Core = function(p_root) {
	this.rootNode = p_root;
	this.initContainer();
	this.initCameraController();
	this.initAssetsWrapper();
};
$hxClasses["com.dinox.model.Core"] = com_dinox_model_Core;
com_dinox_model_Core.__name__ = "com.dinox.model.Core";
com_dinox_model_Core.prototype = {
	rootNode: null
	,container: null
	,cameraController: null
	,assetsWrapper: null
	,landMap: null
	,initContainer: function() {
		this.container = new com_genome2d_node_GNode();
		this.container.cameraGroup = 1;
		this.rootNode.addChild(this.container);
	}
	,initCameraController: function() {
		this.cameraController = js_Boot.__cast(com_genome2d_node_GNode.createWithComponent(com_dinox_model_CameraController) , com_dinox_model_CameraController);
		this.cameraController.g2d_node.setPosition(400,300);
		this.cameraController.g2d_contextCamera.group = 1;
		this.rootNode.addChild(this.cameraController.g2d_node);
	}
	,initAssetsWrapper: function() {
		this.assetsWrapper = new com_dinox_model_AssetsWrapper($bind(this,this.assetsLoader_handler),$bind(this,this.assetsFailed_hanled));
	}
	,initLandMap: function() {
		this.landMap = new com_dinox_model_LandMap(this.container);
	}
	,getContainer: function() {
		return this.container;
	}
	,assetsLoader_handler: function() {
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/Core.hx", lineNumber : 56, className : "com.dinox.model.Core", methodName : "assetsLoader_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.initLandMap();
	}
	,assetsFailed_hanled: function(p_asset) {
		var p_arg1 = "Core.assetsFailed_hanlder: failed to load asset ";
		var p_arg2 = p_asset.g2d_id;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/Core.hx", lineNumber : 61, className : "com.dinox.model.Core", methodName : "assetsFailed_hanled"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	,__class__: com_dinox_model_Core
};
var com_dinox_model_LandMap = function(p_graphicsContainer) {
	this.isDragging = false;
	this.graphicsContainer = p_graphicsContainer;
	var graphics = js_Boot.__cast(com_genome2d_node_GNode.createWithComponent(com_genome2d_components_renderable_GSprite) , com_genome2d_components_renderable_GSprite);
	var texture = com_genome2d_textures_GTextureManager.getTexture("dinos");
	var sprite = js_Boot.__cast(com_genome2d_node_GNode.createWithComponent(com_genome2d_components_renderable_GSprite) , com_genome2d_components_renderable_GSprite);
	sprite.texture = com_genome2d_textures_GTextureManager.getTexture("dinos");
	sprite.g2d_node.setPosition(400,300);
	sprite.g2d_node.mouseEnabled = true;
	var _this = sprite.g2d_node;
	if(_this.g2d_onMouseClick == null) {
		_this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this.g2d_onMouseClick.add($bind(this,this.mouseClick_handler));
	var _this1 = sprite.g2d_node;
	if(_this1.g2d_onMouseOver == null) {
		_this1.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this1.g2d_onMouseOver.add($bind(this,this.mouseOver_handler));
	var _this2 = sprite.g2d_node;
	if(_this2.g2d_onMouseOut == null) {
		_this2.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this2.g2d_onMouseOut.add($bind(this,this.mouseOut_handler));
	var _this3 = sprite.g2d_node;
	if(_this3.g2d_onMouseDown == null) {
		_this3.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this3.g2d_onMouseDown.add($bind(this,this.mouseDown_handler));
	var _this4 = sprite.g2d_node;
	if(_this4.g2d_onMouseUp == null) {
		_this4.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this4.g2d_onMouseUp.add($bind(this,this.mouseUp_handler));
	var _this5 = sprite.g2d_node;
	if(_this5.g2d_onMouseWheel == null) {
		_this5.g2d_onMouseWheel = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this5.g2d_onMouseWheel.add($bind(this,this.mouseWheel_handler));
	var _this6 = sprite.g2d_node;
	if(_this6.g2d_onMouseMove == null) {
		_this6.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
	}
	_this6.g2d_onMouseMove.add($bind(this,this.mouseMove_handler));
	this.graphicsContainer.addChild(sprite.g2d_node);
};
$hxClasses["com.dinox.model.LandMap"] = com_dinox_model_LandMap;
com_dinox_model_LandMap.__name__ = "com.dinox.model.LandMap";
com_dinox_model_LandMap.prototype = {
	graphicsContainer: null
	,isDragging: null
	,lastX: null
	,lastY: null
	,mouseClick_handler: function(signal) {
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 50, className : "com.dinox.model.LandMap", methodName : "mouseClick_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
	}
	,mouseOver_handler: function(signal) {
		var node = signal.target;
		var _g = node;
		var p_value = _g.g2d_localRotation + Math.PI / 80;
		if(_g.g2d_localRotation == 0 && p_value != 0 && _g.g2d_localScaleX != _g.g2d_localScaleY && _g.g2d_childCount > 0) {
			var _g1 = _g;
			var p_value1 = _g1.g2d_localUseMatrix + 1;
			if(_g1.g2d_parent != null) {
				var _g2 = _g1.g2d_parent;
				var p_value2 = _g2.g2d_localUseMatrix + (p_value1 - _g1.g2d_localUseMatrix);
				if(_g2.g2d_parent != null) {
					var _g3 = _g2.g2d_parent;
					_g3.set_g2d_useMatrix(_g3.g2d_localUseMatrix + (p_value2 - _g2.g2d_localUseMatrix));
				}
				_g2.g2d_localUseMatrix = p_value2;
			}
			_g1.g2d_localUseMatrix = p_value1;
		}
		if(_g.g2d_localRotation != 0 && p_value == 0 && _g.g2d_localScaleX != _g.g2d_localScaleY && _g.g2d_childCount > 0) {
			var _g4 = _g;
			var p_value3 = _g4.g2d_localUseMatrix - 1;
			if(_g4.g2d_parent != null) {
				var _g5 = _g4.g2d_parent;
				var p_value4 = _g5.g2d_localUseMatrix + (p_value3 - _g4.g2d_localUseMatrix);
				if(_g5.g2d_parent != null) {
					var _g6 = _g5.g2d_parent;
					_g6.set_g2d_useMatrix(_g6.g2d_localUseMatrix + (p_value4 - _g5.g2d_localUseMatrix));
				}
				_g5.g2d_localUseMatrix = p_value4;
			}
			_g4.g2d_localUseMatrix = p_value3;
		}
		_g.g2d_transformDirty = _g.g2d_matrixDirty = true;
		_g.g2d_localRotation = _g.g2d_worldRotation = p_value;
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 61, className : "com.dinox.model.LandMap", methodName : "mouseOver_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
	}
	,mouseOut_handler: function(signal) {
		var node = signal.target;
		var _g = node;
		var p_value = _g.g2d_localRotation + Math.PI / 80;
		if(_g.g2d_localRotation == 0 && p_value != 0 && _g.g2d_localScaleX != _g.g2d_localScaleY && _g.g2d_childCount > 0) {
			var _g1 = _g;
			var p_value1 = _g1.g2d_localUseMatrix + 1;
			if(_g1.g2d_parent != null) {
				var _g2 = _g1.g2d_parent;
				var p_value2 = _g2.g2d_localUseMatrix + (p_value1 - _g1.g2d_localUseMatrix);
				if(_g2.g2d_parent != null) {
					var _g3 = _g2.g2d_parent;
					_g3.set_g2d_useMatrix(_g3.g2d_localUseMatrix + (p_value2 - _g2.g2d_localUseMatrix));
				}
				_g2.g2d_localUseMatrix = p_value2;
			}
			_g1.g2d_localUseMatrix = p_value1;
		}
		if(_g.g2d_localRotation != 0 && p_value == 0 && _g.g2d_localScaleX != _g.g2d_localScaleY && _g.g2d_childCount > 0) {
			var _g4 = _g;
			var p_value3 = _g4.g2d_localUseMatrix - 1;
			if(_g4.g2d_parent != null) {
				var _g5 = _g4.g2d_parent;
				var p_value4 = _g5.g2d_localUseMatrix + (p_value3 - _g4.g2d_localUseMatrix);
				if(_g5.g2d_parent != null) {
					var _g6 = _g5.g2d_parent;
					_g6.set_g2d_useMatrix(_g6.g2d_localUseMatrix + (p_value4 - _g5.g2d_localUseMatrix));
				}
				_g5.g2d_localUseMatrix = p_value4;
			}
			_g4.g2d_localUseMatrix = p_value3;
		}
		_g.g2d_transformDirty = _g.g2d_matrixDirty = true;
		_g.g2d_localRotation = _g.g2d_worldRotation = p_value;
		node.g2d_colorDirty = true;
		node.g2d_localRed = node.g2d_worldRed = 1.;
		node.g2d_colorDirty = true;
		node.g2d_localGreen = node.g2d_worldGreen = 1.;
		node.g2d_colorDirty = true;
		node.g2d_localBlue = node.g2d_worldBlue = 1.;
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 72, className : "com.dinox.model.LandMap", methodName : "mouseOut_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
	}
	,mouseDown_handler: function(signal) {
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 79, className : "com.dinox.model.LandMap", methodName : "mouseDown_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.lastX = signal.contextX;
		this.lastY = signal.contextY;
		this.isDragging = true;
	}
	,mouseUp_handler: function(signal) {
		var p_arg1 = null;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 89, className : "com.dinox.model.LandMap", methodName : "mouseUp_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.isDragging = false;
	}
	,mouseWheel_handler: function(signal) {
		var p_arg1 = signal.delta == null ? "null" : "" + signal.delta;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 97, className : "com.dinox.model.LandMap", methodName : "mouseWheel_handler"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		var node = signal.target;
		var change = signal.delta / 20;
		if(node.g2d_localScaleX + change < com_dinox_model_LandMap.MAX_SCALE && node.g2d_localScaleY + change < com_dinox_model_LandMap.MAX_SCALE && node.g2d_localScaleX + change > com_dinox_model_LandMap.MIN_SCALE && node.g2d_localScaleY + change > com_dinox_model_LandMap.MIN_SCALE) {
			node.setScale(node.g2d_localScaleX + change,node.g2d_localScaleY + change);
		}
	}
	,mouseMove_handler: function(signal) {
		if(this.isDragging) {
			var node = signal.target;
			var deltaX = this.lastX - signal.contextX;
			var deltaY = this.lastY - signal.contextY;
			this.lastX = signal.contextX;
			this.lastY = signal.contextY;
			var p_arg1 = deltaX == null ? "null" : "" + deltaX;
			var p_arg2 = deltaY == null ? "null" : "" + deltaY;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "src/com/dinox/model/LandMap.hx", lineNumber : 118, className : "com.dinox.model.LandMap", methodName : "mouseMove_handler"};
			if(com_genome2d_debug_GDebug.showPriority <= 3) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
				}
				var msg = "INFO: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
			node.setPosition(node.g2d_localX - deltaX,node.g2d_localY - deltaY);
		}
	}
	,__class__: com_dinox_model_LandMap
};
var com_genome2d_debug_IGDebuggableInternal = function() { };
$hxClasses["com.genome2d.debug.IGDebuggableInternal"] = com_genome2d_debug_IGDebuggableInternal;
com_genome2d_debug_IGDebuggableInternal.__name__ = "com.genome2d.debug.IGDebuggableInternal";
com_genome2d_debug_IGDebuggableInternal.__isInterface__ = true;
var com_genome2d_Genome2D = function() {
	this.g2d_renderMatrixIndex = 0;
	this.g2d_accumulatedDeltaTime = 0;
	this.g2d_lastMouseOut = false;
	this.g2d_lastMouseY = -1000000;
	this.g2d_lastMouseX = -1000000;
	this.g2d_mouseMoveInputDetected = false;
	this.g2d_runTime = 0;
	this.g2d_currentFrameId = 0;
	this.g2d_initialized = false;
	this.maxFrameTime = -1;
	this.autoUpdateAndRender = true;
	if(!com_genome2d_Genome2D.g2d_instantiable) {
		var p_arg1 = "Can't instantiate singleton directly";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/Genome2D.hx", lineNumber : 258, className : "com.genome2d.Genome2D", methodName : "new"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	com_genome2d_Genome2D.g2d_instance = this;
	this.g2d_onInitialized = new com_genome2d_callbacks_GCallback0();
	this.g2d_onFailed = new com_genome2d_callbacks_GCallback1();
	this.g2d_onInvalidated = new com_genome2d_callbacks_GCallback0();
	this.g2d_onUpdate = new com_genome2d_callbacks_GCallback1();
	this.g2d_onPreRender = new com_genome2d_callbacks_GCallback0();
	this.g2d_onPostRender = new com_genome2d_callbacks_GCallback0();
	this.g2d_onKeyboardInput = new com_genome2d_callbacks_GCallback1();
	this.g2d_onMouseInput = new com_genome2d_callbacks_GCallback1();
	this.g2d_onCameraAdded = new com_genome2d_callbacks_GCallback1();
	this.g2d_parameters = new com_genome2d_globals_GParameters();
};
$hxClasses["com.genome2d.Genome2D"] = com_genome2d_Genome2D;
com_genome2d_Genome2D.__name__ = "com.genome2d.Genome2D";
com_genome2d_Genome2D.__interfaces__ = [com_genome2d_debug_IGDebuggableInternal];
com_genome2d_Genome2D.g2d_instance = null;
com_genome2d_Genome2D.getInstance = function() {
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	return com_genome2d_Genome2D.g2d_instance;
};
com_genome2d_Genome2D.prototype = {
	autoUpdateAndRender: null
	,maxFrameTime: null
	,g2d_initialized: null
	,isInitialized: function() {
		return this.g2d_initialized;
	}
	,g2d_onInitialized: null
	,get_onInitialized: function() {
		return this.g2d_onInitialized;
	}
	,g2d_onFailed: null
	,get_onFailed: function() {
		return this.g2d_onFailed;
	}
	,g2d_onCameraAdded: null
	,get_onCameraAdded: function() {
		return this.g2d_onCameraAdded;
	}
	,g2d_onInvalidated: null
	,get_onInvalidated: function() {
		return this.g2d_onInvalidated;
	}
	,g2d_onUpdate: null
	,get_onUpdate: function() {
		return this.g2d_onUpdate;
	}
	,g2d_onPreRender: null
	,get_onPreRender: function() {
		return this.g2d_onPreRender;
	}
	,g2d_onPostRender: null
	,get_onPostRender: function() {
		return this.g2d_onPostRender;
	}
	,g2d_onKeyboardInput: null
	,get_onKeyboardInput: function() {
		return this.g2d_onKeyboardInput;
	}
	,g2d_onMouseInput: null
	,get_onMouseInput: function() {
		return this.g2d_onMouseInput;
	}
	,g2d_currentFrameId: null
	,getCurrentFrameId: function() {
		return this.g2d_currentFrameId;
	}
	,g2d_runTime: null
	,getRunTime: function() {
		return this.g2d_runTime;
	}
	,g2d_mouseMoveInputDetected: null
	,g2d_lastMouseX: null
	,g2d_lastMouseY: null
	,g2d_lastMouseOut: null
	,g2d_accumulatedDeltaTime: null
	,g2d_currentFrameDeltaTime: null
	,getCurrentFrameDeltaTime: function() {
		return this.g2d_currentFrameDeltaTime;
	}
	,g2d_assetManager: null
	,getAssetManager: function() {
		return this.g2d_assetManager;
	}
	,g2d_root: null
	,get_root: function() {
		return this.g2d_root;
	}
	,g2d_context: null
	,getContext: function() {
		return this.g2d_context;
	}
	,g2d_renderMatrix: null
	,g2d_renderMatrixIndex: null
	,g2d_renderMatrixArray: null
	,g2d_contextConfig: null
	,g2d_cameras: null
	,g2d_parameters: null
	,getParameters: function() {
		return this.g2d_parameters;
	}
	,init: function(p_config) {
		if(p_config == null) {
			var p_arg1 = "Invalid or null config specified.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/Genome2D.hx", lineNumber : 286, className : "com.genome2d.Genome2D", methodName : "init"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(this.g2d_root != null) {
			this.g2d_root.dispose();
		}
		this.g2d_root = new com_genome2d_node_GNode("root");
		this.g2d_cameras = [];
		this.g2d_renderMatrix = new com_genome2d_geom_GMatrix();
		this.g2d_renderMatrixIndex = 0;
		this.g2d_renderMatrixArray = [];
		if(this.g2d_context != null) {
			this.g2d_context.dispose();
		}
		this.g2d_contextConfig = p_config;
		this.g2d_context = Type.createInstance(p_config.contextClass,[this.g2d_contextConfig]);
		this.g2d_context.onInitialized.add($bind(this,this.g2d_contextInitialized_handler));
		this.g2d_context.onFailed.add($bind(this,this.g2d_contextFailed_handler));
		this.g2d_context.onInvalidated.add($bind(this,this.g2d_contextInvalidated_handler));
		com_genome2d_proto_GPrototypeFactory.initializePrototypes();
		this.g2d_assetManager = new com_genome2d_assets_GAssetManager();
		com_genome2d_assets_GStaticAssetManager.setInstance(this.g2d_assetManager);
		com_genome2d_text_GFontManager.init();
		com_genome2d_textures_GTextureManager.init(this.g2d_context);
		com_genome2d_ui_skin_GUISkinManager.init();
		com_genome2d_transitions_GTransitionManager.init();
		this.g2d_context.init();
	}
	,update: function(p_deltaTime) {
		if(this.maxFrameTime != -1 && p_deltaTime > this.maxFrameTime) {
			p_deltaTime = this.maxFrameTime;
		}
		this.g2d_currentFrameDeltaTime = p_deltaTime;
		this.g2d_accumulatedDeltaTime += this.g2d_currentFrameDeltaTime;
		com_genome2d_tween_GTween.update(p_deltaTime);
		this.g2d_onUpdate.dispatch(this.g2d_currentFrameDeltaTime);
	}
	,render: function(p_camera) {
		if(this.g2d_context.begin()) {
			this.g2d_onPreRender.dispatch();
			if(this.g2d_root.g2d_localUseMatrix > 0) {
				this.g2d_renderMatrix.identity();
				this.g2d_renderMatrixArray = [];
			}
			if(p_camera != null) {
				p_camera.render();
			} else {
				var cameraCount = this.g2d_cameras.length;
				if(cameraCount == 0) {
					this.g2d_root.render(false,false,this.g2d_context.getDefaultCamera(),false,false);
				} else {
					var _g = 0;
					var _g1 = cameraCount;
					while(_g < _g1) {
						var i = _g++;
						this.g2d_cameras[i].render();
					}
				}
			}
			if(this.g2d_onPostRender.hasListeners()) {
				this.g2d_context.setActiveCamera(this.g2d_context.getDefaultCamera());
				this.g2d_context.setRenderTarget(null);
				this.g2d_onPostRender.dispatch();
			}
			this.g2d_context.end();
		}
	}
	,dispose: function() {
		if(this.g2d_root != null) {
			this.g2d_root.dispose();
		}
		this.g2d_root = null;
		this.g2d_onInitialized.removeAll();
		this.g2d_onFailed.removeAll();
		this.g2d_onPostRender.removeAll();
		this.g2d_onPreRender.removeAll();
		this.g2d_onUpdate.removeAll();
		this.g2d_onInvalidated.removeAll();
		this.g2d_onKeyboardInput.removeAll();
		this.g2d_onMouseInput.removeAll();
		this.g2d_onCameraAdded.removeAll();
		if(this.g2d_context != null) {
			this.g2d_context.dispose();
		}
		this.g2d_context = null;
		this.g2d_initialized = false;
	}
	,g2d_contextInitialized_handler: function() {
		this.g2d_context.onFrame.add($bind(this,this.g2d_frame_handler));
		this.g2d_context.g2d_onMouseInputInternal = $bind(this,this.g2d_contextMouseInput_handler);
		this.g2d_context.onKeyboardInput.add($bind(this,this.g2d_contextKeyboardInput_handler));
		this.g2d_initialized = true;
		if(com_genome2d_textures_GTextureManager.getTexture("g2d_internal") == null) {
			var imageData = new ImageData(new Uint8ClampedArray([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255]),4);
			com_genome2d_textures_GTextureManager.createTexture("g2d_internal",imageData);
		}
		this.g2d_onInitialized.dispatch();
	}
	,g2d_contextFailed_handler: function(p_error) {
		this.g2d_onFailed.dispatch(p_error);
	}
	,g2d_contextInvalidated_handler: function() {
		this.g2d_onInvalidated.dispatch();
	}
	,g2d_frame_handler: function(p_deltaTime) {
		if(this.autoUpdateAndRender) {
			this.g2d_currentFrameId++;
			this.g2d_runTime += p_deltaTime;
			this.update(p_deltaTime);
			this.render();
		}
		if(!this.g2d_mouseMoveInputDetected && this.g2d_lastMouseX != -1000000) {
			var input = new com_genome2d_input_GMouseInput(this.g2d_context,this.g2d_context,"mouseStill",this.g2d_lastMouseX,this.g2d_lastMouseY);
			input.worldX = input.contextX = this.g2d_lastMouseX;
			input.worldY = input.contextY = this.g2d_lastMouseY;
			input.mouseOut = this.g2d_lastMouseOut;
			this.g2d_contextMouseInput_handler(input);
		}
		this.g2d_mouseMoveInputDetected = false;
	}
	,getCameraCount: function() {
		return this.g2d_cameras.length;
	}
	,getCamera: function(p_id) {
		var _g = 0;
		var _g1 = this.g2d_cameras.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.g2d_cameras[i].id == p_id) {
				return this.g2d_cameras[i];
			}
		}
		return null;
	}
	,setCameraIndex: function(p_camera,p_index) {
		if(p_index >= 0 && p_index < this.g2d_cameras.length) {
			if(HxOverrides.remove(this.g2d_cameras,p_camera)) {
				this.g2d_cameras.splice(p_index,0,p_camera);
			}
		}
	}
	,g2d_addCameraController: function(p_camera) {
		var _g = 0;
		var _g1 = this.g2d_cameras.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.g2d_cameras[i] == p_camera) {
				return;
			}
		}
		this.g2d_cameras.push(p_camera);
		this.g2d_onCameraAdded.dispatch(p_camera);
	}
	,g2d_removeCameraController: function(p_camera) {
		var _g = 0;
		var _g1 = this.g2d_cameras.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.g2d_cameras[i] == p_camera) {
				this.g2d_cameras.splice(i,1);
			}
		}
	}
	,g2d_contextMouseInput_handler: function(p_input) {
		p_input.time = this.g2d_accumulatedDeltaTime;
		if(p_input.type == "mouseMove") {
			this.g2d_mouseMoveInputDetected = true;
			this.g2d_lastMouseX = p_input.contextX;
			this.g2d_lastMouseY = p_input.contextY;
			this.g2d_lastMouseOut = p_input.mouseOut;
		} else if(p_input.type == "mouseDown") {
			this.g2d_lastMouseX = p_input.contextX;
			this.g2d_lastMouseY = p_input.contextY;
		}
		if(this.g2d_cameras.length == 0) {
			this.g2d_root.captureMouseInput(p_input);
		} else {
			var _g = 0;
			var _g1 = this.g2d_cameras.length;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_cameras[i].g2d_capturedThisFrame = false;
			}
			var i1 = this.g2d_cameras.length - 1;
			while(i1 >= 0) {
				if(this.g2d_cameras[i1].mouseEnabled) {
					this.g2d_cameras[i1].captureMouseInput(p_input);
				}
				--i1;
			}
		}
		if(this.g2d_onMouseInput != null) {
			this.g2d_onMouseInput.dispatch(p_input);
		}
	}
	,g2d_contextKeyboardInput_handler: function(p_input) {
		this.g2d_onKeyboardInput.dispatch(p_input);
	}
	,__class__: com_genome2d_Genome2D
	,__properties__: {get_root:"get_root",get_onMouseInput:"get_onMouseInput",get_onKeyboardInput:"get_onKeyboardInput",get_onPostRender:"get_onPostRender",get_onPreRender:"get_onPreRender",get_onUpdate:"get_onUpdate",get_onInvalidated:"get_onInvalidated",get_onCameraAdded:"get_onCameraAdded",get_onFailed:"get_onFailed",get_onInitialized:"get_onInitialized"}
};
var com_genome2d_animation_GAnimatorController = function() { };
$hxClasses["com.genome2d.animation.GAnimatorController"] = com_genome2d_animation_GAnimatorController;
com_genome2d_animation_GAnimatorController.__name__ = "com.genome2d.animation.GAnimatorController";
var com_genome2d_animation_GFrameAnimation = function() {
	this.g2d_currentState = "default";
	this.g2d_currentFrame = -1;
	this.g2d_playing = true;
	this.g2d_endIndex = -1;
	this.g2d_startIndex = -1;
	this.g2d_lastUpdatedFrameId = 0;
	this.g2d_accumulatedTime = 0;
	this.g2d_speed = 33.333333333333336;
	this.reversed = false;
	this.repeatable = true;
	this.timeDilation = 1;
};
$hxClasses["com.genome2d.animation.GFrameAnimation"] = com_genome2d_animation_GFrameAnimation;
com_genome2d_animation_GFrameAnimation.__name__ = "com.genome2d.animation.GFrameAnimation";
com_genome2d_animation_GFrameAnimation.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_animation_GFrameAnimation.prototype = {
	timeDilation: null
	,repeatable: null
	,reversed: null
	,g2d_speed: null
	,g2d_accumulatedTime: null
	,g2d_lastUpdatedFrameId: null
	,g2d_startIndex: null
	,g2d_endIndex: null
	,g2d_playing: null
	,currentFrameTexture: null
	,get_frameRate: function() {
		return 1000 / this.g2d_speed | 0;
	}
	,set_frameRate: function(p_value) {
		this.g2d_speed = 1000 / p_value;
		return p_value;
	}
	,g2d_frameCount: null
	,get_frameCount: function() {
		return this.g2d_frameCount;
	}
	,g2d_currentFrame: null
	,get_currentFrame: function() {
		return this.g2d_currentFrame;
	}
	,frames: null
	,g2d_frameTextures: null
	,set_frameTextures: function(p_value) {
		this.g2d_frameTextures = p_value;
		this.g2d_frameCount = p_value.length;
		this.g2d_currentFrame = 0;
		if(this.g2d_frameTextures.length > 0) {
			this.currentFrameTexture = this.g2d_frameTextures[0];
		} else {
			this.currentFrameTexture = null;
		}
		return this.g2d_frameTextures;
	}
	,gotoFrame: function(p_frame) {
		if(this.g2d_frameTextures == null) {
			return;
		}
		this.g2d_currentFrame = p_frame;
		this.g2d_currentFrame %= this.g2d_frameCount;
		this.currentFrameTexture = this.g2d_frameTextures[this.g2d_currentFrame];
	}
	,gotoAndPlay: function(p_frame) {
		this.gotoFrame(p_frame);
		this.play();
	}
	,gotoAndStop: function(p_frame) {
		this.gotoFrame(p_frame);
		this.stop();
	}
	,stop: function() {
		this.g2d_playing = false;
	}
	,play: function() {
		this.g2d_playing = true;
	}
	,update: function(p_deltaTime) {
		if(this.g2d_playing && this.g2d_frameCount > 1) {
			this.g2d_accumulatedTime += p_deltaTime * this.timeDilation;
			if(this.g2d_accumulatedTime >= this.g2d_speed) {
				this.g2d_currentFrame += this.reversed ? -(this.g2d_accumulatedTime / this.g2d_speed | 0) : this.g2d_accumulatedTime / this.g2d_speed | 0;
				if(this.reversed && this.g2d_currentFrame < 0) {
					if(this.repeatable) {
						this.g2d_currentFrame = this.g2d_frameCount + this.g2d_currentFrame % this.g2d_frameCount;
					} else {
						this.g2d_currentFrame = 0;
						this.g2d_playing = false;
					}
				} else if(!this.reversed && this.g2d_currentFrame >= this.g2d_frameCount) {
					if(this.repeatable) {
						this.g2d_currentFrame %= this.g2d_frameCount;
					} else {
						this.g2d_currentFrame = this.g2d_frameCount - 1;
						this.g2d_playing = false;
					}
				}
				this.currentFrameTexture = this.g2d_frameTextures[this.g2d_currentFrame];
			}
			this.g2d_accumulatedTime %= this.g2d_speed;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		if(this.g2d_frameTextures != null && this.g2d_frameTextures.length > 0) {
			var textureIds = "@" + this.g2d_frameTextures[0].g2d_id;
			var _g = 1;
			var _g1 = this.g2d_frameTextures.length;
			while(_g < _g1) {
				var i = _g++;
				textureIds += ",@" + this.g2d_frameTextures[i].g2d_id;
			}
			p_prototype.createPrototypeProperty("frames","String",4,null,textureIds);
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		if(p_prototype.hasProperty("frames")) {
			var textureString = p_prototype.getProperty("frames").value;
			if(textureString != "") {
				var textureIds = textureString.split(",");
				this.g2d_frameTextures = [];
				var _g = 0;
				while(_g < textureIds.length) {
					var textureId = textureIds[_g];
					++_g;
					var texture = com_genome2d_textures_GTextureManager.getTexture(HxOverrides.substr(textureId,1,null));
					if(texture != null) {
						this.g2d_frameTextures.push(texture);
					}
				}
				this.g2d_frameCount = this.g2d_frameTextures.length;
			} else {
				this.g2d_frameTextures = null;
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GFrameAnimation");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GFrameAnimation");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_animation_GFrameAnimation
	,__properties__: {set_frameTextures:"set_frameTextures",get_currentFrame:"get_currentFrame",get_frameCount:"get_frameCount",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
};
var com_genome2d_assets_GAsset = function(p_manager,p_url,p_id) {
	if(p_id == null) {
		p_id = "";
	}
	if(p_url == null) {
		p_url = "";
	}
	this.g2d_loaded = false;
	this.g2d_loading = false;
	this.g2d_id = "";
	this.g2d_manager = p_manager;
	this.onLoaded = new com_genome2d_callbacks_GCallback1(com_genome2d_assets_GAsset);
	this.onFailed = new com_genome2d_callbacks_GCallback1(com_genome2d_assets_GAsset);
	if(p_id != this.g2d_id && p_id.length > 0) {
		var _this = this.g2d_manager.g2d_references;
		if((__map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id]) != null) {
			var p_arg1 = "Duplicate asset id: " + p_id;
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 34, className : "com.genome2d.assets.GAsset", methodName : "set_id"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var _this1 = this.g2d_manager.g2d_references;
		if(__map_reserved[p_id] != null) {
			_this1.setReserved(p_id,this);
		} else {
			_this1.h[p_id] = this;
		}
		var key = this.g2d_id;
		var _this2 = this.g2d_manager.g2d_references;
		if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]) != null) {
			this.g2d_manager.g2d_references.remove(this.g2d_id);
		}
		this.g2d_id = p_id;
	}
	if(!this.isLoaded()) {
		this.g2d_url = p_url;
		if(this.g2d_id == "") {
			var p_value = this.g2d_url.replace(com_genome2d_assets_GAssetManager.URL_TO_ID_REGEX.r,"/");
			if(p_value != this.g2d_id && p_value.length > 0) {
				var _this3 = this.g2d_manager.g2d_references;
				if((__map_reserved[p_value] != null ? _this3.getReserved(p_value) : _this3.h[p_value]) != null) {
					var p_arg110 = "Duplicate asset id: " + p_value;
					var p_arg21 = null;
					var p_arg31 = null;
					var p_arg41 = null;
					var p_arg51 = null;
					var p_arg61 = null;
					var p_arg71 = null;
					var p_arg81 = null;
					var p_arg91 = null;
					var p_arg101 = null;
					var p_arg111 = null;
					var p_arg121 = null;
					var p_arg131 = null;
					var p_arg141 = null;
					var p_arg151 = null;
					var p_arg161 = null;
					var p_arg171 = null;
					var p_arg181 = null;
					var p_arg191 = null;
					var p_arg201 = null;
					var pos1 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 34, className : "com.genome2d.assets.GAsset", methodName : "set_id"};
					var args1 = [];
					if(p_arg110 != null) {
						args1.push(p_arg110);
					}
					if(p_arg21 != null) {
						args1.push(p_arg21);
					}
					if(p_arg31 != null) {
						args1.push(p_arg31);
					}
					if(p_arg41 != null) {
						args1.push(p_arg41);
					}
					if(p_arg51 != null) {
						args1.push(p_arg51);
					}
					if(p_arg61 != null) {
						args1.push(p_arg61);
					}
					if(p_arg71 != null) {
						args1.push(p_arg71);
					}
					if(p_arg81 != null) {
						args1.push(p_arg81);
					}
					if(p_arg91 != null) {
						args1.push(p_arg91);
					}
					if(p_arg101 != null) {
						args1.push(p_arg101);
					}
					if(p_arg111 != null) {
						args1.push(p_arg111);
					}
					if(p_arg121 != null) {
						args1.push(p_arg121);
					}
					if(p_arg131 != null) {
						args1.push(p_arg131);
					}
					if(p_arg141 != null) {
						args1.push(p_arg141);
					}
					if(p_arg151 != null) {
						args1.push(p_arg151);
					}
					if(p_arg161 != null) {
						args1.push(p_arg161);
					}
					if(p_arg171 != null) {
						args1.push(p_arg171);
					}
					if(p_arg181 != null) {
						args1.push(p_arg181);
					}
					if(p_arg191 != null) {
						args1.push(p_arg191);
					}
					if(p_arg201 != null) {
						args1.push(p_arg201);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
					}
					var msg1 = "ERROR: ";
					if(pos1 != null) {
						msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
					}
					if(args1.length > 0) {
						msg1 += args1.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg1;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg1);
					}
					throw new js__$Boot_HaxeError(msg1);
				}
				var _this4 = this.g2d_manager.g2d_references;
				if(__map_reserved[p_value] != null) {
					_this4.setReserved(p_value,this);
				} else {
					_this4.h[p_value] = this;
				}
				var key1 = this.g2d_id;
				var _this5 = this.g2d_manager.g2d_references;
				if((__map_reserved[key1] != null ? _this5.getReserved(key1) : _this5.h[key1]) != null) {
					this.g2d_manager.g2d_references.remove(this.g2d_id);
				}
				this.g2d_id = p_value;
			}
		}
	} else {
		var p_arg112 = "Asset already loaded " + this.g2d_id;
		var p_arg22 = null;
		var p_arg32 = null;
		var p_arg42 = null;
		var p_arg52 = null;
		var p_arg62 = null;
		var p_arg72 = null;
		var p_arg82 = null;
		var p_arg92 = null;
		var p_arg102 = null;
		var p_arg113 = null;
		var p_arg122 = null;
		var p_arg132 = null;
		var p_arg142 = null;
		var p_arg152 = null;
		var p_arg162 = null;
		var p_arg172 = null;
		var p_arg182 = null;
		var p_arg192 = null;
		var p_arg202 = null;
		var pos2 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 57, className : "com.genome2d.assets.GAsset", methodName : "set_url"};
		if(com_genome2d_debug_GDebug.showPriority <= 4) {
			var args2 = [];
			if(p_arg112 != null) {
				args2.push(p_arg112);
			}
			if(p_arg22 != null) {
				args2.push(p_arg22);
			}
			if(p_arg32 != null) {
				args2.push(p_arg32);
			}
			if(p_arg42 != null) {
				args2.push(p_arg42);
			}
			if(p_arg52 != null) {
				args2.push(p_arg52);
			}
			if(p_arg62 != null) {
				args2.push(p_arg62);
			}
			if(p_arg72 != null) {
				args2.push(p_arg72);
			}
			if(p_arg82 != null) {
				args2.push(p_arg82);
			}
			if(p_arg92 != null) {
				args2.push(p_arg92);
			}
			if(p_arg102 != null) {
				args2.push(p_arg102);
			}
			if(p_arg113 != null) {
				args2.push(p_arg113);
			}
			if(p_arg122 != null) {
				args2.push(p_arg122);
			}
			if(p_arg132 != null) {
				args2.push(p_arg132);
			}
			if(p_arg142 != null) {
				args2.push(p_arg142);
			}
			if(p_arg152 != null) {
				args2.push(p_arg152);
			}
			if(p_arg162 != null) {
				args2.push(p_arg162);
			}
			if(p_arg172 != null) {
				args2.push(p_arg172);
			}
			if(p_arg182 != null) {
				args2.push(p_arg182);
			}
			if(p_arg192 != null) {
				args2.push(p_arg192);
			}
			if(p_arg202 != null) {
				args2.push(p_arg202);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos2,args2);
			}
			var msg2 = "WARNING: ";
			if(pos2 != null) {
				msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
			}
			if(args2.length > 0) {
				msg2 += args2.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg2;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg2);
			}
		}
	}
};
$hxClasses["com.genome2d.assets.GAsset"] = com_genome2d_assets_GAsset;
com_genome2d_assets_GAsset.__name__ = "com.genome2d.assets.GAsset";
com_genome2d_assets_GAsset.prototype = {
	g2d_manager: null
	,g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		if(p_value != this.g2d_id && p_value.length > 0) {
			var _this = this.g2d_manager.g2d_references;
			if((__map_reserved[p_value] != null ? _this.getReserved(p_value) : _this.h[p_value]) != null) {
				var p_arg1 = "Duplicate asset id: " + p_value;
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 34, className : "com.genome2d.assets.GAsset", methodName : "set_id"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
			var _this1 = this.g2d_manager.g2d_references;
			if(__map_reserved[p_value] != null) {
				_this1.setReserved(p_value,this);
			} else {
				_this1.h[p_value] = this;
			}
			var key = this.g2d_id;
			var _this2 = this.g2d_manager.g2d_references;
			if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]) != null) {
				this.g2d_manager.g2d_references.remove(this.g2d_id);
			}
			this.g2d_id = p_value;
		}
		return this.g2d_id;
	}
	,g2d_url: null
	,get_url: function() {
		return this.g2d_url;
	}
	,set_url: function(p_value) {
		if(!this.isLoaded()) {
			this.g2d_url = p_value;
			if(this.g2d_id == "") {
				var p_value1 = this.g2d_url.replace(com_genome2d_assets_GAssetManager.URL_TO_ID_REGEX.r,"/");
				if(p_value1 != this.g2d_id && p_value1.length > 0) {
					var _this = this.g2d_manager.g2d_references;
					if((__map_reserved[p_value1] != null ? _this.getReserved(p_value1) : _this.h[p_value1]) != null) {
						var p_arg1 = "Duplicate asset id: " + p_value1;
						var p_arg2 = null;
						var p_arg3 = null;
						var p_arg4 = null;
						var p_arg5 = null;
						var p_arg6 = null;
						var p_arg7 = null;
						var p_arg8 = null;
						var p_arg9 = null;
						var p_arg10 = null;
						var p_arg11 = null;
						var p_arg12 = null;
						var p_arg13 = null;
						var p_arg14 = null;
						var p_arg15 = null;
						var p_arg16 = null;
						var p_arg17 = null;
						var p_arg18 = null;
						var p_arg19 = null;
						var p_arg20 = null;
						var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 34, className : "com.genome2d.assets.GAsset", methodName : "set_id"};
						var args = [];
						if(p_arg1 != null) {
							args.push(p_arg1);
						}
						if(p_arg2 != null) {
							args.push(p_arg2);
						}
						if(p_arg3 != null) {
							args.push(p_arg3);
						}
						if(p_arg4 != null) {
							args.push(p_arg4);
						}
						if(p_arg5 != null) {
							args.push(p_arg5);
						}
						if(p_arg6 != null) {
							args.push(p_arg6);
						}
						if(p_arg7 != null) {
							args.push(p_arg7);
						}
						if(p_arg8 != null) {
							args.push(p_arg8);
						}
						if(p_arg9 != null) {
							args.push(p_arg9);
						}
						if(p_arg10 != null) {
							args.push(p_arg10);
						}
						if(p_arg11 != null) {
							args.push(p_arg11);
						}
						if(p_arg12 != null) {
							args.push(p_arg12);
						}
						if(p_arg13 != null) {
							args.push(p_arg13);
						}
						if(p_arg14 != null) {
							args.push(p_arg14);
						}
						if(p_arg15 != null) {
							args.push(p_arg15);
						}
						if(p_arg16 != null) {
							args.push(p_arg16);
						}
						if(p_arg17 != null) {
							args.push(p_arg17);
						}
						if(p_arg18 != null) {
							args.push(p_arg18);
						}
						if(p_arg19 != null) {
							args.push(p_arg19);
						}
						if(p_arg20 != null) {
							args.push(p_arg20);
						}
						if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
							com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
						}
						var msg = "ERROR: ";
						if(pos != null) {
							msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
						}
						if(args.length > 0) {
							msg += args.toString();
						}
						com_genome2d_debug_GDebug.g2d_log += msg;
						if(com_genome2d_debug_GDebug.useNativeTrace) {
							window.console.log(msg);
						}
						throw new js__$Boot_HaxeError(msg);
					}
					var _this1 = this.g2d_manager.g2d_references;
					if(__map_reserved[p_value1] != null) {
						_this1.setReserved(p_value1,this);
					} else {
						_this1.h[p_value1] = this;
					}
					var key = this.g2d_id;
					var _this2 = this.g2d_manager.g2d_references;
					if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]) != null) {
						this.g2d_manager.g2d_references.remove(this.g2d_id);
					}
					this.g2d_id = p_value1;
				}
			}
		} else {
			var p_arg110 = "Asset already loaded " + this.g2d_id;
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GAsset.hx", lineNumber : 57, className : "com.genome2d.assets.GAsset", methodName : "set_url"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args1 = [];
				if(p_arg110 != null) {
					args1.push(p_arg110);
				}
				if(p_arg21 != null) {
					args1.push(p_arg21);
				}
				if(p_arg31 != null) {
					args1.push(p_arg31);
				}
				if(p_arg41 != null) {
					args1.push(p_arg41);
				}
				if(p_arg51 != null) {
					args1.push(p_arg51);
				}
				if(p_arg61 != null) {
					args1.push(p_arg61);
				}
				if(p_arg71 != null) {
					args1.push(p_arg71);
				}
				if(p_arg81 != null) {
					args1.push(p_arg81);
				}
				if(p_arg91 != null) {
					args1.push(p_arg91);
				}
				if(p_arg101 != null) {
					args1.push(p_arg101);
				}
				if(p_arg111 != null) {
					args1.push(p_arg111);
				}
				if(p_arg121 != null) {
					args1.push(p_arg121);
				}
				if(p_arg131 != null) {
					args1.push(p_arg131);
				}
				if(p_arg141 != null) {
					args1.push(p_arg141);
				}
				if(p_arg151 != null) {
					args1.push(p_arg151);
				}
				if(p_arg161 != null) {
					args1.push(p_arg161);
				}
				if(p_arg171 != null) {
					args1.push(p_arg171);
				}
				if(p_arg181 != null) {
					args1.push(p_arg181);
				}
				if(p_arg191 != null) {
					args1.push(p_arg191);
				}
				if(p_arg201 != null) {
					args1.push(p_arg201);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos1,args1);
				}
				var msg1 = "WARNING: ";
				if(pos1 != null) {
					msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
				}
				if(args1.length > 0) {
					msg1 += args1.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg1;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg1);
				}
			}
		}
		return this.g2d_url;
	}
	,g2d_loading: null
	,isLoading: function() {
		return this.g2d_loading;
	}
	,g2d_loaded: null
	,isLoaded: function() {
		return this.g2d_loaded;
	}
	,onLoaded: null
	,onFailed: null
	,load: function() {
	}
	,cancel: function() {
		this.g2d_loading = false;
	}
	,toReference: function() {
		return null;
	}
	,dispose: function() {
	}
	,__class__: com_genome2d_assets_GAsset
	,__properties__: {set_url:"set_url",get_url:"get_url",set_id:"set_id",get_id:"get_id"}
};
var com_genome2d_assets_GAssetManager = function() {
	this.g2d_currentlyLoading = 0;
	this.maxParallelLoading = 1;
	this.useParallelLoading = false;
	this.ignoreFailed = false;
	this.g2d_loadQueue = [];
	this.g2d_references = new haxe_ds_StringMap();
	this.g2d_onAssetLoading = new com_genome2d_callbacks_GCallback1(com_genome2d_assets_GAsset);
	this.g2d_onQueueLoaded = new com_genome2d_callbacks_GCallback0();
	this.g2d_onQueueFailed = new com_genome2d_callbacks_GCallback1(com_genome2d_assets_GAsset);
};
$hxClasses["com.genome2d.assets.GAssetManager"] = com_genome2d_assets_GAssetManager;
com_genome2d_assets_GAssetManager.__name__ = "com.genome2d.assets.GAssetManager";
com_genome2d_assets_GAssetManager.getFileName = function(p_path) {
	com_genome2d_assets_GAssetManager.PATH_REGEX.match(p_path);
	return com_genome2d_assets_GAssetManager.PATH_REGEX.matched(1);
};
com_genome2d_assets_GAssetManager.getFileExtension = function(p_path) {
	com_genome2d_assets_GAssetManager.PATH_REGEX.match(p_path);
	return com_genome2d_assets_GAssetManager.PATH_REGEX.matched(2);
};
com_genome2d_assets_GAssetManager.getPathWithoutExtension = function(p_path) {
	return p_path.substring(0,p_path.lastIndexOf("."));
};
com_genome2d_assets_GAssetManager.convertUrlToId = function(p_url) {
	return p_url.replace(com_genome2d_assets_GAssetManager.URL_TO_ID_REGEX.r,"/");
};
com_genome2d_assets_GAssetManager.prototype = {
	ignoreFailed: null
	,useParallelLoading: null
	,maxParallelLoading: null
	,g2d_currentlyLoading: null
	,g2d_references: null
	,getAssets: function() {
		return this.g2d_references;
	}
	,g2d_loadQueue: null
	,g2d_loading: null
	,isLoading: function() {
		return this.g2d_loading;
	}
	,g2d_onAssetLoading: null
	,get_onAssetLoading: function() {
		return this.g2d_onAssetLoading;
	}
	,g2d_onQueueLoaded: null
	,get_onQueueLoaded: function() {
		return this.g2d_onQueueLoaded;
	}
	,g2d_onQueueFailed: null
	,get_onQueueFailed: function() {
		return this.g2d_onQueueFailed;
	}
	,getAssetById: function(p_id) {
		var _this = this.g2d_references;
		if(__map_reserved[p_id] != null) {
			return _this.getReserved(p_id);
		} else {
			return _this.h[p_id];
		}
	}
	,getXmlAssetById: function(p_id) {
		var _this = this.g2d_references;
		return __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
	}
	,getImageAssetById: function(p_id) {
		var _this = this.g2d_references;
		return __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
	}
	,getBinaryAssetById: function(p_id) {
		var _this = this.g2d_references;
		return __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
	}
	,getTextAssetById: function(p_id) {
		var _this = this.g2d_references;
		return __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
	}
	,addFromUrl: function(p_url,p_id) {
		if(p_id == null) {
			p_id = "";
		}
		var asset = null;
		com_genome2d_assets_GAssetManager.PATH_REGEX.match(p_url);
		switch(com_genome2d_assets_GAssetManager.PATH_REGEX.matched(2)) {
		case "atf":case "jpeg":case "jpg":case "png":
			asset = new com_genome2d_assets_GImageAsset(this,p_url,p_id);
			break;
		case "bytes":case "g3d":
			asset = new com_genome2d_assets_GBinaryAsset(this,p_url,p_id);
			break;
		case "fnt":case "xml":
			asset = new com_genome2d_assets_GXmlAsset(this,p_url,p_id);
			break;
		case "mp3":
			asset = new com_genome2d_assets_GAudioAsset(this,p_url,p_id);
			break;
		default:
			asset = new com_genome2d_assets_GTextAsset(this,p_url,p_id);
		}
		if(asset != null) {
			this.addToQueue(asset);
		}
		return asset;
	}
	,remove: function(p_asset) {
		if(this.g2d_loadQueue.indexOf(p_asset) != -1) {
			HxOverrides.remove(this.g2d_loadQueue,p_asset);
			this.g2d_references.remove(p_asset.g2d_id);
		}
	}
	,disposeAssets: function() {
		var _this = this.g2d_references;
		var asset = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(asset.hasNext()) {
			var asset1 = asset.next();
			asset1.dispose();
		}
	}
	,addToQueue: function(p_asset) {
		this.g2d_loadQueue.push(p_asset);
		if(this.g2d_loading && this.useParallelLoading && this.g2d_currentlyLoading < this.maxParallelLoading) {
			this.g2d_loadQueueNext();
		}
	}
	,loadQueue: function(p_successHandler,p_failedHandler) {
		if(!this.g2d_loading && this.g2d_loadQueue.length > 0) {
			if(p_successHandler != null) {
				this.g2d_onQueueLoaded.addOnce(p_successHandler);
			}
			if(p_failedHandler != null) {
				this.g2d_onQueueFailed.addOnce(p_failedHandler);
			}
			this.g2d_loading = true;
			if(this.useParallelLoading) {
				var _g = 0;
				var _g1 = this.maxParallelLoading;
				while(_g < _g1) {
					var i = _g++;
					this.g2d_loadQueueNext();
				}
			} else {
				this.g2d_loadQueueNext();
			}
			return true;
		}
		return false;
	}
	,g2d_loadQueueNext: function() {
		if(this.g2d_loadQueue.length > 0) {
			this.g2d_currentlyLoading++;
			var asset = this.g2d_loadQueue.shift();
			this.g2d_onAssetLoading.dispatch(asset);
			asset.onLoaded.addOnce($bind(this,this.assetLoaded_handler));
			asset.onFailed.addOnce($bind(this,this.assetFailed_handler));
			asset.load();
		}
	}
	,assetLoaded_handler: function(p_asset) {
		this.g2d_currentlyLoading--;
		if(this.g2d_loadQueue.length == 0) {
			if(this.g2d_currentlyLoading == 0) {
				this.g2d_loading = false;
				this.g2d_onQueueLoaded.dispatch();
			}
		} else {
			this.g2d_loadQueueNext();
		}
	}
	,assetFailed_handler: function(p_asset) {
		this.g2d_currentlyLoading--;
		this.g2d_onQueueFailed.dispatch(p_asset);
		if(this.ignoreFailed && this.g2d_loadQueue.length > 0) {
			this.g2d_loadQueueNext();
		} else if(this.g2d_currentlyLoading == 0) {
			this.g2d_loading = false;
		}
	}
	,generate: function(p_scaleFactor,p_overwrite) {
		if(p_overwrite == null) {
			p_overwrite = false;
		}
		if(p_scaleFactor == null) {
			p_scaleFactor = 1;
		}
		var _this = this.g2d_references;
		var asset = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(asset.hasNext()) {
			var asset1 = asset.next();
			if(!((asset1) instanceof com_genome2d_assets_GImageAsset) || !asset1.isLoaded()) {
				continue;
			}
			var texture = com_genome2d_textures_GTextureManager.getTexture(asset1.g2d_id);
			if(texture != null) {
				if(p_overwrite) {
					texture.dispose();
				} else {
					continue;
				}
			}
			texture = com_genome2d_textures_GTextureManager.createTexture(asset1.g2d_id,asset1);
			var idWithoutExt = asset1.g2d_id.substring(0,asset1.g2d_id.lastIndexOf("."));
			if(this.getXmlAssetById(idWithoutExt + ".xml") != null) {
				com_genome2d_textures_GTextureManager.createTextureAtlas(texture,this.getXmlAssetById(idWithoutExt + ".xml").xml,true);
			} else if(this.getXmlAssetById(idWithoutExt + ".fnt") != null) {
				com_genome2d_text_GFontManager.createTextureFont(idWithoutExt + ".fnt",texture,this.getXmlAssetById(idWithoutExt + ".fnt").xml);
			}
			texture.invalidateNativeTexture(false);
		}
	}
	,__class__: com_genome2d_assets_GAssetManager
	,__properties__: {get_onQueueFailed:"get_onQueueFailed",get_onQueueLoaded:"get_onQueueLoaded",get_onAssetLoading:"get_onAssetLoading"}
};
var com_genome2d_assets_GAudioAsset = function(p_manager,p_url,p_id) {
	com_genome2d_assets_GAsset.call(this,p_manager,p_url,p_id);
};
$hxClasses["com.genome2d.assets.GAudioAsset"] = com_genome2d_assets_GAudioAsset;
com_genome2d_assets_GAudioAsset.__name__ = "com.genome2d.assets.GAudioAsset";
com_genome2d_assets_GAudioAsset.__super__ = com_genome2d_assets_GAsset;
com_genome2d_assets_GAudioAsset.prototype = $extend(com_genome2d_assets_GAsset.prototype,{
	g2d_type: null
	,type: null
	,load: function() {
		var p_arg1 = "Audio assets for this context are not implemented.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/assets/GAudioAsset.hx", lineNumber : 12, className : "com.genome2d.assets.GAudioAsset", methodName : "load"};
		if(com_genome2d_debug_GDebug.showPriority <= 4) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
			}
			var msg = "WARNING: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		this.g2d_complete_handler();
	}
	,g2d_complete_handler: function() {
		this.g2d_loading = false;
		this.g2d_loaded = true;
		this.onLoaded.dispatch(this);
	}
	,g2d_ioError_handler: function() {
	}
	,__class__: com_genome2d_assets_GAudioAsset
});
var com_genome2d_assets_GAudioAssetType = $hxEnums["com.genome2d.assets.GAudioAssetType"] = { __ename__ : "com.genome2d.assets.GAudioAssetType", __constructs__ : ["MPEG"]
	,MPEG: {_hx_index:0,__enum__:"com.genome2d.assets.GAudioAssetType",toString:$estr}
};
com_genome2d_assets_GAudioAssetType.__empty_constructs__ = [com_genome2d_assets_GAudioAssetType.MPEG];
var com_genome2d_assets_GBinaryAsset = function(p_manager,p_url,p_id) {
	com_genome2d_assets_GAsset.call(this,p_manager,p_url,p_id);
};
$hxClasses["com.genome2d.assets.GBinaryAsset"] = com_genome2d_assets_GBinaryAsset;
com_genome2d_assets_GBinaryAsset.__name__ = "com.genome2d.assets.GBinaryAsset";
com_genome2d_assets_GBinaryAsset.__super__ = com_genome2d_assets_GAsset;
com_genome2d_assets_GBinaryAsset.prototype = $extend(com_genome2d_assets_GAsset.prototype,{
	data: null
	,g2d_request: null
	,load: function() {
		this.g2d_request = new XMLHttpRequest();
		this.g2d_request.addEventListener("load",$bind(this,this.loadedHandler));
		this.g2d_request.addEventListener("error",$bind(this,this.errorHandler));
		this.g2d_request.open("GET",this.g2d_url);
		this.g2d_request.responseType = "arraybuffer";
		this.g2d_request.send();
	}
	,loadedHandler: function(p_data) {
		this.g2d_loaded = true;
		if(((this.g2d_request.response) instanceof ArrayBuffer)) {
			this.data = haxe_io_Bytes.ofData(this.g2d_request.response);
		} else {
			var p_arg1 = "Request doesn't contain binary data.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/assets/GBinaryAsset.hx", lineNumber : 30, className : "com.genome2d.assets.GBinaryAsset", methodName : "loadedHandler"};
			if(com_genome2d_debug_GDebug.showPriority <= 14) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(14,pos,args);
				}
				var msg = "";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
		}
		this.onLoaded.dispatch(this);
	}
	,errorHandler: function(p_error) {
		var p_arg1 = p_error;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/assets/GBinaryAsset.hx", lineNumber : 37, className : "com.genome2d.assets.GBinaryAsset", methodName : "errorHandler"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	,__class__: com_genome2d_assets_GBinaryAsset
});
var com_genome2d_assets_GImageAsset = function(p_manager,p_url,p_id) {
	com_genome2d_assets_GAsset.call(this,p_manager,p_url,p_id);
};
$hxClasses["com.genome2d.assets.GImageAsset"] = com_genome2d_assets_GImageAsset;
com_genome2d_assets_GImageAsset.__name__ = "com.genome2d.assets.GImageAsset";
com_genome2d_assets_GImageAsset.__super__ = com_genome2d_assets_GAsset;
com_genome2d_assets_GImageAsset.prototype = $extend(com_genome2d_assets_GAsset.prototype,{
	g2d_imageElement: null
	,get_imageElement: function() {
		return this.g2d_imageElement;
	}
	,g2d_type: null
	,get_type: function() {
		return this.g2d_type;
	}
	,load: function() {
		this.g2d_imageElement = window.document.createElement("img");
		this.g2d_imageElement.onerror = $bind(this,this.error_handler);
		this.g2d_imageElement.onload = $bind(this,this.loaded_handler);
		this.g2d_imageElement.src = this.g2d_url;
	}
	,loaded_handler: function(event) {
		this.g2d_type = com_genome2d_assets_GImageAssetType.IMAGEELEMENT;
		this.g2d_loaded = true;
		this.onLoaded.dispatch(this);
	}
	,error_handler: function(event) {
		this.g2d_type = com_genome2d_assets_GImageAssetType.IMAGEELEMENT;
		this.g2d_loaded = false;
		this.onFailed.dispatch(this);
	}
	,__class__: com_genome2d_assets_GImageAsset
	,__properties__: $extend(com_genome2d_assets_GAsset.prototype.__properties__,{get_type:"get_type",get_imageElement:"get_imageElement"})
});
var com_genome2d_assets_GImageAssetType = $hxEnums["com.genome2d.assets.GImageAssetType"] = { __ename__ : "com.genome2d.assets.GImageAssetType", __constructs__ : ["BITMAPDATA","ATF","IMAGEELEMENT","UNITY"]
	,BITMAPDATA: {_hx_index:0,__enum__:"com.genome2d.assets.GImageAssetType",toString:$estr}
	,ATF: {_hx_index:1,__enum__:"com.genome2d.assets.GImageAssetType",toString:$estr}
	,IMAGEELEMENT: {_hx_index:2,__enum__:"com.genome2d.assets.GImageAssetType",toString:$estr}
	,UNITY: {_hx_index:3,__enum__:"com.genome2d.assets.GImageAssetType",toString:$estr}
};
com_genome2d_assets_GImageAssetType.__empty_constructs__ = [com_genome2d_assets_GImageAssetType.BITMAPDATA,com_genome2d_assets_GImageAssetType.ATF,com_genome2d_assets_GImageAssetType.IMAGEELEMENT,com_genome2d_assets_GImageAssetType.UNITY];
var com_genome2d_assets_GStaticAssetManager = function() { };
$hxClasses["com.genome2d.assets.GStaticAssetManager"] = com_genome2d_assets_GStaticAssetManager;
com_genome2d_assets_GStaticAssetManager.__name__ = "com.genome2d.assets.GStaticAssetManager";
com_genome2d_assets_GStaticAssetManager.__properties__ = {set_maxParallelLoading:"set_maxParallelLoading",get_maxParallelLoading:"get_maxParallelLoading",set_useParallelLoading:"set_useParallelLoading",get_useParallelLoading:"get_useParallelLoading"};
com_genome2d_assets_GStaticAssetManager.g2d_instance = null;
com_genome2d_assets_GStaticAssetManager.setInstance = function(p_instance) {
	com_genome2d_assets_GStaticAssetManager.g2d_instance = p_instance;
};
com_genome2d_assets_GStaticAssetManager.get_useParallelLoading = function() {
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.useParallelLoading;
};
com_genome2d_assets_GStaticAssetManager.set_useParallelLoading = function(p_use) {
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.useParallelLoading = p_use;
};
com_genome2d_assets_GStaticAssetManager.get_maxParallelLoading = function() {
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.maxParallelLoading;
};
com_genome2d_assets_GStaticAssetManager.set_maxParallelLoading = function(p_max) {
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.maxParallelLoading = p_max;
};
com_genome2d_assets_GStaticAssetManager.getAssetById = function(p_id) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 36, className : "com.genome2d.assets.GStaticAssetManager", methodName : "getAssetById"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.getAssetById(p_id);
};
com_genome2d_assets_GStaticAssetManager.getXmlAssetById = function(p_id) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 41, className : "com.genome2d.assets.GStaticAssetManager", methodName : "getXmlAssetById"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.getXmlAssetById(p_id);
};
com_genome2d_assets_GStaticAssetManager.getImageAssetById = function(p_id) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 46, className : "com.genome2d.assets.GStaticAssetManager", methodName : "getImageAssetById"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.getImageAssetById(p_id);
};
com_genome2d_assets_GStaticAssetManager.getBinaryAssetById = function(p_id) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 51, className : "com.genome2d.assets.GStaticAssetManager", methodName : "getBinaryAssetById"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.getBinaryAssetById(p_id);
};
com_genome2d_assets_GStaticAssetManager.getTextAssetById = function(p_id) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 56, className : "com.genome2d.assets.GStaticAssetManager", methodName : "getTextAssetById"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.getTextAssetById(p_id);
};
com_genome2d_assets_GStaticAssetManager.addFromUrl = function(p_url,p_id) {
	if(p_id == null) {
		p_id = "";
	}
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 61, className : "com.genome2d.assets.GStaticAssetManager", methodName : "addFromUrl"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return com_genome2d_assets_GStaticAssetManager.g2d_instance.addFromUrl(p_url,p_id);
};
com_genome2d_assets_GStaticAssetManager.loadQueue = function(p_successHandler,p_failedHandler) {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 66, className : "com.genome2d.assets.GStaticAssetManager", methodName : "loadQueue"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	com_genome2d_assets_GStaticAssetManager.g2d_instance.loadQueue(p_successHandler,p_failedHandler);
};
com_genome2d_assets_GStaticAssetManager.generate = function(p_scaleFactor,p_overwrite) {
	if(p_overwrite == null) {
		p_overwrite = false;
	}
	if(p_scaleFactor == null) {
		p_scaleFactor = 1;
	}
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 71, className : "com.genome2d.assets.GStaticAssetManager", methodName : "generate"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	com_genome2d_assets_GStaticAssetManager.g2d_instance.generate(p_scaleFactor,p_overwrite);
};
com_genome2d_assets_GStaticAssetManager.disposeAssets = function() {
	if(com_genome2d_assets_GStaticAssetManager.g2d_instance == null) {
		var p_arg1 = "No asset manager initialized.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/assets/GStaticAssetManager.hx", lineNumber : 76, className : "com.genome2d.assets.GStaticAssetManager", methodName : "disposeAssets"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	com_genome2d_assets_GStaticAssetManager.g2d_instance.disposeAssets();
};
var com_genome2d_assets_GTextAsset = function(p_manager,p_url,p_id) {
	com_genome2d_assets_GAsset.call(this,p_manager,p_url,p_id);
};
$hxClasses["com.genome2d.assets.GTextAsset"] = com_genome2d_assets_GTextAsset;
com_genome2d_assets_GTextAsset.__name__ = "com.genome2d.assets.GTextAsset";
com_genome2d_assets_GTextAsset.__super__ = com_genome2d_assets_GAsset;
com_genome2d_assets_GTextAsset.prototype = $extend(com_genome2d_assets_GAsset.prototype,{
	text: null
	,load: function() {
		var http = new haxe_http_HttpJs(this.g2d_url);
		http.onData = $bind(this,this.loadedHandler);
		http.onError = $bind(this,this.errorHandler);
		http.request();
	}
	,loadedHandler: function(p_data) {
		this.g2d_loaded = true;
		this.text = p_data;
		this.onLoaded.dispatch(this);
	}
	,errorHandler: function(p_error) {
		var p_arg1 = p_error;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/assets/GTextAsset.hx", lineNumber : 39, className : "com.genome2d.assets.GTextAsset", methodName : "errorHandler"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
		}
		var msg = "G2D_ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	,__class__: com_genome2d_assets_GTextAsset
});
var com_genome2d_assets_GXmlAsset = function(p_manager,p_url,p_id) {
	com_genome2d_assets_GAsset.call(this,p_manager,p_url,p_id);
};
$hxClasses["com.genome2d.assets.GXmlAsset"] = com_genome2d_assets_GXmlAsset;
com_genome2d_assets_GXmlAsset.__name__ = "com.genome2d.assets.GXmlAsset";
com_genome2d_assets_GXmlAsset.__super__ = com_genome2d_assets_GAsset;
com_genome2d_assets_GXmlAsset.prototype = $extend(com_genome2d_assets_GAsset.prototype,{
	xml: null
	,load: function() {
		var http = new haxe_http_HttpJs(this.g2d_url);
		http.onData = $bind(this,this.loadedHandler);
		http.onError = $bind(this,this.errorHandler);
		http.request();
	}
	,loadedHandler: function(p_data) {
		this.g2d_loaded = true;
		this.xml = Xml.parse(p_data);
		this.onLoaded.dispatch(this);
	}
	,errorHandler: function(p_error) {
		var p_arg1 = p_error;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/assets/GXmlAsset.hx", lineNumber : 38, className : "com.genome2d.assets.GXmlAsset", methodName : "errorHandler"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	,__class__: com_genome2d_assets_GXmlAsset
});
var com_genome2d_callbacks_GCallback = function(p_valueClasses) {
	this.g2d_listenerCount = 0;
	this.g2d_valueClasses = p_valueClasses == null ? [] : p_valueClasses;
	this.g2d_listeners = [];
	this.g2d_listenersOnce = [];
};
$hxClasses["com.genome2d.callbacks.GCallback"] = com_genome2d_callbacks_GCallback;
com_genome2d_callbacks_GCallback.__name__ = "com.genome2d.callbacks.GCallback";
com_genome2d_callbacks_GCallback.prototype = {
	g2d_valueClasses: null
	,g2d_listenersOnce: null
	,g2d_listeners: null
	,g2d_listenerCount: null
	,g2d_iteratingDispatch: null
	,g2d_iteratingDispatchCurrent: null
	,hasListeners: function() {
		if(this.g2d_listeners.length <= 0) {
			return this.g2d_listenersOnce.length > 0;
		} else {
			return true;
		}
	}
	,add: function(p_listener) {
		if(p_listener != null && this.g2d_listeners.indexOf(p_listener) == -1 && this.g2d_listenersOnce.indexOf(p_listener) == -1) {
			this.g2d_listeners.push(p_listener);
			this.g2d_listenerCount++;
		}
	}
	,addUnsafe: function(p_listener) {
		if(p_listener != null) {
			this.g2d_listeners.push(p_listener);
			this.g2d_listenerCount++;
		}
	}
	,addOnce: function(p_listener) {
		if(p_listener != null && this.g2d_listeners.indexOf(p_listener) == -1 && this.g2d_listenersOnce.indexOf(p_listener) == -1) {
			this.g2d_listenersOnce.push(p_listener);
		}
	}
	,addWithPriority: function(p_listener) {
		if(p_listener != null && this.g2d_listeners.indexOf(p_listener) == -1 && this.g2d_listenersOnce.indexOf(p_listener) == -1) {
			this.g2d_listeners.unshift(p_listener);
			this.g2d_listenerCount++;
		}
	}
	,remove: function(p_listener) {
		var index = this.g2d_listeners.indexOf(p_listener);
		if(index >= 0) {
			if(index <= this.g2d_iteratingDispatch) {
				this.g2d_iteratingDispatch--;
			}
			this.g2d_listeners.splice(index,1);
			this.g2d_listenerCount--;
		} else {
			HxOverrides.remove(this.g2d_listenersOnce,p_listener);
		}
	}
	,removeAll: function() {
		this.g2d_listeners = [];
		this.g2d_listenerCount = 0;
		this.g2d_listenersOnce = [];
	}
	,__class__: com_genome2d_callbacks_GCallback
};
var com_genome2d_callbacks_GCallback0 = function() {
	com_genome2d_callbacks_GCallback.call(this,[]);
};
$hxClasses["com.genome2d.callbacks.GCallback0"] = com_genome2d_callbacks_GCallback0;
com_genome2d_callbacks_GCallback0.__name__ = "com.genome2d.callbacks.GCallback0";
com_genome2d_callbacks_GCallback0.__super__ = com_genome2d_callbacks_GCallback;
com_genome2d_callbacks_GCallback0.prototype = $extend(com_genome2d_callbacks_GCallback.prototype,{
	dispatch: function() {
		this.g2d_iteratingDispatch = 0;
		while(this.g2d_iteratingDispatch < this.g2d_listenerCount) {
			this.g2d_listeners[this.g2d_iteratingDispatch]();
			this.g2d_iteratingDispatch++;
		}
		var onceCount = this.g2d_listenersOnce.length;
		var _g = 0;
		var _g1 = onceCount;
		while(_g < _g1) {
			var i = _g++;
			(this.g2d_listenersOnce.shift())();
		}
	}
	,__class__: com_genome2d_callbacks_GCallback0
});
var com_genome2d_callbacks_GCallback1 = function(p_type) {
	com_genome2d_callbacks_GCallback.call(this,[p_type]);
};
$hxClasses["com.genome2d.callbacks.GCallback1"] = com_genome2d_callbacks_GCallback1;
com_genome2d_callbacks_GCallback1.__name__ = "com.genome2d.callbacks.GCallback1";
com_genome2d_callbacks_GCallback1.__super__ = com_genome2d_callbacks_GCallback;
com_genome2d_callbacks_GCallback1.prototype = $extend(com_genome2d_callbacks_GCallback.prototype,{
	dispatch: function(p_value) {
		this.g2d_iteratingDispatch = 0;
		while(this.g2d_iteratingDispatch < this.g2d_listenerCount) {
			this.g2d_listeners[this.g2d_iteratingDispatch](p_value);
			this.g2d_iteratingDispatch++;
		}
		var onceCount = this.g2d_listenersOnce.length;
		var _g = 0;
		var _g1 = onceCount;
		while(_g < _g1) {
			var i = _g++;
			(this.g2d_listenersOnce.shift())(p_value);
		}
	}
	,__class__: com_genome2d_callbacks_GCallback1
});
var com_genome2d_callbacks_GCallback2 = function(p_type1,p_type2) {
	com_genome2d_callbacks_GCallback.call(this,[p_type1,p_type2]);
};
$hxClasses["com.genome2d.callbacks.GCallback2"] = com_genome2d_callbacks_GCallback2;
com_genome2d_callbacks_GCallback2.__name__ = "com.genome2d.callbacks.GCallback2";
com_genome2d_callbacks_GCallback2.__super__ = com_genome2d_callbacks_GCallback;
com_genome2d_callbacks_GCallback2.prototype = $extend(com_genome2d_callbacks_GCallback.prototype,{
	dispatch: function(p_value1,p_value2) {
		this.g2d_iteratingDispatch = 0;
		while(this.g2d_iteratingDispatch < this.g2d_listenerCount) {
			this.g2d_listeners[this.g2d_iteratingDispatch](p_value1,p_value2);
			this.g2d_iteratingDispatch++;
		}
		var onceCount = this.g2d_listenersOnce.length;
		var _g = 0;
		var _g1 = onceCount;
		while(_g < _g1) {
			var i = _g++;
			(this.g2d_listenersOnce.shift())(p_value1,p_value2);
		}
	}
	,__class__: com_genome2d_callbacks_GCallback2
});
var com_genome2d_callbacks_GCallback3 = function(p_type1,p_type2,p_type3) {
	com_genome2d_callbacks_GCallback.call(this,[p_type1,p_type2,p_type3]);
};
$hxClasses["com.genome2d.callbacks.GCallback3"] = com_genome2d_callbacks_GCallback3;
com_genome2d_callbacks_GCallback3.__name__ = "com.genome2d.callbacks.GCallback3";
com_genome2d_callbacks_GCallback3.__super__ = com_genome2d_callbacks_GCallback;
com_genome2d_callbacks_GCallback3.prototype = $extend(com_genome2d_callbacks_GCallback.prototype,{
	dispatch: function(p_value1,p_value2,p_value3) {
		this.g2d_iteratingDispatch = 0;
		while(this.g2d_iteratingDispatch < this.g2d_listenerCount) {
			this.g2d_listeners[this.g2d_iteratingDispatch](p_value1,p_value2,p_value3);
			this.g2d_iteratingDispatch++;
		}
		var onceCount = this.g2d_listenersOnce.length;
		var _g = 0;
		var _g1 = onceCount;
		while(_g < _g1) {
			var i = _g++;
			(this.g2d_listeners.shift())(p_value1,p_value2,p_value3);
		}
	}
	,__class__: com_genome2d_callbacks_GCallback3
});
var com_genome2d_components_GAnimator = function() {
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.GAnimator"] = com_genome2d_components_GAnimator;
com_genome2d_components_GAnimator.__name__ = "com.genome2d.components.GAnimator";
com_genome2d_components_GAnimator.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_GAnimator.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GAnimator");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GAnimator");
	}
	,__class__: com_genome2d_components_GAnimator
});
var com_genome2d_components_GFrameAnimator = function() {
	this.g2d_currentFrame = -1;
	this.g2d_playing = true;
	this.g2d_endIndex = -1;
	this.g2d_startIndex = -1;
	this.g2d_lastUpdatedFrameId = 0;
	this.g2d_accumulatedTime = 0;
	this.g2d_speed = 33.333333333333336;
	this.reversed = false;
	this.repeatable = true;
	this.timeDilation = 1;
	com_genome2d_components_GAnimator.call(this);
};
$hxClasses["com.genome2d.components.GFrameAnimator"] = com_genome2d_components_GFrameAnimator;
com_genome2d_components_GFrameAnimator.__name__ = "com.genome2d.components.GFrameAnimator";
com_genome2d_components_GFrameAnimator.__super__ = com_genome2d_components_GAnimator;
com_genome2d_components_GFrameAnimator.prototype = $extend(com_genome2d_components_GAnimator.prototype,{
	timeDilation: null
	,repeatable: null
	,reversed: null
	,g2d_speed: null
	,g2d_accumulatedTime: null
	,g2d_lastUpdatedFrameId: null
	,g2d_startIndex: null
	,g2d_endIndex: null
	,g2d_playing: null
	,g2d_sprite: null
	,getSprite: function() {
		if(this.g2d_sprite == null) {
			this.g2d_sprite = this.g2d_node.getComponent(com_genome2d_components_renderable_GSprite);
		}
		return this.g2d_sprite;
	}
	,g2d_frameCount: null
	,get_frameCount: function() {
		return this.g2d_frameCount;
	}
	,g2d_currentFrame: null
	,get_currentFrame: function() {
		return this.g2d_currentFrame;
	}
	,g2d_frameTextures: null
	,set_frameTextures: function(p_value) {
		this.g2d_frameTextures = p_value;
		this.g2d_frameCount = p_value.length;
		this.g2d_currentFrame = 0;
		if(this.g2d_frameTextures.length > 0) {
			this.getSprite().texture = this.g2d_frameTextures[0];
		} else {
			this.getSprite().texture = null;
		}
		return this.g2d_frameTextures;
	}
	,gotoFrame: function(p_frame) {
		if(this.g2d_frameTextures == null) {
			return;
		}
		this.g2d_currentFrame = p_frame;
		this.g2d_currentFrame %= this.g2d_frameCount;
		this.getSprite().texture = this.g2d_frameTextures[this.g2d_currentFrame];
	}
	,gotoAndPlay: function(p_frame) {
		this.gotoFrame(p_frame);
		this.play();
	}
	,gotoAndStop: function(p_frame) {
		this.gotoFrame(p_frame);
		this.stop();
	}
	,stop: function() {
		this.g2d_playing = false;
	}
	,play: function() {
		this.g2d_playing = true;
	}
	,update: function(p_deltaTime) {
		if(this.g2d_playing && this.g2d_frameCount > 1) {
			this.g2d_accumulatedTime += p_deltaTime * this.timeDilation;
			if(this.g2d_accumulatedTime >= this.g2d_speed) {
				this.g2d_currentFrame += this.reversed ? -(this.g2d_accumulatedTime / this.g2d_speed | 0) : this.g2d_accumulatedTime / this.g2d_speed | 0;
				if(this.reversed && this.g2d_currentFrame < 0) {
					if(this.repeatable) {
						this.g2d_currentFrame = this.g2d_frameCount + this.g2d_currentFrame % this.g2d_frameCount;
					} else {
						this.g2d_currentFrame = 0;
						this.g2d_playing = false;
					}
				} else if(!this.reversed && this.g2d_currentFrame >= this.g2d_frameCount) {
					if(this.repeatable) {
						this.g2d_currentFrame %= this.g2d_frameCount;
					} else {
						this.g2d_currentFrame = this.g2d_frameCount - 1;
						this.g2d_playing = false;
					}
				}
				if(this.g2d_sprite == null) {
					this.g2d_sprite = this.g2d_node.getComponent(com_genome2d_components_renderable_GSprite);
				}
				if(this.g2d_sprite != null) {
					this.g2d_sprite.texture = this.g2d_frameTextures[this.g2d_currentFrame];
				}
			}
			this.g2d_accumulatedTime %= this.g2d_speed;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GFrameAnimator");
		return com_genome2d_components_GAnimator.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GAnimator.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GFrameAnimator");
	}
	,__class__: com_genome2d_components_GFrameAnimator
	,__properties__: $extend(com_genome2d_components_GAnimator.prototype.__properties__,{set_frameTextures:"set_frameTextures",get_currentFrame:"get_currentFrame",get_frameCount:"get_frameCount"})
});
var com_genome2d_components_GLevel = function() {
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.GLevel"] = com_genome2d_components_GLevel;
com_genome2d_components_GLevel.__name__ = "com.genome2d.components.GLevel";
com_genome2d_components_GLevel.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_GLevel.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	g2d_parameters: null
	,init: function() {
		this.g2d_parameters = new com_genome2d_globals_GParameters();
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GLevel");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GLevel");
	}
	,__class__: com_genome2d_components_GLevel
});
var com_genome2d_components_GScriptComponent = function() {
	this.g2d_script = null;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.GScriptComponent"] = com_genome2d_components_GScriptComponent;
com_genome2d_components_GScriptComponent.__name__ = "com.genome2d.components.GScriptComponent";
com_genome2d_components_GScriptComponent.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_GScriptComponent.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	g2d_script: null
	,get_script: function() {
		return this.g2d_script;
	}
	,set_script: function(p_value) {
		if(this.g2d_script != null) {
			this.g2d_script.g2d_onInvalidated.remove($bind(this,this.invalidate));
			if(this.g2d_executeUpdate != null) {
				var _this = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_onUpdate.remove($bind(this,this.update_handler));
			}
			if(this.g2d_executeDispose != null) {
				this.g2d_executeDispose();
			}
		}
		this.g2d_script = p_value;
		this.g2d_script.setVariable("node",this.g2d_node);
		this.g2d_script.g2d_onInvalidated.add($bind(this,this.invalidate));
		this.invalidate();
		return this.g2d_script;
	}
	,g2d_executeRender: null
	,g2d_executeInit: null
	,g2d_executeDispose: null
	,g2d_executeUpdate: null
	,onDispose: function() {
		if(this.g2d_executeDispose != null) {
			this.g2d_executeDispose();
		}
	}
	,invalidate: function() {
		if(this.g2d_script != null) {
			this.g2d_executeInit = this.g2d_script.getVariable("init");
			this.g2d_executeDispose = this.g2d_script.getVariable("dispose");
			this.g2d_executeRender = this.g2d_script.getVariable("render");
			this.g2d_executeUpdate = this.g2d_script.getVariable("update");
		}
		if(this.g2d_executeInit != null) {
			this.g2d_executeInit();
		}
		if(this.g2d_executeUpdate != null) {
			var _this = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_onUpdate.add($bind(this,this.update_handler));
		}
	}
	,update_handler: function(p_deltaTime) {
		if(this.g2d_executeUpdate != null) {
			this.g2d_executeUpdate(p_deltaTime);
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GScriptComponent");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GScriptComponent");
	}
	,__class__: com_genome2d_components_GScriptComponent
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_script:"set_script",get_script:"get_script"})
});
var com_genome2d_components_renderable_IGInteractive = function() { };
$hxClasses["com.genome2d.components.renderable.IGInteractive"] = com_genome2d_components_renderable_IGInteractive;
com_genome2d_components_renderable_IGInteractive.__name__ = "com.genome2d.components.renderable.IGInteractive";
com_genome2d_components_renderable_IGInteractive.__isInterface__ = true;
com_genome2d_components_renderable_IGInteractive.prototype = {
	captureMouseInput: null
	,__class__: com_genome2d_components_renderable_IGInteractive
};
var com_genome2d_components_renderable_IGRenderable = function() { };
$hxClasses["com.genome2d.components.renderable.IGRenderable"] = com_genome2d_components_renderable_IGRenderable;
com_genome2d_components_renderable_IGRenderable.__name__ = "com.genome2d.components.renderable.IGRenderable";
com_genome2d_components_renderable_IGRenderable.__isInterface__ = true;
com_genome2d_components_renderable_IGRenderable.__interfaces__ = [com_genome2d_components_renderable_IGInteractive];
com_genome2d_components_renderable_IGRenderable.prototype = {
	render: null
	,getBounds: null
	,hitTest: null
	,__class__: com_genome2d_components_renderable_IGRenderable
};
var com_genome2d_components_renderable_GShape = function() {
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.GShape"] = com_genome2d_components_renderable_GShape;
com_genome2d_components_renderable_GShape.__name__ = "com.genome2d.components.renderable.GShape";
com_genome2d_components_renderable_GShape.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_GShape.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_GShape.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	texture: null
	,blendMode: null
	,g2d_vertices: null
	,g2d_uvs: null
	,g2d_shapeRenderer: null
	,g2d_bounds: null
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
		this.g2d_bounds = new com_genome2d_geom_GRectangle(0,0,0,0);
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.texture == null || this.g2d_vertices == null || this.g2d_uvs == null) {
			return;
		}
		if(this.g2d_shapeRenderer == null) {
			var _this = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_context.drawPoly(this.texture,this.blendMode,this.g2d_vertices,this.g2d_uvs,this.g2d_node.g2d_worldX,this.g2d_node.g2d_worldY,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,null);
		} else {
			var _this1 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_context.setRenderer(this.g2d_shapeRenderer);
			this.g2d_shapeRenderer.draw(this.texture);
		}
	}
	,setup: function(p_vertices,p_uvs,p_calculateBounds) {
		if(p_calculateBounds == null) {
			p_calculateBounds = true;
		}
		if(p_vertices == null || p_uvs == null) {
			var p_arg1 = "Vertices and UVs can't be null.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/GShape.hx", lineNumber : 50, className : "com.genome2d.components.renderable.GShape", methodName : "setup"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_vertices.length == 0) {
			var p_arg110 = "Shape can't have 0 vertices.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/GShape.hx", lineNumber : 51, className : "com.genome2d.components.renderable.GShape", methodName : "setup"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		if(p_vertices.length != p_uvs.length) {
			var p_arg112 = "Vertices and UVs need to have same amount of values.";
			var p_arg22 = null;
			var p_arg32 = null;
			var p_arg42 = null;
			var p_arg52 = null;
			var p_arg62 = null;
			var p_arg72 = null;
			var p_arg82 = null;
			var p_arg92 = null;
			var p_arg102 = null;
			var p_arg113 = null;
			var p_arg122 = null;
			var p_arg132 = null;
			var p_arg142 = null;
			var p_arg152 = null;
			var p_arg162 = null;
			var p_arg172 = null;
			var p_arg182 = null;
			var p_arg192 = null;
			var p_arg202 = null;
			var pos2 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/GShape.hx", lineNumber : 52, className : "com.genome2d.components.renderable.GShape", methodName : "setup"};
			var args2 = [];
			if(p_arg112 != null) {
				args2.push(p_arg112);
			}
			if(p_arg22 != null) {
				args2.push(p_arg22);
			}
			if(p_arg32 != null) {
				args2.push(p_arg32);
			}
			if(p_arg42 != null) {
				args2.push(p_arg42);
			}
			if(p_arg52 != null) {
				args2.push(p_arg52);
			}
			if(p_arg62 != null) {
				args2.push(p_arg62);
			}
			if(p_arg72 != null) {
				args2.push(p_arg72);
			}
			if(p_arg82 != null) {
				args2.push(p_arg82);
			}
			if(p_arg92 != null) {
				args2.push(p_arg92);
			}
			if(p_arg102 != null) {
				args2.push(p_arg102);
			}
			if(p_arg113 != null) {
				args2.push(p_arg113);
			}
			if(p_arg122 != null) {
				args2.push(p_arg122);
			}
			if(p_arg132 != null) {
				args2.push(p_arg132);
			}
			if(p_arg142 != null) {
				args2.push(p_arg142);
			}
			if(p_arg152 != null) {
				args2.push(p_arg152);
			}
			if(p_arg162 != null) {
				args2.push(p_arg162);
			}
			if(p_arg172 != null) {
				args2.push(p_arg172);
			}
			if(p_arg182 != null) {
				args2.push(p_arg182);
			}
			if(p_arg192 != null) {
				args2.push(p_arg192);
			}
			if(p_arg202 != null) {
				args2.push(p_arg202);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos2,args2);
			}
			var msg2 = "ERROR: ";
			if(pos2 != null) {
				msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
			}
			if(args2.length > 0) {
				msg2 += args2.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg2;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg2);
			}
			throw new js__$Boot_HaxeError(msg2);
		}
		this.g2d_vertices = p_vertices;
		if(p_calculateBounds) {
			var _g = 0;
			var _g1 = this.g2d_vertices.length >> 1;
			while(_g < _g1) {
				var i = _g++;
				var vx = this.g2d_vertices[i * 2];
				var vy = this.g2d_vertices[i * 2 + 1];
				if(vx < this.g2d_bounds.get_left()) {
					this.g2d_bounds.set_left(vx);
				}
				if(vx > this.g2d_bounds.get_right()) {
					this.g2d_bounds.set_right(vx);
				}
				if(vy < this.g2d_bounds.get_top()) {
					this.g2d_bounds.set_top(vy);
				}
				if(vy > this.g2d_bounds.get_bottom()) {
					this.g2d_bounds.set_bottom(vy);
				}
			}
		}
		this.g2d_uvs = p_uvs;
	}
	,cache: function() {
	}
	,getBounds: function(p_bounds) {
		if(p_bounds != null) {
			p_bounds.setTo(this.g2d_bounds.x,this.g2d_bounds.y,this.g2d_bounds.width,this.g2d_bounds.height);
		} else {
			p_bounds = this.g2d_bounds.clone();
		}
		return p_bounds;
	}
	,captureMouseInput: function(p_input) {
		p_input.captured = p_input.captured || this.hitTest(p_input.localX,p_input.localY);
	}
	,hitTest: function(p_x,p_y) {
		var hit = this.g2d_bounds.contains(p_x,p_y);
		return hit;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GShape");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GShape");
	}
	,__class__: com_genome2d_components_renderable_GShape
});
var com_genome2d_components_renderable_GTiledSprite = function() {
	this.g2d_height = 110;
	this.g2d_width = 110;
	this.ignoreMatrix = true;
	this.mousePixelTreshold = 0;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.GTiledSprite"] = com_genome2d_components_renderable_GTiledSprite;
com_genome2d_components_renderable_GTiledSprite.__name__ = "com.genome2d.components.renderable.GTiledSprite";
com_genome2d_components_renderable_GTiledSprite.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_GTiledSprite.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_GTiledSprite.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	blendMode: null
	,mousePixelTreshold: null
	,texture: null
	,filter: null
	,ignoreMatrix: null
	,g2d_width: null
	,get_width: function() {
		return this.g2d_width;
	}
	,set_width: function(p_value) {
		return this.g2d_width = p_value;
	}
	,g2d_height: null
	,get_height: function() {
		return this.g2d_height;
	}
	,set_height: function(p_value) {
		return this.g2d_height = p_value;
	}
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.texture == null) {
			return;
		}
		var sin = 0;
		var cos = 1;
		if(this.g2d_node.g2d_worldRotation != 0) {
			sin = Math.sin(this.g2d_node.g2d_worldRotation);
			cos = Math.cos(this.g2d_node.g2d_worldRotation);
		}
		var _this = this.texture;
		var ix = Math.ceil(this.g2d_width / (_this.g2d_nativeWidth * _this.g2d_scaleFactor));
		var _this1 = this.texture;
		var iy = Math.ceil(this.g2d_height / (_this1.g2d_nativeHeight * _this1.g2d_scaleFactor));
		var w = this.texture.g2d_region.width;
		var h = this.texture.g2d_region.height;
		var cw = w;
		var ch = h;
		var cx = 0;
		var cy = 0;
		var _g = 0;
		var _g1 = iy;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g11 = ix;
			while(_g2 < _g11) {
				var i = _g2++;
				var cw1;
				if(i == ix - 1) {
					var _this2 = this.texture;
					cw1 = this.g2d_width % (_this2.g2d_nativeWidth * _this2.g2d_scaleFactor) != 0;
				} else {
					cw1 = false;
				}
				if(cw1) {
					var _this3 = this.texture;
					var _this4 = this.texture;
					cw = w * (this.g2d_width % (_this3.g2d_nativeWidth * _this3.g2d_scaleFactor)) / (_this4.g2d_nativeWidth * _this4.g2d_scaleFactor);
				} else {
					cw = w;
				}
				var ch1;
				if(j == iy - 1) {
					var _this5 = this.texture;
					ch1 = this.g2d_height % (_this5.g2d_nativeHeight * _this5.g2d_scaleFactor) != 0;
				} else {
					ch1 = false;
				}
				if(ch1) {
					var _this6 = this.texture;
					var _this7 = this.texture;
					ch = h * (this.g2d_height % (_this6.g2d_nativeHeight * _this6.g2d_scaleFactor)) / (_this7.g2d_nativeHeight * _this7.g2d_scaleFactor);
				} else {
					ch = h;
				}
				var _this8 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.drawSource(this.texture,this.blendMode,this.texture.g2d_region.x,this.texture.g2d_region.y,cw,ch,-cw * .5,-ch * .5,this.g2d_node.g2d_worldX + cx * cos - cy * sin,this.g2d_node.g2d_worldY + cy * cos + cx * sin,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
				cx += cw * this.g2d_node.g2d_worldScaleX;
			}
			cx = 0;
			cy += ch * this.g2d_node.g2d_worldScaleY;
		}
	}
	,captureMouseInput: function(p_input) {
	}
	,getBounds: function(p_bounds) {
		if(this.texture == null) {
			if(p_bounds != null) {
				p_bounds.setTo(0,0,0,0);
			} else {
				p_bounds = new com_genome2d_geom_GRectangle(0,0,0,0);
			}
		} else if(p_bounds != null) {
			p_bounds.setTo(0,0,this.g2d_width,this.g2d_height);
		} else {
			p_bounds = new com_genome2d_geom_GRectangle(0,0,this.g2d_width,this.g2d_height);
		}
		return p_bounds;
	}
	,hitTest: function(p_x,p_y) {
		return false;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTiledSprite");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTiledSprite");
	}
	,__class__: com_genome2d_components_renderable_GTiledSprite
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var com_genome2d_components_renderable_GSlice3Sprite = function() {
	com_genome2d_components_renderable_GTiledSprite.call(this);
};
$hxClasses["com.genome2d.components.renderable.GSlice3Sprite"] = com_genome2d_components_renderable_GSlice3Sprite;
com_genome2d_components_renderable_GSlice3Sprite.__name__ = "com.genome2d.components.renderable.GSlice3Sprite";
com_genome2d_components_renderable_GSlice3Sprite.__super__ = com_genome2d_components_renderable_GTiledSprite;
com_genome2d_components_renderable_GSlice3Sprite.prototype = $extend(com_genome2d_components_renderable_GTiledSprite.prototype,{
	texture1: null
	,texture2: null
	,texture3: null
	,render: function(p_camera,p_useMatrix) {
		var sin = 0;
		var cos = 1;
		if(this.g2d_node.g2d_worldRotation != 0) {
			sin = Math.sin(this.g2d_node.g2d_worldRotation);
			cos = Math.cos(this.g2d_node.g2d_worldRotation);
		}
		var _this = this.texture1;
		var ix = Math.ceil(this.g2d_width / (_this.g2d_nativeWidth * _this.g2d_scaleFactor));
		var _this1 = this.texture1;
		var iy = Math.ceil(this.g2d_height / (_this1.g2d_nativeHeight * _this1.g2d_scaleFactor));
		var w = this.texture1.g2d_region.width;
		var h = this.texture1.g2d_region.height;
		var cw = w;
		var ch = h;
		var cx = 0;
		var cy = 0;
		var _g = 0;
		var _g1 = iy;
		while(_g < _g1) {
			var j = _g++;
			var _g2 = 0;
			var _g11 = ix;
			while(_g2 < _g11) {
				var i = _g2++;
				if(i == 0) {
					this.texture = this.texture1;
				} else if(i == ix - 1) {
					this.texture = this.texture3;
				} else {
					this.texture = this.texture2;
				}
				var cw1;
				if(i == ix - 2 && i != 0) {
					var _this2 = this.texture;
					cw1 = this.g2d_width % (_this2.g2d_nativeWidth * _this2.g2d_scaleFactor) != 0;
				} else {
					cw1 = false;
				}
				if(cw1) {
					var _this3 = this.texture;
					var _this4 = this.texture;
					cw = w * (this.g2d_width % (_this3.g2d_nativeWidth * _this3.g2d_scaleFactor)) / (_this4.g2d_nativeWidth * _this4.g2d_scaleFactor);
				} else {
					cw = w;
				}
				var ch1;
				if(j == iy - 1) {
					var _this5 = this.texture;
					ch1 = this.g2d_height % (_this5.g2d_nativeHeight * _this5.g2d_scaleFactor) != 0;
				} else {
					ch1 = false;
				}
				if(ch1) {
					var _this6 = this.texture;
					var _this7 = this.texture;
					ch = h * (this.g2d_height % (_this6.g2d_nativeHeight * _this6.g2d_scaleFactor)) / (_this7.g2d_nativeHeight * _this7.g2d_scaleFactor);
				} else {
					ch = h;
				}
				var _this8 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.drawSource(this.texture,this.blendMode,this.texture.g2d_region.x,this.texture.g2d_region.y,cw,ch,-cw * .5,-ch * .5,this.g2d_node.g2d_worldX + cx * cos - cy * sin,this.g2d_node.g2d_worldY + cy * cos + cx * sin,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
				cx += cw * this.g2d_node.g2d_worldScaleX;
			}
			cx = 0;
			cy += ch * this.g2d_node.g2d_worldScaleY;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GSlice3Sprite");
		return com_genome2d_components_renderable_GTiledSprite.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_renderable_GTiledSprite.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GSlice3Sprite");
	}
	,__class__: com_genome2d_components_renderable_GSlice3Sprite
});
var com_genome2d_components_renderable_GSliceSprite = function() {
	this.g2d_height = 110;
	this.g2d_width = 110;
	this.ignoreMatrix = true;
	this.mousePixelTreshold = 0;
	this.mousePixelEnabled = false;
	this.blendMode = 1;
	this.tiled = false;
	this.sliceBottom = 0;
	this.sliceRight = 0;
	this.sliceTop = 0;
	this.sliceLeft = 0;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.GSliceSprite"] = com_genome2d_components_renderable_GSliceSprite;
com_genome2d_components_renderable_GSliceSprite.__name__ = "com.genome2d.components.renderable.GSliceSprite";
com_genome2d_components_renderable_GSliceSprite.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_GSliceSprite.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_GSliceSprite.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	sliceLeft: null
	,sliceTop: null
	,sliceRight: null
	,sliceBottom: null
	,tiled: null
	,blendMode: null
	,mousePixelEnabled: null
	,mousePixelTreshold: null
	,texture: null
	,filter: null
	,ignoreMatrix: null
	,g2d_width: null
	,get_width: function() {
		return this.g2d_width;
	}
	,set_width: function(p_value) {
		return this.g2d_width = p_value;
	}
	,g2d_height: null
	,get_height: function() {
		return this.g2d_height;
	}
	,set_height: function(p_value) {
		return this.g2d_height = p_value;
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.texture != null) {
			var _this = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			var context = com_genome2d_node_GNode.g2d_core.g2d_context;
			var _this1 = this.texture;
			var finalScaleX = this.g2d_width / (_this1.g2d_nativeWidth * _this1.g2d_scaleFactor);
			var _this2 = this.texture;
			var finalScaleY = this.g2d_height / (_this2.g2d_nativeHeight * _this2.g2d_scaleFactor);
			var scaleX = 1;
			var scaleY = 1;
			var left = this.g2d_node.g2d_worldX;
			var top = this.g2d_node.g2d_worldY;
			var rotation = this.g2d_node.g2d_worldRotation;
			var red = this.g2d_node.g2d_worldRed;
			var green = this.g2d_node.g2d_worldGreen;
			var blue = this.g2d_node.g2d_worldBlue;
			var alpha = this.g2d_node.g2d_worldAlpha;
			var sl = this.sliceLeft > this.texture.g2d_nativeWidth ? this.texture.g2d_nativeWidth : this.sliceLeft < 0 ? 0 : this.sliceLeft;
			var st = this.sliceTop > this.texture.g2d_nativeHeight ? this.texture.g2d_nativeHeight : this.sliceTop < 0 ? 0 : this.sliceTop;
			var sr = this.sliceRight > this.texture.g2d_nativeWidth ? this.texture.g2d_nativeWidth : this.sliceRight < this.sliceLeft ? this.sliceRight >= 0 ? this.sliceLeft : this.texture.g2d_nativeWidth + this.sliceRight : this.sliceRight;
			var sb = this.sliceBottom > this.texture.g2d_nativeHeight ? this.texture.g2d_nativeHeight : this.sliceBottom < this.sliceTop ? this.sliceBottom >= 0 ? this.sliceTop : this.texture.g2d_nativeHeight + this.sliceBottom : this.sliceBottom;
			var sw = sr - sl;
			var sh = sb - st;
			if(sw == 0 && sh != 0) {
				sw = this.texture.g2d_nativeWidth;
				sr = sw;
			}
			if(sh == 0 && sw != 0) {
				sh = this.texture.g2d_nativeHeight;
				sb = sh;
			}
			if(sw == 0 || sh == 0) {
				if(this.tiled) {
					var rx = this.texture.g2d_u * this.texture.g2d_gpuWidth;
					var ry = this.texture.g2d_v * this.texture.g2d_gpuHeight;
					var _this3 = this.texture;
					var _this4 = this.texture;
					var x = left + (.5 * (_this3.g2d_nativeWidth * _this3.g2d_scaleFactor) + _this4.g2d_pivotX * _this4.g2d_scaleFactor);
					var _this5 = this.texture;
					var _this6 = this.texture;
					var y = top + (.5 * (_this5.g2d_nativeHeight * _this5.g2d_scaleFactor) + _this6.g2d_pivotY * _this6.g2d_scaleFactor);
					finalScaleX /= scaleX;
					finalScaleY /= scaleY;
					var _g = 0;
					var _g1 = Math.ceil(finalScaleX);
					while(_g < _g1) {
						var i = _g++;
						var _g2 = 0;
						var _g11 = Math.ceil(finalScaleY);
						while(_g2 < _g11) {
							var j = _g2++;
							var sx = finalScaleX - i > 1 ? 1 : finalScaleX - i;
							var sy = finalScaleY - j > 1 ? 1 : finalScaleY - j;
							var _this7 = this.texture;
							var px = this.texture.g2d_nativeWidth / 2 + _this7.g2d_pivotX * _this7.g2d_scaleFactor - sx * scaleX * this.texture.g2d_nativeWidth / 2;
							var _this8 = this.texture;
							var py = this.texture.g2d_nativeHeight / 2 + _this8.g2d_pivotY * _this8.g2d_scaleFactor - sy * scaleY * this.texture.g2d_nativeHeight / 2;
							var _this9 = this.texture;
							var _this10 = this.texture;
							context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx,ry,sx * this.texture.g2d_nativeWidth,sy * this.texture.g2d_nativeHeight,0,0,x + i * (_this9.g2d_nativeWidth * _this9.g2d_scaleFactor) * scaleX - px,y + j * (_this10.g2d_nativeHeight * _this10.g2d_scaleFactor) * scaleY - py,scaleX,scaleY,rotation,red,green,blue,alpha,null);
						}
					}
				} else {
					var _this11 = this.texture;
					var _this12 = this.texture;
					var x1 = left + (.5 * (_this11.g2d_nativeWidth * _this11.g2d_scaleFactor) + _this12.g2d_pivotX * _this12.g2d_scaleFactor) * finalScaleX;
					var _this13 = this.texture;
					var _this14 = this.texture;
					var y1 = top + (.5 * (_this13.g2d_nativeHeight * _this13.g2d_scaleFactor) + _this14.g2d_pivotY * _this14.g2d_scaleFactor) * finalScaleY;
					context.draw(this.texture,com_genome2d_context_GBlendMode.NORMAL,x1,y1,finalScaleX,finalScaleY,rotation,red,green,blue,alpha,null);
				}
			} else {
				var rx1 = this.texture.g2d_u * this.texture.g2d_gpuWidth;
				var ry1 = this.texture.g2d_v * this.texture.g2d_gpuHeight;
				var _this15 = this.texture;
				var finalScaleX1 = (this.g2d_width - _this15.g2d_nativeWidth * _this15.g2d_scaleFactor * scaleX) / (sw * this.texture.g2d_scaleFactor) + scaleX;
				var _this16 = this.texture;
				var finalScaleY1 = (this.g2d_height - _this16.g2d_nativeHeight * _this16.g2d_scaleFactor * scaleY) / (sh * this.texture.g2d_scaleFactor) + scaleY;
				var tx = 0;
				var ty = 0;
				var tw = sl;
				var th = st;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left,top,scaleX,scaleY,0,red,green,blue,alpha,null);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + sl * this.texture.g2d_scaleFactor * scaleX,top,finalScaleX1,scaleY,0,red,green,blue,alpha,null);
				}
				tx = sr;
				var _this17 = this.texture;
				tw = _this17.g2d_nativeWidth * _this17.g2d_scaleFactor / this.texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + (sl * scaleX + sw * finalScaleX1) * this.texture.g2d_scaleFactor,top,scaleX,scaleY,0,red,green,blue,alpha,null);
				}
				tx = 0;
				ty = st;
				tw = sl;
				th = sh;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left,top + st * this.texture.g2d_scaleFactor * scaleY,scaleX,finalScaleY1,0,red,green,blue,alpha,null);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + sl * this.texture.g2d_scaleFactor * scaleX,top + st * this.texture.g2d_scaleFactor * scaleY,finalScaleX1,finalScaleY1,0,red,green,blue,alpha,null);
				}
				tx = sr;
				var _this18 = this.texture;
				tw = _this18.g2d_nativeWidth * _this18.g2d_scaleFactor / this.texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + (sl * scaleX + sw * finalScaleX1) * this.texture.g2d_scaleFactor,top + st * this.texture.g2d_scaleFactor * scaleY,scaleX,finalScaleY1,0,red,green,blue,alpha,null);
				}
				tx = 0;
				ty = sb;
				tw = sl;
				th = this.texture.g2d_nativeHeight - sb;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left,top + (st * scaleY + sh * finalScaleY1) * this.texture.g2d_scaleFactor,scaleX,scaleY,0,red,green,blue,alpha,null);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + sl * this.texture.g2d_scaleFactor * scaleX,top + (st * scaleY + sh * finalScaleY1) * this.texture.g2d_scaleFactor,finalScaleX1,scaleY,0,red,green,blue,alpha,null);
				}
				tx = sr;
				var _this19 = this.texture;
				tw = _this19.g2d_nativeWidth * _this19.g2d_scaleFactor / this.texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					context.drawSource(this.texture,com_genome2d_context_GBlendMode.NORMAL,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,left + (sl * scaleX + sw * finalScaleX1) * this.texture.g2d_scaleFactor,top + (st * scaleY + sh * finalScaleY1) * this.texture.g2d_scaleFactor,scaleX,scaleY,0,red,green,blue,alpha,null);
				}
			}
		}
	}
	,captureMouseInput: function(p_input) {
		var tmp;
		if(!p_input.captured) {
			var p_x = p_input.localX;
			var p_y = p_input.localY;
			var hit = false;
			if(this.texture != null) {
				p_x = p_x * this.g2d_node.g2d_worldScaleX / this.g2d_width;
				p_y = p_y * this.g2d_node.g2d_worldScaleY / this.g2d_height;
				if(p_x >= 0 && p_x <= 1 && p_y >= 0 && p_y <= 1) {
					if(!(!this.mousePixelEnabled)) {
						var _this = this.texture;
						var _this1 = this.texture;
						var _this2 = this.texture;
						var _this3 = this.texture;
						var a = this.texture.getAlphaAtUV(p_x + _this.g2d_pivotX * _this.g2d_scaleFactor / (_this1.g2d_nativeWidth * _this1.g2d_scaleFactor),p_y + _this2.g2d_pivotY * _this2.g2d_scaleFactor / (_this3.g2d_nativeHeight * _this3.g2d_scaleFactor));
						hit = _$UInt_UInt_$Impl_$.gte(this.mousePixelTreshold,a);
					} else {
						hit = true;
					}
				} else {
					hit = false;
				}
			}
			tmp = hit;
		} else {
			tmp = true;
		}
		p_input.captured = tmp;
	}
	,hitTest: function(p_x,p_y) {
		var hit = false;
		if(this.texture != null) {
			p_x = p_x * this.g2d_node.g2d_worldScaleX / this.g2d_width;
			p_y = p_y * this.g2d_node.g2d_worldScaleY / this.g2d_height;
			if(p_x >= 0 && p_x <= 1 && p_y >= 0 && p_y <= 1) {
				if(!(!this.mousePixelEnabled)) {
					var _this = this.texture;
					var _this1 = this.texture;
					var _this2 = this.texture;
					var _this3 = this.texture;
					var a = this.texture.getAlphaAtUV(p_x + _this.g2d_pivotX * _this.g2d_scaleFactor / (_this1.g2d_nativeWidth * _this1.g2d_scaleFactor),p_y + _this2.g2d_pivotY * _this2.g2d_scaleFactor / (_this3.g2d_nativeHeight * _this3.g2d_scaleFactor));
					hit = _$UInt_UInt_$Impl_$.gte(this.mousePixelTreshold,a);
				} else {
					hit = true;
				}
			} else {
				hit = false;
			}
		}
		return hit;
	}
	,getBounds: function(p_bounds) {
		if(this.texture == null) {
			if(p_bounds != null) {
				p_bounds.setTo(0,0,0,0);
			} else {
				p_bounds = new com_genome2d_geom_GRectangle(0,0,0,0);
			}
		} else if(p_bounds != null) {
			p_bounds.setTo(0,0,this.g2d_width,this.g2d_height);
		} else {
			p_bounds = new com_genome2d_geom_GRectangle(0,0,this.g2d_width,this.g2d_height);
		}
		return p_bounds;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GSliceSprite");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GSliceSprite");
	}
	,__class__: com_genome2d_components_renderable_GSliceSprite
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"})
});
var com_genome2d_components_renderable_GTexturedQuad = function() {
	this.ignoreMatrix = false;
	this.mousePixelTreshold = 0;
	this.mousePixelEnabled = false;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.GTexturedQuad"] = com_genome2d_components_renderable_GTexturedQuad;
com_genome2d_components_renderable_GTexturedQuad.__name__ = "com.genome2d.components.renderable.GTexturedQuad";
com_genome2d_components_renderable_GTexturedQuad.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_GTexturedQuad.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_GTexturedQuad.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	blendMode: null
	,mousePixelEnabled: null
	,mousePixelTreshold: null
	,texture: null
	,filter: null
	,ignoreMatrix: null
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.texture != null) {
			if(p_useMatrix && !this.ignoreMatrix) {
				var _this = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				var matrix = com_genome2d_node_GNode.g2d_core.g2d_renderMatrix;
				var _this1 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.drawMatrix(this.texture,this.blendMode,matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
			} else {
				var _this2 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.draw(this.texture,this.blendMode,this.g2d_node.g2d_worldX,this.g2d_node.g2d_worldY,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
			}
		}
	}
	,hitTest: function(p_x,p_y) {
		var hit = false;
		if(this.texture != null) {
			var _this = this.texture;
			p_x = p_x / (_this.g2d_nativeWidth * _this.g2d_scaleFactor) + .5;
			var _this1 = this.texture;
			p_y = p_y / (_this1.g2d_nativeHeight * _this1.g2d_scaleFactor) + .5;
			var hit1;
			var hit2;
			var hit3;
			var _this2 = this.texture;
			var _this3 = this.texture;
			if(p_x >= -(_this2.g2d_pivotX * _this2.g2d_scaleFactor) / (_this3.g2d_nativeWidth * _this3.g2d_scaleFactor)) {
				var _this4 = this.texture;
				var _this5 = this.texture;
				hit3 = p_x <= 1 - _this4.g2d_pivotX * _this4.g2d_scaleFactor / (_this5.g2d_nativeWidth * _this5.g2d_scaleFactor);
			} else {
				hit3 = false;
			}
			if(hit3) {
				var _this6 = this.texture;
				var _this7 = this.texture;
				hit2 = p_y >= -(_this6.g2d_pivotY * _this6.g2d_scaleFactor) / (_this7.g2d_nativeHeight * _this7.g2d_scaleFactor);
			} else {
				hit2 = false;
			}
			if(hit2) {
				var _this8 = this.texture;
				var _this9 = this.texture;
				hit1 = p_y <= 1 - _this8.g2d_pivotY * _this8.g2d_scaleFactor / (_this9.g2d_nativeHeight * _this9.g2d_scaleFactor);
			} else {
				hit1 = false;
			}
			if(hit1) {
				if(!(!this.mousePixelEnabled)) {
					var _this10 = this.texture;
					var _this11 = this.texture;
					var _this12 = this.texture;
					var _this13 = this.texture;
					var a = this.texture.getAlphaAtUV(p_x + _this10.g2d_pivotX * _this10.g2d_scaleFactor / (_this11.g2d_nativeWidth * _this11.g2d_scaleFactor),p_y + _this12.g2d_pivotY * _this12.g2d_scaleFactor / (_this13.g2d_nativeHeight * _this13.g2d_scaleFactor));
					hit = _$UInt_UInt_$Impl_$.gte(this.mousePixelTreshold,a);
				} else {
					hit = true;
				}
			} else {
				hit = false;
			}
		}
		return hit;
	}
	,captureMouseInput: function(p_input) {
		var tmp;
		if(!p_input.captured) {
			var p_x = p_input.localX;
			var p_y = p_input.localY;
			var hit = false;
			if(this.texture != null) {
				var _this = this.texture;
				p_x = p_x / (_this.g2d_nativeWidth * _this.g2d_scaleFactor) + .5;
				var _this1 = this.texture;
				p_y = p_y / (_this1.g2d_nativeHeight * _this1.g2d_scaleFactor) + .5;
				var hit1;
				var hit2;
				var hit3;
				var _this2 = this.texture;
				var _this3 = this.texture;
				if(p_x >= -(_this2.g2d_pivotX * _this2.g2d_scaleFactor) / (_this3.g2d_nativeWidth * _this3.g2d_scaleFactor)) {
					var _this4 = this.texture;
					var _this5 = this.texture;
					hit3 = p_x <= 1 - _this4.g2d_pivotX * _this4.g2d_scaleFactor / (_this5.g2d_nativeWidth * _this5.g2d_scaleFactor);
				} else {
					hit3 = false;
				}
				if(hit3) {
					var _this6 = this.texture;
					var _this7 = this.texture;
					hit2 = p_y >= -(_this6.g2d_pivotY * _this6.g2d_scaleFactor) / (_this7.g2d_nativeHeight * _this7.g2d_scaleFactor);
				} else {
					hit2 = false;
				}
				if(hit2) {
					var _this8 = this.texture;
					var _this9 = this.texture;
					hit1 = p_y <= 1 - _this8.g2d_pivotY * _this8.g2d_scaleFactor / (_this9.g2d_nativeHeight * _this9.g2d_scaleFactor);
				} else {
					hit1 = false;
				}
				if(hit1) {
					if(!(!this.mousePixelEnabled)) {
						var _this10 = this.texture;
						var _this11 = this.texture;
						var _this12 = this.texture;
						var _this13 = this.texture;
						var a = this.texture.getAlphaAtUV(p_x + _this10.g2d_pivotX * _this10.g2d_scaleFactor / (_this11.g2d_nativeWidth * _this11.g2d_scaleFactor),p_y + _this12.g2d_pivotY * _this12.g2d_scaleFactor / (_this13.g2d_nativeHeight * _this13.g2d_scaleFactor));
						hit = _$UInt_UInt_$Impl_$.gte(this.mousePixelTreshold,a);
					} else {
						hit = true;
					}
				} else {
					hit = false;
				}
			}
			tmp = hit;
		} else {
			tmp = true;
		}
		p_input.captured = tmp;
	}
	,getBounds: function(p_bounds) {
		if(this.texture == null) {
			if(p_bounds != null) {
				p_bounds.setTo(0,0,0,0);
			} else {
				p_bounds = new com_genome2d_geom_GRectangle(0,0,0,0);
			}
		} else if(p_bounds != null) {
			var _this = this.texture;
			var _this1 = this.texture;
			var _this2 = this.texture;
			var _this3 = this.texture;
			var _this4 = this.texture;
			var _this5 = this.texture;
			p_bounds.setTo(-(_this.g2d_nativeWidth * _this.g2d_scaleFactor) * .5 - _this1.g2d_pivotX * _this1.g2d_scaleFactor,-(_this2.g2d_nativeHeight * _this2.g2d_scaleFactor) * .5 - _this3.g2d_pivotY * _this3.g2d_scaleFactor,_this4.g2d_nativeWidth * _this4.g2d_scaleFactor,_this5.g2d_nativeHeight * _this5.g2d_scaleFactor);
		} else {
			var _this6 = this.texture;
			var _this7 = this.texture;
			var _this8 = this.texture;
			var _this9 = this.texture;
			var _this10 = this.texture;
			var _this11 = this.texture;
			p_bounds = new com_genome2d_geom_GRectangle(-(_this6.g2d_nativeWidth * _this6.g2d_scaleFactor) * .5 - _this7.g2d_pivotX * _this7.g2d_scaleFactor,-(_this8.g2d_nativeHeight * _this8.g2d_scaleFactor) * .5 - _this9.g2d_pivotY * _this9.g2d_scaleFactor,_this10.g2d_nativeWidth * _this10.g2d_scaleFactor,_this11.g2d_nativeHeight * _this11.g2d_scaleFactor);
		}
		return p_bounds;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTexturedQuad");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTexturedQuad");
	}
	,__class__: com_genome2d_components_renderable_GTexturedQuad
});
var com_genome2d_components_renderable_GSprite = function() {
	com_genome2d_components_renderable_GTexturedQuad.call(this);
};
$hxClasses["com.genome2d.components.renderable.GSprite"] = com_genome2d_components_renderable_GSprite;
com_genome2d_components_renderable_GSprite.__name__ = "com.genome2d.components.renderable.GSprite";
com_genome2d_components_renderable_GSprite.create = function(p_node,p_texture,p_x,p_y,p_rotation,p_scaleX,p_scaleY) {
	if(p_scaleY == null) {
		p_scaleY = 1;
	}
	if(p_scaleX == null) {
		p_scaleX = 1;
	}
	if(p_rotation == null) {
		p_rotation = 0;
	}
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	var sprite = p_node == null ? com_genome2d_node_GNode.createWithComponent(com_genome2d_components_renderable_GSprite) : p_node.addComponent(com_genome2d_components_renderable_GSprite);
	sprite.texture = p_texture;
	sprite.g2d_node.setPosition(p_x,p_y);
	var _this = sprite.g2d_node;
	if(_this.g2d_localRotation == 0 && p_rotation != 0 && _this.g2d_localScaleX != _this.g2d_localScaleY && _this.g2d_childCount > 0) {
		var _g = _this;
		var p_value = _g.g2d_localUseMatrix + 1;
		if(_g.g2d_parent != null) {
			var _g1 = _g.g2d_parent;
			var p_value1 = _g1.g2d_localUseMatrix + (p_value - _g.g2d_localUseMatrix);
			if(_g1.g2d_parent != null) {
				var _g2 = _g1.g2d_parent;
				_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value1 - _g1.g2d_localUseMatrix));
			}
			_g1.g2d_localUseMatrix = p_value1;
		}
		_g.g2d_localUseMatrix = p_value;
	}
	if(_this.g2d_localRotation != 0 && p_rotation == 0 && _this.g2d_localScaleX != _this.g2d_localScaleY && _this.g2d_childCount > 0) {
		var _g3 = _this;
		var p_value2 = _g3.g2d_localUseMatrix - 1;
		if(_g3.g2d_parent != null) {
			var _g4 = _g3.g2d_parent;
			var p_value3 = _g4.g2d_localUseMatrix + (p_value2 - _g3.g2d_localUseMatrix);
			if(_g4.g2d_parent != null) {
				var _g5 = _g4.g2d_parent;
				_g5.set_g2d_useMatrix(_g5.g2d_localUseMatrix + (p_value3 - _g4.g2d_localUseMatrix));
			}
			_g4.g2d_localUseMatrix = p_value3;
		}
		_g3.g2d_localUseMatrix = p_value2;
	}
	_this.g2d_transformDirty = _this.g2d_matrixDirty = true;
	_this.g2d_localRotation = _this.g2d_worldRotation = p_rotation;
	sprite.g2d_node.setScale(p_scaleX,p_scaleY);
	return sprite;
};
com_genome2d_components_renderable_GSprite.__super__ = com_genome2d_components_renderable_GTexturedQuad;
com_genome2d_components_renderable_GSprite.prototype = $extend(com_genome2d_components_renderable_GTexturedQuad.prototype,{
	frameAnimation: null
	,init: function() {
		com_genome2d_components_renderable_GTexturedQuad.prototype.init.call(this);
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.frameAnimation != null) {
			var _this = this.frameAnimation;
			var _this1 = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			if(_this.g2d_playing && _this.g2d_frameCount > 1) {
				_this.g2d_accumulatedTime += com_genome2d_node_GNode.g2d_core.g2d_currentFrameDeltaTime * _this.timeDilation;
				if(_this.g2d_accumulatedTime >= _this.g2d_speed) {
					_this.g2d_currentFrame += _this.reversed ? -(_this.g2d_accumulatedTime / _this.g2d_speed | 0) : _this.g2d_accumulatedTime / _this.g2d_speed | 0;
					if(_this.reversed && _this.g2d_currentFrame < 0) {
						if(_this.repeatable) {
							_this.g2d_currentFrame = _this.g2d_frameCount + _this.g2d_currentFrame % _this.g2d_frameCount;
						} else {
							_this.g2d_currentFrame = 0;
							_this.g2d_playing = false;
						}
					} else if(!_this.reversed && _this.g2d_currentFrame >= _this.g2d_frameCount) {
						if(_this.repeatable) {
							_this.g2d_currentFrame %= _this.g2d_frameCount;
						} else {
							_this.g2d_currentFrame = _this.g2d_frameCount - 1;
							_this.g2d_playing = false;
						}
					}
					_this.currentFrameTexture = _this.g2d_frameTextures[_this.g2d_currentFrame];
				}
				_this.g2d_accumulatedTime %= _this.g2d_speed;
			}
			this.texture = this.frameAnimation.currentFrameTexture;
		}
		if(this.texture != null && (this.texture.getSourceType() != com_genome2d_textures_GTextureSourceType.RENDER_TARGET || this.texture.g2d_initializedRenderTarget)) {
			if(p_useMatrix && !this.ignoreMatrix) {
				var _this2 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				var matrix = com_genome2d_node_GNode.g2d_core.g2d_renderMatrix;
				var _this3 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.drawMatrix(this.texture,this.blendMode,matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
			} else {
				var _this4 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				com_genome2d_node_GNode.g2d_core.g2d_context.draw(this.texture,this.blendMode,this.g2d_node.g2d_worldX,this.g2d_node.g2d_worldY,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha,this.filter);
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GSprite");
		return com_genome2d_components_renderable_GTexturedQuad.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_renderable_GTexturedQuad.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GSprite");
	}
	,__class__: com_genome2d_components_renderable_GSprite
});
var com_genome2d_components_renderable_particles_GParticleSystemComponent = function() {
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.particles.GParticleSystemComponent"] = com_genome2d_components_renderable_particles_GParticleSystemComponent;
com_genome2d_components_renderable_particles_GParticleSystemComponent.__name__ = "com.genome2d.components.renderable.particles.GParticleSystemComponent";
com_genome2d_components_renderable_particles_GParticleSystemComponent.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_particles_GParticleSystemComponent.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_particles_GParticleSystemComponent.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	particleSystem: null
	,init: function() {
		this.particleSystem = new com_genome2d_particles_GParticleSystem();
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.add($bind(this,this.update));
	}
	,update: function(p_deltaTime) {
		this.particleSystem.x = this.g2d_node.g2d_worldX;
		this.particleSystem.y = this.g2d_node.g2d_worldY;
		this.particleSystem.update(p_deltaTime);
	}
	,render: function(p_camera,p_useMatrix) {
		var tmp = this.particleSystem;
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		tmp.render(com_genome2d_node_GNode.g2d_core.g2d_context);
	}
	,getBounds: function(p_target) {
		return null;
	}
	,captureMouseInput: function(p_input) {
	}
	,hitTest: function(p_x,p_y) {
		return false;
	}
	,onDispose: function() {
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.remove($bind(this,this.update));
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GParticleSystemComponent");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GParticleSystemComponent");
	}
	,__class__: com_genome2d_components_renderable_particles_GParticleSystemComponent
});
var com_genome2d_components_renderable_text_GText = function() {
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.text.GText"] = com_genome2d_components_renderable_text_GText;
com_genome2d_components_renderable_text_GText.__name__ = "com.genome2d.components.renderable.text.GText";
com_genome2d_components_renderable_text_GText.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_text_GText.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_text_GText.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	renderer: null
	,get_tracking: function() {
		return this.renderer.g2d_tracking;
	}
	,set_tracking: function(p_value) {
		var _this = this.renderer;
		_this.g2d_tracking = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_lineSpace: function() {
		return this.renderer.g2d_lineSpace;
	}
	,set_lineSpace: function(p_value) {
		var _this = this.renderer;
		_this.g2d_lineSpace = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_vAlign: function() {
		return this.renderer.g2d_vAlign;
	}
	,set_vAlign: function(p_value) {
		var _this = this.renderer;
		_this.g2d_vAlign = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_hAlign: function() {
		return this.renderer.g2d_hAlign;
	}
	,set_hAlign: function(p_value) {
		var _this = this.renderer;
		_this.g2d_hAlign = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_text: function() {
		return this.renderer.g2d_text;
	}
	,set_text: function(p_text) {
		var _this = this.renderer;
		_this.g2d_text = p_text;
		_this.g2d_textLength = _this.g2d_text.length;
		_this.g2d_dirty = true;
		return this.renderer.g2d_text;
	}
	,get_autoSize: function() {
		return this.renderer.g2d_autoSize;
	}
	,set_autoSize: function(p_value) {
		var _this = this.renderer;
		_this.g2d_autoSize = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_wordWrap: function() {
		return this.renderer.g2d_wordWrap;
	}
	,set_wordWrap: function(p_value) {
		var _this = this.renderer;
		_this.g2d_wordWrap = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_wordWrapWhitespace: function() {
		return this.renderer.g2d_wordWrapWhitespace;
	}
	,set_wordWrapWhitespace: function(p_value) {
		var _this = this.renderer;
		_this.g2d_wordWrapWhitespace = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_width: function() {
		if(this.renderer.g2d_autoSize && this.renderer.g2d_dirty) {
			this.renderer.invalidate();
		}
		var _this = this.renderer;
		if(_this.g2d_autoSize && _this.g2d_dirty) {
			_this.invalidate();
		}
		return _this.g2d_width;
	}
	,set_width: function(p_value) {
		var _this = this.renderer;
		if(p_value != _this.g2d_width) {
			_this.g2d_width = p_value;
			_this.g2d_dirty = true;
		}
		return p_value;
	}
	,get_height: function() {
		if(this.renderer.g2d_autoSize && this.renderer.g2d_dirty) {
			this.renderer.invalidate();
		}
		var _this = this.renderer;
		if(_this.g2d_autoSize && _this.g2d_dirty) {
			_this.invalidate();
		}
		return _this.g2d_height;
	}
	,set_height: function(p_value) {
		var _this = this.renderer;
		if(p_value != _this.g2d_height) {
			_this.g2d_height = p_value;
			_this.g2d_dirty = true;
		}
		return p_value;
	}
	,init: function() {
		this.renderer = new com_genome2d_text_GTextureTextRenderer();
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.renderer.g2d_dirty) {
			this.renderer.invalidate();
		}
		if(this.renderer != null) {
			this.renderer.render(this.g2d_node.g2d_worldX,this.g2d_node.g2d_worldY,this.g2d_node.g2d_worldScaleX,this.g2d_node.g2d_worldScaleY,this.g2d_node.g2d_worldRotation,this.g2d_node.g2d_worldRed,this.g2d_node.g2d_worldGreen,this.g2d_node.g2d_worldBlue,this.g2d_node.g2d_worldAlpha);
		}
	}
	,captureMouseInput: function(p_input) {
	}
	,getBounds: function(p_bounds) {
		if(p_bounds != null) {
			var _this = this.renderer;
			if(_this.g2d_autoSize && _this.g2d_dirty) {
				_this.invalidate();
			}
			var tmp = _this.g2d_width;
			var _this1 = this.renderer;
			if(_this1.g2d_autoSize && _this1.g2d_dirty) {
				_this1.invalidate();
			}
			p_bounds.setTo(0,0,tmp,_this1.g2d_height);
		} else {
			var _this2 = this.renderer;
			if(_this2.g2d_autoSize && _this2.g2d_dirty) {
				_this2.invalidate();
			}
			var p_bounds1 = _this2.g2d_width;
			var _this3 = this.renderer;
			if(_this3.g2d_autoSize && _this3.g2d_dirty) {
				_this3.invalidate();
			}
			p_bounds = new com_genome2d_geom_GRectangle(0,0,p_bounds1,_this3.g2d_height);
		}
		return p_bounds;
	}
	,hitTest: function(p_x,p_y) {
		return false;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		p_prototype.createPrototypeProperty("font","String",4,null,this.renderer.g2d_textureFont != null ? this.renderer.g2d_textureFont.g2d_id : "");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		var _this = this.renderer;
		_this.g2d_textureFont = com_genome2d_text_GFontManager.getFont(p_prototype.getProperty("font").value);
		_this.g2d_dirty = true;
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GText");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GText");
	}
	,__class__: com_genome2d_components_renderable_text_GText
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_wordWrapWhitespace:"set_wordWrapWhitespace",get_wordWrapWhitespace:"get_wordWrapWhitespace",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_text:"set_text",get_text:"get_text",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_lineSpace:"set_lineSpace",get_lineSpace:"get_lineSpace",set_tracking:"set_tracking",get_tracking:"get_tracking"})
});
var com_genome2d_components_renderable_tilemap_GTileMap = function() {
	this.verticalMargin = 0;
	this.horizontalMargin = 0;
	this.g2d_iso = false;
	this.g2d_tileHeight = 0;
	this.g2d_tileWidth = 0;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.tilemap.GTileMap"] = com_genome2d_components_renderable_tilemap_GTileMap;
com_genome2d_components_renderable_tilemap_GTileMap.__name__ = "com.genome2d.components.renderable.tilemap.GTileMap";
com_genome2d_components_renderable_tilemap_GTileMap.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_tilemap_GTileMap.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_tilemap_GTileMap.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	blendMode: null
	,g2d_width: null
	,g2d_height: null
	,g2d_tiles: null
	,getTiles: function() {
		return this.g2d_tiles;
	}
	,mustRenderTiles: null
	,g2d_tileWidth: null
	,g2d_tileHeight: null
	,g2d_iso: null
	,horizontalMargin: null
	,verticalMargin: null
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
	}
	,setTiles: function(p_mapWidth,p_mapHeight,p_tileWidth,p_tileHeight,p_tiles,p_iso) {
		if(p_iso == null) {
			p_iso = false;
		}
		if(p_tiles != null && p_mapWidth * p_mapHeight != p_tiles.length) {
			var p_arg1 = "Incorrect number of tiles provided for that map size.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx", lineNumber : 35, className : "com.genome2d.components.renderable.tilemap.GTileMap", methodName : "setTiles"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		this.g2d_width = p_mapWidth;
		this.g2d_height = p_mapHeight;
		this.g2d_tileWidth = p_tileWidth;
		this.g2d_tileHeight = p_tileHeight;
		if(p_tiles != null) {
			this.g2d_tiles = p_tiles;
		} else {
			this.g2d_tiles = [];
			var _g = 0;
			var _g1 = this.g2d_width * this.g2d_height;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_tiles.push(null);
			}
		}
		this.g2d_iso = p_iso;
	}
	,getTile: function(p_tileIndex) {
		if(p_tileIndex < 0 || p_tileIndex >= this.g2d_tiles.length) {
			var p_arg1 = "Tile index out of bounds.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx", lineNumber : 51, className : "com.genome2d.components.renderable.tilemap.GTileMap", methodName : "getTile"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return this.g2d_tiles[p_tileIndex];
	}
	,setTile: function(p_tileIndex,p_tile) {
		if(p_tileIndex < 0 || p_tileIndex >= this.g2d_tiles.length) {
			var p_arg1 = "Tile index out of bounds.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx", lineNumber : 56, className : "com.genome2d.components.renderable.tilemap.GTileMap", methodName : "setTile"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_tile != null && (p_tile.mapX != -1 || p_tile.mapY != -1) && p_tile.mapX + p_tile.mapY * this.g2d_width != p_tileIndex) {
			var p_arg110 = "Tile map position doesn't match its index.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx", lineNumber : 57, className : "com.genome2d.components.renderable.tilemap.GTileMap", methodName : "setTile"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		if(p_tile != null) {
			var _g = 0;
			var _g1 = p_tile.sizeX;
			while(_g < _g1) {
				var i = _g++;
				var _g2 = 0;
				var _g11 = p_tile.sizeY;
				while(_g2 < _g11) {
					var j = _g2++;
					if(this.g2d_tiles[p_tileIndex + i + j * this.g2d_width] != null) {
						this.removeTile(p_tileIndex + i + j * this.g2d_width);
					}
					this.g2d_tiles[p_tileIndex + i + j * this.g2d_width] = p_tile;
				}
			}
		} else {
			this.removeTile(p_tileIndex);
		}
	}
	,removeTile: function(p_tileIndex) {
		if(p_tileIndex < 0 || p_tileIndex >= this.g2d_tiles.length) {
			var p_arg1 = "Tile index out of bounds.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/components/renderable/tilemap/GTileMap.hx", lineNumber : 72, className : "com.genome2d.components.renderable.tilemap.GTileMap", methodName : "removeTile"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var tile = this.g2d_tiles[p_tileIndex];
		if(tile != null) {
			if(tile.mapX != -1 && tile.mapY != -1) {
				var _g = 0;
				var _g1 = tile.sizeX;
				while(_g < _g1) {
					var i = _g++;
					var _g2 = 0;
					var _g11 = tile.sizeY;
					while(_g2 < _g11) {
						var j = _g2++;
						if(this.g2d_tiles[tile.mapX + i + (tile.mapY + j) * this.g2d_width] == tile) {
							this.g2d_tiles[tile.mapX + i + (tile.mapY + j) * this.g2d_width] = null;
						}
					}
				}
			} else {
				this.g2d_tiles[p_tileIndex] = null;
			}
		}
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.g2d_tiles == null) {
			return;
		}
		var mapHalfWidth = this.g2d_tileWidth * this.g2d_width * .5;
		var mapHalfHeight = this.g2d_tileHeight * this.g2d_height * (this.g2d_iso ? .25 : .5);
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var viewRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		var cameraWidth = viewRect.width * p_camera.normalizedViewWidth / p_camera.scaleX;
		var cameraHeight = viewRect.height * p_camera.normalizedViewHeight / p_camera.scaleY;
		var startX = p_camera.x - this.g2d_node.g2d_worldX - cameraWidth * .5 - this.horizontalMargin;
		var startY = p_camera.y - this.g2d_node.g2d_worldY - cameraHeight * .5 - this.verticalMargin;
		var firstX = -mapHalfWidth + (this.g2d_iso ? this.g2d_tileWidth / 2 : 0);
		var firstY = -mapHalfHeight + (this.g2d_iso ? this.g2d_tileHeight / 2 : 0);
		var indexX = (startX - firstX) / this.g2d_tileWidth | 0;
		if(indexX < 0) {
			indexX = 0;
		}
		var indexY = (startY - firstY) / (this.g2d_iso ? this.g2d_tileHeight / 2 : this.g2d_tileHeight) | 0;
		if(indexY < 0) {
			indexY = 0;
		}
		var endX = p_camera.x - this.g2d_node.g2d_worldX + cameraWidth * .5 - (this.g2d_iso ? this.g2d_tileWidth / 2 : this.g2d_tileWidth) + this.horizontalMargin;
		var endY = p_camera.y - this.g2d_node.g2d_worldY + cameraHeight * .5 - (this.g2d_iso ? 0 : this.g2d_tileHeight) + this.verticalMargin;
		var indexWidth = (endX - firstX) / this.g2d_tileWidth - indexX + 2 | 0;
		if(indexWidth > this.g2d_width - indexX) {
			indexWidth = this.g2d_width - indexX;
		}
		var indexHeight = (endY - firstY) / (this.g2d_iso ? this.g2d_tileHeight / 2 : this.g2d_tileHeight) - indexY + 2 | 0;
		if(indexHeight > this.g2d_height - indexY) {
			indexHeight = this.g2d_height - indexY;
		}
		var tileCount = indexWidth < 0 || indexWidth < 0 ? 0 : indexWidth * indexHeight;
		var _g = 0;
		var _g1 = tileCount;
		while(_g < _g1) {
			var i = _g++;
			var row = i / indexWidth | 0;
			var x = this.g2d_node.g2d_worldX + (indexX + i % indexWidth) * this.g2d_tileWidth - mapHalfWidth + (this.g2d_iso && (indexY + row) % 2 == 1 ? this.g2d_tileWidth : this.g2d_tileWidth / 2);
			var y = this.g2d_node.g2d_worldY + (indexY + row) * (this.g2d_iso ? this.g2d_tileHeight / 2 : this.g2d_tileHeight) - mapHalfHeight + this.g2d_tileHeight / 2;
			var index = indexY * this.g2d_width + indexX + (i / indexWidth | 0) * this.g2d_width + i % indexWidth;
			var tile = this.g2d_tiles[index];
			if(tile != null && tile.texture != null) {
				var _this1 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				var frameId = com_genome2d_node_GNode.g2d_core.g2d_currentFrameId;
				var _this2 = this.g2d_node;
				if(com_genome2d_node_GNode.g2d_core == null) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
				}
				var time = com_genome2d_node_GNode.g2d_core.g2d_runTime;
				if(tile.sizeX != 1 || tile.sizeY != 1) {
					if(tile.g2d_lastFrameRendered != frameId) {
						x -= (indexX + i % indexWidth - tile.mapX) * this.g2d_tileWidth;
						y -= (indexY + row - tile.mapY) * this.g2d_tileHeight;
						var _this3 = this.g2d_node;
						if(com_genome2d_node_GNode.g2d_core == null) {
							if(com_genome2d_Genome2D.g2d_instance == null) {
								com_genome2d_Genome2D.g2d_instantiable = true;
								new com_genome2d_Genome2D();
								com_genome2d_Genome2D.g2d_instantiable = false;
							}
							com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
						}
						if(tile.texture != null && tile.visible) {
							if(tile.g2d_playing && tile.g2d_frameTextures != null && frameId != tile.g2d_lastFrameRendered) {
								tile.g2d_accumulatedTime += time - tile.g2d_lastTimeRendered;
								if(tile.g2d_accumulatedTime >= tile.g2d_speed) {
									tile.g2d_currentFrame += tile.reversed ? -(tile.g2d_accumulatedTime / tile.g2d_speed | 0) : tile.g2d_accumulatedTime / tile.g2d_speed | 0;
									if(tile.reversed && tile.g2d_currentFrame < 0) {
										tile.g2d_currentFrame = tile.repeatable && !tile.yoyo ? (tile.g2d_frameTexturesCount + tile.g2d_currentFrame % tile.g2d_frameTexturesCount) % tile.g2d_frameTexturesCount : 0;
										if(tile.yoyo) {
											tile.reversed = !tile.reversed;
										}
									} else if(!tile.reversed && tile.g2d_currentFrame >= tile.g2d_frameTexturesCount) {
										tile.g2d_currentFrame = tile.repeatable && !tile.yoyo ? tile.g2d_currentFrame % tile.g2d_frameTexturesCount : tile.g2d_frameTexturesCount - 1;
										if(tile.yoyo) {
											tile.reversed = !tile.reversed;
										}
									}
									tile.texture = tile.g2d_frameTextures[tile.g2d_currentFrame];
								}
								tile.g2d_accumulatedTime %= tile.g2d_speed;
							}
							com_genome2d_node_GNode.g2d_core.g2d_context.draw(tile.texture,this.blendMode,x,y,tile.scaleX,tile.scaleY,tile.rotation,tile.red,tile.green,tile.blue,tile.alpha,null);
							tile.g2d_lastTimeRendered = time;
							tile.g2d_lastFrameRendered = frameId;
						}
					}
				} else {
					var _this4 = this.g2d_node;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					if(tile.texture != null && tile.visible) {
						if(tile.g2d_playing && tile.g2d_frameTextures != null && frameId != tile.g2d_lastFrameRendered) {
							tile.g2d_accumulatedTime += time - tile.g2d_lastTimeRendered;
							if(tile.g2d_accumulatedTime >= tile.g2d_speed) {
								tile.g2d_currentFrame += tile.reversed ? -(tile.g2d_accumulatedTime / tile.g2d_speed | 0) : tile.g2d_accumulatedTime / tile.g2d_speed | 0;
								if(tile.reversed && tile.g2d_currentFrame < 0) {
									tile.g2d_currentFrame = tile.repeatable && !tile.yoyo ? (tile.g2d_frameTexturesCount + tile.g2d_currentFrame % tile.g2d_frameTexturesCount) % tile.g2d_frameTexturesCount : 0;
									if(tile.yoyo) {
										tile.reversed = !tile.reversed;
									}
								} else if(!tile.reversed && tile.g2d_currentFrame >= tile.g2d_frameTexturesCount) {
									tile.g2d_currentFrame = tile.repeatable && !tile.yoyo ? tile.g2d_currentFrame % tile.g2d_frameTexturesCount : tile.g2d_frameTexturesCount - 1;
									if(tile.yoyo) {
										tile.reversed = !tile.reversed;
									}
								}
								tile.texture = tile.g2d_frameTextures[tile.g2d_currentFrame];
							}
							tile.g2d_accumulatedTime %= tile.g2d_speed;
						}
						com_genome2d_node_GNode.g2d_core.g2d_context.draw(tile.texture,this.blendMode,x,y,tile.scaleX,tile.scaleY,tile.rotation,tile.red,tile.green,tile.blue,tile.alpha,null);
						tile.g2d_lastTimeRendered = time;
						tile.g2d_lastFrameRendered = frameId;
					}
				}
			}
		}
	}
	,getTileAt: function(p_x,p_y,p_camera) {
		if(p_camera == null) {
			var _this = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			p_camera = com_genome2d_node_GNode.g2d_core.g2d_context.getDefaultCamera();
		}
		var _this1 = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var viewRect = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect();
		var cameraX = viewRect.width * p_camera.normalizedViewX;
		var cameraY = viewRect.height * p_camera.normalizedViewY;
		var cameraWidth = viewRect.width * p_camera.normalizedViewWidth;
		var cameraHeight = viewRect.height * p_camera.normalizedViewHeight;
		p_x -= cameraX + cameraWidth * .5;
		p_y -= cameraY + cameraHeight * .5;
		var mapHalfWidth = this.g2d_tileWidth * p_camera.scaleX * this.g2d_width * .5;
		var mapHalfHeight = this.g2d_tileHeight * p_camera.scaleY * this.g2d_height * (this.g2d_iso ? .25 : .5);
		var firstX = -mapHalfWidth + (this.g2d_iso ? this.g2d_tileWidth * p_camera.scaleX / 2 : 0);
		var firstY = -mapHalfHeight + (this.g2d_iso ? this.g2d_tileHeight * p_camera.scaleY / 2 : 0);
		var tx = p_camera.x * p_camera.scaleX - this.g2d_node.g2d_worldX + p_x;
		var ty = p_camera.y * p_camera.scaleY - this.g2d_node.g2d_worldY + p_y;
		var indexX = Math.floor((tx - firstX) / (this.g2d_tileWidth * p_camera.scaleX));
		var indexY = Math.floor((ty - firstY) / (this.g2d_tileHeight * p_camera.scaleY));
		if(indexX < 0 || indexX >= this.g2d_width || indexY < 0 || indexY >= this.g2d_height) {
			return null;
		}
		return this.g2d_tiles[indexY * this.g2d_width + indexX];
	}
	,getBounds: function(p_bounds) {
		return null;
	}
	,hitTest: function(p_x,p_y) {
		p_x = p_x / (this.g2d_width * this.g2d_tileWidth) + .5;
		p_y = p_y / (this.g2d_height * this.g2d_tileHeight) + .5;
		if(p_x >= 0 && p_x <= 1 && p_y >= 0) {
			return p_y <= 1;
		} else {
			return false;
		}
	}
	,captureMouseInput: function(p_input) {
		p_input.captured = p_input.captured || this.hitTest(p_input.localX,p_input.localY);
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTileMap");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTileMap");
	}
	,__class__: com_genome2d_components_renderable_tilemap_GTileMap
});
var com_genome2d_components_renderable_ui_GUI = function() {
	this.enableBoundsCulling = false;
	this.useNodePosition = false;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.components.renderable.ui.GUI"] = com_genome2d_components_renderable_ui_GUI;
com_genome2d_components_renderable_ui_GUI.__name__ = "com.genome2d.components.renderable.ui.GUI";
com_genome2d_components_renderable_ui_GUI.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_components_renderable_ui_GUI.__super__ = com_genome2d_components_GComponent;
com_genome2d_components_renderable_ui_GUI.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	root: null
	,useNodePosition: null
	,enableBoundsCulling: null
	,g2d_bounds: null
	,init: function() {
		this.root = new com_genome2d_ui_element_GUIElement();
		this.root.g2d_gui = this;
		this.root.name = "root";
		this.root.g2d_root = this.root;
		this.root.mouseEnabled = false;
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		var tmp = com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect().width;
		var _this1 = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		this.setBounds(new com_genome2d_geom_GRectangle(0,0,tmp,com_genome2d_node_GNode.g2d_core.g2d_context.getStageViewRect().height));
	}
	,invalidate: function() {
		var tmp = this.g2d_bounds.get_left();
		this.root.g2d_worldLeft = tmp + (this.useNodePosition ? this.g2d_node.g2d_worldX : 0);
		var tmp1 = this.g2d_bounds.get_right();
		this.root.g2d_worldRight = tmp1 + (this.useNodePosition ? this.g2d_node.g2d_worldX : 0);
		var tmp2 = this.g2d_bounds.get_top();
		this.root.g2d_worldTop = tmp2 + (this.useNodePosition ? this.g2d_node.g2d_worldY : 0);
		var tmp3 = this.g2d_bounds.get_bottom();
		this.root.g2d_worldBottom = tmp3 + (this.useNodePosition ? this.g2d_node.g2d_worldY : 0);
		this.root.g2d_finalWidth = this.root.g2d_worldRight - this.root.g2d_worldLeft;
		this.root.g2d_finalHeight = this.root.g2d_worldBottom - this.root.g2d_worldTop;
		this.root.calculateWidth();
		this.root.invalidateWidth();
		this.root.calculateHeight();
		this.root.invalidateHeight();
	}
	,render: function(p_camera,p_useMatrix) {
		this.invalidate();
		this.root.render(1,1,1,1);
		com_genome2d_ui_skin_GUISkin.flushBatch();
	}
	,setBounds: function(p_bounds) {
		this.g2d_bounds = p_bounds;
		this.invalidate();
	}
	,getBounds: function(p_target) {
		return this.g2d_bounds;
	}
	,captureMouseInput: function(p_input) {
		this.root.captureMouseInput(p_input);
	}
	,hitTest: function(p_x,p_y) {
		return false;
	}
	,worldToUi: function(p_world,p_result) {
		if(p_result == null) {
			p_result = new com_genome2d_geom_GPoint(0,0);
		}
		p_result.x = p_world.x - this.root.g2d_worldLeft;
		p_result.y = p_world.y - this.root.g2d_worldTop;
		return p_result;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GUI");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GUI");
	}
	,__class__: com_genome2d_components_renderable_ui_GUI
});
var com_genome2d_context_GBlendMode = $hxEnums["com.genome2d.context.GBlendMode"] = { __ename__ : "com.genome2d.context.GBlendMode", __constructs__ : ["NONE","NORMAL","ADD","MULTIPLY","SCREEN","ERASE"]
	,NONE: {_hx_index:0,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
	,NORMAL: {_hx_index:1,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
	,ADD: {_hx_index:2,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
	,MULTIPLY: {_hx_index:3,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
	,SCREEN: {_hx_index:4,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
	,ERASE: {_hx_index:5,__enum__:"com.genome2d.context.GBlendMode",toString:$estr}
};
com_genome2d_context_GBlendMode.__empty_constructs__ = [com_genome2d_context_GBlendMode.NONE,com_genome2d_context_GBlendMode.NORMAL,com_genome2d_context_GBlendMode.ADD,com_genome2d_context_GBlendMode.MULTIPLY,com_genome2d_context_GBlendMode.SCREEN,com_genome2d_context_GBlendMode.ERASE];
var haxe_ds__$Map_Map_$Impl_$ = {};
$hxClasses["haxe.ds._Map.Map_Impl_"] = haxe_ds__$Map_Map_$Impl_$;
haxe_ds__$Map_Map_$Impl_$.__name__ = "haxe.ds._Map.Map_Impl_";
haxe_ds__$Map_Map_$Impl_$.set = function(this1,key,value) {
	this1.set(key,value);
};
haxe_ds__$Map_Map_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
haxe_ds__$Map_Map_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
haxe_ds__$Map_Map_$Impl_$.remove = function(this1,key) {
	return this1.remove(key);
};
haxe_ds__$Map_Map_$Impl_$.keys = function(this1) {
	return this1.keys();
};
haxe_ds__$Map_Map_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
haxe_ds__$Map_Map_$Impl_$.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
haxe_ds__$Map_Map_$Impl_$.copy = function(this1) {
	return this1.copy();
};
haxe_ds__$Map_Map_$Impl_$.toString = function(this1) {
	return this1.toString();
};
haxe_ds__$Map_Map_$Impl_$.clear = function(this1) {
	this1.clear();
};
haxe_ds__$Map_Map_$Impl_$.arrayWrite = function(this1,k,v) {
	this1.set(k,v);
	return v;
};
haxe_ds__$Map_Map_$Impl_$.toStringMap = function(t) {
	return new haxe_ds_StringMap();
};
haxe_ds__$Map_Map_$Impl_$.toIntMap = function(t) {
	return new haxe_ds_IntMap();
};
haxe_ds__$Map_Map_$Impl_$.toEnumValueMapMap = function(t) {
	return new haxe_ds_EnumValueMap();
};
haxe_ds__$Map_Map_$Impl_$.toObjectMap = function(t) {
	return new haxe_ds_ObjectMap();
};
haxe_ds__$Map_Map_$Impl_$.fromStringMap = function(map) {
	return map;
};
haxe_ds__$Map_Map_$Impl_$.fromIntMap = function(map) {
	return map;
};
haxe_ds__$Map_Map_$Impl_$.fromObjectMap = function(map) {
	return map;
};
var com_genome2d_context_GBlendModeFunc = function() { };
$hxClasses["com.genome2d.context.GBlendModeFunc"] = com_genome2d_context_GBlendModeFunc;
com_genome2d_context_GBlendModeFunc.__name__ = "com.genome2d.context.GBlendModeFunc";
com_genome2d_context_GBlendModeFunc.setBlendMode = function(p_context,p_mode,p_premultiplied) {
	var p = p_premultiplied ? 1 : 0;
	p_context.blendFunc(com_genome2d_context_GBlendModeFunc.blendFactors[p].get(p_mode)[0],com_genome2d_context_GBlendModeFunc.blendFactors[p].get(p_mode)[1]);
};
var com_genome2d_context_GCamera = function(p_context) {
	this.normalizedViewHeight = 1;
	this.normalizedViewWidth = 1;
	this.normalizedViewY = 0;
	this.normalizedViewX = 0;
	this.group = 16777215;
	this.y = 0;
	this.x = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.rotation = 0;
	this.matrix = new com_genome2d_context_GProjectionMatrix();
};
$hxClasses["com.genome2d.context.GCamera"] = com_genome2d_context_GCamera;
com_genome2d_context_GCamera.__name__ = "com.genome2d.context.GCamera";
com_genome2d_context_GCamera.prototype = {
	rotation: null
	,scaleX: null
	,scaleY: null
	,x: null
	,y: null
	,group: null
	,normalizedViewX: null
	,normalizedViewY: null
	,normalizedViewWidth: null
	,normalizedViewHeight: null
	,matrix: null
	,__class__: com_genome2d_context_GCamera
};
var com_genome2d_context_GContextConfig = function(p_stage,p_viewRect,p_useClientSize) {
	if(p_useClientSize == null) {
		p_useClientSize = false;
	}
	this.failIfMajorPerformanceCaveat = false;
	this.antiAliasing = 0;
	this.enableErrorChecking = false;
	this.enableDepthAndStencil = false;
	this.enableStats = false;
	this.nativeStage = p_stage == null ? window.document.getElementById("canvas") : p_stage;
	this.viewRect = p_viewRect;
	if(this.nativeStage == null) {
		if(p_viewRect == null) {
			var p_arg1 = "No canvas found";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/GContextConfig.hx", lineNumber : 43, className : "com.genome2d.context.GContextConfig", methodName : "new"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		this.nativeStage = window.document.createElement("canvas");
		this.nativeStage.width = this.viewRect.width | 0;
		this.nativeStage.height = this.viewRect.height | 0;
		window.document.body.appendChild(this.nativeStage);
	} else if(this.viewRect == null) {
		if(p_useClientSize) {
			this.nativeStage.width = this.nativeStage.clientWidth;
			this.nativeStage.height = this.nativeStage.clientHeight;
		}
		this.viewRect = new com_genome2d_geom_GRectangle(0,0,this.nativeStage.width,this.nativeStage.height);
	}
	this.contextClass = com_genome2d_context_GWebGLContext;
};
$hxClasses["com.genome2d.context.GContextConfig"] = com_genome2d_context_GContextConfig;
com_genome2d_context_GContextConfig.__name__ = "com.genome2d.context.GContextConfig";
com_genome2d_context_GContextConfig.prototype = {
	viewRect: null
	,enableStats: null
	,nativeStage: null
	,contextClass: null
	,fallbackContextClass: null
	,statsClass: null
	,enableDepthAndStencil: null
	,enableErrorChecking: null
	,antiAliasing: null
	,failIfMajorPerformanceCaveat: null
	,__class__: com_genome2d_context_GContextConfig
};
var com_genome2d_context_GContextFeature = function() { };
$hxClasses["com.genome2d.context.GContextFeature"] = com_genome2d_context_GContextFeature;
com_genome2d_context_GContextFeature.__name__ = "com.genome2d.context.GContextFeature";
var com_genome2d_context_GCulling = $hxEnums["com.genome2d.context.GCulling"] = { __ename__ : "com.genome2d.context.GCulling", __constructs__ : ["FRONT","FRONT_AND_BACK","BACK","NONE"]
	,FRONT: {_hx_index:0,__enum__:"com.genome2d.context.GCulling",toString:$estr}
	,FRONT_AND_BACK: {_hx_index:1,__enum__:"com.genome2d.context.GCulling",toString:$estr}
	,BACK: {_hx_index:2,__enum__:"com.genome2d.context.GCulling",toString:$estr}
	,NONE: {_hx_index:3,__enum__:"com.genome2d.context.GCulling",toString:$estr}
};
com_genome2d_context_GCulling.__empty_constructs__ = [com_genome2d_context_GCulling.FRONT,com_genome2d_context_GCulling.FRONT_AND_BACK,com_genome2d_context_GCulling.BACK,com_genome2d_context_GCulling.NONE];
var com_genome2d_context_GDepthFunc = $hxEnums["com.genome2d.context.GDepthFunc"] = { __ename__ : "com.genome2d.context.GDepthFunc", __constructs__ : ["NEVER","LESS","EQUAL","LEQUAL","GREATER","NOTEQUAL","GEQUAL","ALWAYS"]
	,NEVER: {_hx_index:0,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,LESS: {_hx_index:1,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,EQUAL: {_hx_index:2,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,LEQUAL: {_hx_index:3,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,GREATER: {_hx_index:4,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,NOTEQUAL: {_hx_index:5,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,GEQUAL: {_hx_index:6,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
	,ALWAYS: {_hx_index:7,__enum__:"com.genome2d.context.GDepthFunc",toString:$estr}
};
com_genome2d_context_GDepthFunc.__empty_constructs__ = [com_genome2d_context_GDepthFunc.NEVER,com_genome2d_context_GDepthFunc.LESS,com_genome2d_context_GDepthFunc.EQUAL,com_genome2d_context_GDepthFunc.LEQUAL,com_genome2d_context_GDepthFunc.GREATER,com_genome2d_context_GDepthFunc.NOTEQUAL,com_genome2d_context_GDepthFunc.GEQUAL,com_genome2d_context_GDepthFunc.ALWAYS];
var com_genome2d_geom_GMatrix3D = function() {
	this.rawData = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
};
$hxClasses["com.genome2d.geom.GMatrix3D"] = com_genome2d_geom_GMatrix3D;
com_genome2d_geom_GMatrix3D.__name__ = "com.genome2d.geom.GMatrix3D";
com_genome2d_geom_GMatrix3D.g2d_getAxisRotation = function(p_x,p_y,p_z,p_degrees) {
	var m = new com_genome2d_geom_GMatrix3D();
	var a1 = new com_genome2d_geom_GVector3D(p_x,p_y,p_z);
	var rad = -p_degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	m.rawData[0] = c + a1.x * a1.x * t;
	m.rawData[5] = c + a1.y * a1.y * t;
	m.rawData[10] = c + a1.z * a1.z * t;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	m.rawData[4] = tmp1 + tmp2;
	m.rawData[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	m.rawData[8] = tmp1 - tmp2;
	m.rawData[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	m.rawData[9] = tmp1 + tmp2;
	m.rawData[6] = tmp1 - tmp2;
	return m;
};
com_genome2d_geom_GMatrix3D.prototype = {
	rawData: null
	,get_determinant: function() {
		return (this.rawData[0] * this.rawData[5] - this.rawData[4] * this.rawData[1]) * (this.rawData[10] * this.rawData[15] - this.rawData[14] * this.rawData[11]) - (this.rawData[0] * this.rawData[9] - this.rawData[8] * this.rawData[1]) * (this.rawData[6] * this.rawData[15] - this.rawData[14] * this.rawData[7]) + (this.rawData[0] * this.rawData[13] - this.rawData[12] * this.rawData[1]) * (this.rawData[6] * this.rawData[11] - this.rawData[10] * this.rawData[7]) + (this.rawData[4] * this.rawData[9] - this.rawData[8] * this.rawData[5]) * (this.rawData[2] * this.rawData[15] - this.rawData[14] * this.rawData[3]) - (this.rawData[4] * this.rawData[13] - this.rawData[12] * this.rawData[5]) * (this.rawData[2] * this.rawData[11] - this.rawData[10] * this.rawData[3]) + (this.rawData[8] * this.rawData[13] - this.rawData[12] * this.rawData[9]) * (this.rawData[2] * this.rawData[7] - this.rawData[6] * this.rawData[3]);
	}
	,get_position: function() {
		return new com_genome2d_geom_GVector3D(this.rawData[12],this.rawData[13],this.rawData[14]);
	}
	,set_position: function(p_value) {
		this.rawData[12] = p_value.x;
		this.rawData[13] = p_value.y;
		this.rawData[14] = p_value.z;
		return p_value;
	}
	,append: function(p_lhs) {
		var m111 = this.rawData[0];
		var m121 = this.rawData[4];
		var m131 = this.rawData[8];
		var m141 = this.rawData[12];
		var m112 = this.rawData[1];
		var m122 = this.rawData[5];
		var m132 = this.rawData[9];
		var m142 = this.rawData[13];
		var m113 = this.rawData[2];
		var m123 = this.rawData[6];
		var m133 = this.rawData[10];
		var m143 = this.rawData[14];
		var m114 = this.rawData[3];
		var m124 = this.rawData[7];
		var m134 = this.rawData[11];
		var m144 = this.rawData[15];
		var m211 = p_lhs.rawData[0];
		var m221 = p_lhs.rawData[4];
		var m231 = p_lhs.rawData[8];
		var m241 = p_lhs.rawData[12];
		var m212 = p_lhs.rawData[1];
		var m222 = p_lhs.rawData[5];
		var m232 = p_lhs.rawData[9];
		var m242 = p_lhs.rawData[13];
		var m213 = p_lhs.rawData[2];
		var m223 = p_lhs.rawData[6];
		var m233 = p_lhs.rawData[10];
		var m243 = p_lhs.rawData[14];
		var m214 = p_lhs.rawData[3];
		var m224 = p_lhs.rawData[7];
		var m234 = p_lhs.rawData[11];
		var m244 = p_lhs.rawData[15];
		this.rawData[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		this.rawData[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		this.rawData[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		this.rawData[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		this.rawData[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		this.rawData[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		this.rawData[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		this.rawData[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		this.rawData[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		this.rawData[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		this.rawData[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		this.rawData[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		this.rawData[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		this.rawData[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		this.rawData[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		this.rawData[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(p_degrees,p_axis,p_pivotPoint) {
		var m = com_genome2d_geom_GMatrix3D.g2d_getAxisRotation(p_axis.x,p_axis.y,p_axis.z,p_degrees);
		if(p_pivotPoint != null) {
			var p = p_pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.append(m);
	}
	,appendScale: function(p_xScale,p_yScale,p_zScale) {
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[0] = p_xScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[1] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[2] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[3] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[4] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[5] = p_yScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[6] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[7] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[8] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[9] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[10] = p_zScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[11] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[12] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[13] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[14] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[15] = 1.0;
		this.append(com_genome2d_geom_GMatrix3D.helperMatrix);
	}
	,appendTranslation: function(p_x,p_y,p_z) {
		this.rawData[12] += p_x;
		this.rawData[13] += p_y;
		this.rawData[14] += p_z;
	}
	,prepend: function(p_rhs) {
		var m111 = p_rhs.rawData[0];
		var m121 = p_rhs.rawData[4];
		var m131 = p_rhs.rawData[8];
		var m141 = p_rhs.rawData[12];
		var m112 = p_rhs.rawData[1];
		var m122 = p_rhs.rawData[5];
		var m132 = p_rhs.rawData[9];
		var m142 = p_rhs.rawData[13];
		var m113 = p_rhs.rawData[2];
		var m123 = p_rhs.rawData[6];
		var m133 = p_rhs.rawData[10];
		var m143 = p_rhs.rawData[14];
		var m114 = p_rhs.rawData[3];
		var m124 = p_rhs.rawData[7];
		var m134 = p_rhs.rawData[11];
		var m144 = p_rhs.rawData[15];
		var m211 = this.rawData[0];
		var m221 = this.rawData[4];
		var m231 = this.rawData[8];
		var m241 = this.rawData[12];
		var m212 = this.rawData[1];
		var m222 = this.rawData[5];
		var m232 = this.rawData[9];
		var m242 = this.rawData[13];
		var m213 = this.rawData[2];
		var m223 = this.rawData[6];
		var m233 = this.rawData[10];
		var m243 = this.rawData[14];
		var m214 = this.rawData[3];
		var m224 = this.rawData[7];
		var m234 = this.rawData[11];
		var m244 = this.rawData[15];
		this.rawData[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		this.rawData[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		this.rawData[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		this.rawData[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		this.rawData[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		this.rawData[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		this.rawData[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		this.rawData[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		this.rawData[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		this.rawData[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		this.rawData[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		this.rawData[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		this.rawData[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		this.rawData[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		this.rawData[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		this.rawData[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(p_degrees,p_axis,p_pivotPoint) {
		var m = com_genome2d_geom_GMatrix3D.g2d_getAxisRotation(p_axis.x,p_axis.y,p_axis.z,p_degrees);
		if(p_pivotPoint != null) {
			var p = p_pivotPoint;
			m.appendTranslation(p.x,p.y,p.z);
		}
		this.prepend(m);
	}
	,prependScale: function(p_xScale,p_yScale,p_zScale) {
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[0] = p_xScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[1] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[2] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[3] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[4] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[5] = p_yScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[6] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[7] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[8] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[9] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[10] = p_zScale;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[11] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[12] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[13] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[14] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[15] = 1.0;
		this.prepend(com_genome2d_geom_GMatrix3D.helperMatrix);
	}
	,prependTranslation: function(p_x,p_y,p_z) {
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[0] = 1.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[1] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[2] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[3] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[4] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[5] = 1.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[6] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[7] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[8] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[9] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[10] = 1.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[11] = 0.0;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[12] = p_x;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[13] = p_y;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[14] = p_z;
		com_genome2d_geom_GMatrix3D.helperMatrix.rawData[15] = 1.0;
		this.prepend(com_genome2d_geom_GMatrix3D.helperMatrix);
	}
	,clone: function() {
		var clone = new com_genome2d_geom_GMatrix3D();
		clone.rawData[0] = this.rawData[0];
		clone.rawData[1] = this.rawData[1];
		clone.rawData[2] = this.rawData[2];
		clone.rawData[3] = this.rawData[3];
		clone.rawData[4] = this.rawData[4];
		clone.rawData[5] = this.rawData[5];
		clone.rawData[6] = this.rawData[6];
		clone.rawData[7] = this.rawData[7];
		clone.rawData[8] = this.rawData[8];
		clone.rawData[9] = this.rawData[9];
		clone.rawData[10] = this.rawData[10];
		clone.rawData[11] = this.rawData[11];
		clone.rawData[12] = this.rawData[12];
		clone.rawData[13] = this.rawData[13];
		clone.rawData[14] = this.rawData[14];
		clone.rawData[15] = this.rawData[15];
		return clone;
	}
	,transpose: function() {
		var newData = new Float32Array(16);
		newData[0] = this.rawData[0];
		newData[1] = this.rawData[4];
		newData[2] = this.rawData[8];
		newData[3] = this.rawData[12];
		newData[4] = this.rawData[1];
		newData[5] = this.rawData[5];
		newData[6] = this.rawData[9];
		newData[7] = this.rawData[13];
		newData[8] = this.rawData[2];
		newData[9] = this.rawData[6];
		newData[10] = this.rawData[10];
		newData[11] = this.rawData[14];
		newData[12] = this.rawData[3];
		newData[13] = this.rawData[7];
		newData[14] = this.rawData[11];
		newData[15] = this.rawData[15];
		this.rawData = newData;
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData[0];
			var m21 = this.rawData[4];
			var m31 = this.rawData[8];
			var m41 = this.rawData[12];
			var m12 = this.rawData[1];
			var m22 = this.rawData[5];
			var m32 = this.rawData[9];
			var m42 = this.rawData[13];
			var m13 = this.rawData[2];
			var m23 = this.rawData[6];
			var m33 = this.rawData[10];
			var m43 = this.rawData[14];
			var m14 = this.rawData[3];
			var m24 = this.rawData[7];
			var m34 = this.rawData[11];
			var m44 = this.rawData[15];
			this.rawData[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			this.rawData[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			this.rawData[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			this.rawData[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			this.rawData[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			this.rawData[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			this.rawData[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			this.rawData[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			this.rawData[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			this.rawData[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			this.rawData[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			this.rawData[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			this.rawData[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			this.rawData[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			this.rawData[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			this.rawData[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,identity: function() {
		this.rawData = new Float32Array([1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
	,transformVector: function(p_vector) {
		var x = p_vector.x;
		var y = p_vector.y;
		var z = p_vector.z;
		return new com_genome2d_geom_GVector3D(x * this.rawData[0] + y * this.rawData[4] + z * this.rawData[8] + this.rawData[12],x * this.rawData[1] + y * this.rawData[5] + z * this.rawData[9] + this.rawData[13],x * this.rawData[2] + y * this.rawData[6] + z * this.rawData[10] + this.rawData[14],x * this.rawData[3] + y * this.rawData[7] + z * this.rawData[11] + this.rawData[15]);
	}
	,__class__: com_genome2d_geom_GMatrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var com_genome2d_context_GProjectionMatrix = function() {
	com_genome2d_geom_GMatrix3D.call(this);
	this.reset();
};
$hxClasses["com.genome2d.context.GProjectionMatrix"] = com_genome2d_context_GProjectionMatrix;
com_genome2d_context_GProjectionMatrix.__name__ = "com.genome2d.context.GProjectionMatrix";
com_genome2d_context_GProjectionMatrix.g2d_instance = null;
com_genome2d_context_GProjectionMatrix.getOrtho = function(p_width,p_height,p_transform) {
	if(com_genome2d_context_GProjectionMatrix.g2d_instance == null) {
		com_genome2d_context_GProjectionMatrix.g2d_instance = new com_genome2d_context_GProjectionMatrix();
	}
	return com_genome2d_context_GProjectionMatrix.g2d_instance.ortho(p_width,p_height,p_transform);
};
com_genome2d_context_GProjectionMatrix.__super__ = com_genome2d_geom_GMatrix3D;
com_genome2d_context_GProjectionMatrix.prototype = $extend(com_genome2d_geom_GMatrix3D.prototype,{
	reset: function() {
		this.rawData = new Float32Array([2.0,0.0,0.0,0.0,0.0,-2.0,0.0,0.0,0.0,0.0,1 / (com_genome2d_context_GProjectionMatrix.FAR - com_genome2d_context_GProjectionMatrix.NEAR),-com_genome2d_context_GProjectionMatrix.NEAR / (com_genome2d_context_GProjectionMatrix.FAR - com_genome2d_context_GProjectionMatrix.NEAR),-1.0,1.0,0,1.0]);
	}
	,ortho: function(p_width,p_height,p_transform) {
		this.rawData[0] = 2 / p_width;
		this.rawData[5] = -2 / p_height;
		if(p_transform != null) {
			this.prepend(p_transform);
		}
		return this;
	}
	,orthoRtt: function(p_width,p_height,p_transform) {
		this.rawData[0] = 2 / p_width;
		this.rawData[5] = -2 / p_height;
		if(p_transform != null) {
			this.prepend(p_transform);
		}
		return this;
	}
	,perspective: function(p_width,p_height,zNear,zFar) {
		this.rawData = new Float32Array([2 / p_width,0.0,0.0,0.0,0.0,-2 / p_height,0.0,0.0,0,0,zFar / (zFar - zNear),1.0,0,0,zNear * zFar / (zNear - zFar),0]);
		return this;
	}
	,__class__: com_genome2d_context_GProjectionMatrix
});
var com_genome2d_context_GRequestAnimationFrame = function() { };
$hxClasses["com.genome2d.context.GRequestAnimationFrame"] = com_genome2d_context_GRequestAnimationFrame;
com_genome2d_context_GRequestAnimationFrame.__name__ = "com.genome2d.context.GRequestAnimationFrame";
com_genome2d_context_GRequestAnimationFrame.request = function(method) {
	var requestAnimationFrame = window.requestAnimationFrame || (window.webkitRequestAnimationFrame || (window.mozRequestAnimationFrame || (window.oRequestAnimationFrame || (window.msRequestAnimationFrame || function(method1,element) {
		window.setTimeout(method1,16.666666666666668);
	}))));
	requestAnimationFrame(method);
};
var com_genome2d_context_GViewport = function(p_cameraController,p_viewWidth,p_viewHeight,p_autoResize) {
	if(p_autoResize == null) {
		p_autoResize = true;
	}
	this.g2d_previousZoom = 1;
	this.g2d_vAlign = com_genome2d_utils_GVAlignType.MIDDLE;
	this.g2d_hAlign = com_genome2d_utils_GHAlignType.CENTER;
	this.g2d_cameraController = p_cameraController;
	this.g2d_width = p_viewWidth;
	this.g2d_height = p_viewHeight;
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	var rect = com_genome2d_Genome2D.g2d_instance.g2d_context.getStageViewRect();
	this.resize_handler(rect.width,rect.height);
	if(p_autoResize) {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_context.onResize.addWithPriority($bind(this,this.resize_handler));
	}
};
$hxClasses["com.genome2d.context.GViewport"] = com_genome2d_context_GViewport;
com_genome2d_context_GViewport.__name__ = "com.genome2d.context.GViewport";
com_genome2d_context_GViewport.prototype = {
	g2d_vAlign: null
	,get_vAlign: function() {
		return this.g2d_vAlign;
	}
	,set_vAlign: function(p_value) {
		return this.g2d_vAlign = p_value;
	}
	,g2d_hAlign: null
	,get_hAlign: function() {
		return this.g2d_hAlign;
	}
	,set_hAlign: function(p_value) {
		return this.g2d_hAlign = p_value;
	}
	,g2d_width: null
	,g2d_height: null
	,g2d_screenLeft: null
	,screenLeft: null
	,get_screenLeft: function() {
		return this.g2d_screenLeft;
	}
	,g2d_screenTop: null
	,screenTop: null
	,get_screenTop: function() {
		return this.g2d_screenTop;
	}
	,g2d_screenRight: null
	,screenRight: null
	,get_screenRight: function() {
		return this.g2d_screenRight;
	}
	,g2d_screenBottom: null
	,screenBottom: null
	,get_screenBottom: function() {
		return this.g2d_screenBottom;
	}
	,g2d_zoom: null
	,zoom: null
	,get_zoom: function() {
		return this.g2d_zoom;
	}
	,g2d_aspectRatio: null
	,aspectRatio: null
	,get_aspectRatio: function() {
		return this.g2d_aspectRatio;
	}
	,g2d_cameraController: null
	,g2d_previousZoom: null
	,dispose: function() {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_context.onResize.remove($bind(this,this.resize_handler));
	}
	,resize_handler: function(p_width,p_height) {
		p_width *= this.g2d_cameraController.g2d_contextCamera.normalizedViewWidth;
		p_height *= this.g2d_cameraController.g2d_contextCamera.normalizedViewHeight;
		var aw = p_width / this.g2d_width;
		var ah = p_height / this.g2d_height;
		this.g2d_aspectRatio = p_width / p_height;
		this.g2d_zoom = Math.min(aw,ah);
		var _this = this.g2d_cameraController;
		_this.g2d_contextCamera.scaleX = _this.g2d_contextCamera.scaleY = this.g2d_zoom;
		if(aw < ah) {
			this.g2d_screenLeft = 0;
			this.g2d_screenRight = this.g2d_width;
			switch(this.g2d_vAlign._hx_index) {
			case 0:
				this.g2d_screenTop = 0;
				this.g2d_screenBottom = this.g2d_height + (p_height - this.g2d_zoom * this.g2d_height) / this.g2d_zoom;
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5,this.g2d_height * .5 + (p_height - this.g2d_zoom * this.g2d_height) / (2 * this.g2d_zoom));
				break;
			case 1:
				this.g2d_screenTop = (this.g2d_height * this.g2d_zoom - p_height) / (2 * this.g2d_zoom);
				this.g2d_screenBottom = this.g2d_height + (p_height - this.g2d_zoom * this.g2d_height) / (2 * this.g2d_zoom);
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5,this.g2d_height * .5);
				break;
			case 2:
				this.g2d_screenTop = (this.g2d_height * this.g2d_zoom - p_height) / this.g2d_zoom;
				this.g2d_screenBottom = p_height;
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5,this.g2d_height * .5 - (p_height - this.g2d_zoom * this.g2d_height) / (2 * this.g2d_zoom));
				break;
			}
		} else {
			switch(this.g2d_hAlign._hx_index) {
			case 0:
				this.g2d_screenLeft = 0;
				this.g2d_screenRight = this.g2d_width + (p_width - this.g2d_zoom * this.g2d_width) / this.g2d_zoom;
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5 + (p_width - this.g2d_zoom * this.g2d_width) / (2 * this.g2d_zoom),this.g2d_height * .5);
				break;
			case 1:
				this.g2d_screenLeft = (this.g2d_zoom * this.g2d_width - p_width) / (2 * this.g2d_zoom);
				this.g2d_screenRight = this.g2d_width + (p_width - this.g2d_zoom * this.g2d_width) / (2 * this.g2d_zoom);
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5,this.g2d_height * .5);
				break;
			case 2:
				this.g2d_screenLeft = (this.g2d_zoom * this.g2d_width - p_width) / this.g2d_zoom;
				this.g2d_screenRight = p_width;
				this.g2d_cameraController.g2d_node.setPosition(this.g2d_width * .5 - (p_width - this.g2d_zoom * this.g2d_width) / (2 * this.g2d_zoom),this.g2d_height * .5);
				break;
			}
			this.g2d_screenTop = 0;
			this.g2d_screenBottom = this.g2d_height;
		}
	}
	,__class__: com_genome2d_context_GViewport
	,__properties__: {get_aspectRatio:"get_aspectRatio",get_zoom:"get_zoom",get_screenBottom:"get_screenBottom",get_screenRight:"get_screenRight",get_screenTop:"get_screenTop",get_screenLeft:"get_screenLeft",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign"}
};
var com_genome2d_input_IGFocusable = function() { };
$hxClasses["com.genome2d.input.IGFocusable"] = com_genome2d_input_IGFocusable;
com_genome2d_input_IGFocusable.__name__ = "com.genome2d.input.IGFocusable";
com_genome2d_input_IGFocusable.__isInterface__ = true;
com_genome2d_input_IGFocusable.prototype = {
	gotFocus: null
	,lostFocus: null
	,__class__: com_genome2d_input_IGFocusable
};
var com_genome2d_context_IGContext = function() { };
$hxClasses["com.genome2d.context.IGContext"] = com_genome2d_context_IGContext;
com_genome2d_context_IGContext.__name__ = "com.genome2d.context.IGContext";
com_genome2d_context_IGContext.__isInterface__ = true;
com_genome2d_context_IGContext.__interfaces__ = [com_genome2d_input_IGFocusable];
com_genome2d_context_IGContext.prototype = {
	hasFeature: null
	,g2d_onMouseInputInternal: null
	,onInitialized: null
	,onFailed: null
	,onInvalidated: null
	,onFrame: null
	,onMouseInput: null
	,onKeyboardInput: null
	,onResize: null
	,getStageViewRect: null
	,getDefaultCamera: null
	,getNativeStage: null
	,getNativeContext: null
	,getMaskRect: null
	,setMaskRect: null
	,setActiveCamera: null
	,getActiveCamera: null
	,init: null
	,dispose: null
	,setBackgroundColor: null
	,begin: null
	,end: null
	,draw: null
	,drawSource: null
	,drawMatrix: null
	,drawPoly: null
	,setBlendMode: null
	,callNextFrame: null
	,setRenderer: null
	,flushRenderer: null
	,getRenderer: null
	,resize: null
	,clearStencil: null
	,renderToStencil: null
	,renderToColor: null
	,setDepthTest: null
	,getRenderTarget: null
	,getRenderTargetMatrix: null
	,setRenderTarget: null
	,setRenderTargets: null
	,__class__: com_genome2d_context_IGContext
};
var com_genome2d_context_GWebGLContext = function(p_config) {
	this.g2d_usedRenderTargets = 0;
	this.g2d_failIfMajorPerformanceCaveat = false;
	this.g2d_lastMouseButtonsDown = 0;
	this.g2d_activeTouchIdentifier = -1;
	this.preventDefaultKeyboard = true;
	this.g2d_backgroundAlpha = 1;
	this.g2d_backgroundBlue = 0;
	this.g2d_backgroundGreen = 0;
	this.g2d_backgroundRed = 0;
	this.g2d_depthTestEnabled = false;
	this.g2d_reinitialize = 0;
	this.g2d_projectionMatrix = new com_genome2d_context_GProjectionMatrix();
	this.g2d_contextLost = false;
	this.g2d_nativeStage = p_config.nativeStage;
	this.g2d_stageViewRect = p_config.viewRect;
	this.g2d_failIfMajorPerformanceCaveat = p_config.failIfMajorPerformanceCaveat;
	this.g2d_stats = new com_genome2d_context_stats_GStats(this.g2d_nativeStage);
	this.onInitialized = new com_genome2d_callbacks_GCallback0();
	this.onFailed = new com_genome2d_callbacks_GCallback1();
	this.onInvalidated = new com_genome2d_callbacks_GCallback0();
	this.onResize = new com_genome2d_callbacks_GCallback2();
	this.onFrame = new com_genome2d_callbacks_GCallback1();
	this.onMouseInput = new com_genome2d_callbacks_GCallback1();
	this.onKeyboardInput = new com_genome2d_callbacks_GCallback1();
	this.onVisibilityChange = new com_genome2d_callbacks_GCallback1();
};
$hxClasses["com.genome2d.context.GWebGLContext"] = com_genome2d_context_GWebGLContext;
com_genome2d_context_GWebGLContext.__name__ = "com.genome2d.context.GWebGLContext";
com_genome2d_context_GWebGLContext.__interfaces__ = [com_genome2d_context_IGContext];
com_genome2d_context_GWebGLContext.prototype = {
	hasFeature: function(p_feature) {
		if(p_feature == 2) {
			return true;
		}
		return false;
	}
	,g2d_contextLost: null
	,g2d_projectionMatrix: null
	,g2d_reinitialize: null
	,g2d_depthTestEnabled: null
	,g2d_nativeStage: null
	,getNativeStage: function() {
		return this.g2d_nativeStage;
	}
	,g2d_nativeContext: null
	,getNativeContext: function() {
		return this.g2d_nativeContext;
	}
	,g2d_drawRenderer: null
	,g2d_matrixQuadTextureShaderRenderer: null
	,g2d_triangleTextureBufferCPURenderer: null
	,g2d_activeRenderer: null
	,g2d_activeBlendMode: null
	,g2d_activePremultiply: null
	,g2d_activeMaskRect: null
	,g2d_backgroundRed: null
	,g2d_backgroundGreen: null
	,g2d_backgroundBlue: null
	,g2d_backgroundAlpha: null
	,setBackgroundColor: function(p_color,p_alpha) {
		if(p_alpha == null) {
			p_alpha = 1;
		}
		this.g2d_backgroundRed = (p_color >> 16 & 255 | 0) / 255;
		this.g2d_backgroundGreen = (p_color >> 8 & 255 | 0) / 255;
		this.g2d_backgroundBlue = (p_color & 255 | 0) / 255;
		this.g2d_backgroundAlpha = p_alpha;
	}
	,g2d_activeCamera: null
	,getActiveCamera: function() {
		return this.g2d_activeCamera;
	}
	,g2d_defaultCamera: null
	,getDefaultCamera: function() {
		return this.g2d_defaultCamera;
	}
	,g2d_currentDeltaTime: null
	,g2d_currentTime: null
	,g2d_stats: null
	,g2d_stageViewRect: null
	,getStageViewRect: function() {
		return this.g2d_stageViewRect;
	}
	,g2d_activeViewRect: null
	,onInitialized: null
	,onFailed: null
	,onInvalidated: null
	,onResize: null
	,onFrame: null
	,onMouseInput: null
	,onKeyboardInput: null
	,onVisibilityChange: null
	,preventDefaultKeyboard: null
	,g2d_activeTouchIdentifier: null
	,g2d_lastMouseButtonsDown: null
	,g2d_failIfMajorPerformanceCaveat: null
	,g2d_onMouseInputInternal: null
	,init: function() {
		try {
			var contextAttributes = { failIfMajorPerformanceCaveat : this.g2d_failIfMajorPerformanceCaveat};
			this.g2d_nativeContext = this.g2d_nativeStage.getContext("webgl",contextAttributes);
			if(this.g2d_nativeContext == null) {
				this.g2d_nativeContext = this.g2d_nativeStage.getContext("experimental-webgl",contextAttributes);
			}
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		if(this.g2d_nativeContext == null) {
			this.onFailed.dispatch("No WebGL support detected.");
			return;
		}
		com_genome2d_context_renderers_GRendererCommon.init();
		this.g2d_drawRenderer = new com_genome2d_context_renderers_GQuadTextureShaderRenderer();
		this.g2d_matrixQuadTextureShaderRenderer = new com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer();
		this.g2d_triangleTextureBufferCPURenderer = new com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer();
		this.g2d_defaultCamera = new com_genome2d_context_GCamera(this);
		this.g2d_defaultCamera.x = this.g2d_stageViewRect.width / 2;
		this.g2d_defaultCamera.y = this.g2d_stageViewRect.height / 2;
		this.g2d_activeViewRect = new com_genome2d_geom_GRectangle(0,0,0,0);
		this.g2d_currentTime = new Date().getTime();
		this.g2d_nativeStage.addEventListener("webglcontextlost",$bind(this,this.g2d_contextLostEventHandler));
		this.g2d_nativeStage.addEventListener("webglcontextrestored",$bind(this,this.g2d_contextRestoredEventHandler));
		this.g2d_nativeStage.addEventListener("mousedown",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("mouseup",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("mousemove",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("mouseleave",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("wheel",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("touchstart",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("touchend",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("touchmove",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("touchcancel",$bind(this,this.g2d_mouseEventHandler));
		this.g2d_nativeStage.addEventListener("keyup",$bind(this,this.g2d_keyboardEventHandler));
		this.g2d_nativeStage.addEventListener("keydown",$bind(this,this.g2d_keyboardEventHandler));
		this.g2d_nativeStage.addEventListener("contextmenu",$bind(this,this.g2d_contextEventHandler));
		window.addEventListener("keyup",$bind(this,this.g2d_keyboardEventHandler));
		window.addEventListener("keydown",$bind(this,this.g2d_keyboardEventHandler));
		window.document.addEventListener("visibilitychange",$bind(this,this.g2d_visibilityChange_handler));
		this.g2d_nativeContext.pixelStorei(37441,1);
		this.onInitialized.dispatch();
		com_genome2d_context_GRequestAnimationFrame.request($bind(this,this.g2d_enterFrameHandler));
	}
	,resize: function(p_rect) {
		this.g2d_stageViewRect = p_rect;
		this.g2d_defaultCamera.x = this.g2d_stageViewRect.width / 2;
		this.g2d_defaultCamera.y = this.g2d_stageViewRect.height / 2;
		this.onResize.dispatch(this.g2d_stageViewRect.width | 0,this.g2d_stageViewRect.height | 0);
	}
	,setActiveCamera: function(p_camera) {
		if(this.g2d_stageViewRect.width * p_camera.normalizedViewWidth <= 0 || this.g2d_stageViewRect.height * p_camera.normalizedViewHeight <= 0) {
			return false;
		}
		if(this.g2d_activeRenderer != null) {
			this.g2d_activeRenderer.push();
		}
		this.g2d_activeCamera = p_camera;
		this.g2d_activeViewRect.setTo(this.g2d_stageViewRect.width * this.g2d_activeCamera.normalizedViewX | 0,this.g2d_stageViewRect.height * this.g2d_activeCamera.normalizedViewY | 0,this.g2d_stageViewRect.width * this.g2d_activeCamera.normalizedViewWidth | 0,this.g2d_stageViewRect.height * this.g2d_activeCamera.normalizedViewHeight | 0);
		var vx = this.g2d_activeViewRect.x + this.g2d_activeViewRect.width * .5;
		var vy = this.g2d_activeViewRect.y + this.g2d_activeViewRect.height * .5;
		this.g2d_projectionMatrix.reset();
		this.g2d_projectionMatrix.ortho(this.g2d_stageViewRect.width,this.g2d_stageViewRect.height,null);
		this.g2d_projectionMatrix.prependTranslation(vx,vy,0);
		this.g2d_projectionMatrix.prependRotation(this.g2d_activeCamera.rotation * 180 / Math.PI,new com_genome2d_geom_GVector3D(0,0,1),null);
		this.g2d_projectionMatrix.prependScale(this.g2d_activeCamera.scaleX,this.g2d_activeCamera.scaleY,1);
		this.g2d_projectionMatrix.prependTranslation(-this.g2d_activeCamera.x,-this.g2d_activeCamera.y,0);
		this.g2d_projectionMatrix.transpose();
		this.g2d_nativeContext.scissor(this.g2d_activeViewRect.x | 0,this.g2d_stageViewRect.height - this.g2d_activeViewRect.height - this.g2d_activeViewRect.y | 0,this.g2d_activeViewRect.width | 0,this.g2d_activeViewRect.height | 0);
		return true;
	}
	,getMaskRect: function() {
		return this.g2d_activeMaskRect;
	}
	,setMaskRect: function(p_maskRect) {
		if(p_maskRect != this.g2d_activeMaskRect || p_maskRect != null && this.g2d_activeMaskRect != null && (p_maskRect.width != this.g2d_activeMaskRect.width || p_maskRect.height != this.g2d_activeMaskRect.height && p_maskRect.x != this.g2d_activeMaskRect.x || p_maskRect.y != this.g2d_activeMaskRect.y)) {
			if(this.g2d_activeRenderer != null) {
				this.g2d_activeRenderer.push();
			}
			if(p_maskRect == null) {
				this.g2d_activeMaskRect = null;
				this.g2d_nativeContext.scissor(0,0,this.g2d_activeViewRect.width | 0,this.g2d_activeViewRect.height | 0);
			} else {
				this.g2d_activeMaskRect = this.g2d_activeViewRect.intersection(new com_genome2d_geom_GRectangle(p_maskRect.x + this.g2d_activeViewRect.x + this.g2d_activeViewRect.width * .5 - this.g2d_activeCamera.x * this.g2d_activeCamera.scaleX,p_maskRect.y + this.g2d_activeViewRect.y + this.g2d_activeViewRect.height * .5 - this.g2d_activeCamera.y * this.g2d_activeCamera.scaleY,p_maskRect.width,p_maskRect.height));
				this.g2d_nativeContext.scissor(this.g2d_activeMaskRect.x | 0,this.g2d_activeViewRect.height - this.g2d_activeMaskRect.y - this.g2d_activeMaskRect.height | 0,this.g2d_activeMaskRect.width | 0,this.g2d_activeMaskRect.height | 0);
			}
		}
	}
	,begin: function() {
		if(this.g2d_contextLost) {
			return false;
		}
		this.g2d_stats.clear();
		this.g2d_activeRenderer = null;
		this.g2d_activePremultiply = true;
		this.g2d_activeBlendMode = com_genome2d_context_GBlendMode.NORMAL;
		this.setActiveCamera(this.g2d_defaultCamera);
		this.g2d_nativeContext.viewport(0,0,this.g2d_stageViewRect.width | 0,this.g2d_stageViewRect.height | 0);
		this.g2d_nativeContext.clearColor(this.g2d_backgroundRed,this.g2d_backgroundGreen,this.g2d_backgroundBlue,this.g2d_backgroundAlpha);
		this.g2d_nativeContext.clear(16640);
		this.setDepthTest(false,com_genome2d_context_GDepthFunc.ALWAYS);
		this.g2d_nativeContext.enable(3042);
		this.g2d_nativeContext.enable(3089);
		this.g2d_nativeContext.disable(2884);
		com_genome2d_context_GBlendModeFunc.setBlendMode(this.g2d_nativeContext,com_genome2d_context_GBlendMode.NORMAL,true);
		return true;
	}
	,draw: function(p_texture,p_blendMode,p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_filter) {
		if(p_alpha != 0) {
			this.setBlendMode(p_blendMode,p_texture.premultiplied);
			var p_renderer = this.g2d_drawRenderer;
			if(p_renderer != this.g2d_activeRenderer || this.g2d_activeRenderer == null) {
				this.flushRenderer();
				this.g2d_activeRenderer = p_renderer;
				this.g2d_activeRenderer.bind(this,this.g2d_reinitialize);
			}
			var _this = this.g2d_drawRenderer;
			var p_red1 = p_red;
			var p_green1 = p_green;
			var p_blue1 = p_blue;
			var notSameTexture = _this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
			var useAlpha = !_this.g2d_useSeparatedAlphaPipeline && !(p_red1 == 1 && p_green1 == 1 && p_blue1 == 1 && p_alpha == 1);
			var notSameUseAlpha = _this.g2d_activeAlpha != useAlpha;
			var notSameFilter = _this.g2d_activeFilter != p_filter;
			_this.g2d_activeAlpha = useAlpha;
			if(notSameTexture || notSameFilter || _this.g2d_activeTextureNeedsRebind) {
				if(_this.g2d_activeNativeTexture != null) {
					if(_this.g2d_quadCount > 0) {
						com_genome2d_context_stats_GStats.drawCalls++;
						_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
						_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
						_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
						_this.g2d_quadCount = 0;
					}
				}
				if(notSameFilter) {
					if(_this.g2d_activeFilter != null) {
						_this.g2d_activeFilter.clear(_this.g2d_context);
					}
					_this.g2d_activeFilter = p_filter;
					if(_this.g2d_activeFilter != null) {
						_this.g2d_currentProgram = _this.getFilterProgram(_this.g2d_activeFilter);
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
						_this.g2d_activeFilter.bind(_this.g2d_context,_this,p_texture);
					} else {
						_this.g2d_currentProgram = _this.g2d_defaultProgram;
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
					}
				}
				if(notSameTexture || _this.g2d_activeTextureNeedsRebind) {
					_this.g2d_activeTextureNeedsRebind = false;
					_this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
					_this.g2d_nativeContext.activeTexture(33984);
					_this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
					_this.g2d_nativeContext.uniform1i(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"sTexture"),0);
				}
			}
			if(_this.g2d_activeAlpha) {
				p_red1 *= p_alpha;
				p_green1 *= p_alpha;
				p_blue1 *= p_alpha;
			}
			var offset = _this.g2d_quadCount * 4 << 2;
			_this.g2d_transforms[offset] = p_x;
			_this.g2d_transforms[offset + 1] = p_y;
			_this.g2d_transforms[offset + 2] = p_rotation;
			_this.g2d_transforms[offset + 3] = 0;
			_this.g2d_transforms[offset + 4] = p_texture.g2d_u;
			_this.g2d_transforms[offset + 5] = p_texture.g2d_v;
			_this.g2d_transforms[offset + 6] = p_texture.g2d_uScale;
			_this.g2d_transforms[offset + 7] = p_texture.g2d_vScale;
			_this.g2d_transforms[offset + 8] = p_texture.g2d_nativeWidth * p_texture.g2d_scaleFactor * p_scaleX;
			_this.g2d_transforms[offset + 9] = p_texture.g2d_inverted ? -(p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor) * p_scaleY : p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor * p_scaleY;
			_this.g2d_transforms[offset + 10] = p_texture.g2d_pivotX * p_texture.g2d_scaleFactor * p_scaleX;
			_this.g2d_transforms[offset + 11] = p_texture.g2d_pivotY * p_texture.g2d_scaleFactor * p_scaleY;
			_this.g2d_transforms[offset + 12] = p_red1;
			_this.g2d_transforms[offset + 13] = p_green1;
			_this.g2d_transforms[offset + 14] = p_blue1;
			_this.g2d_transforms[offset + 15] = p_alpha;
			_this.g2d_quadCount++;
			if(_this.g2d_quadCount == 30) {
				if(_this.g2d_quadCount > 0) {
					com_genome2d_context_stats_GStats.drawCalls++;
					_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
					_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
					_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
					_this.g2d_quadCount = 0;
				}
			}
		}
	}
	,drawMatrix: function(p_texture,p_blendMode,p_a,p_b,p_c,p_d,p_tx,p_ty,p_red,p_green,p_blue,p_alpha,p_filter) {
		if(p_alpha != 0) {
			this.setBlendMode(p_blendMode,p_texture.premultiplied);
			var p_renderer = this.g2d_matrixQuadTextureShaderRenderer;
			if(p_renderer != this.g2d_activeRenderer || this.g2d_activeRenderer == null) {
				this.flushRenderer();
				this.g2d_activeRenderer = p_renderer;
				this.g2d_activeRenderer.bind(this,this.g2d_reinitialize);
			}
			var _this = this.g2d_matrixQuadTextureShaderRenderer;
			var p_tx1 = p_tx;
			var p_ty1 = p_ty;
			var p_red1 = p_red;
			var p_green1 = p_green;
			var p_blue1 = p_blue;
			var notSameTexture = _this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
			var useAlpha = !_this.g2d_useSeparatedAlphaPipeline && !(p_red1 == 1 && p_green1 == 1 && p_blue1 == 1 && p_alpha == 1);
			var notSameUseAlpha = _this.g2d_activeAlpha != useAlpha;
			var notSameFilter = _this.g2d_activeFilter != p_filter;
			_this.g2d_activeAlpha = useAlpha;
			if(notSameTexture || notSameFilter) {
				if(_this.g2d_activeNativeTexture != null) {
					if(_this.g2d_quadCount > 0) {
						com_genome2d_context_stats_GStats.drawCalls++;
						_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
						_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
						_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
						_this.g2d_quadCount = 0;
					}
				}
				if(notSameFilter) {
					if(_this.g2d_activeFilter != null) {
						_this.g2d_activeFilter.clear(_this.g2d_context);
					}
					_this.g2d_activeFilter = p_filter;
					if(_this.g2d_activeFilter != null) {
						_this.g2d_currentProgram = _this.getFilterProgram(_this.g2d_activeFilter);
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
						_this.g2d_activeFilter.bind(_this.g2d_context,_this,p_texture);
					} else {
						_this.g2d_currentProgram = _this.g2d_defaultProgram;
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
					}
				}
				if(notSameTexture) {
					_this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
					_this.g2d_nativeContext.activeTexture(33984);
					_this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
					_this.g2d_nativeContext.uniform1i(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"sTexture"),0);
				}
			}
			var uvx;
			var uvy;
			var uvsx;
			var uvsy;
			var sx;
			var sy;
			var px;
			var py;
			uvx = p_texture.g2d_u;
			uvy = p_texture.g2d_v;
			uvsx = p_texture.g2d_uScale;
			uvsy = p_texture.g2d_vScale;
			sx = p_texture.g2d_nativeWidth * p_texture.g2d_scaleFactor;
			sy = p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor;
			px = p_texture.g2d_pivotX * p_texture.g2d_scaleFactor;
			py = p_texture.g2d_pivotY * p_texture.g2d_scaleFactor;
			if(px != 0 || py != 0) {
				p_tx1 = p_tx1 - px * p_a - py * p_c;
				p_ty1 = p_ty1 - px * p_b - py * p_d;
			}
			if(_this.g2d_activeAlpha && p_texture.premultiplied) {
				p_red1 *= p_alpha;
				p_green1 *= p_alpha;
				p_blue1 *= p_alpha;
			}
			var offset = _this.g2d_quadCount * 4 << 2;
			_this.g2d_transforms[offset] = p_a;
			_this.g2d_transforms[offset + 1] = p_c;
			_this.g2d_transforms[offset + 2] = p_b;
			_this.g2d_transforms[offset + 3] = p_d;
			_this.g2d_transforms[offset + 4] = p_tx1;
			_this.g2d_transforms[offset + 5] = p_ty1;
			_this.g2d_transforms[offset + 6] = sx;
			_this.g2d_transforms[offset + 7] = sy;
			_this.g2d_transforms[offset + 8] = uvx;
			_this.g2d_transforms[offset + 9] = uvy;
			_this.g2d_transforms[offset + 10] = uvsx;
			_this.g2d_transforms[offset + 11] = uvsy;
			_this.g2d_transforms[offset + 12] = p_red1;
			_this.g2d_transforms[offset + 13] = p_green1;
			_this.g2d_transforms[offset + 14] = p_blue1;
			_this.g2d_transforms[offset + 15] = p_alpha;
			_this.g2d_quadCount++;
			if(_this.g2d_quadCount == 30) {
				if(_this.g2d_quadCount > 0) {
					com_genome2d_context_stats_GStats.drawCalls++;
					_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
					_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
					_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
					_this.g2d_quadCount = 0;
				}
			}
		}
	}
	,drawSource: function(p_texture,p_blendMode,p_sourceX,p_sourceY,p_sourceWidth,p_sourceHeight,p_sourcePivotX,p_sourcePivotY,p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_filter) {
		if(p_alpha != 0) {
			this.setBlendMode(p_blendMode,p_texture.premultiplied);
			var p_renderer = this.g2d_drawRenderer;
			if(p_renderer != this.g2d_activeRenderer || this.g2d_activeRenderer == null) {
				this.flushRenderer();
				this.g2d_activeRenderer = p_renderer;
				this.g2d_activeRenderer.bind(this,this.g2d_reinitialize);
			}
			var _this = this.g2d_drawRenderer;
			var p_red1 = p_red;
			var p_green1 = p_green;
			var p_blue1 = p_blue;
			var notSameTexture = _this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
			var useAlpha = !_this.g2d_useSeparatedAlphaPipeline && !(p_red1 == 1 && p_green1 == 1 && p_blue1 == 1 && p_alpha == 1);
			var notSameUseAlpha = _this.g2d_activeAlpha != useAlpha;
			var notSameFilter = _this.g2d_activeFilter != p_filter;
			_this.g2d_activeAlpha = useAlpha;
			if(notSameTexture || notSameFilter || _this.g2d_activeTextureNeedsRebind) {
				if(_this.g2d_activeNativeTexture != null) {
					if(_this.g2d_quadCount > 0) {
						com_genome2d_context_stats_GStats.drawCalls++;
						_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
						_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
						_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
						_this.g2d_quadCount = 0;
					}
				}
				if(notSameFilter) {
					if(_this.g2d_activeFilter != null) {
						_this.g2d_activeFilter.clear(_this.g2d_context);
					}
					_this.g2d_activeFilter = p_filter;
					if(_this.g2d_activeFilter != null) {
						_this.g2d_currentProgram = _this.getFilterProgram(_this.g2d_activeFilter);
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
						_this.g2d_activeFilter.bind(_this.g2d_context,_this,p_texture);
					} else {
						_this.g2d_currentProgram = _this.g2d_defaultProgram;
						_this.g2d_nativeContext.useProgram(_this.g2d_currentProgram);
					}
				}
				if(notSameTexture || _this.g2d_activeTextureNeedsRebind) {
					_this.g2d_activeTextureNeedsRebind = false;
					_this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
					_this.g2d_nativeContext.activeTexture(33984);
					_this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
					_this.g2d_nativeContext.uniform1i(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"sTexture"),0);
				}
			}
			if(_this.g2d_activeAlpha) {
				p_red1 *= p_alpha;
				p_green1 *= p_alpha;
				p_blue1 *= p_alpha;
			}
			var offset = _this.g2d_quadCount * 4 << 2;
			_this.g2d_transforms[offset] = p_x;
			_this.g2d_transforms[offset + 1] = p_y;
			_this.g2d_transforms[offset + 2] = p_rotation;
			_this.g2d_transforms[offset + 3] = 0;
			_this.g2d_transforms[offset + 4] = p_sourceX / p_texture.g2d_gpuWidth;
			_this.g2d_transforms[offset + 5] = p_sourceY / p_texture.g2d_gpuHeight;
			_this.g2d_transforms[offset + 6] = p_sourceWidth / p_texture.g2d_gpuWidth;
			_this.g2d_transforms[offset + 7] = p_sourceHeight / p_texture.g2d_gpuHeight;
			_this.g2d_transforms[offset + 8] = p_sourceWidth * p_texture.g2d_scaleFactor * p_scaleX;
			_this.g2d_transforms[offset + 9] = p_sourceHeight * p_texture.g2d_scaleFactor * p_scaleY;
			_this.g2d_transforms[offset + 10] = p_sourcePivotX * p_texture.g2d_scaleFactor * p_scaleX;
			_this.g2d_transforms[offset + 11] = p_sourcePivotY * p_texture.g2d_scaleFactor * p_scaleY;
			_this.g2d_transforms[offset + 12] = p_red1;
			_this.g2d_transforms[offset + 13] = p_green1;
			_this.g2d_transforms[offset + 14] = p_blue1;
			_this.g2d_transforms[offset + 15] = p_alpha;
			_this.g2d_quadCount++;
			if(_this.g2d_quadCount == 30) {
				if(_this.g2d_quadCount > 0) {
					com_genome2d_context_stats_GStats.drawCalls++;
					_this.g2d_nativeContext.uniformMatrix4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"projectionMatrix"),false,_this.g2d_context.g2d_projectionMatrix.rawData);
					_this.g2d_nativeContext.uniform4fv(_this.g2d_nativeContext.getUniformLocation(_this.g2d_currentProgram,"transforms"),_this.g2d_transforms);
					_this.g2d_nativeContext.drawElements(4,6 * _this.g2d_quadCount,5123,0);
					_this.g2d_quadCount = 0;
				}
			}
		}
	}
	,drawPoly: function(p_texture,p_blendMode,p_vertices,p_uvs,p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_filter) {
		if(p_alpha != 0) {
			this.setBlendMode(p_blendMode,p_texture.premultiplied);
			var p_renderer = this.g2d_triangleTextureBufferCPURenderer;
			if(p_renderer != this.g2d_activeRenderer || this.g2d_activeRenderer == null) {
				this.flushRenderer();
				this.g2d_activeRenderer = p_renderer;
				this.g2d_activeRenderer.bind(this,this.g2d_reinitialize);
			}
			this.g2d_triangleTextureBufferCPURenderer.draw(p_vertices,p_uvs,p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_texture,p_filter);
		}
	}
	,end: function() {
		this.flushRenderer();
	}
	,setRenderer: function(p_renderer) {
		if(p_renderer != this.g2d_activeRenderer || this.g2d_activeRenderer == null) {
			this.flushRenderer();
			this.g2d_activeRenderer = p_renderer;
			this.g2d_activeRenderer.bind(this,this.g2d_reinitialize);
		}
	}
	,getRenderer: function() {
		return this.g2d_activeRenderer;
	}
	,flushRenderer: function() {
		if(this.g2d_activeRenderer != null) {
			this.g2d_activeRenderer.push();
			this.g2d_activeRenderer.clear();
		}
	}
	,clearStencil: function() {
	}
	,renderToStencil: function(p_stencilLayer) {
	}
	,renderToColor: function(p_stencilLayer) {
	}
	,g2d_renderTarget: null
	,g2d_renderTargetMatrix: null
	,g2d_usedRenderTargets: null
	,getRenderTargetMatrix: function() {
		return this.g2d_renderTargetMatrix;
	}
	,getRenderTarget: function() {
		return this.g2d_renderTarget;
	}
	,setRenderTarget: function(p_texture,p_transform,p_clear) {
		if(p_clear == null) {
			p_clear = true;
		}
		if(this.g2d_renderTarget == p_texture && this.g2d_usedRenderTargets == 0) {
			return;
		}
		if(this.g2d_activeRenderer != null) {
			this.g2d_activeRenderer.push();
			this.g2d_activeRenderer = null;
		}
		this.g2d_usedRenderTargets = 0;
		if(p_texture == null) {
			this.g2d_nativeContext.bindFramebuffer(36160,null);
			this.g2d_nativeContext.viewport(0,0,this.g2d_stageViewRect.width | 0,this.g2d_stageViewRect.height | 0);
			this.g2d_nativeContext.enable(3089);
			this.setActiveCamera(this.g2d_activeCamera);
		} else {
			if(p_texture.g2d_nativeTexture == null) {
				var p_arg1 = "Null render texture, will incorrectly render to backbuffer instead.";
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/GWebGLContext.hx", lineNumber : 398, className : "com.genome2d.context.GWebGLContext", methodName : "setRenderTarget"};
				if(com_genome2d_debug_GDebug.showPriority <= 14) {
					var args = [];
					if(p_arg1 != null) {
						args.push(p_arg1);
					}
					if(p_arg2 != null) {
						args.push(p_arg2);
					}
					if(p_arg3 != null) {
						args.push(p_arg3);
					}
					if(p_arg4 != null) {
						args.push(p_arg4);
					}
					if(p_arg5 != null) {
						args.push(p_arg5);
					}
					if(p_arg6 != null) {
						args.push(p_arg6);
					}
					if(p_arg7 != null) {
						args.push(p_arg7);
					}
					if(p_arg8 != null) {
						args.push(p_arg8);
					}
					if(p_arg9 != null) {
						args.push(p_arg9);
					}
					if(p_arg10 != null) {
						args.push(p_arg10);
					}
					if(p_arg11 != null) {
						args.push(p_arg11);
					}
					if(p_arg12 != null) {
						args.push(p_arg12);
					}
					if(p_arg13 != null) {
						args.push(p_arg13);
					}
					if(p_arg14 != null) {
						args.push(p_arg14);
					}
					if(p_arg15 != null) {
						args.push(p_arg15);
					}
					if(p_arg16 != null) {
						args.push(p_arg16);
					}
					if(p_arg17 != null) {
						args.push(p_arg17);
					}
					if(p_arg18 != null) {
						args.push(p_arg18);
					}
					if(p_arg19 != null) {
						args.push(p_arg19);
					}
					if(p_arg20 != null) {
						args.push(p_arg20);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(14,pos,args);
					}
					var msg = "";
					if(pos != null) {
						msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
					}
					if(args.length > 0) {
						msg += args.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg);
					}
				}
			}
			this.g2d_nativeContext.bindFramebuffer(36160,p_texture.getFrameBuffer());
			this.g2d_nativeContext.viewport(0,0,p_texture.g2d_nativeWidth | 0,p_texture.g2d_nativeHeight | 0);
			if(p_texture.needClearAsRenderTarget(p_clear)) {
				this.g2d_nativeContext.clearColor(0,0,0,0);
				this.g2d_nativeContext.clear(16640);
			}
			if(p_transform != null) {
				var p_arg110 = "setRenderTarget p_transform argument is not supported for this target.";
				var p_arg21 = null;
				var p_arg31 = null;
				var p_arg41 = null;
				var p_arg51 = null;
				var p_arg61 = null;
				var p_arg71 = null;
				var p_arg81 = null;
				var p_arg91 = null;
				var p_arg101 = null;
				var p_arg111 = null;
				var p_arg121 = null;
				var p_arg131 = null;
				var p_arg141 = null;
				var p_arg151 = null;
				var p_arg161 = null;
				var p_arg171 = null;
				var p_arg181 = null;
				var p_arg191 = null;
				var p_arg201 = null;
				var pos1 = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/GWebGLContext.hx", lineNumber : 406, className : "com.genome2d.context.GWebGLContext", methodName : "setRenderTarget"};
				if(com_genome2d_debug_GDebug.showPriority <= 14) {
					var args1 = [];
					if(p_arg110 != null) {
						args1.push(p_arg110);
					}
					if(p_arg21 != null) {
						args1.push(p_arg21);
					}
					if(p_arg31 != null) {
						args1.push(p_arg31);
					}
					if(p_arg41 != null) {
						args1.push(p_arg41);
					}
					if(p_arg51 != null) {
						args1.push(p_arg51);
					}
					if(p_arg61 != null) {
						args1.push(p_arg61);
					}
					if(p_arg71 != null) {
						args1.push(p_arg71);
					}
					if(p_arg81 != null) {
						args1.push(p_arg81);
					}
					if(p_arg91 != null) {
						args1.push(p_arg91);
					}
					if(p_arg101 != null) {
						args1.push(p_arg101);
					}
					if(p_arg111 != null) {
						args1.push(p_arg111);
					}
					if(p_arg121 != null) {
						args1.push(p_arg121);
					}
					if(p_arg131 != null) {
						args1.push(p_arg131);
					}
					if(p_arg141 != null) {
						args1.push(p_arg141);
					}
					if(p_arg151 != null) {
						args1.push(p_arg151);
					}
					if(p_arg161 != null) {
						args1.push(p_arg161);
					}
					if(p_arg171 != null) {
						args1.push(p_arg171);
					}
					if(p_arg181 != null) {
						args1.push(p_arg181);
					}
					if(p_arg191 != null) {
						args1.push(p_arg191);
					}
					if(p_arg201 != null) {
						args1.push(p_arg201);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(14,pos1,args1);
					}
					var msg1 = "";
					if(pos1 != null) {
						msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
					}
					if(args1.length > 0) {
						msg1 += args1.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg1;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg1);
					}
				}
			}
			this.g2d_projectionMatrix.reset();
			this.g2d_projectionMatrix.orthoRtt(p_texture.g2d_nativeWidth,p_texture.g2d_nativeHeight,null);
			this.g2d_projectionMatrix.transpose();
			this.g2d_nativeContext.disable(3089);
			this.g2d_drawRenderer.activeTextureNeedsRebind();
		}
		this.g2d_renderTargetMatrix = p_transform;
		this.g2d_renderTarget = p_texture;
	}
	,setRenderTargets: function(p_textures,p_transform,p_clear) {
		if(p_clear == null) {
			p_clear = false;
		}
	}
	,g2d_nextFrameCallback: null
	,callNextFrame: function(p_callback) {
		this.g2d_nextFrameCallback = p_callback;
	}
	,g2d_enterFrameHandler: function() {
		var currentTime = new Date().getTime();
		this.g2d_currentDeltaTime = currentTime - this.g2d_currentTime;
		this.g2d_currentTime = currentTime;
		this.g2d_stats.render(this);
		if(this.g2d_nextFrameCallback != null) {
			var callback = this.g2d_nextFrameCallback;
			this.g2d_nextFrameCallback = null;
			callback();
		}
		this.onFrame.dispatch(this.g2d_currentDeltaTime);
		com_genome2d_context_GRequestAnimationFrame.request($bind(this,this.g2d_enterFrameHandler));
	}
	,getButtons: function(event) {
		var buttonsExists = event.buttons!==void(0);
		if(buttonsExists) {
			return event.buttons;
		}
		var whichExists = event.which!==void(0);
		if(whichExists) {
			switch(event.which) {
			case 2:
				return 4;
			case 3:
				return 2;
			default:
				return event.which;
			}
		}
		return 0;
	}
	,g2d_contextLostEventHandler: function(event) {
		this.g2d_contextLost = true;
	}
	,g2d_contextRestoredEventHandler: function(event) {
	}
	,g2d_mouseEventHandler: function(event) {
		var captured = false;
		event.preventDefault();
		event.stopPropagation();
		var mx;
		var my;
		var isRight = false;
		var buttonDown = false;
		var ctrlKey = false;
		var altKey = false;
		var shiftKey = false;
		var delta = 0;
		var mouseOut = false;
		var rect = this.g2d_nativeStage.getBoundingClientRect();
		var scaleX = this.g2d_stageViewRect.width / rect.width;
		var scaleY = this.g2d_stageViewRect.height / rect.height;
		if(((event) instanceof WheelEvent)) {
			var we = event;
			var buttons = this.getButtons(we);
			mx = (we.clientX - rect.left) * scaleX;
			my = (we.clientY - rect.top) * scaleY;
			buttonDown = (buttons & 1) == 1;
			ctrlKey = we.ctrlKey;
			altKey = we.altKey;
			shiftKey = we.shiftKey;
			delta = we.deltaY;
			if(we.deltaMode != 1) {
				delta = 3 * delta / Math.abs(delta);
			}
		} else if(((event) instanceof MouseEvent)) {
			var me = event;
			var buttons1 = this.getButtons(me);
			mx = (me.clientX - rect.left) * scaleX;
			my = (me.clientY - rect.top) * scaleY;
			buttonDown = (buttons1 & 1) == 1;
			if((buttons1 & 2) == 2) {
				isRight = true;
				buttonDown = isRight;
			}
			if((this.g2d_lastMouseButtonsDown & 2) == 2 && (buttons1 & 2) != 2) {
				isRight = true;
			}
			if((buttons1 & 4) == 4 && event.type == "mousedown") {
				return;
			}
			ctrlKey = me.ctrlKey;
			altKey = me.altKey;
			shiftKey = me.shiftKey;
			this.g2d_lastMouseButtonsDown = buttons1;
		} else {
			var te = event;
			mx = -1;
			my = -1;
			if(this.g2d_activeTouchIdentifier == -1) {
				if(te.changedTouches.length > 0) {
					if(te.type == "touchstart") {
						mx = (te.changedTouches[0].clientX - rect.left) * scaleX;
						my = (te.changedTouches[0].clientY - rect.top) * scaleY;
						buttonDown = true;
						this.g2d_activeTouchIdentifier = te.changedTouches[0].identifier;
					}
				}
			} else {
				var _g = 0;
				var _g1 = te.changedTouches;
				while(_g < _g1.length) {
					var touch = _g1[_g];
					++_g;
					if(touch.identifier == this.g2d_activeTouchIdentifier) {
						mx = (touch.clientX - rect.left) * scaleX;
						my = (touch.clientY - rect.top) * scaleY;
						buttonDown = true;
						if(te.type == "touchend" || te.type == "touchcancel") {
							buttonDown = false;
							this.g2d_activeTouchIdentifier = -1;
						}
						break;
					}
				}
			}
			if(mx == -1 && my == -1) {
				return;
			}
			ctrlKey = te.ctrlKey;
			altKey = te.altKey;
			shiftKey = te.shiftKey;
			this.g2d_lastMouseButtonsDown = buttonDown ? 1 : 0;
		}
		var input = null;
		if(isRight) {
			if(buttonDown) {
				var type = "";
				type = "rightMouseDown";
				input = new com_genome2d_input_GMouseInput(this,this,type,mx,my);
			} else {
				var type1 = "";
				type1 = "rightMouseUp";
				input = new com_genome2d_input_GMouseInput(this,this,type1,mx,my);
			}
		} else {
			var type2 = "";
			switch(event.type) {
			case "mouseleave":case "mousemove":case "touchmove":
				type2 = "mouseMove";
				break;
			case "rightMouseDown":
				type2 = "rightMouseDown";
				break;
			case "rightMouseUp":
				type2 = "rightMouseUp";
				break;
			case "mouseup":case "touchcancel":case "touchend":
				type2 = "mouseUp";
				break;
			case "mousedown":case "touchstart":
				type2 = "mouseDown";
				break;
			case "wheel":
				type2 = "mouseWheel";
				break;
			}
			input = new com_genome2d_input_GMouseInput(this,this,type2,mx,my);
		}
		if(event.type == "mouseleave") {
			mouseOut = true;
		}
		input.worldX = input.contextX = mx;
		input.worldY = input.contextY = my;
		input.buttonDown = buttonDown;
		input.ctrlKey = ctrlKey;
		input.altKey = altKey;
		input.shiftKey = shiftKey;
		input.delta = -(delta | 0);
		input.nativeCaptured = captured;
		input.mouseOut = mouseOut;
		this.onMouseInput.dispatch(input);
		this.g2d_onMouseInputInternal(input);
	}
	,g2d_contextEventHandler: function(event) {
		event.preventDefault();
	}
	,g2d_visibilityChange_handler: function(event) {
		this.onVisibilityChange.dispatch(window.document.hidden);
	}
	,g2d_keyboardEventHandler: function(event) {
		if(this.preventDefaultKeyboard) {
			event.preventDefault();
			event.stopPropagation();
		}
		var keyEvent = event;
		var type = "";
		switch(event.type) {
		case "keydown":
			type = "keyDown";
			break;
		case "keyup":
			type = "keyUp";
			break;
		}
		var input = new com_genome2d_input_GKeyboardInput(type,keyEvent.keyCode,HxOverrides.cca(keyEvent.key,0));
		this.onKeyboardInput.dispatch(input);
	}
	,dispose: function() {
		this.g2d_onMouseInputInternal = null;
	}
	,setDepthTest: function(p_depthMask,p_depthFunc) {
		if(p_depthMask != this.g2d_depthTestEnabled) {
			if(p_depthMask) {
				this.g2d_nativeContext.enable(2929);
				switch(p_depthFunc._hx_index) {
				case 0:
					this.g2d_nativeContext.depthFunc(512);
					break;
				case 1:
					this.g2d_nativeContext.depthFunc(513);
					break;
				case 2:
					this.g2d_nativeContext.depthFunc(514);
					break;
				case 3:
					this.g2d_nativeContext.depthFunc(515);
					break;
				case 4:
					this.g2d_nativeContext.depthFunc(516);
					break;
				case 5:
					this.g2d_nativeContext.depthFunc(517);
					break;
				case 6:
					this.g2d_nativeContext.depthFunc(518);
					break;
				case 7:
					this.g2d_nativeContext.depthFunc(519);
					break;
				}
			} else {
				this.g2d_nativeContext.disable(2929);
			}
			this.g2d_depthTestEnabled = p_depthMask;
		}
	}
	,setBlendMode: function(p_blendMode,p_premultiplied) {
		if(p_blendMode != this.g2d_activeBlendMode || p_premultiplied != this.g2d_activePremultiply) {
			if(this.g2d_activeRenderer != null) {
				this.g2d_activeRenderer.push();
			}
			this.g2d_activeBlendMode = p_blendMode;
			this.g2d_activePremultiply = p_premultiplied;
			com_genome2d_context_GBlendModeFunc.setBlendMode(this.g2d_nativeContext,this.g2d_activeBlendMode,this.g2d_activePremultiply);
		}
	}
	,gotFocus: function() {
	}
	,lostFocus: function() {
	}
	,__class__: com_genome2d_context_GWebGLContext
};
var com_genome2d_context_IGRenderer = function() { };
$hxClasses["com.genome2d.context.IGRenderer"] = com_genome2d_context_IGRenderer;
com_genome2d_context_IGRenderer.__name__ = "com.genome2d.context.IGRenderer";
com_genome2d_context_IGRenderer.__isInterface__ = true;
com_genome2d_context_IGRenderer.prototype = {
	getProgram: null
	,bind: null
	,push: null
	,clear: null
	,__class__: com_genome2d_context_IGRenderer
};
var com_genome2d_context_filters_GFilter = function() {
	this.fragmentCode = "";
	this.overrideFragmentShader = true;
	this.id = com_genome2d_context_filters_GFilter.g2d_count++ + "";
};
$hxClasses["com.genome2d.context.filters.GFilter"] = com_genome2d_context_filters_GFilter;
com_genome2d_context_filters_GFilter.__name__ = "com.genome2d.context.filters.GFilter";
com_genome2d_context_filters_GFilter.prototype = {
	id: null
	,overrideFragmentShader: null
	,fragmentCode: null
	,g2d_fragmentConstants: null
	,bind: function(p_context,p_renderer,p_defaultTexture) {
	}
	,clear: function(p_context) {
	}
	,__class__: com_genome2d_context_filters_GFilter
};
var com_genome2d_context_filters_GColorMatrixFilter = function() {
	com_genome2d_context_filters_GFilter.call(this);
	this.fragmentCode = "\r\n            precision lowp float;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vTexCoord;\r\n            uniform sampler2D sTexture;\r\n            uniform float m[20];\r\n\r\n            void main(void)\r\n            {\r\n                vec4 c = texture2D(sTexture, vTexCoord);\r\n\r\n                vec4 result;\r\n\r\n                if (c.a > 0.0) {\r\n                    c.rgb /= c.a;\r\n                }\r\n\r\n                result.r = (m[0] * c.r);\r\n                    result.r += (m[1] * c.g);\r\n                    result.r += (m[2] * c.b);\r\n                    result.r += (m[3] * c.a);\r\n                    result.r += m[4];\r\n\r\n                result.g = (m[5] * c.r);\r\n                    result.g += (m[6] * c.g);\r\n                    result.g += (m[7] * c.b);\r\n                    result.g += (m[8] * c.a);\r\n                    result.g += m[9];\r\n\r\n                result.b = (m[10] * c.r);\r\n                   result.b += (m[11] * c.g);\r\n                   result.b += (m[12] * c.b);\r\n                   result.b += (m[13] * c.a);\r\n                   result.b += m[14];\r\n\r\n                result.a = (m[15] * c.r);\r\n                   result.a += (m[16] * c.g);\r\n                   result.a += (m[17] * c.b);\r\n                   result.a += (m[18] * c.a);\r\n                   result.a += m[19];\r\n\r\n                // Premultiply alpha again.\r\n                result.rgb *= result.a;\r\n\r\n                gl_FragColor = vec4(result.rgb, result.a) * vColor;\r\n            }\r\n\t    ";
};
$hxClasses["com.genome2d.context.filters.GColorMatrixFilter"] = com_genome2d_context_filters_GColorMatrixFilter;
com_genome2d_context_filters_GColorMatrixFilter.__name__ = "com.genome2d.context.filters.GColorMatrixFilter";
com_genome2d_context_filters_GColorMatrixFilter.__super__ = com_genome2d_context_filters_GFilter;
com_genome2d_context_filters_GColorMatrixFilter.prototype = $extend(com_genome2d_context_filters_GFilter.prototype,{
	setMatrix: function(p_matrix) {
		p_matrix[4] /= 255;
		p_matrix[9] /= 255;
		p_matrix[14] /= 255;
		p_matrix[19] /= 255;
		this.g2d_fragmentConstants = p_matrix;
	}
	,bind: function(p_context,p_renderer,p_defaultTexture) {
		p_context.getNativeContext().uniform1fv(p_context.getNativeContext().getUniformLocation(p_renderer.getProgram(),"m"),this.g2d_fragmentConstants);
	}
	,__class__: com_genome2d_context_filters_GColorMatrixFilter
});
var com_genome2d_context_filters_GDesaturateFilter = function() {
	com_genome2d_context_filters_GFilter.call(this);
	this.fragmentCode = "\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\t\t\tuniform vec4 values;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t    vec4 mainColor = texture2D(sTexture, vTexCoord);\r\n\t\t\t    mainColor = vec4(vec3(dot(mainColor.xyz, vec3(0.3, 0.59, 0.11))), mainColor.w);\r\n\r\n\t\t\t\tgl_FragColor = mainColor * vColor;\r\n\t\t\t}\r\n\t    ";
};
$hxClasses["com.genome2d.context.filters.GDesaturateFilter"] = com_genome2d_context_filters_GDesaturateFilter;
com_genome2d_context_filters_GDesaturateFilter.__name__ = "com.genome2d.context.filters.GDesaturateFilter";
com_genome2d_context_filters_GDesaturateFilter.__super__ = com_genome2d_context_filters_GFilter;
com_genome2d_context_filters_GDesaturateFilter.prototype = $extend(com_genome2d_context_filters_GFilter.prototype,{
	bind: function(p_context,p_renderer,p_defaultTexture) {
	}
	,__class__: com_genome2d_context_filters_GDesaturateFilter
});
var com_genome2d_context_filters_GDisplacementFilter = function(p_scaleX,p_scaleY) {
	if(p_scaleY == null) {
		p_scaleY = .1;
	}
	if(p_scaleX == null) {
		p_scaleX = .1;
	}
	this.offset = 0;
	com_genome2d_context_filters_GFilter.call(this);
	this._scaleX = p_scaleX;
	this._scaleY = p_scaleY;
	this.fragmentCode = "\r\n            precision lowp float;\r\n\r\n            varying vec2 vTexCoord;\r\n            uniform sampler2D sTexture;\r\n\r\n            uniform sampler2D sDisplacementTexture;\r\n\r\n            uniform vec2 scale;\r\n\r\n            uniform float sOffset;\r\n            uniform float sOne;\r\n\r\n            void main(void)\r\n            {\r\n                vec2 copyTexCoord = vTexCoord;\r\n\r\n                copyTexCoord.y = copyTexCoord.y + sOffset;\r\n\r\n                vec4 cDisp = texture2D(sDisplacementTexture, copyTexCoord);\r\n\r\n                copyTexCoord.x = vTexCoord.x + cDisp.r * scale.x;\r\n                copyTexCoord.y = vTexCoord.y + cDisp.r * scale.y;\r\n\r\n                vec4 c = texture2D(sTexture, copyTexCoord);\r\n\r\n                gl_FragColor = c;\r\n            }\r\n\t    ";
};
$hxClasses["com.genome2d.context.filters.GDisplacementFilter"] = com_genome2d_context_filters_GDisplacementFilter;
com_genome2d_context_filters_GDisplacementFilter.__name__ = "com.genome2d.context.filters.GDisplacementFilter";
com_genome2d_context_filters_GDisplacementFilter.__super__ = com_genome2d_context_filters_GFilter;
com_genome2d_context_filters_GDisplacementFilter.prototype = $extend(com_genome2d_context_filters_GFilter.prototype,{
	_scaleX: null
	,_scaleY: null
	,offset: null
	,displacementMap: null
	,bind: function(p_context,p_renderer,p_defaultTexture) {
		var nativeContext = p_context.getNativeContext();
		var nativeProgram = p_renderer.getProgram();
		nativeContext.uniform2fv(nativeContext.getUniformLocation(nativeProgram,"scale"),[this._scaleX,this._scaleY]);
		nativeContext.uniform1f(nativeContext.getUniformLocation(nativeProgram,"sOffset"),this.offset);
		nativeContext.activeTexture(33985);
		nativeContext.bindTexture(3553,this.displacementMap.g2d_nativeTexture);
		nativeContext.uniform1i(nativeContext.getUniformLocation(nativeProgram,"sDisplacementTexture"),1);
	}
	,__class__: com_genome2d_context_filters_GDisplacementFilter
});
var com_genome2d_context_filters_GMaskFilter = function() {
	this.vRatio = 1;
	this.uRatio = 1;
	this.v2 = 0;
	this.u2 = 0;
	this.v1 = 0;
	this.u1 = 0;
	com_genome2d_context_filters_GFilter.call(this);
	this.fragmentCode = "\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tuniform sampler2D sMaskTexture;\r\n\t\t\tuniform vec2 uv1;\r\n\t\t\tuniform vec2 uv2;\r\n\t\t\tuniform vec2 uvRatio;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t    vec4 mainColor = texture2D(sTexture, vTexCoord);\r\n\t\t\t    vec2 modifyUv = vTexCoord - uv2;\r\n\t\t\t    modifyUv = modifyUv * uvRatio;\r\n\t\t\t    modifyUv = modifyUv + uv1;\r\n\t\t\t    vec4 maskColor = texture2D(sMaskTexture, modifyUv);\r\n\r\n\t\t\t\tgl_FragColor = mainColor * maskColor.xxxx;\r\n\t\t\t}\r\n\t    ";
};
$hxClasses["com.genome2d.context.filters.GMaskFilter"] = com_genome2d_context_filters_GMaskFilter;
com_genome2d_context_filters_GMaskFilter.__name__ = "com.genome2d.context.filters.GMaskFilter";
com_genome2d_context_filters_GMaskFilter.__super__ = com_genome2d_context_filters_GFilter;
com_genome2d_context_filters_GMaskFilter.prototype = $extend(com_genome2d_context_filters_GFilter.prototype,{
	maskTexture: null
	,u1: null
	,v1: null
	,u2: null
	,v2: null
	,uRatio: null
	,vRatio: null
	,bind: function(p_context,p_renderer,p_defaultTexture) {
		var nativeContext = p_context.getNativeContext();
		var nativeProgram = p_renderer.getProgram();
		nativeContext.uniform2f(nativeContext.getUniformLocation(nativeProgram,"uv1"),this.u1,this.v1);
		nativeContext.uniform2f(nativeContext.getUniformLocation(nativeProgram,"uv2"),this.u2,this.v2);
		nativeContext.uniform2f(nativeContext.getUniformLocation(nativeProgram,"uvRatio"),this.uRatio,this.vRatio);
		nativeContext.activeTexture(33985);
		nativeContext.bindTexture(3553,this.maskTexture.g2d_nativeTexture);
		nativeContext.uniform1i(nativeContext.getUniformLocation(nativeProgram,"sMaskTexture"),1);
	}
	,__class__: com_genome2d_context_filters_GMaskFilter
});
var com_genome2d_context_renderers_G3DRenderer = function(p_vertices,p_uvs,p_indices,p_normals,p_generatePerspectiveMatrix) {
	if(p_generatePerspectiveMatrix == null) {
		p_generatePerspectiveMatrix = false;
	}
	this.g2d_initialized = -1;
	this.g2d_quadCount = 0;
	this.invalidateGeometry(p_vertices,p_uvs,p_indices,p_normals);
	this.modelMatrix = new com_genome2d_geom_GMatrix3D();
	this.cameraMatrix = new com_genome2d_geom_GMatrix3D();
	this.lightDirection = new com_genome2d_geom_GFloat4();
};
$hxClasses["com.genome2d.context.renderers.G3DRenderer"] = com_genome2d_context_renderers_G3DRenderer;
com_genome2d_context_renderers_G3DRenderer.__name__ = "com.genome2d.context.renderers.G3DRenderer";
com_genome2d_context_renderers_G3DRenderer.__interfaces__ = [com_genome2d_context_IGRenderer];
com_genome2d_context_renderers_G3DRenderer.prototype = {
	modelMatrix: null
	,cameraMatrix: null
	,projectionMatrix: null
	,g2d_context: null
	,g2d_nativeContext: null
	,g2d_quadCount: null
	,g2d_indexBuffer: null
	,g2d_vertexBuffer: null
	,g2d_uvBuffer: null
	,g2d_normalBuffer: null
	,g2d_indices: null
	,g2d_vertices: null
	,g2d_uvs: null
	,g2d_normals: null
	,g2d_activeNativeTexture: null
	,g2d_initialized: null
	,lightDirection: null
	,lightColor: null
	,ambientColor: null
	,tintColor: null
	,texture: null
	,g2d_program: null
	,getProgram: function() {
		return this.g2d_program;
	}
	,invalidateGeometry: function(p_vertices,p_uvs,p_indices,p_normals) {
		this.g2d_vertices = new Float32Array(p_vertices.length);
		var _g = 0;
		var _g1 = p_vertices.length;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_vertices[i] = p_vertices[i];
		}
		this.g2d_uvs = new Float32Array(p_uvs.length);
		var _g2 = 0;
		var _g3 = p_uvs.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.g2d_uvs[i1] = p_uvs[i1];
		}
		this.g2d_normals = new Float32Array(p_normals.length);
		var _g4 = 0;
		var _g5 = p_normals.length;
		while(_g4 < _g5) {
			var i2 = _g4++;
			this.g2d_normals[i2] = p_normals[i2];
		}
		this.g2d_indices = new Uint16Array(p_indices.length);
		var _g6 = 0;
		var _g7 = p_indices.length;
		while(_g6 < _g7) {
			var i3 = _g6++;
			this.g2d_indices[i3] = p_indices[i3];
		}
	}
	,getShader: function(shaderSrc,shaderType) {
		var shader = this.g2d_nativeContext.createShader(shaderType);
		this.g2d_nativeContext.shaderSource(shader,shaderSrc);
		this.g2d_nativeContext.compileShader(shader);
		if(!this.g2d_nativeContext.getShaderParameter(shader,35713)) {
			var p_arg1 = "Shader compilation error: " + this.g2d_nativeContext.getShaderInfoLog(shader);
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/renderers/G3DRenderer.hx", lineNumber : 190, className : "com.genome2d.context.renderers.G3DRenderer", methodName : "getShader"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return shader;
	}
	,initialize: function(p_context) {
		this.g2d_context = p_context;
		this.g2d_nativeContext = this.g2d_context.g2d_nativeContext;
		var fragmentShader = this.getShader("\r\n\t\t\t#ifdef GL_ES\r\n\t\t\tprecision highp float;\r\n\t\t\t#endif\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying vec3 vNormal;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tuniform vec3 lightDirection;\r\n\t\t\tuniform vec3 lightColor;\r\n\t\t\tuniform vec3 ambientColor;\r\n\t\t\tuniform vec4 tintColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvec4 texColor = texture2D(sTexture, vUv);\r\n\r\n\t\t\t\tfloat light = -dot(vNormal, lightDirection);\r\n\t\t\t\tlight = clamp(light, 0.0, 1.0);\r\n\r\n\t\t\t\tvec3 directionColor = texColor.xyz * light * lightColor;\r\n\t\t\t\tvec3 ambientColor = texColor.xyz * ambientColor.xyz;\r\n\r\n\t\t\t\ttexColor.xyz = directionColor + ambientColor;\r\n\t\t\t\tgl_FragColor = tintColor * texColor;\r\n\t\t\t}\r\n\t\t",35632);
		var vertexShader = this.getShader("\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\tuniform mat4 invertedMatrix;\r\n\r\n\t\t\tattribute vec3 aPosition;\r\n\t\t\tattribute vec2 aUv;\r\n\t\t\tattribute vec3 aNormal;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying vec3 vNormal;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvUv = aUv;\r\n\r\n\t\t\t\tvNormal = (vec4(aNormal.x, aNormal.y, aNormal.z, 1) * invertedMatrix).xyz;\r\n\t\t\t\tvNormal = normalize(vNormal);\r\n\r\n\t\t\t\tgl_Position = vec4(aPosition.x, aPosition.y, aPosition.z, 1);\r\n\t\t\t\tgl_Position = gl_Position * modelMatrix;\r\n\t\t\t\tgl_Position = gl_Position * cameraMatrix;\r\n\t\t\t\tgl_Position = gl_Position * projectionMatrix;\r\n\t\t\t}\r\n\t\t",35633);
		this.g2d_program = this.g2d_nativeContext.createProgram();
		this.g2d_nativeContext.attachShader(this.g2d_program,vertexShader);
		this.g2d_nativeContext.attachShader(this.g2d_program,fragmentShader);
		this.g2d_nativeContext.linkProgram(this.g2d_program);
		this.g2d_nativeContext.useProgram(this.g2d_program);
		this.g2d_program.positionAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aPosition");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.positionAttribute);
		this.g2d_program.uvAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aUv");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.uvAttribute);
		this.g2d_program.normalAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aNormal");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.normalAttribute);
		this.g2d_program.samplerUniform = this.g2d_nativeContext.getUniformLocation(this.g2d_program,"sTexture");
		this.g2d_indexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_vertexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_uvBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_normalBuffer = this.g2d_nativeContext.createBuffer();
	}
	,bind: function(p_context,p_reinitialize) {
		if(p_reinitialize != this.g2d_initialized) {
			this.initialize(p_context);
		}
		this.g2d_initialized = p_reinitialize;
		this.g2d_nativeContext.useProgram(this.g2d_program);
		p_context.setDepthTest(true,com_genome2d_context_GDepthFunc.LESS);
		this.g2d_nativeContext.enable(2884);
	}
	,draw: function(p_cull,p_renderType) {
		if(p_cull == null) {
			p_cull = 0;
		}
		if(p_cull == 2) {
			this.g2d_nativeContext.cullFace(1029);
		} else if(p_cull == 1) {
			this.g2d_nativeContext.cullFace(1028);
		}
		if(this.projectionMatrix != null) {
			this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"projectionMatrix"),false,this.projectionMatrix.rawData);
		} else {
			this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
		}
		var transposedMatrix = this.modelMatrix.clone();
		transposedMatrix.transpose();
		this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"modelMatrix"),false,transposedMatrix.rawData);
		transposedMatrix = this.cameraMatrix.clone();
		transposedMatrix.transpose();
		this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"cameraMatrix"),false,transposedMatrix.rawData);
		transposedMatrix = this.modelMatrix.clone();
		transposedMatrix.invert();
		this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"invertedMatrix"),false,transposedMatrix.rawData);
		this.g2d_nativeContext.uniform3f(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"lightDirection"),this.lightDirection.x,this.lightDirection.y,this.lightDirection.z);
		this.g2d_nativeContext.uniform3f(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"lightColor"),this.lightColor.x,this.lightColor.y,this.lightColor.z);
		this.g2d_nativeContext.uniform3f(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"ambientColor"),this.ambientColor.x,this.ambientColor.y,this.ambientColor.z);
		this.g2d_nativeContext.uniform4f(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"tintColor"),this.tintColor.x * this.tintColor.w,this.tintColor.y * this.tintColor.w,this.tintColor.z * this.tintColor.w,this.tintColor.w);
		this.g2d_activeNativeTexture = this.texture.g2d_nativeTexture;
		this.g2d_nativeContext.activeTexture(33984);
		this.g2d_nativeContext.bindTexture(3553,this.texture.g2d_nativeTexture);
		this.g2d_nativeContext.uniform1i(this.g2d_program.samplerUniform,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_vertexBuffer);
		this.g2d_nativeContext.bufferData(34962,this.g2d_vertices,35040);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.positionAttribute,3,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_uvBuffer);
		this.g2d_nativeContext.bufferData(34962,this.g2d_uvs,35040);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.uvAttribute,2,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_normalBuffer);
		this.g2d_nativeContext.bufferData(34962,this.g2d_normals,35040);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.normalAttribute,3,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bufferData(34963,this.g2d_indices,35044);
		this.g2d_nativeContext.drawElements(4,this.g2d_indices.length,5123,0);
	}
	,push: function() {
	}
	,clear: function() {
		this.g2d_activeNativeTexture = null;
		this.g2d_context.setDepthTest(false,com_genome2d_context_GDepthFunc.ALWAYS);
		this.g2d_nativeContext.disable(2884);
	}
	,dispose: function() {
		this.g2d_nativeContext.deleteBuffer(this.g2d_indexBuffer);
		this.g2d_nativeContext.deleteBuffer(this.g2d_vertexBuffer);
		this.g2d_nativeContext.deleteBuffer(this.g2d_uvBuffer);
		this.g2d_nativeContext.deleteBuffer(this.g2d_normalBuffer);
		this.g2d_nativeContext.deleteProgram(this.g2d_program);
	}
	,__class__: com_genome2d_context_renderers_G3DRenderer
};
var com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer = function() {
	this.g2d_initialized = -1;
	this.g2d_useSeparatedAlphaPipeline = false;
	this.g2d_activeAlpha = false;
	this.g2d_quadCount = 0;
};
$hxClasses["com.genome2d.context.renderers.GMatrixQuadTextureShaderRenderer"] = com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer;
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.__name__ = "com.genome2d.context.renderers.GMatrixQuadTextureShaderRenderer";
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.__interfaces__ = [com_genome2d_context_IGRenderer];
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.prototype = {
	g2d_nativeContext: null
	,g2d_quadCount: null
	,g2d_geometryBuffer: null
	,g2d_uvBuffer: null
	,g2d_constantIndexBuffer: null
	,g2d_constantIndexAlphaBuffer: null
	,g2d_indexBuffer: null
	,g2d_activeNativeTexture: null
	,g2d_activeFilter: null
	,g2d_activeAlpha: null
	,g2d_defaultProgram: null
	,g2d_currentProgram: null
	,g2d_cachedFilterPrograms: null
	,g2d_vertexShader: null
	,g2d_defaultFragmentShader: null
	,g2d_previousFragmentShader: null
	,g2d_useSeparatedAlphaPipeline: null
	,g2d_transforms: null
	,g2d_context: null
	,g2d_initialized: null
	,getProgram: function() {
		return this.g2d_currentProgram;
	}
	,getFilterProgram: function(p_filter) {
		var program = null;
		if(this.g2d_cachedFilterPrograms == null) {
			this.g2d_cachedFilterPrograms = new haxe_ds_StringMap();
		}
		var key = p_filter.id;
		var _this = this.g2d_cachedFilterPrograms;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = p_filter.id;
			var _this1 = this.g2d_cachedFilterPrograms;
			program = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		} else {
			var fragmentShader = this.getShader(p_filter.fragmentCode,35632);
			program = this.g2d_nativeContext.createProgram();
			this.g2d_nativeContext.attachShader(program,this.g2d_vertexShader);
			this.g2d_nativeContext.attachShader(program,fragmentShader);
			this.g2d_nativeContext.linkProgram(program);
			program.samplerUniform = this.g2d_nativeContext.getUniformLocation(program,"sTexture");
			program.positionAttribute = this.g2d_nativeContext.getAttribLocation(program,"aPosition");
			this.g2d_nativeContext.enableVertexAttribArray(program.positionAttribute);
			program.texCoordAttribute = this.g2d_nativeContext.getAttribLocation(program,"aTexCoord");
			this.g2d_nativeContext.enableVertexAttribArray(program.texCoordAttribute);
			program.constantIndexAttribute = this.g2d_nativeContext.getAttribLocation(program,"aConstantIndex");
			this.g2d_nativeContext.enableVertexAttribArray(program.constantIndexAttribute);
			var key2 = p_filter.id;
			var _this2 = this.g2d_cachedFilterPrograms;
			var value = program;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,value);
			} else {
				_this2.h[key2] = value;
			}
		}
		return program;
	}
	,getShader: function(shaderSrc,shaderType) {
		var shader = this.g2d_nativeContext.createShader(shaderType);
		this.g2d_nativeContext.shaderSource(shader,shaderSrc);
		this.g2d_nativeContext.compileShader(shader);
		if(!this.g2d_nativeContext.getShaderParameter(shader,35713)) {
			var p_arg1 = "Shader compilation error: " + this.g2d_nativeContext.getShaderInfoLog(shader);
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/renderers/GMatrixQuadTextureShaderRenderer.hx", lineNumber : 150, className : "com.genome2d.context.renderers.GMatrixQuadTextureShaderRenderer", methodName : "getShader"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return shader;
	}
	,initialize: function(p_context) {
		this.g2d_context = p_context;
		this.g2d_nativeContext = this.g2d_context.g2d_nativeContext;
		this.g2d_vertexShader = this.getShader("\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform vec4 transforms[" + 120 + "];\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aConstantIndex;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvec2 temp1 = vec2(aPosition.x * transforms[int(aConstantIndex.y)].z, aPosition.y * transforms[int(aConstantIndex.y)].w);\r\n\t\t\t\tvec2 temp2 = vec2(temp1.x * transforms[int(aConstantIndex.x)].x, temp1.y * transforms[int(aConstantIndex.x)].y);\r\n\t\t\t\ttemp2.x += temp2.y;\r\n\t\t\t\ttemp2.x += transforms[int(aConstantIndex.y)].x;\r\n\r\n\t\t\t\tvec2 temp3 = vec2(temp1.x * transforms[int(aConstantIndex.x)].z, temp1.y * transforms[int(aConstantIndex.x)].w);\r\n\t\t\t\ttemp3.x += temp3.y;\r\n\t\t\t\ttemp3.x += transforms[int(aConstantIndex.y)].y;\r\n\r\n\t\t\t\tgl_Position = vec4(temp2.x, temp3.x, 0, 1) * projectionMatrix;\r\n\r\n\t\t\t\tvTexCoord = vec2(aTexCoord.x*transforms[int(aConstantIndex.z)].z+transforms[int(aConstantIndex.z)].x, aTexCoord.y*transforms[int(aConstantIndex.z)].w+transforms[int(aConstantIndex.z)].y);\r\n\t\t\t\tvColor = transforms[int(aConstantIndex.w)];\r\n\t\t\t}\r\n\t\t ",35633);
		this.g2d_defaultFragmentShader = this.getShader("\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t\t",35632);
		this.g2d_previousFragmentShader = this.g2d_defaultFragmentShader;
		this.g2d_defaultProgram = this.g2d_nativeContext.createProgram();
		this.g2d_nativeContext.attachShader(this.g2d_defaultProgram,this.g2d_vertexShader);
		this.g2d_nativeContext.attachShader(this.g2d_defaultProgram,this.g2d_defaultFragmentShader);
		this.g2d_nativeContext.linkProgram(this.g2d_defaultProgram);
		var vertices = new Float32Array(240);
		var uvs = new Float32Array(240);
		var registerIndices = new Float32Array(360);
		var registerIndicesAlpha = new Float32Array(480);
		var _g = 0;
		while(_g < 30) {
			var i = _g++;
			vertices[i * 8] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[0];
			vertices[i * 8 + 1] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[1];
			vertices[i * 8 + 2] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[2];
			vertices[i * 8 + 3] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[3];
			vertices[i * 8 + 4] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[4];
			vertices[i * 8 + 5] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[5];
			vertices[i * 8 + 6] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[6];
			vertices[i * 8 + 7] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[7];
			uvs[i * 8] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[0];
			uvs[i * 8 + 1] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[1];
			uvs[i * 8 + 2] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[2];
			uvs[i * 8 + 3] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[3];
			uvs[i * 8 + 4] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[4];
			uvs[i * 8 + 5] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[5];
			uvs[i * 8 + 6] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[6];
			uvs[i * 8 + 7] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[7];
			var index = i * 3;
			registerIndices[index * 4] = index;
			registerIndices[index * 4 + 1] = index + 1;
			registerIndices[index * 4 + 2] = index + 2;
			registerIndices[index * 4 + 3] = index;
			registerIndices[index * 4 + 4] = index + 1;
			registerIndices[index * 4 + 5] = index + 2;
			registerIndices[index * 4 + 6] = index;
			registerIndices[index * 4 + 7] = index + 1;
			registerIndices[index * 4 + 8] = index + 2;
			registerIndices[index * 4 + 9] = index;
			registerIndices[index * 4 + 10] = index + 1;
			registerIndices[index * 4 + 11] = index + 2;
			var index1 = i * 4;
			registerIndicesAlpha[index1 * 4] = index1;
			registerIndicesAlpha[index1 * 4 + 1] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 2] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 3] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 4] = index1;
			registerIndicesAlpha[index1 * 4 + 5] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 6] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 7] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 8] = index1;
			registerIndicesAlpha[index1 * 4 + 9] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 10] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 11] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 12] = index1;
			registerIndicesAlpha[index1 * 4 + 13] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 14] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 15] = index1 + 3;
		}
		this.g2d_geometryBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_geometryBuffer);
		this.g2d_nativeContext.bufferData(34962,vertices,35040);
		this.g2d_uvBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_uvBuffer);
		this.g2d_nativeContext.bufferData(34962,uvs,35040);
		this.g2d_constantIndexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexBuffer);
		this.g2d_nativeContext.bufferData(34962,registerIndices,35040);
		this.g2d_constantIndexAlphaBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexAlphaBuffer);
		this.g2d_nativeContext.bufferData(34962,registerIndicesAlpha,35040);
		var indices = new Uint16Array(180);
		var _g1 = 0;
		while(_g1 < 30) {
			var i1 = _g1++;
			var ao = i1 * 6;
			var io = i1 * 4;
			indices[ao] = io;
			indices[ao + 1] = io + 1;
			indices[ao + 2] = io + 2;
			indices[ao + 3] = io;
			indices[ao + 4] = io + 2;
			indices[ao + 5] = io + 3;
		}
		this.g2d_indexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bufferData(34963,indices,35044);
		this.g2d_defaultProgram.samplerUniform = this.g2d_nativeContext.getUniformLocation(this.g2d_defaultProgram,"sTexture");
		this.g2d_defaultProgram.positionAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aPosition");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.positionAttribute);
		this.g2d_defaultProgram.texCoordAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aTexCoord");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.texCoordAttribute);
		this.g2d_defaultProgram.constantIndexAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aConstantIndex");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.constantIndexAttribute);
		this.g2d_transforms = new Float32Array(480);
	}
	,bind: function(p_context,p_reinitialize) {
		if(p_reinitialize != this.g2d_initialized) {
			this.initialize(p_context);
		}
		this.g2d_initialized = p_reinitialize;
		this.g2d_currentProgram = this.g2d_defaultProgram;
		this.g2d_nativeContext.useProgram(this.g2d_defaultProgram);
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_geometryBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.positionAttribute,2,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_uvBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.texCoordAttribute,2,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexAlphaBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.constantIndexAttribute,4,5126,false,0,0);
	}
	,draw: function(p_a,p_b,p_c,p_d,p_tx,p_ty,p_red,p_green,p_blue,p_alpha,p_texture,p_filter,p_overrideSource,p_sourceX,p_sourceY,p_sourceWidth,p_sourceHeight) {
		var notSameTexture = this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
		var useAlpha = !this.g2d_useSeparatedAlphaPipeline && !(p_red == 1 && p_green == 1 && p_blue == 1 && p_alpha == 1);
		var notSameUseAlpha = this.g2d_activeAlpha != useAlpha;
		var notSameFilter = this.g2d_activeFilter != p_filter;
		this.g2d_activeAlpha = useAlpha;
		if(notSameTexture || notSameFilter) {
			if(this.g2d_activeNativeTexture != null) {
				if(this.g2d_quadCount > 0) {
					com_genome2d_context_stats_GStats.drawCalls++;
					this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
					this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
					this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
					this.g2d_quadCount = 0;
				}
			}
			if(notSameFilter) {
				if(this.g2d_activeFilter != null) {
					this.g2d_activeFilter.clear(this.g2d_context);
				}
				this.g2d_activeFilter = p_filter;
				if(this.g2d_activeFilter != null) {
					this.g2d_currentProgram = this.getFilterProgram(this.g2d_activeFilter);
					this.g2d_nativeContext.useProgram(this.g2d_currentProgram);
					this.g2d_activeFilter.bind(this.g2d_context,this,p_texture);
				} else {
					this.g2d_currentProgram = this.g2d_defaultProgram;
					this.g2d_nativeContext.useProgram(this.g2d_currentProgram);
				}
			}
			if(notSameTexture) {
				this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
				this.g2d_nativeContext.activeTexture(33984);
				this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
				this.g2d_nativeContext.uniform1i(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"sTexture"),0);
			}
		}
		var uvx;
		var uvy;
		var uvsx;
		var uvsy;
		var sx;
		var sy;
		var px;
		var py;
		if(p_overrideSource) {
			uvx = p_sourceX / p_texture.g2d_nativeWidth;
			uvy = p_sourceY / p_texture.g2d_nativeHeight;
			uvsx = p_sourceWidth / p_texture.g2d_nativeWidth;
			uvsy = p_sourceHeight / p_texture.g2d_nativeHeight;
			sx = p_sourceWidth;
			sy = p_sourceHeight;
			px = 0;
			py = 0;
		} else {
			uvx = p_texture.g2d_u;
			uvy = p_texture.g2d_v;
			uvsx = p_texture.g2d_uScale;
			uvsy = p_texture.g2d_vScale;
			sx = p_texture.g2d_nativeWidth * p_texture.g2d_scaleFactor;
			sy = p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor;
			px = p_texture.g2d_pivotX * p_texture.g2d_scaleFactor;
			py = p_texture.g2d_pivotY * p_texture.g2d_scaleFactor;
		}
		if(px != 0 || py != 0) {
			p_tx = p_tx - px * p_a - py * p_c;
			p_ty = p_ty - px * p_b - py * p_d;
		}
		if(this.g2d_activeAlpha && p_texture.premultiplied) {
			p_red *= p_alpha;
			p_green *= p_alpha;
			p_blue *= p_alpha;
		}
		var offset = this.g2d_quadCount * 4 << 2;
		this.g2d_transforms[offset] = p_a;
		this.g2d_transforms[offset + 1] = p_c;
		this.g2d_transforms[offset + 2] = p_b;
		this.g2d_transforms[offset + 3] = p_d;
		this.g2d_transforms[offset + 4] = p_tx;
		this.g2d_transforms[offset + 5] = p_ty;
		this.g2d_transforms[offset + 6] = sx;
		this.g2d_transforms[offset + 7] = sy;
		this.g2d_transforms[offset + 8] = uvx;
		this.g2d_transforms[offset + 9] = uvy;
		this.g2d_transforms[offset + 10] = uvsx;
		this.g2d_transforms[offset + 11] = uvsy;
		this.g2d_transforms[offset + 12] = p_red;
		this.g2d_transforms[offset + 13] = p_green;
		this.g2d_transforms[offset + 14] = p_blue;
		this.g2d_transforms[offset + 15] = p_alpha;
		this.g2d_quadCount++;
		if(this.g2d_quadCount == 30) {
			if(this.g2d_quadCount > 0) {
				com_genome2d_context_stats_GStats.drawCalls++;
				this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
				this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
				this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
				this.g2d_quadCount = 0;
			}
		}
	}
	,push: function() {
		if(this.g2d_quadCount > 0) {
			com_genome2d_context_stats_GStats.drawCalls++;
			this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
			this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
			this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
			this.g2d_quadCount = 0;
		}
	}
	,clear: function() {
		this.g2d_activeNativeTexture = null;
		if(this.g2d_activeFilter != null) {
			this.g2d_activeFilter.clear(this.g2d_context);
			this.g2d_activeFilter = null;
		}
	}
	,__class__: com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer
};
var com_genome2d_context_renderers_GQuadTextureBufferCPURenderer = function() { };
$hxClasses["com.genome2d.context.renderers.GQuadTextureBufferCPURenderer"] = com_genome2d_context_renderers_GQuadTextureBufferCPURenderer;
com_genome2d_context_renderers_GQuadTextureBufferCPURenderer.__name__ = "com.genome2d.context.renderers.GQuadTextureBufferCPURenderer";
var com_genome2d_context_renderers_GQuadTextureShaderRenderer = function() {
	this.g2d_activeTextureNeedsRebind = false;
	this.g2d_initialized = -1;
	this.g2d_useSeparatedAlphaPipeline = false;
	this.g2d_activeAlpha = false;
	this.g2d_quadCount = 0;
};
$hxClasses["com.genome2d.context.renderers.GQuadTextureShaderRenderer"] = com_genome2d_context_renderers_GQuadTextureShaderRenderer;
com_genome2d_context_renderers_GQuadTextureShaderRenderer.__name__ = "com.genome2d.context.renderers.GQuadTextureShaderRenderer";
com_genome2d_context_renderers_GQuadTextureShaderRenderer.__interfaces__ = [com_genome2d_context_IGRenderer];
com_genome2d_context_renderers_GQuadTextureShaderRenderer.prototype = {
	g2d_nativeContext: null
	,g2d_quadCount: null
	,g2d_geometryBuffer: null
	,g2d_uvBuffer: null
	,g2d_constantIndexBuffer: null
	,g2d_constantIndexAlphaBuffer: null
	,g2d_indexBuffer: null
	,g2d_activeNativeTexture: null
	,g2d_activeAlpha: null
	,g2d_useSeparatedAlphaPipeline: null
	,g2d_transforms: null
	,g2d_context: null
	,g2d_initialized: null
	,g2d_activeFilter: null
	,g2d_activeTextureNeedsRebind: null
	,g2d_defaultProgram: null
	,g2d_currentProgram: null
	,g2d_cachedFilterPrograms: null
	,g2d_vertexShader: null
	,g2d_defaultFragmentShader: null
	,g2d_previousFragmentShader: null
	,getProgram: function() {
		return this.g2d_currentProgram;
	}
	,getFilterProgram: function(p_filter) {
		var program = null;
		if(this.g2d_cachedFilterPrograms == null) {
			this.g2d_cachedFilterPrograms = new haxe_ds_StringMap();
		}
		var key = p_filter.id;
		var _this = this.g2d_cachedFilterPrograms;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var key1 = p_filter.id;
			var _this1 = this.g2d_cachedFilterPrograms;
			program = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		} else {
			var fragmentShader = this.getShader(p_filter.fragmentCode,35632);
			program = this.g2d_nativeContext.createProgram();
			this.g2d_nativeContext.attachShader(program,this.g2d_vertexShader);
			this.g2d_nativeContext.attachShader(program,fragmentShader);
			this.g2d_nativeContext.linkProgram(program);
			program.samplerUniform = this.g2d_nativeContext.getUniformLocation(program,"sTexture");
			program.positionAttribute = this.g2d_nativeContext.getAttribLocation(program,"aPosition");
			this.g2d_nativeContext.enableVertexAttribArray(program.positionAttribute);
			program.texCoordAttribute = this.g2d_nativeContext.getAttribLocation(program,"aTexCoord");
			this.g2d_nativeContext.enableVertexAttribArray(program.texCoordAttribute);
			program.constantIndexAttribute = this.g2d_nativeContext.getAttribLocation(program,"aConstantIndex");
			this.g2d_nativeContext.enableVertexAttribArray(program.constantIndexAttribute);
			var key2 = p_filter.id;
			var _this2 = this.g2d_cachedFilterPrograms;
			var value = program;
			if(__map_reserved[key2] != null) {
				_this2.setReserved(key2,value);
			} else {
				_this2.h[key2] = value;
			}
		}
		return program;
	}
	,getShader: function(p_shaderSrc,p_shaderType) {
		var shader = this.g2d_nativeContext.createShader(p_shaderType);
		this.g2d_nativeContext.shaderSource(shader,p_shaderSrc);
		this.g2d_nativeContext.compileShader(shader);
		if(!this.g2d_nativeContext.getShaderParameter(shader,35713)) {
			var p_arg1 = "Shader compilation error: " + this.g2d_nativeContext.getShaderInfoLog(shader);
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/renderers/GQuadTextureShaderRenderer.hx", lineNumber : 197, className : "com.genome2d.context.renderers.GQuadTextureShaderRenderer", methodName : "getShader"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return shader;
	}
	,initialize: function(p_context) {
		this.g2d_context = p_context;
		this.g2d_nativeContext = this.g2d_context.g2d_nativeContext;
		this.g2d_vertexShader = this.getShader("\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform vec4 transforms[" + 120 + "];\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aConstantIndex;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t    vec2 temp = vec2(aPosition.x*transforms[int(aConstantIndex.z)].x, aPosition.y*transforms[int(aConstantIndex.z)].y);\r\n\t\t\t    temp.x -= transforms[int(aConstantIndex.z)].z;\r\n\t\t\t    temp.y -= transforms[int(aConstantIndex.z)].w;\r\n\t\t\t\tfloat c = cos(transforms[int(aConstantIndex.x)].z);\r\n\t\t\t\tfloat s = sin(transforms[int(aConstantIndex.x)].z);\r\n\t\t\t\ttemp = vec2(temp.x * c - temp.y * s, temp.x * s + temp.y * c);\r\n                temp.x += transforms[int(aConstantIndex.x)].x;\r\n                temp.y += transforms[int(aConstantIndex.x)].y;\r\n\t\t\t\tgl_Position = vec4(temp.x, temp.y, 0, 1) * projectionMatrix;\r\n\r\n\t\t\t\tvTexCoord = vec2(aTexCoord.x*transforms[int(aConstantIndex.y)].z+transforms[int(aConstantIndex.y)].x, aTexCoord.y*transforms[int(aConstantIndex.y)].w+transforms[int(aConstantIndex.y)].y);\r\n\t\t\t\tvColor = transforms[int(aConstantIndex.w)];\r\n\t\t\t}\r\n\t\t ",35633);
		this.g2d_defaultFragmentShader = this.getShader("\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t",35632);
		this.g2d_previousFragmentShader = this.g2d_defaultFragmentShader;
		this.g2d_defaultProgram = this.g2d_nativeContext.createProgram();
		this.g2d_nativeContext.attachShader(this.g2d_defaultProgram,this.g2d_vertexShader);
		this.g2d_nativeContext.attachShader(this.g2d_defaultProgram,this.g2d_defaultFragmentShader);
		this.g2d_nativeContext.linkProgram(this.g2d_defaultProgram);
		var vertices = new Float32Array(240);
		var uvs = new Float32Array(240);
		var registerIndices = new Float32Array(360);
		var registerIndicesAlpha = new Float32Array(480);
		var _g = 0;
		while(_g < 30) {
			var i = _g++;
			vertices[i * 8] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[0];
			vertices[i * 8 + 1] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[1];
			vertices[i * 8 + 2] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[2];
			vertices[i * 8 + 3] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[3];
			vertices[i * 8 + 4] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[4];
			vertices[i * 8 + 5] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[5];
			vertices[i * 8 + 6] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[6];
			vertices[i * 8 + 7] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES[7];
			uvs[i * 8] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[0];
			uvs[i * 8 + 1] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[1];
			uvs[i * 8 + 2] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[2];
			uvs[i * 8 + 3] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[3];
			uvs[i * 8 + 4] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[4];
			uvs[i * 8 + 5] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[5];
			uvs[i * 8 + 6] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[6];
			uvs[i * 8 + 7] = com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS[7];
			var index = i * 3;
			registerIndices[index * 4] = index;
			registerIndices[index * 4 + 1] = index + 1;
			registerIndices[index * 4 + 2] = index + 2;
			registerIndices[index * 4 + 3] = index;
			registerIndices[index * 4 + 4] = index + 1;
			registerIndices[index * 4 + 5] = index + 2;
			registerIndices[index * 4 + 6] = index;
			registerIndices[index * 4 + 7] = index + 1;
			registerIndices[index * 4 + 8] = index + 2;
			registerIndices[index * 4 + 9] = index;
			registerIndices[index * 4 + 10] = index + 1;
			registerIndices[index * 4 + 11] = index + 2;
			var index1 = i * 4;
			registerIndicesAlpha[index1 * 4] = index1;
			registerIndicesAlpha[index1 * 4 + 1] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 2] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 3] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 4] = index1;
			registerIndicesAlpha[index1 * 4 + 5] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 6] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 7] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 8] = index1;
			registerIndicesAlpha[index1 * 4 + 9] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 10] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 11] = index1 + 3;
			registerIndicesAlpha[index1 * 4 + 12] = index1;
			registerIndicesAlpha[index1 * 4 + 13] = index1 + 1;
			registerIndicesAlpha[index1 * 4 + 14] = index1 + 2;
			registerIndicesAlpha[index1 * 4 + 15] = index1 + 3;
		}
		this.g2d_geometryBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_geometryBuffer);
		this.g2d_nativeContext.bufferData(34962,vertices,35040);
		this.g2d_uvBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_uvBuffer);
		this.g2d_nativeContext.bufferData(34962,uvs,35040);
		this.g2d_constantIndexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexBuffer);
		this.g2d_nativeContext.bufferData(34962,registerIndices,35040);
		this.g2d_constantIndexAlphaBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexAlphaBuffer);
		this.g2d_nativeContext.bufferData(34962,registerIndicesAlpha,35040);
		var indices = new Uint16Array(180);
		var _g1 = 0;
		while(_g1 < 30) {
			var i1 = _g1++;
			var ao = i1 * 6;
			var io = i1 * 4;
			indices[ao] = io;
			indices[ao + 1] = io + 1;
			indices[ao + 2] = io + 2;
			indices[ao + 3] = io;
			indices[ao + 4] = io + 2;
			indices[ao + 5] = io + 3;
		}
		this.g2d_indexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bufferData(34963,indices,35044);
		this.g2d_defaultProgram.samplerUniform = this.g2d_nativeContext.getUniformLocation(this.g2d_defaultProgram,"sTexture");
		this.g2d_defaultProgram.positionAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aPosition");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.positionAttribute);
		this.g2d_defaultProgram.texCoordAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aTexCoord");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.texCoordAttribute);
		this.g2d_defaultProgram.constantIndexAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_defaultProgram,"aConstantIndex");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_defaultProgram.constantIndexAttribute);
		this.g2d_transforms = new Float32Array(480);
	}
	,bind: function(p_context,p_reinitialize) {
		if(p_reinitialize != this.g2d_initialized) {
			this.initialize(p_context);
		}
		this.g2d_initialized = p_reinitialize;
		this.g2d_currentProgram = this.g2d_defaultProgram;
		this.g2d_nativeContext.useProgram(this.g2d_defaultProgram);
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_geometryBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.positionAttribute,2,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_uvBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.texCoordAttribute,2,5126,false,0,0);
		this.g2d_nativeContext.bindBuffer(34962,this.g2d_constantIndexAlphaBuffer);
		this.g2d_nativeContext.vertexAttribPointer(this.g2d_defaultProgram.constantIndexAttribute,4,5126,false,0,0);
	}
	,draw: function(p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_texture,p_filter,p_overrideSource,p_sourceX,p_sourceY,p_sourceWidth,p_sourceHeight,p_sourcePivotX,p_sourcePivotY) {
		var notSameTexture = this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
		var useAlpha = !this.g2d_useSeparatedAlphaPipeline && !(p_red == 1 && p_green == 1 && p_blue == 1 && p_alpha == 1);
		var notSameUseAlpha = this.g2d_activeAlpha != useAlpha;
		var notSameFilter = this.g2d_activeFilter != p_filter;
		this.g2d_activeAlpha = useAlpha;
		if(notSameTexture || notSameFilter || this.g2d_activeTextureNeedsRebind) {
			if(this.g2d_activeNativeTexture != null) {
				if(this.g2d_quadCount > 0) {
					com_genome2d_context_stats_GStats.drawCalls++;
					this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
					this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
					this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
					this.g2d_quadCount = 0;
				}
			}
			if(notSameFilter) {
				if(this.g2d_activeFilter != null) {
					this.g2d_activeFilter.clear(this.g2d_context);
				}
				this.g2d_activeFilter = p_filter;
				if(this.g2d_activeFilter != null) {
					this.g2d_currentProgram = this.getFilterProgram(this.g2d_activeFilter);
					this.g2d_nativeContext.useProgram(this.g2d_currentProgram);
					this.g2d_activeFilter.bind(this.g2d_context,this,p_texture);
				} else {
					this.g2d_currentProgram = this.g2d_defaultProgram;
					this.g2d_nativeContext.useProgram(this.g2d_currentProgram);
				}
			}
			if(notSameTexture || this.g2d_activeTextureNeedsRebind) {
				this.g2d_activeTextureNeedsRebind = false;
				this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
				this.g2d_nativeContext.activeTexture(33984);
				this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
				this.g2d_nativeContext.uniform1i(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"sTexture"),0);
			}
		}
		if(this.g2d_activeAlpha) {
			p_red *= p_alpha;
			p_green *= p_alpha;
			p_blue *= p_alpha;
		}
		var offset = this.g2d_quadCount * 4 << 2;
		this.g2d_transforms[offset] = p_x;
		this.g2d_transforms[offset + 1] = p_y;
		this.g2d_transforms[offset + 2] = p_rotation;
		this.g2d_transforms[offset + 3] = 0;
		if(p_overrideSource) {
			this.g2d_transforms[offset + 4] = p_sourceX / p_texture.g2d_gpuWidth;
			this.g2d_transforms[offset + 5] = p_sourceY / p_texture.g2d_gpuHeight;
			this.g2d_transforms[offset + 6] = p_sourceWidth / p_texture.g2d_gpuWidth;
			this.g2d_transforms[offset + 7] = p_sourceHeight / p_texture.g2d_gpuHeight;
			this.g2d_transforms[offset + 8] = p_sourceWidth * p_texture.g2d_scaleFactor * p_scaleX;
			this.g2d_transforms[offset + 9] = p_sourceHeight * p_texture.g2d_scaleFactor * p_scaleY;
			this.g2d_transforms[offset + 10] = p_sourcePivotX * p_texture.g2d_scaleFactor * p_scaleX;
			this.g2d_transforms[offset + 11] = p_sourcePivotY * p_texture.g2d_scaleFactor * p_scaleY;
		} else {
			this.g2d_transforms[offset + 4] = p_texture.g2d_u;
			this.g2d_transforms[offset + 5] = p_texture.g2d_v;
			this.g2d_transforms[offset + 6] = p_texture.g2d_uScale;
			this.g2d_transforms[offset + 7] = p_texture.g2d_vScale;
			this.g2d_transforms[offset + 8] = p_texture.g2d_nativeWidth * p_texture.g2d_scaleFactor * p_scaleX;
			this.g2d_transforms[offset + 9] = p_texture.g2d_inverted ? -(p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor) * p_scaleY : p_texture.g2d_nativeHeight * p_texture.g2d_scaleFactor * p_scaleY;
			this.g2d_transforms[offset + 10] = p_texture.g2d_pivotX * p_texture.g2d_scaleFactor * p_scaleX;
			this.g2d_transforms[offset + 11] = p_texture.g2d_pivotY * p_texture.g2d_scaleFactor * p_scaleY;
		}
		this.g2d_transforms[offset + 12] = p_red;
		this.g2d_transforms[offset + 13] = p_green;
		this.g2d_transforms[offset + 14] = p_blue;
		this.g2d_transforms[offset + 15] = p_alpha;
		this.g2d_quadCount++;
		if(this.g2d_quadCount == 30) {
			if(this.g2d_quadCount > 0) {
				com_genome2d_context_stats_GStats.drawCalls++;
				this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
				this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
				this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
				this.g2d_quadCount = 0;
			}
		}
	}
	,push: function() {
		if(this.g2d_quadCount > 0) {
			com_genome2d_context_stats_GStats.drawCalls++;
			this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
			this.g2d_nativeContext.uniform4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_currentProgram,"transforms"),this.g2d_transforms);
			this.g2d_nativeContext.drawElements(4,6 * this.g2d_quadCount,5123,0);
			this.g2d_quadCount = 0;
		}
	}
	,activeTextureNeedsRebind: function() {
		if(this.g2d_activeNativeTexture != null) {
			this.g2d_activeTextureNeedsRebind = true;
		}
	}
	,clear: function() {
		this.g2d_activeNativeTexture = null;
		this.g2d_activeTextureNeedsRebind = false;
		if(this.g2d_activeFilter != null) {
			this.g2d_activeFilter.clear(this.g2d_context);
			this.g2d_activeFilter = null;
		}
	}
	,__class__: com_genome2d_context_renderers_GQuadTextureShaderRenderer
};
var com_genome2d_context_renderers_GRendererCommon = function() { };
$hxClasses["com.genome2d.context.renderers.GRendererCommon"] = com_genome2d_context_renderers_GRendererCommon;
com_genome2d_context_renderers_GRendererCommon.__name__ = "com.genome2d.context.renderers.GRendererCommon";
com_genome2d_context_renderers_GRendererCommon.DEFAULT_CONSTANTS = null;
com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES = null;
com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS = null;
com_genome2d_context_renderers_GRendererCommon.init = function() {
	com_genome2d_context_renderers_GRendererCommon.DEFAULT_CONSTANTS = [1,0,0,.5];
	com_genome2d_context_renderers_GRendererCommon.NORMALIZED_VERTICES = [-.5,.5,-.5,-.5,.5,-.5,.5,.5];
	com_genome2d_context_renderers_GRendererCommon.NORMALIZED_UVS = [.0,1.0,.0,.0,1.0,.0,1.0,1.0];
};
var com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer = function() {
	this.g2d_initialized = -1;
	this.g2d_activeAlpha = true;
	this.g2d_triangleCount = 0;
};
$hxClasses["com.genome2d.context.renderers.GTriangleTextureBufferCPURenderer"] = com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer;
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.__name__ = "com.genome2d.context.renderers.GTriangleTextureBufferCPURenderer";
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.__interfaces__ = [com_genome2d_context_IGRenderer];
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.prototype = {
	g2d_nativeContext: null
	,g2d_triangleCount: null
	,g2d_activeAlpha: null
	,g2d_indexBuffer: null
	,g2d_vertexBuffer: null
	,g2d_vertices: null
	,g2d_activeNativeTexture: null
	,g2d_initialized: null
	,g2d_context: null
	,g2d_program: null
	,getProgram: function() {
		return this.g2d_program;
	}
	,getShader: function(shaderSrc,shaderType) {
		var shader = this.g2d_nativeContext.createShader(shaderType);
		this.g2d_nativeContext.shaderSource(shader,shaderSrc);
		this.g2d_nativeContext.compileShader(shader);
		if(!this.g2d_nativeContext.getShaderParameter(shader,35713)) {
			var p_arg1 = "Shader compilation error: " + this.g2d_nativeContext.getShaderInfoLog(shader);
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/context/renderers/GTriangleTextureBufferCPURenderer.hx", lineNumber : 96, className : "com.genome2d.context.renderers.GTriangleTextureBufferCPURenderer", methodName : "getShader"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return shader;
	}
	,initialize: function(p_context) {
		this.g2d_context = p_context;
		this.g2d_nativeContext = this.g2d_context.g2d_nativeContext;
		var fragmentShader = this.getShader("\r\n\t\t\t#ifdef GL_ES\r\n\t\t\tprecision highp float;\r\n\t\t\t#endif\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t\t",35632);
		var vertexShader = this.getShader("\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aColor;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_Position = vec4(aPosition.x, aPosition.y, 0, 1) * projectionMatrix;\r\n\t\t\t\tvTexCoord = aTexCoord;\r\n\t\t\t\tvColor = aColor;\r\n\t\t\t}\r\n\t\t",35633);
		this.g2d_program = this.g2d_nativeContext.createProgram();
		this.g2d_nativeContext.attachShader(this.g2d_program,vertexShader);
		this.g2d_nativeContext.attachShader(this.g2d_program,fragmentShader);
		this.g2d_nativeContext.linkProgram(this.g2d_program);
		this.g2d_program.positionAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aPosition");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.positionAttribute);
		this.g2d_program.uvAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aTexCoord");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.uvAttribute);
		this.g2d_program.colorAttribute = this.g2d_nativeContext.getAttribLocation(this.g2d_program,"aColor");
		this.g2d_nativeContext.enableVertexAttribArray(this.g2d_program.colorAttribute);
		this.g2d_program.samplerUniform = this.g2d_nativeContext.getUniformLocation(this.g2d_program,"sTexture");
		var indices = new Uint16Array(3600);
		var _g = 0;
		var _g1 = 3600;
		while(_g < _g1) {
			var i = _g++;
			indices[i] = i;
		}
		this.g2d_indexBuffer = this.g2d_nativeContext.createBuffer();
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
		this.g2d_nativeContext.bufferData(34963,indices,35044);
		this.g2d_vertices = new Float32Array(28800);
		this.g2d_vertexBuffer = this.g2d_nativeContext.createBuffer();
	}
	,bind: function(p_context,p_reinitialize) {
		if(p_reinitialize != this.g2d_initialized) {
			this.initialize(p_context);
		}
		this.g2d_initialized = p_reinitialize;
		this.g2d_nativeContext.useProgram(this.g2d_program);
		this.g2d_nativeContext.bindBuffer(34963,this.g2d_indexBuffer);
	}
	,draw: function(p_vertices,p_uvs,p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha,p_texture,p_filter) {
		var notSameTexture = this.g2d_activeNativeTexture != p_texture.g2d_nativeTexture;
		if(notSameTexture) {
			if(this.g2d_activeNativeTexture != null) {
				this.push();
			}
			if(notSameTexture) {
				this.g2d_activeNativeTexture = p_texture.g2d_nativeTexture;
				this.g2d_nativeContext.activeTexture(33984);
				this.g2d_nativeContext.bindTexture(3553,p_texture.g2d_nativeTexture);
				this.g2d_nativeContext.uniform1i(this.g2d_program.samplerUniform,0);
			}
		}
		var cos = p_rotation == 0 ? 1 : Math.cos(p_rotation);
		var sin = p_rotation == 0 ? 0 : Math.sin(p_rotation);
		var ux = p_texture.g2d_u;
		var usx = p_texture.g2d_uScale;
		var uy = p_texture.g2d_v;
		var usy = p_texture.g2d_vScale;
		if(p_texture.premultiplied) {
			p_red *= p_alpha;
			p_green *= p_alpha;
			p_blue *= p_alpha;
		}
		var dataSize = p_vertices.length;
		var vertexCount = dataSize >> 1;
		var triangleCount = vertexCount / 3 | 0;
		if(this.g2d_triangleCount + triangleCount > 1200) {
			this.push();
		}
		var index = (this.g2d_activeAlpha ? 8 : 4) * 3 * this.g2d_triangleCount;
		var i = 0;
		while(i < dataSize) {
			this.g2d_vertices[index] = cos * p_vertices[i] * p_scaleX - sin * p_vertices[i + 1] * p_scaleY + p_x;
			this.g2d_vertices[index + 1] = sin * p_vertices[i] * p_scaleX + cos * p_vertices[i + 1] * p_scaleY + p_y;
			this.g2d_vertices[index + 2] = ux + p_uvs[i] * usx;
			this.g2d_vertices[index + 3] = uy + p_uvs[i + 1] * usy;
			if(this.g2d_activeAlpha) {
				this.g2d_vertices[index + 4] = p_red;
				this.g2d_vertices[index + 5] = p_green;
				this.g2d_vertices[index + 6] = p_blue;
				this.g2d_vertices[index + 7] = p_alpha;
				index += 8;
			} else {
				index += 4;
			}
			i += 2;
		}
		this.g2d_triangleCount += triangleCount;
		if(this.g2d_triangleCount >= 1200) {
			this.push();
		}
	}
	,push: function() {
		if(this.g2d_triangleCount > 0) {
			this.g2d_nativeContext.uniformMatrix4fv(this.g2d_nativeContext.getUniformLocation(this.g2d_program,"projectionMatrix"),false,this.g2d_context.g2d_projectionMatrix.rawData);
			this.g2d_nativeContext.bindBuffer(34962,this.g2d_vertexBuffer);
			this.g2d_nativeContext.bufferData(34962,this.g2d_vertices,35040);
			this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.positionAttribute,2,5126,false,32,0);
			this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.uvAttribute,2,5126,false,32,8);
			this.g2d_nativeContext.vertexAttribPointer(this.g2d_program.colorAttribute,4,5126,false,32,16);
			this.g2d_nativeContext.drawElements(4,3 * this.g2d_triangleCount,5123,0);
			this.g2d_triangleCount = 0;
		}
	}
	,clear: function() {
		this.g2d_activeNativeTexture = null;
	}
	,__class__: com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer
};
var com_genome2d_context_stats_IGStats = function() { };
$hxClasses["com.genome2d.context.stats.IGStats"] = com_genome2d_context_stats_IGStats;
com_genome2d_context_stats_IGStats.__name__ = "com.genome2d.context.stats.IGStats";
com_genome2d_context_stats_IGStats.__isInterface__ = true;
com_genome2d_context_stats_IGStats.prototype = {
	clear: null
	,render: null
	,__class__: com_genome2d_context_stats_IGStats
};
var com_genome2d_context_stats_GStats = function(p_canvas) {
	this.g2d_previousTime = 0;
	this.g2d_frames = 0;
	this.g2d_previousTime = new Date().getTime();
	com_genome2d_context_stats_GStats.fps = 0;
	this.g2d_container = window.document.getElementById("stats");
	if(this.g2d_container == null) {
		this.g2d_container = window.document.createElement("div");
		this.g2d_container.id = "stats";
		this.g2d_container.style.cssText = "width:" + p_canvas.clientWidth + "px;opacity:0.9;cursor:pointer";
		this.g2d_container.style.position = "absolute";
		this.g2d_container.style.left = p_canvas.offsetLeft + "px";
		this.g2d_container.style.top = p_canvas.offsetTop + "px";
	}
	this.g2d_fpsDiv = window.document.createElement("div");
	this.g2d_fpsDiv.id = "fps";
	this.g2d_fpsDiv.style.cssText = "padding:0 0 3px 3px;text-align:left;background-color:#002";
	this.g2d_container.appendChild(this.g2d_fpsDiv);
	this.g2d_fpsText = window.document.createElement("div");
	this.g2d_fpsText.id = "fpsText";
	this.g2d_fpsText.style.cssText = "color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:10px;font-weight:bold;line-height:15px";
	this.g2d_fpsText.innerHTML = "FPS";
	this.g2d_fpsDiv.appendChild(this.g2d_fpsText);
	p_canvas.parentElement.appendChild(this.g2d_container);
};
$hxClasses["com.genome2d.context.stats.GStats"] = com_genome2d_context_stats_GStats;
com_genome2d_context_stats_GStats.__name__ = "com.genome2d.context.stats.GStats";
com_genome2d_context_stats_GStats.__interfaces__ = [com_genome2d_context_stats_IGStats];
com_genome2d_context_stats_GStats.customStats = null;
com_genome2d_context_stats_GStats.prototype = {
	g2d_frames: null
	,g2d_previousTime: null
	,g2d_fpsText: null
	,g2d_container: null
	,g2d_fpsDiv: null
	,render: function(p_context) {
		if(com_genome2d_context_stats_GStats.visible) {
			if(this.g2d_fpsDiv.parentElement == null) {
				this.g2d_container.appendChild(this.g2d_fpsDiv);
			}
			var time = new Date().getTime();
			this.g2d_frames++;
			if(time > this.g2d_previousTime + 1000) {
				com_genome2d_context_stats_GStats.fps = Math.round(this.g2d_frames * 1000 / (time - this.g2d_previousTime));
				this.g2d_fpsText.textContent = "FPS: " + com_genome2d_context_stats_GStats.fps + " Drawcalls: " + com_genome2d_context_stats_GStats.drawCalls;
				if(com_genome2d_context_stats_GStats.customStats != null) {
					this.g2d_fpsText.textContent += " ";
					var _g = 0;
					var _g1 = com_genome2d_context_stats_GStats.customStats;
					while(_g < _g1.length) {
						var stat = _g1[_g];
						++_g;
						this.g2d_fpsText.textContent += stat;
					}
				}
				this.g2d_previousTime = time;
				this.g2d_frames = 0;
			}
		} else if(this.g2d_fpsDiv.parentElement != null) {
			this.g2d_container.removeChild(this.g2d_fpsDiv);
		}
	}
	,clear: function() {
		com_genome2d_context_stats_GStats.drawCalls = 0;
	}
	,__class__: com_genome2d_context_stats_GStats
};
var com_genome2d_debug_GDebug = function() { };
$hxClasses["com.genome2d.debug.GDebug"] = com_genome2d_debug_GDebug;
com_genome2d_debug_GDebug.__name__ = "com.genome2d.debug.GDebug";
com_genome2d_debug_GDebug.__properties__ = {get_onDebug:"get_onDebug"};
com_genome2d_debug_GDebug.getLog = function() {
	return com_genome2d_debug_GDebug.g2d_log;
};
com_genome2d_debug_GDebug.g2d_onDebug = null;
com_genome2d_debug_GDebug.get_onDebug = function() {
	if(com_genome2d_debug_GDebug.g2d_onDebug == null) {
		com_genome2d_debug_GDebug.g2d_onDebug = new com_genome2d_callbacks_GCallback3(Int);
	}
	return com_genome2d_debug_GDebug.g2d_onDebug;
};
com_genome2d_debug_GDebug.debug = function(p_priority,p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	if(com_genome2d_debug_GDebug.showPriority <= p_priority) {
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(p_priority,pos,args);
		}
		var msg;
		switch(p_priority) {
		case 0:
			msg = "INTERNAL_DUMP: ";
			break;
		case 1:
			msg = "AUTO_DUMP: ";
			break;
		case 2:
			msg = "DUMP: ";
			break;
		case 3:
			msg = "INFO: ";
			break;
		case 4:
			msg = "WARNING: ";
			break;
		case 5:
			msg = "ERROR: ";
			break;
		case 15:
			msg = "G2D_ERROR: ";
			break;
		case 1000:
			msg = "EDITOR: ";
			break;
		default:
			msg = "";
		}
		if(pos != null && p_priority != 1000) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		if(p_priority == 5 || p_priority == 15) {
			throw new js__$Boot_HaxeError(msg);
		}
	}
};
com_genome2d_debug_GDebug.dump = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
};
com_genome2d_debug_GDebug.dump_args = function(p_args,pos) {
	if(com_genome2d_debug_GDebug.showPriority <= 2) {
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(2,pos,p_args);
		}
		var msg = "DUMP: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(p_args.length > 0) {
			msg += p_args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
	}
};
com_genome2d_debug_GDebug.info = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	if(com_genome2d_debug_GDebug.showPriority <= 3) {
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
		}
		var msg = "INFO: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
	}
};
com_genome2d_debug_GDebug.editor = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	var args = [];
	if(p_arg1 != null) {
		args.push(p_arg1);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(1000,pos,args);
	}
	var msg = "EDITOR: ";
	if(pos != null && false) {
		msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
};
com_genome2d_debug_GDebug.warning = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	if(com_genome2d_debug_GDebug.showPriority <= 4) {
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
		}
		var msg = "WARNING: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
	}
};
com_genome2d_debug_GDebug.g2d_warning = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	if(com_genome2d_debug_GDebug.showPriority <= 14) {
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(14,pos,args);
		}
		var msg = "";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
	}
};
com_genome2d_debug_GDebug.warning_handler = function(p_arg) {
	var p_pos = null;
	var p_arg2 = null;
	var p_arg3 = null;
	var p_arg4 = null;
	var p_arg5 = null;
	var p_arg6 = null;
	var p_arg7 = null;
	var p_arg8 = null;
	var p_arg9 = null;
	var p_arg10 = null;
	var p_arg11 = null;
	var p_arg12 = null;
	var p_arg13 = null;
	var p_arg14 = null;
	var p_arg15 = null;
	var p_arg16 = null;
	var p_arg17 = null;
	var p_arg18 = null;
	var p_arg19 = null;
	var p_arg20 = null;
	var args = [];
	if(p_arg != null) {
		args.push(p_arg);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,p_pos,args);
	}
	var msg = "WARNING: ";
	if(p_pos != null) {
		msg += p_pos.fileName + ":" + p_pos.lineNumber + " : " + p_pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
};
com_genome2d_debug_GDebug.error = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	var args = [];
	if(p_arg1 != null) {
		args.push(p_arg1);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
	}
	var msg = "ERROR: ";
	if(pos != null) {
		msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
	throw new js__$Boot_HaxeError(msg);
};
com_genome2d_debug_GDebug.g2d_error = function(p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20,pos) {
	var args = [];
	if(p_arg1 != null) {
		args.push(p_arg1);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
	}
	var msg = "G2D_ERROR: ";
	if(pos != null) {
		msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
	throw new js__$Boot_HaxeError(msg);
};
com_genome2d_debug_GDebug.error_handler = function(p_arg) {
	var p_pos = null;
	var p_arg2 = null;
	var p_arg3 = null;
	var p_arg4 = null;
	var p_arg5 = null;
	var p_arg6 = null;
	var p_arg7 = null;
	var p_arg8 = null;
	var p_arg9 = null;
	var p_arg10 = null;
	var p_arg11 = null;
	var p_arg12 = null;
	var p_arg13 = null;
	var p_arg14 = null;
	var p_arg15 = null;
	var p_arg16 = null;
	var p_arg17 = null;
	var p_arg18 = null;
	var p_arg19 = null;
	var p_arg20 = null;
	var args = [];
	if(p_arg != null) {
		args.push(p_arg);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,p_pos,args);
	}
	var msg = "ERROR: ";
	if(p_pos != null) {
		msg += p_pos.fileName + ":" + p_pos.lineNumber + " : " + p_pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
	throw new js__$Boot_HaxeError(msg);
};
com_genome2d_debug_GDebug.traceRedirect = function(p_arg,p_pos) {
	var args = [p_arg];
	if(p_pos.customParams != null) {
		args = args.concat(p_pos.customParams);
	}
	var p_arg1 = args;
	var p_arg2 = null;
	var p_arg3 = null;
	var p_arg4 = null;
	var p_arg5 = null;
	var p_arg6 = null;
	var p_arg7 = null;
	var p_arg8 = null;
	var p_arg9 = null;
	var p_arg10 = null;
	var p_arg11 = null;
	var p_arg12 = null;
	var p_arg13 = null;
	var p_arg14 = null;
	var p_arg15 = null;
	var p_arg16 = null;
	var p_arg17 = null;
	var p_arg18 = null;
	var p_arg19 = null;
	var p_arg20 = null;
	var args1 = [];
	if(p_arg1 != null) {
		args1.push(p_arg1);
	}
	if(p_arg2 != null) {
		args1.push(p_arg2);
	}
	if(p_arg3 != null) {
		args1.push(p_arg3);
	}
	if(p_arg4 != null) {
		args1.push(p_arg4);
	}
	if(p_arg5 != null) {
		args1.push(p_arg5);
	}
	if(p_arg6 != null) {
		args1.push(p_arg6);
	}
	if(p_arg7 != null) {
		args1.push(p_arg7);
	}
	if(p_arg8 != null) {
		args1.push(p_arg8);
	}
	if(p_arg9 != null) {
		args1.push(p_arg9);
	}
	if(p_arg10 != null) {
		args1.push(p_arg10);
	}
	if(p_arg11 != null) {
		args1.push(p_arg11);
	}
	if(p_arg12 != null) {
		args1.push(p_arg12);
	}
	if(p_arg13 != null) {
		args1.push(p_arg13);
	}
	if(p_arg14 != null) {
		args1.push(p_arg14);
	}
	if(p_arg15 != null) {
		args1.push(p_arg15);
	}
	if(p_arg16 != null) {
		args1.push(p_arg16);
	}
	if(p_arg17 != null) {
		args1.push(p_arg17);
	}
	if(p_arg18 != null) {
		args1.push(p_arg18);
	}
	if(p_arg19 != null) {
		args1.push(p_arg19);
	}
	if(p_arg20 != null) {
		args1.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(-1,p_pos,args1);
	}
	var msg = "";
	if(p_pos != null) {
		msg += p_pos.fileName + ":" + p_pos.lineNumber + " : " + p_pos.methodName + " : ";
	}
	if(args1.length > 0) {
		msg += args1.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
};
com_genome2d_debug_GDebug.g2d_internal = function(p_priority,p_pos,p_arg1,p_arg2,p_arg3,p_arg4,p_arg5,p_arg6,p_arg7,p_arg8,p_arg9,p_arg10,p_arg11,p_arg12,p_arg13,p_arg14,p_arg15,p_arg16,p_arg17,p_arg18,p_arg19,p_arg20) {
	var args = [];
	if(p_arg1 != null) {
		args.push(p_arg1);
	}
	if(p_arg2 != null) {
		args.push(p_arg2);
	}
	if(p_arg3 != null) {
		args.push(p_arg3);
	}
	if(p_arg4 != null) {
		args.push(p_arg4);
	}
	if(p_arg5 != null) {
		args.push(p_arg5);
	}
	if(p_arg6 != null) {
		args.push(p_arg6);
	}
	if(p_arg7 != null) {
		args.push(p_arg7);
	}
	if(p_arg8 != null) {
		args.push(p_arg8);
	}
	if(p_arg9 != null) {
		args.push(p_arg9);
	}
	if(p_arg10 != null) {
		args.push(p_arg10);
	}
	if(p_arg11 != null) {
		args.push(p_arg11);
	}
	if(p_arg12 != null) {
		args.push(p_arg12);
	}
	if(p_arg13 != null) {
		args.push(p_arg13);
	}
	if(p_arg14 != null) {
		args.push(p_arg14);
	}
	if(p_arg15 != null) {
		args.push(p_arg15);
	}
	if(p_arg16 != null) {
		args.push(p_arg16);
	}
	if(p_arg17 != null) {
		args.push(p_arg17);
	}
	if(p_arg18 != null) {
		args.push(p_arg18);
	}
	if(p_arg19 != null) {
		args.push(p_arg19);
	}
	if(p_arg20 != null) {
		args.push(p_arg20);
	}
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(p_priority,p_pos,args);
	}
	var msg;
	switch(p_priority) {
	case 0:
		msg = "INTERNAL_DUMP: ";
		break;
	case 1:
		msg = "AUTO_DUMP: ";
		break;
	case 2:
		msg = "DUMP: ";
		break;
	case 3:
		msg = "INFO: ";
		break;
	case 4:
		msg = "WARNING: ";
		break;
	case 5:
		msg = "ERROR: ";
		break;
	case 15:
		msg = "G2D_ERROR: ";
		break;
	case 1000:
		msg = "EDITOR: ";
		break;
	default:
		msg = "";
	}
	if(p_pos != null && p_priority != 1000) {
		msg += p_pos.fileName + ":" + p_pos.lineNumber + " : " + p_pos.methodName + " : ";
	}
	if(args.length > 0) {
		msg += args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
	if(p_priority == 5 || p_priority == 15) {
		throw new js__$Boot_HaxeError(msg);
	}
};
com_genome2d_debug_GDebug.g2d_internal_args = function(p_priority,p_pos,p_args) {
	if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
		com_genome2d_debug_GDebug.g2d_onDebug.dispatch(p_priority,p_pos,p_args);
	}
	var msg;
	switch(p_priority) {
	case 0:
		msg = "INTERNAL_DUMP: ";
		break;
	case 1:
		msg = "AUTO_DUMP: ";
		break;
	case 2:
		msg = "DUMP: ";
		break;
	case 3:
		msg = "INFO: ";
		break;
	case 4:
		msg = "WARNING: ";
		break;
	case 5:
		msg = "ERROR: ";
		break;
	case 15:
		msg = "G2D_ERROR: ";
		break;
	case 1000:
		msg = "EDITOR: ";
		break;
	default:
		msg = "";
	}
	if(p_pos != null && p_priority != 1000) {
		msg += p_pos.fileName + ":" + p_pos.lineNumber + " : " + p_pos.methodName + " : ";
	}
	if(p_args.length > 0) {
		msg += p_args.toString();
	}
	com_genome2d_debug_GDebug.g2d_log += msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(msg);
	}
	if(p_priority == 5 || p_priority == 15) {
		throw new js__$Boot_HaxeError(msg);
	}
};
com_genome2d_debug_GDebug.trace = function(p_msg) {
	com_genome2d_debug_GDebug.g2d_log += p_msg;
	if(com_genome2d_debug_GDebug.useNativeTrace) {
		window.console.log(p_msg);
	}
};
var com_genome2d_debug_GDebugPriority = function() { };
$hxClasses["com.genome2d.debug.GDebugPriority"] = com_genome2d_debug_GDebugPriority;
com_genome2d_debug_GDebugPriority.__name__ = "com.genome2d.debug.GDebugPriority";
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,toString: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_StringMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = __map_reserved[key1] != null ? this.getReserved(key1) : this.h[key1];
			if(__map_reserved[key1] != null) {
				copied.setReserved(key1,value);
			} else {
				copied.h[key1] = value;
			}
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
		this.rh = null;
	}
	,__class__: haxe_ds_StringMap
};
var com_genome2d_debug_GProfiler = function() { };
$hxClasses["com.genome2d.debug.GProfiler"] = com_genome2d_debug_GProfiler;
com_genome2d_debug_GProfiler.__name__ = "com.genome2d.debug.GProfiler";
com_genome2d_debug_GProfiler.startMethodProfile = function(pos) {
	var _this = com_genome2d_debug_GProfiler.g2d_profiles;
	var key = pos.className;
	if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
		var _this1 = com_genome2d_debug_GProfiler.g2d_profiles;
		var key1 = pos.className;
		var value = new haxe_ds_StringMap();
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,value);
		} else {
			_this1.h[key1] = value;
		}
	}
	var _this2 = com_genome2d_debug_GProfiler.g2d_profiles;
	var key2 = pos.className;
	var _this3 = __map_reserved[key2] != null ? _this2.getReserved(key2) : _this2.h[key2];
	var key3 = pos.methodName;
	var profile = __map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3];
	if(profile == null) {
		profile = { callCount : 0, lastCallStart : 0, lastCallElapsed : 0, totalElapsed : 0};
		var _this4 = com_genome2d_debug_GProfiler.g2d_profiles;
		var key4 = pos.className;
		var _this5 = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
		var key5 = pos.methodName;
		if(__map_reserved[key5] != null) {
			_this5.setReserved(key5,profile);
		} else {
			_this5.h[key5] = profile;
		}
	}
	if(com_genome2d_debug_GProfiler.showProfileCallStarts) {
		var p_msg = "PROFILE METHOD START [" + pos.className + ":" + pos.methodName + "]";
		com_genome2d_debug_GDebug.g2d_log += p_msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(p_msg);
		}
	}
	profile.callCount++;
};
com_genome2d_debug_GProfiler.endMethodProfile = function(pos) {
	var endTime = 0;
	var tmp;
	var _this = com_genome2d_debug_GProfiler.g2d_profiles;
	var key = pos.className;
	if(!(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)))) {
		var _this1 = com_genome2d_debug_GProfiler.g2d_profiles;
		var key1 = pos.className;
		var _this2 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
		var key2 = pos.methodName;
		tmp = !(__map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2));
	} else {
		tmp = true;
	}
	if(tmp) {
		var p_arg1 = "PROFILE Invalid endProfile call.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos1 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/debug/GProfiler.hx", lineNumber : 46, className : "com.genome2d.debug.GProfiler", methodName : "endMethodProfile"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args);
		}
		var msg = "ERROR: ";
		if(pos1 != null) {
			msg += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	var _this3 = com_genome2d_debug_GProfiler.g2d_profiles;
	var key3 = pos.className;
	var _this4 = __map_reserved[key3] != null ? _this3.getReserved(key3) : _this3.h[key3];
	var key4 = pos.methodName;
	var profile = __map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4];
	profile.lastCallElapsed = endTime - profile.lastCallStart;
	profile.totalElapsed += endTime - profile.lastCallStart;
	if(com_genome2d_debug_GProfiler.showProfileCallEnds) {
		var p_msg = "PROFILE METHOD END [" + pos.className + ":" + pos.methodName + "] [Elapsed: " + profile.lastCallElapsed + "]";
		com_genome2d_debug_GDebug.g2d_log += p_msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(p_msg);
		}
	}
};
com_genome2d_debug_GProfiler.showMethodProfile = function(p_className,p_methodName) {
	var tmp;
	var _this = com_genome2d_debug_GProfiler.g2d_profiles;
	if(!(!(__map_reserved[p_className] != null ? _this.existsReserved(p_className) : _this.h.hasOwnProperty(p_className)))) {
		var _this1 = com_genome2d_debug_GProfiler.g2d_profiles;
		var _this2 = __map_reserved[p_className] != null ? _this1.getReserved(p_className) : _this1.h[p_className];
		tmp = !(__map_reserved[p_methodName] != null ? _this2.existsReserved(p_methodName) : _this2.h.hasOwnProperty(p_methodName));
	} else {
		tmp = true;
	}
	if(tmp) {
		var p_msg = "PROFILE NO RESULT [Class: " + p_className + "] [Method: " + p_methodName + "]";
		com_genome2d_debug_GDebug.g2d_log += p_msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(p_msg);
		}
	} else {
		var _this3 = com_genome2d_debug_GProfiler.g2d_profiles;
		var _this4 = __map_reserved[p_className] != null ? _this3.getReserved(p_className) : _this3.h[p_className];
		var profile = __map_reserved[p_methodName] != null ? _this4.getReserved(p_methodName) : _this4.h[p_methodName];
		var p_msg1 = "PROFILE RESULT [Class: " + p_className + "] [Method: " + p_methodName + "] : [Last Call Elapsed: " + profile.lastCallElapsed + "ms] [Call count: " + profile.callCount + "] [Total Elapsed: " + profile.totalElapsed + "ms]";
		com_genome2d_debug_GDebug.g2d_log += p_msg1;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(p_msg1);
		}
	}
};
var com_genome2d_debug_IGDebuggable = function() { };
$hxClasses["com.genome2d.debug.IGDebuggable"] = com_genome2d_debug_IGDebuggable;
com_genome2d_debug_IGDebuggable.__name__ = "com.genome2d.debug.IGDebuggable";
com_genome2d_debug_IGDebuggable.__isInterface__ = true;
var com_genome2d_debug_IGProfilable = function() { };
$hxClasses["com.genome2d.debug.IGProfilable"] = com_genome2d_debug_IGProfilable;
com_genome2d_debug_IGProfilable.__name__ = "com.genome2d.debug.IGProfilable";
com_genome2d_debug_IGProfilable.__isInterface__ = true;
var com_genome2d_deprecated_components_renderable_particles_GParticleSystemD = function() {
	this.g2d_accumulatedEmission = 0;
	this.g2d_accumulatedSecond = 0;
	this.g2d_accumulatedTime = 0;
	this.emissionPerDuration = true;
	this.loop = true;
	this.duration = 0;
	this.g2d_affectorsCount = 0;
	this.g2d_initializersCount = 0;
	this.emit = true;
	this.timeDilation = 1;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.deprecated.components.renderable.particles.GParticleSystemD"] = com_genome2d_deprecated_components_renderable_particles_GParticleSystemD;
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.__name__ = "com.genome2d.deprecated.components.renderable.particles.GParticleSystemD";
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.__super__ = com_genome2d_components_GComponent;
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	blendMode: null
	,timeDilation: null
	,emit: null
	,g2d_initializers: null
	,g2d_initializersCount: null
	,addInitializer: function(p_initializer) {
		this.g2d_initializers.push(p_initializer);
		this.g2d_initializersCount++;
	}
	,g2d_affectors: null
	,g2d_affectorsCount: null
	,addAffector: function(p_affector) {
		this.g2d_affectors.push(p_affector);
		this.g2d_affectorsCount++;
	}
	,duration: null
	,loop: null
	,emission: null
	,emissionPerDuration: null
	,particlePool: null
	,g2d_accumulatedTime: null
	,g2d_accumulatedSecond: null
	,g2d_accumulatedEmission: null
	,g2d_firstParticle: null
	,g2d_lastParticle: null
	,texture: null
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
		this.particlePool = com_genome2d_deprecated_particles_GParticlePoolD.g2d_defaultPool;
		this.g2d_initializers = [];
		this.g2d_affectors = [];
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.add($bind(this,this.update));
	}
	,reset: function() {
		this.g2d_accumulatedTime = 0;
		this.g2d_accumulatedSecond = 0;
		this.g2d_accumulatedEmission = 0;
	}
	,burst: function(p_emission) {
		var _g = 0;
		var _g1 = p_emission;
		while(_g < _g1) {
			var i = _g++;
			this.activateParticle();
		}
	}
	,update: function(p_deltaTime) {
		p_deltaTime *= this.timeDilation;
		if(this.emit && this.emission != null) {
			var dt = p_deltaTime * .001;
			if(dt > 0) {
				this.g2d_accumulatedTime += dt;
				this.g2d_accumulatedSecond += dt;
				if(this.loop && this.duration != 0 && this.g2d_accumulatedTime > this.duration) {
					this.g2d_accumulatedTime -= this.duration;
				}
				if(this.duration == 0 || this.g2d_accumulatedTime < this.duration) {
					while(this.g2d_accumulatedSecond > 1) this.g2d_accumulatedSecond -= 1;
					var currentEmission = this.emissionPerDuration && this.duration != 0 ? this.emission.calculate(this.g2d_accumulatedTime / this.duration) : this.emission.calculate(this.g2d_accumulatedSecond);
					if(currentEmission < 0) {
						currentEmission = 0;
					}
					this.g2d_accumulatedEmission += currentEmission * dt;
					while(this.g2d_accumulatedEmission > 0) {
						this.activateParticle();
						this.g2d_accumulatedEmission--;
					}
				}
			}
		}
		var particle = this.g2d_firstParticle;
		while(particle != null) {
			var next = particle.g2d_next;
			var _g = 0;
			var _g1 = this.g2d_affectorsCount;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_affectors[i].update(this,particle,p_deltaTime);
			}
			if(particle.die) {
				this.deactivateParticle(particle);
			}
			particle = next;
		}
	}
	,render: function(p_camera,p_useMatrix) {
		var particle = this.g2d_firstParticle;
		while(particle != null) {
			var next = particle.g2d_next;
			if(particle.overrideRender) {
				particle.render(p_camera,this);
			} else {
				var tx = this.g2d_node.g2d_worldX + (particle.x - this.g2d_node.g2d_worldX);
				var ty = this.g2d_node.g2d_worldY + (particle.y - this.g2d_node.g2d_worldY);
				if(!particle.overrideUvs) {
					var _this = this.g2d_node;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.draw(particle.texture,this.blendMode,tx,ty,particle.scaleX * this.g2d_node.g2d_worldScaleX,particle.scaleY * this.g2d_node.g2d_worldScaleY,particle.rotation,particle.red * this.g2d_node.g2d_worldRed,particle.green * this.g2d_node.g2d_worldGreen,particle.blue * this.g2d_node.g2d_worldBlue,particle.alpha * this.g2d_node.g2d_worldAlpha,null);
				}
			}
			particle = next;
		}
	}
	,activateParticle: function() {
		var particle = this.particlePool.g2d_get();
		if(this.g2d_lastParticle != null) {
			particle.g2d_previous = this.g2d_lastParticle;
			this.g2d_lastParticle.g2d_next = particle;
			this.g2d_lastParticle = particle;
		} else {
			this.g2d_firstParticle = particle;
			this.g2d_lastParticle = particle;
		}
		particle.spawn(this);
		var _g = 0;
		var _g1 = this.g2d_initializersCount;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_initializers[i].initialize(this,particle);
		}
	}
	,activateParticle2: function() {
		var particle = this.particlePool.g2d_get();
		if(this.g2d_firstParticle != null) {
			particle.g2d_next = this.g2d_firstParticle;
			this.g2d_firstParticle.g2d_previous = particle;
			this.g2d_firstParticle = particle;
		} else {
			this.g2d_firstParticle = particle;
			this.g2d_lastParticle = particle;
		}
		particle.spawn(this);
		var _g = 0;
		var _g1 = this.g2d_initializersCount;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_initializers[i].initialize(this,particle);
		}
	}
	,deactivateParticle: function(p_particle) {
		if(p_particle == this.g2d_lastParticle) {
			this.g2d_lastParticle = this.g2d_lastParticle.g2d_previous;
		}
		if(p_particle == this.g2d_firstParticle) {
			this.g2d_firstParticle = this.g2d_firstParticle.g2d_next;
		}
		p_particle.dispose();
	}
	,getBounds: function(p_target) {
		return null;
	}
	,onDispose: function() {
		while(this.g2d_firstParticle != null) this.deactivateParticle(this.g2d_firstParticle);
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.remove($bind(this,this.update));
	}
	,captureMouseInput: function(p_input) {
	}
	,hitTest: function(p_x,p_y) {
		return false;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GParticleSystemD");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GParticleSystemD");
	}
	,__class__: com_genome2d_deprecated_components_renderable_particles_GParticleSystemD
});
var com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD = function() {
	this.g2d_activeParticles = 0;
	this.g2d_accumulatedEmission = 0;
	this.g2d_accumulatedTime = 0;
	this.paused = false;
	this.dispersionAngleVariance = 0;
	this.dispersionAngle = 0;
	this.dispersionYVariance = 0;
	this.dispersionXVariance = 0;
	this.endAlphaVariance = 0;
	this.endAlpha = 1;
	this.endBlueVariance = 0;
	this.endBlue = 1;
	this.endGreenVariance = 0;
	this.endGreen = 1;
	this.endRedVariance = 0;
	this.endRed = 1;
	this.initialAlphaVariance = 0;
	this.initialAlpha = 1;
	this.initialBlueVariance = 0;
	this.initialBlue = 1;
	this.initialGreenVariance = 0;
	this.initialGreen = 1;
	this.initialRedVariance = 0;
	this.initialRed = 1;
	this.initialAngleVariance = 0;
	this.initialAngle = 0;
	this.initialAngularVelocityVariance = 0;
	this.initialAngularVelocity = 0;
	this.initialAccelerationVariance = 0;
	this.initialAcceleration = 0;
	this.initialVelocityVariance = 0;
	this.initialVelocity = 0;
	this.emissionDelay = 0;
	this.emissionTime = 1;
	this.emissionVariance = 0;
	this.emission = 1;
	this.energyVariance = 0;
	this.energy = 0;
	this.burst = false;
	this.emit = false;
	this.endScaleVariance = 0;
	this.endScale = 1;
	this.initialScaleVariance = 0;
	this.initialScale = 1;
	this.useWorldSpace = false;
	com_genome2d_components_GComponent.call(this);
};
$hxClasses["com.genome2d.deprecated.components.renderable.particles.GSimpleParticleSystemD"] = com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD;
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.__name__ = "com.genome2d.deprecated.components.renderable.particles.GSimpleParticleSystemD";
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.__interfaces__ = [com_genome2d_components_renderable_IGRenderable];
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.__super__ = com_genome2d_components_GComponent;
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.prototype = $extend(com_genome2d_components_GComponent.prototype,{
	blendMode: null
	,useWorldSpace: null
	,initialScale: null
	,initialScaleVariance: null
	,endScale: null
	,endScaleVariance: null
	,emit: null
	,burst: null
	,energy: null
	,energyVariance: null
	,emission: null
	,emissionVariance: null
	,emissionTime: null
	,emissionDelay: null
	,initialVelocity: null
	,initialVelocityVariance: null
	,initialAcceleration: null
	,initialAccelerationVariance: null
	,initialAngularVelocity: null
	,initialAngularVelocityVariance: null
	,initialAngle: null
	,initialAngleVariance: null
	,initialRed: null
	,initialRedVariance: null
	,initialGreen: null
	,initialGreenVariance: null
	,initialBlue: null
	,initialBlueVariance: null
	,initialAlpha: null
	,initialAlphaVariance: null
	,get_initialColor: function() {
		var red = (this.initialRed * 255 | 0) << 16;
		var green = (this.initialGreen * 255 | 0) << 8;
		var blue = this.initialBlue * 255 | 0;
		return red + green + blue;
	}
	,set_initialColor: function(p_value) {
		this.initialRed = (p_value >> 16 & 255 | 0) / 255;
		this.initialGreen = (p_value >> 8 & 255 | 0) / 255;
		this.initialBlue = (p_value & 255 | 0) / 255;
		return p_value;
	}
	,endRed: null
	,endRedVariance: null
	,endGreen: null
	,endGreenVariance: null
	,endBlue: null
	,endBlueVariance: null
	,endAlpha: null
	,endAlphaVariance: null
	,get_endColor: function() {
		var red = (this.endRed * 255 | 0) << 16;
		var green = (this.endGreen * 255 | 0) << 8;
		var blue = this.endBlue * 255 | 0;
		return red + green + blue | 0;
	}
	,set_endColor: function(p_value) {
		this.endRed = (p_value >> 16 & 255) / 255;
		this.endGreen = (p_value >> 8 & 255) / 255;
		this.endBlue = (p_value & 255) / 255;
		return p_value;
	}
	,dispersionXVariance: null
	,dispersionYVariance: null
	,dispersionAngle: null
	,dispersionAngleVariance: null
	,paused: null
	,texture: null
	,g2d_accumulatedTime: null
	,g2d_accumulatedEmission: null
	,g2d_firstParticle: null
	,g2d_lastParticle: null
	,g2d_activeParticles: null
	,g2d_lastUpdateTime: null
	,setInitialParticlePosition: function(p_particle) {
		p_particle.g2d_x = this.useWorldSpace ? this.g2d_node.g2d_worldX : 0;
		if(this.dispersionXVariance > 0) {
			p_particle.g2d_x += this.dispersionXVariance * Math.random() - this.dispersionXVariance * .5;
		}
		p_particle.g2d_y = this.useWorldSpace ? this.g2d_node.g2d_worldY : 0;
		if(this.dispersionYVariance > 0) {
			p_particle.g2d_y += this.dispersionYVariance * Math.random() - this.dispersionYVariance * .5;
		}
		p_particle.g2d_rotation = this.initialAngle;
		if(this.initialAngleVariance > 0) {
			p_particle.g2d_rotation += this.initialAngleVariance * Math.random();
		}
		p_particle.g2d_scaleX = p_particle.g2d_scaleY = this.initialScale;
		if(this.initialScaleVariance > 0) {
			var sd = this.initialScaleVariance * Math.random();
			p_particle.g2d_scaleX += sd;
			p_particle.g2d_scaleY += sd;
		}
	}
	,init: function() {
		this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.add($bind(this,this.update));
	}
	,setup: function(p_maxCount,p_precacheCount,p_disposeImmediately) {
		if(p_disposeImmediately == null) {
			p_disposeImmediately = true;
		}
		if(p_precacheCount == null) {
			p_precacheCount = 0;
		}
		if(p_maxCount == null) {
			p_maxCount = 0;
		}
		this.g2d_accumulatedTime = 0;
		this.g2d_accumulatedEmission = 0;
	}
	,forceBurst: function() {
		var currentEmission = this.emission + this.emissionVariance * Math.random() | 0;
		var _g = 0;
		var _g1 = currentEmission;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_activateParticle();
		}
		this.emit = false;
	}
	,update: function(p_deltaTime) {
		this.g2d_lastUpdateTime = p_deltaTime;
		if(!this.paused) {
			if(this.emit) {
				if(this.burst) {
					this.forceBurst();
				} else {
					this.g2d_accumulatedTime += p_deltaTime * .001;
					var time = this.g2d_accumulatedTime % (this.emissionTime + this.emissionDelay);
					if(time <= this.emissionTime) {
						var updateEmission = this.emission;
						if(this.emissionVariance > 0) {
							updateEmission += this.emissionVariance * Math.random();
						}
						this.g2d_accumulatedEmission += updateEmission * p_deltaTime * .001;
						while(this.g2d_accumulatedEmission > 0) {
							this.g2d_activateParticle();
							this.g2d_accumulatedEmission--;
						}
					}
				}
			}
			var particle = this.g2d_firstParticle;
			while(particle != null) {
				var next = particle.g2d_next;
				particle.g2d_update(this,this.g2d_lastUpdateTime);
				particle = next;
			}
		}
	}
	,render: function(p_camera,p_useMatrix) {
		if(this.texture == null) {
			return;
		}
		var particle = this.g2d_firstParticle;
		while(particle != null) {
			var next = particle.g2d_next;
			var tx;
			var ty;
			if(this.useWorldSpace) {
				tx = particle.g2d_x;
				ty = particle.g2d_y;
			} else {
				tx = this.g2d_node.g2d_worldX + particle.g2d_x;
				ty = this.g2d_node.g2d_worldY + particle.g2d_y;
			}
			var _this = this.g2d_node;
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			com_genome2d_node_GNode.g2d_core.g2d_context.draw(this.texture,this.blendMode,tx,ty,particle.g2d_scaleX * this.g2d_node.g2d_worldScaleX,particle.g2d_scaleY * this.g2d_node.g2d_worldScaleY,particle.g2d_rotation,particle.g2d_red,particle.g2d_green,particle.g2d_blue,particle.g2d_alpha,null);
			particle = next;
		}
	}
	,g2d_activateParticle: function() {
		var particle = this.g2d_createParticle();
		this.setInitialParticlePosition(particle);
		particle.g2d_init(this);
	}
	,g2d_createParticle: function() {
		var particle = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_get();
		if(this.g2d_firstParticle != null) {
			particle.g2d_next = this.g2d_firstParticle;
			this.g2d_firstParticle.g2d_previous = particle;
			this.g2d_firstParticle = particle;
		} else {
			this.g2d_firstParticle = particle;
			this.g2d_lastParticle = particle;
		}
		return particle;
	}
	,deactivateParticle: function(p_particle) {
		if(p_particle == this.g2d_lastParticle) {
			this.g2d_lastParticle = this.g2d_lastParticle.g2d_previous;
		}
		if(p_particle == this.g2d_firstParticle) {
			this.g2d_firstParticle = this.g2d_firstParticle.g2d_next;
		}
		p_particle.g2d_dispose();
	}
	,hasLiveParticles: function() {
		return this.g2d_firstParticle != null;
	}
	,onDispose: function() {
		while(this.g2d_firstParticle != null) this.deactivateParticle(this.g2d_firstParticle);
		var _this = this.g2d_node;
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		com_genome2d_node_GNode.g2d_core.g2d_onUpdate.remove($bind(this,this.update));
	}
	,clear: function() {
		while(this.g2d_firstParticle != null) this.deactivateParticle(this.g2d_firstParticle);
	}
	,getBounds: function(p_bounds) {
		if(p_bounds != null) {
			p_bounds.setTo(-8,-8,16,16);
		} else {
			p_bounds = new com_genome2d_geom_GRectangle(-8,-8,16,16);
		}
		return p_bounds;
	}
	,captureMouseInput: function(p_input) {
		p_input.captured = p_input.captured || this.hitTest(p_input.localX,p_input.localY);
	}
	,hitTest: function(p_x,p_y) {
		var hit = false;
		p_x = p_x / 16 + .5;
		p_y = p_y / 16 + .5;
		hit = p_x >= 0 && p_x <= 1 && p_y >= 0 && p_y <= 1;
		return hit;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GSimpleParticleSystemD");
		return com_genome2d_components_GComponent.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_components_GComponent.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GSimpleParticleSystemD");
	}
	,__class__: com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD
	,__properties__: $extend(com_genome2d_components_GComponent.prototype.__properties__,{set_endColor:"set_endColor",get_endColor:"get_endColor",set_initialColor:"set_initialColor",get_initialColor:"get_initialColor"})
});
var com_genome2d_deprecated_particles_GParticleD = function(p_pool) {
	this.index = 0;
	this.die = false;
	this.overrideUvs = false;
	this.accumulatedEnergy = 0;
	this.totalEnergy = 0;
	this.velocityY = 0;
	this.velocityX = 0;
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.overrideRender = false;
	this.g2d_pool = p_pool;
	this.index = this.g2d_pool.g2d_count;
};
$hxClasses["com.genome2d.deprecated.particles.GParticleD"] = com_genome2d_deprecated_particles_GParticleD;
com_genome2d_deprecated_particles_GParticleD.__name__ = "com.genome2d.deprecated.particles.GParticleD";
com_genome2d_deprecated_particles_GParticleD.prototype = {
	texture: null
	,overrideRender: null
	,scaleX: null
	,scaleY: null
	,x: null
	,y: null
	,rotation: null
	,red: null
	,green: null
	,blue: null
	,alpha: null
	,velocityX: null
	,velocityY: null
	,totalEnergy: null
	,accumulatedEnergy: null
	,accumulatedTime: null
	,currentFrame: null
	,overrideUvs: null
	,uvX: null
	,uvY: null
	,uvScaleX: null
	,uvScaleY: null
	,die: null
	,g2d_next: null
	,g2d_previous: null
	,get_previous: function() {
		return this.g2d_previous;
	}
	,g2d_nextAvailableInstance: null
	,index: null
	,g2d_pool: null
	,spawn: function(p_particleSystem) {
		this.texture = p_particleSystem.texture;
		this.x = p_particleSystem.g2d_node.g2d_worldX;
		this.y = p_particleSystem.g2d_node.g2d_worldY;
		this.scaleX = this.scaleY = 1;
		this.rotation = 0;
		this.velocityX = 0;
		this.velocityY = 0;
		this.totalEnergy = 0;
		this.accumulatedEnergy = 0;
		this.red = 1;
		this.green = 1;
		this.blue = 1;
		this.alpha = 1;
		this.accumulatedTime = 0;
		this.currentFrame = 0;
	}
	,dispose: function() {
		this.die = false;
		if(this.g2d_next != null) {
			this.g2d_next.g2d_previous = this.g2d_previous;
		}
		if(this.g2d_previous != null) {
			this.g2d_previous.g2d_next = this.g2d_next;
		}
		this.g2d_next = null;
		this.g2d_previous = null;
		this.g2d_nextAvailableInstance = this.g2d_pool.g2d_availableInstance;
		this.g2d_pool.g2d_availableInstance = this;
	}
	,render: function(p_camera,p_particleSystem) {
	}
	,__class__: com_genome2d_deprecated_particles_GParticleD
	,__properties__: {get_previous:"get_previous"}
};
var com_genome2d_deprecated_particles_GParticlePoolD = function(p_particleClass) {
	this.g2d_count = 0;
	this.g2d_particleClass = p_particleClass == null ? com_genome2d_deprecated_particles_GParticleD : p_particleClass;
};
$hxClasses["com.genome2d.deprecated.particles.GParticlePoolD"] = com_genome2d_deprecated_particles_GParticlePoolD;
com_genome2d_deprecated_particles_GParticlePoolD.__name__ = "com.genome2d.deprecated.particles.GParticlePoolD";
com_genome2d_deprecated_particles_GParticlePoolD.prototype = {
	g2d_availableInstance: null
	,g2d_count: null
	,g2d_particleClass: null
	,precache: function(p_precacheCount) {
		if(p_precacheCount < this.g2d_count) {
			return;
		}
		var precached = this.g2d_get();
		while(this.g2d_count < p_precacheCount) {
			var n = this.g2d_get();
			n.g2d_previous = precached;
			precached = n;
		}
		while(precached != null) {
			var d = precached;
			precached = d.g2d_previous;
			d.dispose();
		}
	}
	,g2d_get: function() {
		var instance = this.g2d_availableInstance;
		if(instance != null) {
			this.g2d_availableInstance = instance.g2d_nextAvailableInstance;
			instance.g2d_nextAvailableInstance = null;
		} else {
			instance = Type.createInstance(this.g2d_particleClass,[this]);
			this.g2d_count++;
		}
		return instance;
	}
	,__class__: com_genome2d_deprecated_particles_GParticlePoolD
};
var com_genome2d_deprecated_particles_GSimpleParticleD = function() {
	this.g2d_id = 0;
	this.g2d_accumulatedEnergy = 0;
	this.g2d_endScale = 1;
	this.g2d_initialScale = 1;
	this.g2d_energy = 0;
	this.g2d_velocityY = 0;
	this.g2d_velocityX = 0;
	this.g2d_id = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_instanceCount++;
};
$hxClasses["com.genome2d.deprecated.particles.GSimpleParticleD"] = com_genome2d_deprecated_particles_GSimpleParticleD;
com_genome2d_deprecated_particles_GSimpleParticleD.__name__ = "com.genome2d.deprecated.particles.GSimpleParticleD";
com_genome2d_deprecated_particles_GSimpleParticleD.g2d_availableInstance = null;
com_genome2d_deprecated_particles_GSimpleParticleD.precache = function(p_precacheCount) {
	if(p_precacheCount < com_genome2d_deprecated_particles_GSimpleParticleD.g2d_instanceCount) {
		return;
	}
	var precached = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_get();
	while(com_genome2d_deprecated_particles_GSimpleParticleD.g2d_instanceCount < p_precacheCount) {
		var n = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_get();
		n.g2d_previous = precached;
		precached = n;
	}
	while(precached != null) {
		var d = precached;
		precached = d.g2d_previous;
		d.g2d_dispose();
	}
};
com_genome2d_deprecated_particles_GSimpleParticleD.g2d_get = function() {
	var instance = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_availableInstance;
	if(instance != null) {
		com_genome2d_deprecated_particles_GSimpleParticleD.g2d_availableInstance = instance.g2d_nextInstance;
		instance.g2d_nextInstance = null;
	} else {
		instance = new com_genome2d_deprecated_particles_GSimpleParticleD();
	}
	return instance;
};
com_genome2d_deprecated_particles_GSimpleParticleD.prototype = {
	g2d_next: null
	,g2d_previous: null
	,g2d_x: null
	,g2d_y: null
	,g2d_rotation: null
	,g2d_scaleX: null
	,g2d_scaleY: null
	,g2d_red: null
	,g2d_green: null
	,g2d_blue: null
	,g2d_alpha: null
	,g2d_velocityX: null
	,g2d_velocityY: null
	,g2d_accelerationX: null
	,g2d_accelerationY: null
	,g2d_energy: null
	,g2d_initialScale: null
	,g2d_endScale: null
	,g2d_initialVelocityX: null
	,g2d_initialVelocityY: null
	,g2d_initialVelocityAngular: null
	,g2d_initialAccelerationX: null
	,g2d_initialAccelerationY: null
	,g2d_initialRed: null
	,g2d_initialGreen: null
	,g2d_initialBlue: null
	,g2d_initialAlpha: null
	,g2d_endRed: null
	,g2d_endGreen: null
	,g2d_endBlue: null
	,g2d_endAlpha: null
	,g2d_redDif: null
	,g2d_greenDif: null
	,g2d_blueDif: null
	,g2d_alphaDif: null
	,g2d_scaleDif: null
	,g2d_accumulatedEnergy: null
	,g2d_nextInstance: null
	,g2d_id: null
	,g2d_texture: null
	,g2d_init: function(p_emitter,p_invalidate) {
		if(p_invalidate == null) {
			p_invalidate = true;
		}
		this.g2d_accumulatedEnergy = 0;
		this.g2d_texture = p_emitter.texture;
		this.g2d_energy = p_emitter.energy * 1000;
		if(p_emitter.energyVariance > 0) {
			this.g2d_energy += p_emitter.energyVariance * 1000 * Math.random();
		}
		this.g2d_initialScale = p_emitter.initialScale;
		if(p_emitter.initialScaleVariance > 0) {
			this.g2d_initialScale += p_emitter.initialScaleVariance * Math.random();
		}
		this.g2d_endScale = p_emitter.endScale;
		if(p_emitter.endScaleVariance > 0) {
			this.g2d_endScale += p_emitter.endScaleVariance * Math.random();
		}
		var v = p_emitter.initialVelocity;
		if(p_emitter.initialVelocityVariance > 0) {
			v += p_emitter.initialVelocityVariance * Math.random();
		}
		var a = p_emitter.initialAcceleration;
		if(p_emitter.initialAccelerationVariance > 0) {
			a += p_emitter.initialAccelerationVariance * Math.random();
		}
		var particleVelocityX = v;
		var vX = particleVelocityX;
		var particleVelocityY = 0;
		var vY = particleVelocityY;
		var particleAccelerationX = a;
		var aX = particleAccelerationX;
		var particleAccelerationY = 0;
		var aY = particleAccelerationY;
		var rot = p_emitter.g2d_node.g2d_worldRotation;
		if(rot != 0) {
			var sin = Math.sin(rot);
			var cos = Math.cos(rot);
			particleVelocityX = v * cos;
			vX = particleVelocityX;
			particleVelocityY = v * sin;
			vY = particleVelocityY;
			particleAccelerationX = a * cos;
			aX = particleAccelerationX;
			particleAccelerationY = a * sin;
			aY = particleAccelerationY;
		}
		if(p_emitter.dispersionAngle != 0 || p_emitter.dispersionAngleVariance != 0) {
			var rangle = p_emitter.dispersionAngle;
			if(p_emitter.dispersionAngleVariance > 0) {
				rangle += p_emitter.dispersionAngleVariance * Math.random();
			}
			var sin1 = Math.sin(rangle);
			var cos1 = Math.cos(rangle);
			particleVelocityX = vX * cos1 - vY * sin1;
			particleVelocityY = vY * cos1 + vX * sin1;
			particleAccelerationX = aX * cos1 - aY * sin1;
			particleAccelerationY = aY * cos1 + aX * sin1;
		}
		this.g2d_initialVelocityX = this.g2d_velocityX = particleVelocityX * .001;
		this.g2d_initialVelocityY = this.g2d_velocityY = particleVelocityY * .001;
		this.g2d_initialAccelerationX = this.g2d_accelerationX = particleAccelerationX * .001;
		this.g2d_initialAccelerationY = this.g2d_accelerationY = particleAccelerationY * .001;
		this.g2d_initialVelocityAngular = p_emitter.initialAngularVelocity;
		if(p_emitter.initialAngularVelocityVariance > 0) {
			this.g2d_initialVelocityAngular += p_emitter.initialAngularVelocityVariance * Math.random();
		}
		this.g2d_initialRed = p_emitter.initialRed;
		if(p_emitter.initialRedVariance > 0) {
			this.g2d_initialRed += p_emitter.initialRedVariance * Math.random();
		}
		this.g2d_initialGreen = p_emitter.initialGreen;
		if(p_emitter.initialGreenVariance > 0) {
			this.g2d_initialGreen += p_emitter.initialGreenVariance * Math.random();
		}
		this.g2d_initialBlue = p_emitter.initialBlue;
		if(p_emitter.initialBlueVariance > 0) {
			this.g2d_initialBlue += p_emitter.initialBlueVariance * Math.random();
		}
		this.g2d_initialAlpha = p_emitter.initialAlpha;
		if(p_emitter.initialAlphaVariance > 0) {
			this.g2d_initialAlpha += p_emitter.initialAlphaVariance * Math.random();
		}
		this.g2d_endRed = p_emitter.endRed;
		if(p_emitter.endRedVariance > 0) {
			this.g2d_endRed += p_emitter.endRedVariance * Math.random();
		}
		this.g2d_endGreen = p_emitter.endGreen;
		if(p_emitter.endGreenVariance > 0) {
			this.g2d_endGreen += p_emitter.endGreenVariance * Math.random();
		}
		this.g2d_endBlue = p_emitter.endBlue;
		if(p_emitter.endBlueVariance > 0) {
			this.g2d_endBlue += p_emitter.endBlueVariance * Math.random();
		}
		this.g2d_endAlpha = p_emitter.endAlpha;
		if(p_emitter.endAlphaVariance > 0) {
			this.g2d_endAlpha += p_emitter.endAlphaVariance * Math.random();
		}
		this.g2d_redDif = this.g2d_endRed - this.g2d_initialRed;
		this.g2d_greenDif = this.g2d_endGreen - this.g2d_initialGreen;
		this.g2d_blueDif = this.g2d_endBlue - this.g2d_initialBlue;
		this.g2d_alphaDif = this.g2d_endAlpha - this.g2d_initialAlpha;
		this.g2d_scaleDif = this.g2d_endScale - this.g2d_initialScale;
	}
	,g2d_update: function(p_emitter,p_deltaTime) {
		this.g2d_accumulatedEnergy += p_deltaTime;
		if(this.g2d_accumulatedEnergy >= this.g2d_energy) {
			p_emitter.deactivateParticle(this);
			return;
		}
		var p = this.g2d_accumulatedEnergy / this.g2d_energy;
		this.g2d_velocityX += this.g2d_accelerationX * p_deltaTime;
		this.g2d_velocityY += this.g2d_accelerationY * p_deltaTime;
		this.g2d_red = this.g2d_redDif * p + this.g2d_initialRed;
		this.g2d_green = this.g2d_greenDif * p + this.g2d_initialGreen;
		this.g2d_blue = this.g2d_blueDif * p + this.g2d_initialBlue;
		this.g2d_alpha = this.g2d_alphaDif * p + this.g2d_initialAlpha;
		this.g2d_x += this.g2d_velocityX * p_deltaTime;
		this.g2d_y += this.g2d_velocityY * p_deltaTime;
		this.g2d_rotation += this.g2d_initialVelocityAngular * p_deltaTime;
		this.g2d_scaleX = this.g2d_scaleY = this.g2d_scaleDif * p + this.g2d_initialScale;
	}
	,g2d_dispose: function() {
		if(this.g2d_next != null) {
			this.g2d_next.g2d_previous = this.g2d_previous;
		}
		if(this.g2d_previous != null) {
			this.g2d_previous.g2d_next = this.g2d_next;
		}
		this.g2d_next = null;
		this.g2d_previous = null;
		this.g2d_nextInstance = com_genome2d_deprecated_particles_GSimpleParticleD.g2d_availableInstance;
		com_genome2d_deprecated_particles_GSimpleParticleD.g2d_availableInstance = this;
	}
	,__class__: com_genome2d_deprecated_particles_GSimpleParticleD
};
var com_genome2d_deprecated_particles_IGAffectorD = function() { };
$hxClasses["com.genome2d.deprecated.particles.IGAffectorD"] = com_genome2d_deprecated_particles_IGAffectorD;
com_genome2d_deprecated_particles_IGAffectorD.__name__ = "com.genome2d.deprecated.particles.IGAffectorD";
com_genome2d_deprecated_particles_IGAffectorD.__isInterface__ = true;
com_genome2d_deprecated_particles_IGAffectorD.prototype = {
	update: null
	,__class__: com_genome2d_deprecated_particles_IGAffectorD
};
var com_genome2d_deprecated_particles_IGInitializerD = function() { };
$hxClasses["com.genome2d.deprecated.particles.IGInitializerD"] = com_genome2d_deprecated_particles_IGInitializerD;
com_genome2d_deprecated_particles_IGInitializerD.__name__ = "com.genome2d.deprecated.particles.IGInitializerD";
com_genome2d_deprecated_particles_IGInitializerD.__isInterface__ = true;
com_genome2d_deprecated_particles_IGInitializerD.prototype = {
	initialize: null
	,__class__: com_genome2d_deprecated_particles_IGInitializerD
};
var com_genome2d_error_GError = function(p_message) {
	if(p_message == null) {
		p_message = "Unspecified error.";
	}
	throw new js__$Boot_HaxeError(p_message);
};
$hxClasses["com.genome2d.error.GError"] = com_genome2d_error_GError;
com_genome2d_error_GError.__name__ = "com.genome2d.error.GError";
com_genome2d_error_GError.prototype = {
	__class__: com_genome2d_error_GError
};
var com_genome2d_fbx_GFbxNode = function(p_fbxNode) {
	this.id = Std.string(com_genome2d_fbx_GFbxTools.toFloat(p_fbxNode.props[0]));
	this.name = com_genome2d_fbx_GFbxTools.toString(p_fbxNode.props[1]);
	this.connections = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.fbx.GFbxNode"] = com_genome2d_fbx_GFbxNode;
com_genome2d_fbx_GFbxNode.__name__ = "com.genome2d.fbx.GFbxNode";
com_genome2d_fbx_GFbxNode.prototype = {
	id: null
	,name: null
	,connections: null
	,__class__: com_genome2d_fbx_GFbxNode
};
var com_genome2d_fbx_GFbxGeometry = function(p_fbxNode) {
	com_genome2d_fbx_GFbxNode.call(this,p_fbxNode);
	var vertexNode = com_genome2d_fbx_GFbxTools.getAll(p_fbxNode,"Vertices")[0];
	var vertexIndexNode = com_genome2d_fbx_GFbxTools.getAll(p_fbxNode,"PolygonVertexIndex")[0];
	var normalsNode = com_genome2d_fbx_GFbxTools.getAll(p_fbxNode,"LayerElementNormal.Normals")[0];
	var uvNode = com_genome2d_fbx_GFbxTools.getAll(p_fbxNode,"LayerElementUV.UV")[0];
	var uvIndexNode = com_genome2d_fbx_GFbxTools.getAll(p_fbxNode,"LayerElementUV.UVIndex")[0];
	var importedVertices = com_genome2d_fbx_GFbxTools.getFloats(vertexNode);
	this.vertexNormals = com_genome2d_fbx_GFbxTools.getFloats(normalsNode);
	var currentVertexIndices = com_genome2d_fbx_GFbxTools.getInts(vertexIndexNode);
	var currentUVs = com_genome2d_fbx_GFbxTools.getFloats(uvNode);
	var currentUVIndices = com_genome2d_fbx_GFbxTools.getInts(uvIndexNode);
	if(currentUVIndices.length != currentVertexIndices.length) {
		throw new js__$Boot_HaxeError("Not same number of vertex and UV indices!");
	}
	this.uvs = [];
	var _g = 0;
	var _g1 = currentUVs.length;
	while(_g < _g1) {
		var j = _g++;
		this.uvs.push(0);
	}
	this.vertices = [];
	this.indices = [];
	var _g2 = 0;
	var _g3 = currentVertexIndices.length;
	while(_g2 < _g3) {
		var j1 = _g2++;
		var vertexIndex = currentVertexIndices[j1];
		if(vertexIndex < 0) {
			vertexIndex = -vertexIndex - 1;
		}
		this.vertices.push(importedVertices[vertexIndex * 3]);
		this.vertices.push(importedVertices[vertexIndex * 3 + 1]);
		this.vertices.push(importedVertices[vertexIndex * 3 + 2]);
		this.indices.push(j1);
		var uvIndex = currentUVIndices[j1];
		this.uvs[j1 * 2] = currentUVs[uvIndex * 2];
		this.uvs[j1 * 2 + 1] = 1 - currentUVs[uvIndex * 2 + 1];
	}
};
$hxClasses["com.genome2d.fbx.GFbxGeometry"] = com_genome2d_fbx_GFbxGeometry;
com_genome2d_fbx_GFbxGeometry.__name__ = "com.genome2d.fbx.GFbxGeometry";
com_genome2d_fbx_GFbxGeometry.__super__ = com_genome2d_fbx_GFbxNode;
com_genome2d_fbx_GFbxGeometry.prototype = $extend(com_genome2d_fbx_GFbxNode.prototype,{
	vertices: null
	,indices: null
	,uvs: null
	,vertexNormals: null
	,faceNormals: null
	,calculateFaceNormals: function() {
		this.faceNormals = [];
		var i = 0;
		while(i < this.indices.length) {
			var p1x = this.vertices[this.indices[i] * 3];
			var p1y = this.vertices[this.indices[i] * 3 + 1];
			var p1z = this.vertices[this.indices[i] * 3 + 2];
			var p2x = this.vertices[this.indices[i + 1] * 3];
			var p2y = this.vertices[this.indices[i + 1] * 3 + 1];
			var p2z = this.vertices[this.indices[i + 1] * 3 + 2];
			var p3x = this.vertices[this.indices[i + 2] * 3];
			var p3y = this.vertices[this.indices[i + 2] * 3 + 1];
			var p3z = this.vertices[this.indices[i + 2] * 3 + 2];
			var e1x = p1x - p2x;
			var e1y = p1y - p2y;
			var e1z = p1z - p2z;
			var e2x = p3x - p2x;
			var e2y = p3y - p2y;
			var e2z = p3z - p2z;
			var nx = e1y * e2z - e1z * e2y;
			var ny = e1z * e2x - e1x * e2z;
			var nz = e1x * e2y - e1y * e2x;
			var nl = Math.sqrt(nx * nx + ny * ny + nz * nz);
			nx /= nl;
			ny /= nl;
			nz /= nl;
			this.faceNormals.push(nx);
			this.faceNormals.push(ny);
			this.faceNormals.push(nz);
			i += 3;
		}
	}
	,getVertexFaces: function(p_vertexIndex) {
		var faces = [];
		var _g = 0;
		var _g1 = this.indices.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.indices[i] == p_vertexIndex) {
				var face = i / 3 | 0;
				if(faces.indexOf(face) == -1) {
					faces.push(face);
				}
			}
		}
		return faces;
	}
	,calculateVertexNormals: function() {
		this.vertexNormals = [];
		var vertexCount = this.vertices.length / 3 | 0;
		var _g = 0;
		var _g1 = vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var sharedFaces = this.getVertexFaces(i);
			var nx = 0;
			var ny = 0;
			var nz = 0;
			var _g2 = 0;
			while(_g2 < sharedFaces.length) {
				var faceIndex = sharedFaces[_g2];
				++_g2;
				nx += this.faceNormals[faceIndex * 3];
				ny += this.faceNormals[faceIndex * 3 + 1];
				nz += this.faceNormals[faceIndex * 3 + 2];
			}
			var nl = Math.sqrt(nx * nx + ny * ny + nz * nz);
			this.vertexNormals.push(nx / nl);
			this.vertexNormals.push(ny / nl);
			this.vertexNormals.push(nz / nl);
		}
	}
	,__class__: com_genome2d_fbx_GFbxGeometry
});
var com_genome2d_fbx_GFbxMaterial = function(p_fbxNode) {
	com_genome2d_fbx_GFbxNode.call(this,p_fbxNode);
};
$hxClasses["com.genome2d.fbx.GFbxMaterial"] = com_genome2d_fbx_GFbxMaterial;
com_genome2d_fbx_GFbxMaterial.__name__ = "com.genome2d.fbx.GFbxMaterial";
com_genome2d_fbx_GFbxMaterial.__super__ = com_genome2d_fbx_GFbxNode;
com_genome2d_fbx_GFbxMaterial.prototype = $extend(com_genome2d_fbx_GFbxNode.prototype,{
	getTexture: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_fbx_GFbxTexture)) {
				return connection1;
			}
		}
		return null;
	}
	,__class__: com_genome2d_fbx_GFbxMaterial
});
var com_genome2d_fbx_GFbxMatrixInheritMode = $hxEnums["com.genome2d.fbx.GFbxMatrixInheritMode"] = { __ename__ : "com.genome2d.fbx.GFbxMatrixInheritMode", __constructs__ : ["REPLACE","IGNORE","APPEND"]
	,REPLACE: {_hx_index:0,__enum__:"com.genome2d.fbx.GFbxMatrixInheritMode",toString:$estr}
	,IGNORE: {_hx_index:1,__enum__:"com.genome2d.fbx.GFbxMatrixInheritMode",toString:$estr}
	,APPEND: {_hx_index:2,__enum__:"com.genome2d.fbx.GFbxMatrixInheritMode",toString:$estr}
};
com_genome2d_fbx_GFbxMatrixInheritMode.__empty_constructs__ = [com_genome2d_fbx_GFbxMatrixInheritMode.REPLACE,com_genome2d_fbx_GFbxMatrixInheritMode.IGNORE,com_genome2d_fbx_GFbxMatrixInheritMode.APPEND];
var com_genome2d_fbx_GFbxModel = function(p_fbxNode) {
	this.visible = true;
	com_genome2d_fbx_GFbxNode.call(this,p_fbxNode);
	this.inheritSceneMatrixMode = com_genome2d_fbx_GFbxMatrixInheritMode.REPLACE;
	this.modelMatrix = new com_genome2d_geom_GMatrix3D();
};
$hxClasses["com.genome2d.fbx.GFbxModel"] = com_genome2d_fbx_GFbxModel;
com_genome2d_fbx_GFbxModel.__name__ = "com.genome2d.fbx.GFbxModel";
com_genome2d_fbx_GFbxModel.__super__ = com_genome2d_fbx_GFbxNode;
com_genome2d_fbx_GFbxModel.prototype = $extend(com_genome2d_fbx_GFbxNode.prototype,{
	visible: null
	,renderer: null
	,inheritSceneMatrixMode: null
	,modelMatrix: null
	,getGeometry: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_fbx_GFbxGeometry)) {
				return connection1;
			}
			if(((connection1) instanceof com_genome2d_fbx_GFbxModel)) {
				return (js_Boot.__cast(connection1 , com_genome2d_fbx_GFbxModel)).getGeometry();
			}
		}
		return null;
	}
	,getMaterial: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_fbx_GFbxMaterial)) {
				return connection1;
			}
			if(((connection1) instanceof com_genome2d_fbx_GFbxModel)) {
				return (js_Boot.__cast(connection1 , com_genome2d_fbx_GFbxModel)).getMaterial();
			}
		}
		return null;
	}
	,__class__: com_genome2d_fbx_GFbxModel
});
var com_genome2d_fbx__$GFbxParser_Token = $hxEnums["com.genome2d.fbx._GFbxParser.Token"] = { __ename__ : "com.genome2d.fbx._GFbxParser.Token", __constructs__ : ["TIdent","TNode","TInt","TFloat","TString","TLength","TBraceOpen","TBraceClose","TColon","TEof"]
	,TIdent: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TNode: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TInt: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TFloat: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TString: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TLength: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TBraceOpen: {_hx_index:6,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}
	,TBraceClose: {_hx_index:7,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}
	,TColon: {_hx_index:8,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}
	,TEof: {_hx_index:9,__enum__:"com.genome2d.fbx._GFbxParser.Token",toString:$estr}
};
com_genome2d_fbx__$GFbxParser_Token.__empty_constructs__ = [com_genome2d_fbx__$GFbxParser_Token.TBraceOpen,com_genome2d_fbx__$GFbxParser_Token.TBraceClose,com_genome2d_fbx__$GFbxParser_Token.TColon,com_genome2d_fbx__$GFbxParser_Token.TEof];
var com_genome2d_fbx_GFbxParser = function() { };
$hxClasses["com.genome2d.fbx.GFbxParser"] = com_genome2d_fbx_GFbxParser;
com_genome2d_fbx_GFbxParser.__name__ = "com.genome2d.fbx.GFbxParser";
com_genome2d_fbx_GFbxParser.g2d_currentLine = null;
com_genome2d_fbx_GFbxParser.g2d_data = null;
com_genome2d_fbx_GFbxParser.g2d_currentPosition = null;
com_genome2d_fbx_GFbxParser.token = null;
com_genome2d_fbx_GFbxParser.parse = function(p_data) {
	com_genome2d_fbx_GFbxParser.g2d_data = p_data;
	com_genome2d_fbx_GFbxParser.g2d_currentPosition = 0;
	com_genome2d_fbx_GFbxParser.g2d_currentLine = 1;
	com_genome2d_fbx_GFbxParser.token = null;
	return { name : "Root", props : [com_genome2d_fbx_FbxProp.PInt(0),com_genome2d_fbx_FbxProp.PString("Root"),com_genome2d_fbx_FbxProp.PString("Root")], childs : com_genome2d_fbx_GFbxParser.parseNodes()};
};
com_genome2d_fbx_GFbxParser.parseNodes = function() {
	var nodes = [];
	while(true) {
		var _g = com_genome2d_fbx_GFbxParser.peek();
		if(_g != null) {
			switch(_g._hx_index) {
			case 7:case 9:
				return nodes;
			default:
			}
		}
		nodes.push(com_genome2d_fbx_GFbxParser.parseNode());
	}
};
com_genome2d_fbx_GFbxParser.parseNode = function() {
	var t = com_genome2d_fbx_GFbxParser.next();
	var name;
	if(t._hx_index == 1) {
		var n = t.s;
		name = n;
	} else {
		name = com_genome2d_fbx_GFbxParser.unexpected(t);
	}
	var props = [];
	var childs = null;
	_hx_loop1: while(true) {
		t = com_genome2d_fbx_GFbxParser.next();
		switch(t._hx_index) {
		case 0:
			var s = t.s;
			props.push(com_genome2d_fbx_FbxProp.PIdent(s));
			break;
		case 2:
			var s1 = t.s;
			props.push(com_genome2d_fbx_FbxProp.PInt(Std.parseInt(s1)));
			break;
		case 3:
			var s2 = t.s;
			props.push(com_genome2d_fbx_FbxProp.PFloat(parseFloat(s2)));
			break;
		case 4:
			var s3 = t.s;
			props.push(com_genome2d_fbx_FbxProp.PString(s3));
			break;
		case 5:
			var v = t.v;
			com_genome2d_fbx_GFbxParser.except(com_genome2d_fbx__$GFbxParser_Token.TBraceOpen);
			com_genome2d_fbx_GFbxParser.except(com_genome2d_fbx__$GFbxParser_Token.TNode("a"));
			var ints = [];
			var floats = null;
			var i = 0;
			while(i < v) {
				t = com_genome2d_fbx_GFbxParser.next();
				switch(t._hx_index) {
				case 2:
					var s4 = t.s;
					++i;
					if(floats == null) {
						ints.push(Std.parseInt(s4));
					} else {
						floats.push(Std.parseInt(s4));
					}
					break;
				case 3:
					var s5 = t.s;
					++i;
					if(floats == null) {
						floats = [];
						var _g1 = 0;
						while(_g1 < ints.length) {
							var i1 = ints[_g1];
							++_g1;
							floats.push(i1);
						}
						ints = null;
					}
					floats.push(parseFloat(s5));
					break;
				case 8:
					continue;
				default:
					com_genome2d_fbx_GFbxParser.unexpected(t);
				}
			}
			props.push(floats == null ? com_genome2d_fbx_FbxProp.PInts(ints) : com_genome2d_fbx_FbxProp.PFloats(floats));
			com_genome2d_fbx_GFbxParser.except(com_genome2d_fbx__$GFbxParser_Token.TBraceClose);
			break _hx_loop1;
		case 6:case 7:
			com_genome2d_fbx_GFbxParser.token = t;
			break;
		default:
			com_genome2d_fbx_GFbxParser.unexpected(t);
		}
		t = com_genome2d_fbx_GFbxParser.next();
		switch(t._hx_index) {
		case 1:
			var _g6 = t.s;
			com_genome2d_fbx_GFbxParser.token = t;
			break _hx_loop1;
		case 6:
			childs = com_genome2d_fbx_GFbxParser.parseNodes();
			com_genome2d_fbx_GFbxParser.except(com_genome2d_fbx__$GFbxParser_Token.TBraceClose);
			break _hx_loop1;
		case 7:
			com_genome2d_fbx_GFbxParser.token = t;
			break _hx_loop1;
		case 8:
			break;
		default:
			com_genome2d_fbx_GFbxParser.unexpected(t);
		}
	}
	if(childs == null) {
		childs = [];
	}
	return { name : name, props : props, childs : childs};
};
com_genome2d_fbx_GFbxParser.except = function(except) {
	var t = com_genome2d_fbx_GFbxParser.next();
	if(!Type.enumEq(t,except)) {
		com_genome2d_fbx_GFbxParser.error("Unexpected '" + com_genome2d_fbx_GFbxParser.tokenStr(t) + "' (" + com_genome2d_fbx_GFbxParser.tokenStr(except) + " expected)");
	}
};
com_genome2d_fbx_GFbxParser.peek = function() {
	if(com_genome2d_fbx_GFbxParser.token == null) {
		com_genome2d_fbx_GFbxParser.token = com_genome2d_fbx_GFbxParser.nextToken();
	}
	return com_genome2d_fbx_GFbxParser.token;
};
com_genome2d_fbx_GFbxParser.next = function() {
	if(com_genome2d_fbx_GFbxParser.token == null) {
		return com_genome2d_fbx_GFbxParser.nextToken();
	}
	var tmp = com_genome2d_fbx_GFbxParser.token;
	com_genome2d_fbx_GFbxParser.token = null;
	return tmp;
};
com_genome2d_fbx_GFbxParser.error = function(msg) {
	throw new js__$Boot_HaxeError(msg + " (line " + com_genome2d_fbx_GFbxParser.g2d_currentLine + ")");
};
com_genome2d_fbx_GFbxParser.unexpected = function(t) {
	return com_genome2d_fbx_GFbxParser.error("Unexpected " + com_genome2d_fbx_GFbxParser.tokenStr(t));
};
com_genome2d_fbx_GFbxParser.tokenStr = function(t) {
	switch(t._hx_index) {
	case 0:
		var i = t.s;
		return i;
	case 1:
		var i1 = t.s;
		return i1 + ":";
	case 2:
		var i2 = t.s;
		return i2;
	case 3:
		var f = t.s;
		return f;
	case 4:
		var s = t.s;
		return "\"" + s + "\"";
	case 5:
		var l = t.v;
		return "*" + l;
	case 6:
		return "{";
	case 7:
		return "}";
	case 8:
		return ",";
	case 9:
		return "<eof>";
	}
};
com_genome2d_fbx_GFbxParser.nextChar = function() {
	return com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
};
com_genome2d_fbx_GFbxParser.isIdentChar = function(c) {
	if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 95)) {
		return c == 45;
	} else {
		return true;
	}
};
com_genome2d_fbx_GFbxParser.nextToken = function() {
	var startPosition = com_genome2d_fbx_GFbxParser.g2d_currentPosition;
	while(true) {
		var c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
		switch(c) {
		case 10:
			com_genome2d_fbx_GFbxParser.g2d_currentLine++;
			++startPosition;
			break;
		case 9:case 13:case 32:
			++startPosition;
			break;
		case 34:
			startPosition = com_genome2d_fbx_GFbxParser.g2d_currentPosition;
			while(true) {
				c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
				if(c == 34) {
					break;
				}
				if(c != c || c == 10) {
					com_genome2d_fbx_GFbxParser.error("Unclosed string");
				}
			}
			return com_genome2d_fbx__$GFbxParser_Token.TString(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition - 1));
		case 42:
			startPosition = com_genome2d_fbx_GFbxParser.g2d_currentPosition;
			while(true) {
				c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
				if(!(c >= 48 && c <= 57)) {
					break;
				}
			}
			com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
			return com_genome2d_fbx__$GFbxParser_Token.TLength(Std.parseInt(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition)));
		case 44:
			return com_genome2d_fbx__$GFbxParser_Token.TColon;
		case 59:
			while(true) {
				var c1 = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
				if(c1 != c1 || c1 == 10) {
					com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
					break;
				}
			}
			startPosition = com_genome2d_fbx_GFbxParser.g2d_currentPosition;
			break;
		case 123:
			return com_genome2d_fbx__$GFbxParser_Token.TBraceOpen;
		case 125:
			return com_genome2d_fbx__$GFbxParser_Token.TBraceClose;
		default:
			if(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c == 95) {
				while(true) {
					c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
					if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 95 || c == 45)) {
						break;
					}
				}
				if(c == 58) {
					return com_genome2d_fbx__$GFbxParser_Token.TNode(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition - 1));
				}
				com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
				return com_genome2d_fbx__$GFbxParser_Token.TIdent(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition));
			}
			if(c >= 48 && c <= 57 || c == 45) {
				while(true) {
					c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
					if(!(c >= 48 && c <= 57)) {
						break;
					}
				}
				if(c != 46 && c != 69 && c != 101 && com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition < 10) {
					com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
					return com_genome2d_fbx__$GFbxParser_Token.TInt(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition));
				}
				if(c == 46) {
					while(true) {
						c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
						if(!(c >= 48 && c <= 57)) {
							break;
						}
					}
				}
				if(c == 101 || c == 69) {
					c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
					if(c != 45 && c != 43) {
						com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
					}
					while(true) {
						c = com_genome2d_fbx_GFbxParser.g2d_data.charCodeAt(com_genome2d_fbx_GFbxParser.g2d_currentPosition++);
						if(!(c >= 48 && c <= 57)) {
							break;
						}
					}
				}
				com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
				return com_genome2d_fbx__$GFbxParser_Token.TFloat(HxOverrides.substr(com_genome2d_fbx_GFbxParser.g2d_data,startPosition,com_genome2d_fbx_GFbxParser.g2d_currentPosition - startPosition));
			}
			if(c != c) {
				com_genome2d_fbx_GFbxParser.g2d_currentPosition--;
				return com_genome2d_fbx__$GFbxParser_Token.TEof;
			}
			com_genome2d_fbx_GFbxParser.error("Unexpected char '" + String.fromCodePoint(c) + "'");
		}
	}
};
var com_genome2d_fbx_GFbxScene = function() {
	this.g2d_nodes = new haxe_ds_StringMap();
	this.lightDirection = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.ambientColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.tintColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.lightColor = new com_genome2d_geom_GFloat4(1,1,1,1);
};
$hxClasses["com.genome2d.fbx.GFbxScene"] = com_genome2d_fbx_GFbxScene;
com_genome2d_fbx_GFbxScene.__name__ = "com.genome2d.fbx.GFbxScene";
com_genome2d_fbx_GFbxScene.prototype = {
	lightDirection: null
	,ambientColor: null
	,lightColor: null
	,tintColor: null
	,g2d_models: null
	,getModelByName: function(p_name) {
		var _g = 0;
		var _g1 = this.g2d_models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			if(model.name == p_name) {
				return model;
			}
		}
		return null;
	}
	,g2d_fbxData: null
	,g2d_nodes: null
	,getNode: function(p_id) {
		var _this = this.g2d_nodes;
		if(__map_reserved[p_id] != null) {
			return _this.getReserved(p_id);
		} else {
			return _this.h[p_id];
		}
	}
	,g2d_sceneMatrix: null
	,getSceneMatrix: function() {
		return this.g2d_sceneMatrix;
	}
	,g2d_projectionMatrix: null
	,getProjectionMatrix: function() {
		return this.g2d_projectionMatrix;
	}
	,setProjectionMatrix: function(p_value) {
		this.g2d_projectionMatrix = p_value;
	}
	,init: function(p_fbxData) {
		this.g2d_fbxData = p_fbxData;
		this.initTextures();
		this.initMaterials();
		this.initModels();
		this.initGeometry();
		this.initConnections();
		this.create();
	}
	,initTextures: function() {
		var textureNodes = com_genome2d_fbx_GFbxTools.getAll(this.g2d_fbxData,"Objects.Texture");
		var _g = 0;
		while(_g < textureNodes.length) {
			var node = textureNodes[_g];
			++_g;
			var texture = new com_genome2d_fbx_GFbxTexture(node);
			var key = texture.id;
			var _this = this.g2d_nodes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,texture);
			} else {
				_this.h[key] = texture;
			}
		}
	}
	,initModels: function() {
		var modelNodes = com_genome2d_fbx_GFbxTools.getAll(this.g2d_fbxData,"Objects.Model");
		var _g = 0;
		while(_g < modelNodes.length) {
			var node = modelNodes[_g];
			++_g;
			var model = new com_genome2d_fbx_GFbxModel(node);
			var key = model.id;
			var _this = this.g2d_nodes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,model);
			} else {
				_this.h[key] = model;
			}
		}
	}
	,initMaterials: function() {
		var materialNodes = com_genome2d_fbx_GFbxTools.getAll(this.g2d_fbxData,"Objects.Material");
		var _g = 0;
		while(_g < materialNodes.length) {
			var node = materialNodes[_g];
			++_g;
			var material = new com_genome2d_fbx_GFbxMaterial(node);
			var key = material.id;
			var _this = this.g2d_nodes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,material);
			} else {
				_this.h[key] = material;
			}
		}
	}
	,initGeometry: function() {
		var geometryNodes = com_genome2d_fbx_GFbxTools.getAll(this.g2d_fbxData,"Objects.Geometry");
		var _g = 0;
		while(_g < geometryNodes.length) {
			var node = geometryNodes[_g];
			++_g;
			var geometry = new com_genome2d_fbx_GFbxGeometry(node);
			var key = geometry.id;
			var _this = this.g2d_nodes;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,geometry);
			} else {
				_this.h[key] = geometry;
			}
		}
	}
	,initConnections: function() {
		var connectionNodes = com_genome2d_fbx_GFbxTools.getAll(this.g2d_fbxData,"Connections.C");
		var _g = 0;
		while(_g < connectionNodes.length) {
			var node = connectionNodes[_g];
			++_g;
			var sourceId = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[1]));
			var _this = this.g2d_nodes;
			var source = __map_reserved[sourceId] != null ? _this.getReserved(sourceId) : _this.h[sourceId];
			var destinationId = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[2]));
			var _this1 = this.g2d_nodes;
			var destination = __map_reserved[destinationId] != null ? _this1.getReserved(destinationId) : _this1.h[destinationId];
			if(destination != null && source != null) {
				var key = source.id;
				var _this2 = destination.connections;
				if(__map_reserved[key] != null) {
					_this2.setReserved(key,source);
				} else {
					_this2.h[key] = source;
				}
			}
		}
	}
	,create: function() {
		this.g2d_sceneMatrix = new com_genome2d_geom_GMatrix3D();
		this.g2d_models = [];
		var _this = this.g2d_nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			var model = ((node1) instanceof com_genome2d_fbx_GFbxModel) ? node1 : null;
			if(model != null) {
				var fbxGeometry = model.getGeometry();
				if(fbxGeometry == null) {
					var p_arg1 = "Model has no geometry.";
					var p_arg2 = null;
					var p_arg3 = null;
					var p_arg4 = null;
					var p_arg5 = null;
					var p_arg6 = null;
					var p_arg7 = null;
					var p_arg8 = null;
					var p_arg9 = null;
					var p_arg10 = null;
					var p_arg11 = null;
					var p_arg12 = null;
					var p_arg13 = null;
					var p_arg14 = null;
					var p_arg15 = null;
					var p_arg16 = null;
					var p_arg17 = null;
					var p_arg18 = null;
					var p_arg19 = null;
					var p_arg20 = null;
					var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/fbx/GFbxScene.hx", lineNumber : 128, className : "com.genome2d.fbx.GFbxScene", methodName : "create"};
					var args = [];
					if(p_arg1 != null) {
						args.push(p_arg1);
					}
					if(p_arg2 != null) {
						args.push(p_arg2);
					}
					if(p_arg3 != null) {
						args.push(p_arg3);
					}
					if(p_arg4 != null) {
						args.push(p_arg4);
					}
					if(p_arg5 != null) {
						args.push(p_arg5);
					}
					if(p_arg6 != null) {
						args.push(p_arg6);
					}
					if(p_arg7 != null) {
						args.push(p_arg7);
					}
					if(p_arg8 != null) {
						args.push(p_arg8);
					}
					if(p_arg9 != null) {
						args.push(p_arg9);
					}
					if(p_arg10 != null) {
						args.push(p_arg10);
					}
					if(p_arg11 != null) {
						args.push(p_arg11);
					}
					if(p_arg12 != null) {
						args.push(p_arg12);
					}
					if(p_arg13 != null) {
						args.push(p_arg13);
					}
					if(p_arg14 != null) {
						args.push(p_arg14);
					}
					if(p_arg15 != null) {
						args.push(p_arg15);
					}
					if(p_arg16 != null) {
						args.push(p_arg16);
					}
					if(p_arg17 != null) {
						args.push(p_arg17);
					}
					if(p_arg18 != null) {
						args.push(p_arg18);
					}
					if(p_arg19 != null) {
						args.push(p_arg19);
					}
					if(p_arg20 != null) {
						args.push(p_arg20);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
					}
					var msg = "ERROR: ";
					if(pos != null) {
						msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
					}
					if(args.length > 0) {
						msg += args.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg);
					}
					throw new js__$Boot_HaxeError(msg);
				}
				var fbxRenderer = new com_genome2d_context_renderers_G3DRenderer(fbxGeometry.vertices,fbxGeometry.uvs,fbxGeometry.indices,fbxGeometry.vertexNormals,false);
				var fbxTexture = model.getMaterial().getTexture();
				if(fbxTexture == null) {
					var p_arg110 = "Model material has no texture.";
					var p_arg21 = null;
					var p_arg31 = null;
					var p_arg41 = null;
					var p_arg51 = null;
					var p_arg61 = null;
					var p_arg71 = null;
					var p_arg81 = null;
					var p_arg91 = null;
					var p_arg101 = null;
					var p_arg111 = null;
					var p_arg121 = null;
					var p_arg131 = null;
					var p_arg141 = null;
					var p_arg151 = null;
					var p_arg161 = null;
					var p_arg171 = null;
					var p_arg181 = null;
					var p_arg191 = null;
					var p_arg201 = null;
					var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/fbx/GFbxScene.hx", lineNumber : 135, className : "com.genome2d.fbx.GFbxScene", methodName : "create"};
					if(com_genome2d_debug_GDebug.showPriority <= 4) {
						var args1 = [];
						if(p_arg110 != null) {
							args1.push(p_arg110);
						}
						if(p_arg21 != null) {
							args1.push(p_arg21);
						}
						if(p_arg31 != null) {
							args1.push(p_arg31);
						}
						if(p_arg41 != null) {
							args1.push(p_arg41);
						}
						if(p_arg51 != null) {
							args1.push(p_arg51);
						}
						if(p_arg61 != null) {
							args1.push(p_arg61);
						}
						if(p_arg71 != null) {
							args1.push(p_arg71);
						}
						if(p_arg81 != null) {
							args1.push(p_arg81);
						}
						if(p_arg91 != null) {
							args1.push(p_arg91);
						}
						if(p_arg101 != null) {
							args1.push(p_arg101);
						}
						if(p_arg111 != null) {
							args1.push(p_arg111);
						}
						if(p_arg121 != null) {
							args1.push(p_arg121);
						}
						if(p_arg131 != null) {
							args1.push(p_arg131);
						}
						if(p_arg141 != null) {
							args1.push(p_arg141);
						}
						if(p_arg151 != null) {
							args1.push(p_arg151);
						}
						if(p_arg161 != null) {
							args1.push(p_arg161);
						}
						if(p_arg171 != null) {
							args1.push(p_arg171);
						}
						if(p_arg181 != null) {
							args1.push(p_arg181);
						}
						if(p_arg191 != null) {
							args1.push(p_arg191);
						}
						if(p_arg201 != null) {
							args1.push(p_arg201);
						}
						if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
							com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos1,args1);
						}
						var msg1 = "WARNING: ";
						if(pos1 != null) {
							msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
						}
						if(args1.length > 0) {
							msg1 += args1.toString();
						}
						com_genome2d_debug_GDebug.g2d_log += msg1;
						if(com_genome2d_debug_GDebug.useNativeTrace) {
							window.console.log(msg1);
						}
					}
					fbxRenderer.texture = com_genome2d_textures_GTextureManager.getTexture("g2d_internal");
				} else {
					fbxRenderer.texture = com_genome2d_textures_GTextureManager.getTexture(fbxTexture.relativePath.substring(fbxTexture.relativePath.lastIndexOf("\\") + 1,fbxTexture.relativePath.lastIndexOf(".")));
				}
				if(fbxRenderer.texture == null) {
					var p_arg112 = "Couldn't find FBX texture ";
					var p_arg22 = fbxTexture.relativePath.substring(fbxTexture.relativePath.lastIndexOf("\\") + 1,fbxTexture.relativePath.lastIndexOf("."));
					var p_arg32 = null;
					var p_arg42 = null;
					var p_arg52 = null;
					var p_arg62 = null;
					var p_arg72 = null;
					var p_arg82 = null;
					var p_arg92 = null;
					var p_arg102 = null;
					var p_arg113 = null;
					var p_arg122 = null;
					var p_arg132 = null;
					var p_arg142 = null;
					var p_arg152 = null;
					var p_arg162 = null;
					var p_arg172 = null;
					var p_arg182 = null;
					var p_arg192 = null;
					var p_arg202 = null;
					var pos2 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/fbx/GFbxScene.hx", lineNumber : 142, className : "com.genome2d.fbx.GFbxScene", methodName : "create"};
					if(com_genome2d_debug_GDebug.showPriority <= 4) {
						var args2 = [];
						if(p_arg112 != null) {
							args2.push(p_arg112);
						}
						if(p_arg22 != null) {
							args2.push(p_arg22);
						}
						if(p_arg32 != null) {
							args2.push(p_arg32);
						}
						if(p_arg42 != null) {
							args2.push(p_arg42);
						}
						if(p_arg52 != null) {
							args2.push(p_arg52);
						}
						if(p_arg62 != null) {
							args2.push(p_arg62);
						}
						if(p_arg72 != null) {
							args2.push(p_arg72);
						}
						if(p_arg82 != null) {
							args2.push(p_arg82);
						}
						if(p_arg92 != null) {
							args2.push(p_arg92);
						}
						if(p_arg102 != null) {
							args2.push(p_arg102);
						}
						if(p_arg113 != null) {
							args2.push(p_arg113);
						}
						if(p_arg122 != null) {
							args2.push(p_arg122);
						}
						if(p_arg132 != null) {
							args2.push(p_arg132);
						}
						if(p_arg142 != null) {
							args2.push(p_arg142);
						}
						if(p_arg152 != null) {
							args2.push(p_arg152);
						}
						if(p_arg162 != null) {
							args2.push(p_arg162);
						}
						if(p_arg172 != null) {
							args2.push(p_arg172);
						}
						if(p_arg182 != null) {
							args2.push(p_arg182);
						}
						if(p_arg192 != null) {
							args2.push(p_arg192);
						}
						if(p_arg202 != null) {
							args2.push(p_arg202);
						}
						if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
							com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos2,args2);
						}
						var msg2 = "WARNING: ";
						if(pos2 != null) {
							msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
						}
						if(args2.length > 0) {
							msg2 += args2.toString();
						}
						com_genome2d_debug_GDebug.g2d_log += msg2;
						if(com_genome2d_debug_GDebug.useNativeTrace) {
							window.console.log(msg2);
						}
					}
					fbxRenderer.texture = com_genome2d_textures_GTextureManager.getTexture("g2d_internal");
				}
				model.renderer = fbxRenderer;
				this.g2d_models.push(model);
			}
		}
	}
	,render: function(p_cameraMatrix,p_type) {
		if(p_type == null) {
			p_type = 1;
		}
		var renderer;
		var _g = 0;
		var _g1 = this.g2d_models;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			if(model.visible) {
				renderer = model.renderer;
				renderer.lightDirection = this.lightDirection;
				renderer.ambientColor = this.ambientColor;
				renderer.lightColor = this.lightColor;
				renderer.tintColor = this.tintColor;
				switch(model.inheritSceneMatrixMode._hx_index) {
				case 0:
					renderer.modelMatrix = this.g2d_sceneMatrix;
					break;
				case 1:
					renderer.modelMatrix = model.modelMatrix;
					break;
				case 2:
					renderer.modelMatrix = model.modelMatrix.clone();
					renderer.modelMatrix.append(this.g2d_sceneMatrix);
					break;
				}
				renderer.cameraMatrix = p_cameraMatrix;
				renderer.projectionMatrix = this.g2d_projectionMatrix;
			}
		}
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
		context.setBlendMode(com_genome2d_context_GBlendMode.NORMAL,true);
		switch(p_type) {
		case 0:
			var _g2 = 0;
			var _g3 = this.g2d_models;
			while(_g2 < _g3.length) {
				var model1 = _g3[_g2];
				++_g2;
				if(model1.visible) {
					renderer = model1.renderer;
					context.setRenderer(renderer);
					renderer.draw(2,0);
				}
			}
			break;
		case 1:
			var _g21 = 0;
			var _g31 = this.g2d_models;
			while(_g21 < _g31.length) {
				var model2 = _g31[_g21];
				++_g21;
				if(model2.visible) {
					renderer = model2.renderer;
					context.setRenderer(renderer);
					renderer.draw(2,1);
				}
			}
			break;
		case 2:
			var _g22 = 0;
			var _g32 = this.g2d_models;
			while(_g22 < _g32.length) {
				var model3 = _g32[_g22];
				++_g22;
				if(model3.visible) {
					renderer = model3.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,1);
				}
			}
			break;
		case 3:
			var _g23 = 0;
			var _g33 = this.g2d_models;
			while(_g23 < _g33.length) {
				var model4 = _g33[_g23];
				++_g23;
				if(model4.visible) {
					renderer = model4.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,2);
				}
			}
			break;
		case 4:
			var _g24 = 0;
			var _g34 = this.g2d_models;
			while(_g24 < _g34.length) {
				var model5 = _g34[_g24];
				++_g24;
				if(model5.visible) {
					renderer = model5.renderer;
					context.setRenderer(renderer);
					renderer.draw(2,1);
				}
			}
			break;
		case 5:
			var _g25 = 0;
			var _g35 = this.g2d_models;
			while(_g25 < _g35.length) {
				var model6 = _g35[_g25];
				++_g25;
				if(model6.visible) {
					renderer = model6.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,3);
				}
			}
			break;
		}
	}
	,__class__: com_genome2d_fbx_GFbxScene
};
var com_genome2d_fbx_GFbxTexture = function(p_fbxNode) {
	com_genome2d_fbx_GFbxNode.call(this,p_fbxNode);
	this.relativePath = com_genome2d_fbx_GFbxTools.toString(com_genome2d_fbx_GFbxTools.get(p_fbxNode,"RelativeFilename",true).props[0]);
};
$hxClasses["com.genome2d.fbx.GFbxTexture"] = com_genome2d_fbx_GFbxTexture;
com_genome2d_fbx_GFbxTexture.__name__ = "com.genome2d.fbx.GFbxTexture";
com_genome2d_fbx_GFbxTexture.__super__ = com_genome2d_fbx_GFbxNode;
com_genome2d_fbx_GFbxTexture.prototype = $extend(com_genome2d_fbx_GFbxNode.prototype,{
	relativePath: null
	,__class__: com_genome2d_fbx_GFbxTexture
});
var com_genome2d_fbx_FbxProp = $hxEnums["com.genome2d.fbx.FbxProp"] = { __ename__ : "com.genome2d.fbx.FbxProp", __constructs__ : ["PInt","PFloat","PString","PIdent","PInts","PFloats"]
	,PInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PFloat: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PString: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PIdent: ($_=function(i) { return {_hx_index:3,i:i,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["i"],$_)
	,PInts: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PFloats: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"com.genome2d.fbx.FbxProp",toString:$estr}; },$_.__params__ = ["v"],$_)
};
com_genome2d_fbx_FbxProp.__empty_constructs__ = [];
var com_genome2d_fbx_GFbxTools = function() { };
$hxClasses["com.genome2d.fbx.GFbxTools"] = com_genome2d_fbx_GFbxTools;
com_genome2d_fbx_GFbxTools.__name__ = "com.genome2d.fbx.GFbxTools";
com_genome2d_fbx_GFbxTools.get = function(p_node,p_path,opt) {
	if(opt == null) {
		opt = false;
	}
	var parts = p_path.split(".");
	var cur = p_node;
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		var found = false;
		var _g1 = 0;
		var _g11 = cur.childs;
		while(_g1 < _g11.length) {
			var c = _g11[_g1];
			++_g1;
			if(c.name == p) {
				cur = c;
				found = true;
				break;
			}
		}
		if(!found) {
			if(opt) {
				return null;
			}
			throw new js__$Boot_HaxeError(p_node.name + " does not have " + p_path + " (" + p + " not found)");
		}
	}
	return cur;
};
com_genome2d_fbx_GFbxTools.getAll = function(p_node,p_path) {
	var parts = p_path.split(".");
	var cur = [p_node];
	var _g = 0;
	while(_g < parts.length) {
		var p = parts[_g];
		++_g;
		var out = [];
		var _g1 = 0;
		while(_g1 < cur.length) {
			var n = cur[_g1];
			++_g1;
			var _g2 = 0;
			var _g11 = n.childs;
			while(_g2 < _g11.length) {
				var c = _g11[_g2];
				++_g2;
				if(c.name == p) {
					out.push(c);
				}
			}
		}
		cur = out;
		if(cur.length == 0) {
			return cur;
		}
	}
	return cur;
};
com_genome2d_fbx_GFbxTools.getInts = function(p_node) {
	if(p_node.props.length != 1) {
		throw new js__$Boot_HaxeError(p_node.name + " has " + Std.string(p_node.props) + " props");
	}
	var _g = p_node.props[0];
	if(_g._hx_index == 4) {
		var v = _g.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError(p_node.name + " has " + Std.string(p_node.props) + " props");
	}
};
com_genome2d_fbx_GFbxTools.getFloats = function(p_node) {
	if(p_node.props.length != 1) {
		throw new js__$Boot_HaxeError(p_node.name + " has " + Std.string(p_node.props) + " props");
	}
	var _g = p_node.props[0];
	switch(_g._hx_index) {
	case 4:
		var i = _g.v;
		var fl = [];
		var _g1 = 0;
		while(_g1 < i.length) {
			var x = i[_g1];
			++_g1;
			fl.push(x);
		}
		p_node.props[0] = com_genome2d_fbx_FbxProp.PFloats(fl);
		return fl;
	case 5:
		var v = _g.v;
		return v;
	default:
		throw new js__$Boot_HaxeError(p_node.name + " has " + Std.string(p_node.props) + " props");
	}
};
com_genome2d_fbx_GFbxTools.hasProp = function(p_node,p_prop) {
	var _g = 0;
	var _g1 = p_node.props;
	while(_g < _g1.length) {
		var p2 = _g1[_g];
		++_g;
		if(Type.enumEq(p_prop,p2)) {
			return true;
		}
	}
	return false;
};
com_genome2d_fbx_GFbxTools.toInt = function(p_prop) {
	if(p_prop == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	switch(p_prop._hx_index) {
	case 0:
		var v = p_prop.v;
		return v;
	case 1:
		var f = p_prop.v;
		return f | 0;
	default:
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(p_prop));
	}
};
com_genome2d_fbx_GFbxTools.toFloat = function(p_prop) {
	if(p_prop == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	switch(p_prop._hx_index) {
	case 0:
		var v = p_prop.v;
		return v * 1.0;
	case 1:
		var v1 = p_prop.v;
		return v1;
	default:
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(p_prop));
	}
};
com_genome2d_fbx_GFbxTools.toString = function(p_prop) {
	if(p_prop == null) {
		throw new js__$Boot_HaxeError("null prop");
	}
	if(p_prop._hx_index == 2) {
		var v = p_prop.v;
		return v;
	} else {
		throw new js__$Boot_HaxeError("Invalid prop " + Std.string(p_prop));
	}
};
com_genome2d_fbx_GFbxTools.getId = function(p_node) {
	if(p_node.props.length != 3) {
		throw new js__$Boot_HaxeError(p_node.name + " is not an object");
	}
	var _g = p_node.props[0];
	switch(_g._hx_index) {
	case 0:
		var id = _g.v;
		return id;
	case 1:
		var id1 = _g.v;
		return id1 | 0;
	default:
		throw new js__$Boot_HaxeError(p_node.name + " is not an object " + Std.string(p_node.props));
	}
};
com_genome2d_fbx_GFbxTools.getName = function(p_node) {
	if(p_node.props.length != 3) {
		throw new js__$Boot_HaxeError(p_node.name + " is not an object");
	}
	var _g = p_node.props[1];
	if(_g._hx_index == 2) {
		var p_node1 = _g.v;
		return p_node1.split("::").pop();
	} else {
		throw new js__$Boot_HaxeError(p_node.name + " is not an object");
	}
};
com_genome2d_fbx_GFbxTools.getType = function(n) {
	if(n.props.length != 3) {
		throw new js__$Boot_HaxeError(n.name + " is not an object");
	}
	var _g = n.props[2];
	if(_g._hx_index == 2) {
		var n1 = _g.v;
		return n1;
	} else {
		throw new js__$Boot_HaxeError(n.name + " is not an object");
	}
};
var com_genome2d_g3d_G3DFactory = function() { };
$hxClasses["com.genome2d.g3d.G3DFactory"] = com_genome2d_g3d_G3DFactory;
com_genome2d_g3d_G3DFactory.__name__ = "com.genome2d.g3d.G3DFactory";
com_genome2d_g3d_G3DFactory.createBox = function(p_width,p_height,p_depth,p_texture) {
	var id = Std.string(com_genome2d_g3d_G3DFactory.g2d_ids++);
	var scene = new com_genome2d_g3d_G3DScene();
	var texture = new com_genome2d_g3d_G3DTexture("gte" + id,p_texture.g2d_id);
	scene.addNode(texture.id,texture);
	var material = new com_genome2d_g3d_G3DMaterial("gma" + id);
	scene.addNode(material.id,material);
	var model = new com_genome2d_g3d_G3DModel("gmo" + id);
	scene.addNode(model.id,model);
	var vertices = [-p_width / 2,-p_height / 2,-p_depth / 2,-p_width / 2,p_height / 2,-p_depth / 2,p_width / 2,-p_height / 2,-p_depth / 2,p_width / 2,p_height / 2,-p_depth / 2,-p_width / 2,-p_height / 2,p_depth / 2,-p_width / 2,p_height / 2,p_depth / 2,p_width / 2,-p_height / 2,p_depth / 2,p_width / 2,p_height / 2,p_depth / 2,-p_width / 2,-p_height / 2,p_depth / 2,-p_width / 2,-p_height / 2,-p_depth / 2,-p_width / 2,p_height / 2,p_depth / 2,-p_width / 2,p_height / 2,-p_depth / 2,p_width / 2,-p_height / 2,p_depth / 2,p_width / 2,-p_height / 2,-p_depth / 2,p_width / 2,p_height / 2,p_depth / 2,p_width / 2,p_height / 2,-p_depth / 2,-p_width / 2,-p_height / 2,p_depth / 2,p_width / 2,-p_height / 2,p_depth / 2,-p_width / 2,-p_height / 2,-p_depth / 2,p_width / 2,-p_height / 2,-p_depth / 2,-p_width / 2,p_height / 2,p_depth / 2,p_width / 2,p_height / 2,p_depth / 2,-p_width / 2,p_height / 2,-p_depth / 2,p_width / 2,p_height / 2,-p_depth / 2];
	var uvs = [0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,1];
	var normals = [0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0];
	var indices = [0,1,2,2,1,3,4,6,5,5,6,7,8,10,9,9,10,11,12,13,14,14,13,15,16,18,17,17,18,19,20,21,22,22,21,23];
	var geometry = new com_genome2d_g3d_G3DGeometry("gge" + id);
	geometry.initProcessed(vertices,uvs,indices,normals);
	scene.addNode(geometry.id,geometry);
	scene.addConnection(geometry.id,model.id);
	scene.addConnection(material.id,model.id);
	scene.addConnection(texture.id,material.id);
	return scene;
};
com_genome2d_g3d_G3DFactory.createPlane = function(p_width,p_height,p_texture) {
	var id = Std.string(com_genome2d_g3d_G3DFactory.g2d_ids++);
	var scene = new com_genome2d_g3d_G3DScene();
	var texture = new com_genome2d_g3d_G3DTexture("gte" + id,p_texture.g2d_id);
	scene.addNode(texture.id,texture);
	var material = new com_genome2d_g3d_G3DMaterial("gma" + id);
	scene.addNode(material.id,material);
	var model = new com_genome2d_g3d_G3DModel("gmo" + id);
	scene.addNode(model.id,model);
	var vertices = [-p_width / 2,-p_height / 2,0,-p_width / 2,p_height / 2,0,p_width / 2,-p_height / 2,0,p_width / 2,p_height / 2,0];
	var uvs = [0,0,1,0,0,1,1,1];
	var normals = [0,0,-1,0,0,-1,0,0,-1,0,0,-1];
	var indices = [0,1,2,2,1,3];
	var geometry = new com_genome2d_g3d_G3DGeometry("gge" + id);
	geometry.initProcessed(vertices,uvs,indices,normals);
	scene.addNode(geometry.id,geometry);
	scene.addConnection(geometry.id,model.id);
	scene.addConnection(material.id,model.id);
	scene.addConnection(texture.id,material.id);
	return scene;
};
var com_genome2d_g3d_G3DNode = function(p_id) {
	this.id = p_id;
	this.name = "";
	this.connections = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.g3d.G3DNode"] = com_genome2d_g3d_G3DNode;
com_genome2d_g3d_G3DNode.__name__ = "com.genome2d.g3d.G3DNode";
com_genome2d_g3d_G3DNode.prototype = {
	id: null
	,name: null
	,connections: null
	,__class__: com_genome2d_g3d_G3DNode
};
var com_genome2d_g3d_G3DGeometry = function(p_id) {
	com_genome2d_g3d_G3DNode.call(this,p_id);
};
$hxClasses["com.genome2d.g3d.G3DGeometry"] = com_genome2d_g3d_G3DGeometry;
com_genome2d_g3d_G3DGeometry.__name__ = "com.genome2d.g3d.G3DGeometry";
com_genome2d_g3d_G3DGeometry.__super__ = com_genome2d_g3d_G3DNode;
com_genome2d_g3d_G3DGeometry.prototype = $extend(com_genome2d_g3d_G3DNode.prototype,{
	importedUvs: null
	,importedIndices: null
	,importedUvIndices: null
	,importedNormals: null
	,vertices: null
	,indices: null
	,uvs: null
	,normals: null
	,initProcessed: function(p_vertices,p_uvs,p_indices,p_normals) {
		this.vertices = p_vertices;
		this.uvs = p_uvs;
		this.indices = p_indices;
		this.normals = p_normals;
	}
	,initImported: function(p_vertices,p_uvs,p_indices,p_uvIndices,p_normals) {
		this.importedUvs = p_uvs;
		this.importedIndices = p_indices;
		this.importedUvIndices = p_uvIndices;
		this.importedNormals = p_normals;
		var reindexNormals = p_normals.length != this.importedIndices.length * 3;
		this.normals = reindexNormals ? [] : p_normals;
		if(p_uvIndices.length != p_indices.length) {
			throw new js__$Boot_HaxeError("Not same number of vertex and UV indices!");
		}
		this.vertices = [];
		this.uvs = [];
		this.indices = [];
		var _g = 0;
		var _g1 = p_indices.length;
		while(_g < _g1) {
			var j = _g++;
			var vertexIndex = p_indices[j];
			if(vertexIndex < 0) {
				vertexIndex = -vertexIndex - 1;
			}
			this.vertices.push(p_vertices[vertexIndex * 3]);
			this.vertices.push(p_vertices[vertexIndex * 3 + 1]);
			this.vertices.push(p_vertices[vertexIndex * 3 + 2]);
			if(reindexNormals) {
				this.normals.push(p_normals[vertexIndex * 3]);
				this.normals.push(p_normals[vertexIndex * 3 + 1]);
				this.normals.push(p_normals[vertexIndex * 3 + 2]);
			}
			this.indices.push(j);
			var uvIndex = p_uvIndices[j];
			this.uvs.push(p_uvs[uvIndex * 2]);
			this.uvs.push(1 - p_uvs[uvIndex * 2 + 1]);
		}
	}
	,__class__: com_genome2d_g3d_G3DGeometry
});
var com_genome2d_g3d_G3DMaterial = function(p_id) {
	com_genome2d_g3d_G3DNode.call(this,p_id);
};
$hxClasses["com.genome2d.g3d.G3DMaterial"] = com_genome2d_g3d_G3DMaterial;
com_genome2d_g3d_G3DMaterial.__name__ = "com.genome2d.g3d.G3DMaterial";
com_genome2d_g3d_G3DMaterial.__super__ = com_genome2d_g3d_G3DNode;
com_genome2d_g3d_G3DMaterial.prototype = $extend(com_genome2d_g3d_G3DNode.prototype,{
	getTexture: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_g3d_G3DTexture)) {
				return connection1;
			}
		}
		return null;
	}
	,__class__: com_genome2d_g3d_G3DMaterial
});
var com_genome2d_g3d_G3DMatrixInheritMode = $hxEnums["com.genome2d.g3d.G3DMatrixInheritMode"] = { __ename__ : "com.genome2d.g3d.G3DMatrixInheritMode", __constructs__ : ["REPLACE","IGNORE","APPEND"]
	,REPLACE: {_hx_index:0,__enum__:"com.genome2d.g3d.G3DMatrixInheritMode",toString:$estr}
	,IGNORE: {_hx_index:1,__enum__:"com.genome2d.g3d.G3DMatrixInheritMode",toString:$estr}
	,APPEND: {_hx_index:2,__enum__:"com.genome2d.g3d.G3DMatrixInheritMode",toString:$estr}
};
com_genome2d_g3d_G3DMatrixInheritMode.__empty_constructs__ = [com_genome2d_g3d_G3DMatrixInheritMode.REPLACE,com_genome2d_g3d_G3DMatrixInheritMode.IGNORE,com_genome2d_g3d_G3DMatrixInheritMode.APPEND];
var com_genome2d_g3d_G3DModel = function(p_id) {
	this.transparent = false;
	this.inheritSceneMatrixMode = com_genome2d_g3d_G3DMatrixInheritMode.REPLACE;
	this.visible = true;
	this.useSceneLighting = true;
	com_genome2d_g3d_G3DNode.call(this,p_id);
	this.lightDirection = new com_genome2d_geom_GFloat4(1,1,1);
	this.ambientColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.tintColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.lightColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.center = new com_genome2d_geom_GVector3D();
	this.modelMatrix = new com_genome2d_geom_GMatrix3D();
};
$hxClasses["com.genome2d.g3d.G3DModel"] = com_genome2d_g3d_G3DModel;
com_genome2d_g3d_G3DModel.__name__ = "com.genome2d.g3d.G3DModel";
com_genome2d_g3d_G3DModel.__super__ = com_genome2d_g3d_G3DNode;
com_genome2d_g3d_G3DModel.prototype = $extend(com_genome2d_g3d_G3DNode.prototype,{
	useSceneLighting: null
	,lightDirection: null
	,ambientColor: null
	,lightColor: null
	,tintColor: null
	,visible: null
	,renderer: null
	,inheritSceneMatrixMode: null
	,modelMatrix: null
	,transparent: null
	,center: null
	,getGeometry: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_g3d_G3DGeometry)) {
				return connection1;
			}
			if(((connection1) instanceof com_genome2d_g3d_G3DModel)) {
				return (js_Boot.__cast(connection1 , com_genome2d_g3d_G3DModel)).getGeometry();
			}
		}
		return null;
	}
	,getMaterial: function() {
		var _this = this.connections;
		var connection = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(connection.hasNext()) {
			var connection1 = connection.next();
			if(((connection1) instanceof com_genome2d_g3d_G3DMaterial)) {
				return connection1;
			}
			if(((connection1) instanceof com_genome2d_g3d_G3DModel)) {
				return (js_Boot.__cast(connection1 , com_genome2d_g3d_G3DModel)).getMaterial();
			}
		}
		return null;
	}
	,dispose: function() {
		if(this.renderer != null) {
			this.renderer.dispose();
		}
		this.renderer = null;
	}
	,invalidate: function() {
		this.transparent = this.name.indexOf("_T") == this.name.length - 2;
		var geometry = this.getGeometry();
		if(geometry == null) {
			var p_arg1 = "Model has no geometry.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 65, className : "com.genome2d.g3d.G3DModel", methodName : "invalidate"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
			}
			var msg = "G2D_ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(this.renderer == null) {
			this.renderer = new com_genome2d_context_renderers_G3DRenderer(geometry.vertices,geometry.uvs,geometry.indices,geometry.normals,false);
		} else {
			this.renderer.invalidateGeometry(geometry.vertices,geometry.uvs,geometry.indices,geometry.normals);
		}
		var material = this.getMaterial();
		if(material == null) {
			var p_arg110 = "Model has no material.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 75, className : "com.genome2d.g3d.G3DModel", methodName : "invalidate"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos1,args1);
			}
			var msg1 = "G2D_ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		var texture = this.getMaterial().getTexture();
		if(texture == null) {
			var p_arg112 = "Model material has no texture.";
			var p_arg22 = null;
			var p_arg32 = null;
			var p_arg42 = null;
			var p_arg52 = null;
			var p_arg62 = null;
			var p_arg72 = null;
			var p_arg82 = null;
			var p_arg92 = null;
			var p_arg102 = null;
			var p_arg113 = null;
			var p_arg122 = null;
			var p_arg132 = null;
			var p_arg142 = null;
			var p_arg152 = null;
			var p_arg162 = null;
			var p_arg172 = null;
			var p_arg182 = null;
			var p_arg192 = null;
			var p_arg202 = null;
			var pos2 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 79, className : "com.genome2d.g3d.G3DModel", methodName : "invalidate"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args2 = [];
				if(p_arg112 != null) {
					args2.push(p_arg112);
				}
				if(p_arg22 != null) {
					args2.push(p_arg22);
				}
				if(p_arg32 != null) {
					args2.push(p_arg32);
				}
				if(p_arg42 != null) {
					args2.push(p_arg42);
				}
				if(p_arg52 != null) {
					args2.push(p_arg52);
				}
				if(p_arg62 != null) {
					args2.push(p_arg62);
				}
				if(p_arg72 != null) {
					args2.push(p_arg72);
				}
				if(p_arg82 != null) {
					args2.push(p_arg82);
				}
				if(p_arg92 != null) {
					args2.push(p_arg92);
				}
				if(p_arg102 != null) {
					args2.push(p_arg102);
				}
				if(p_arg113 != null) {
					args2.push(p_arg113);
				}
				if(p_arg122 != null) {
					args2.push(p_arg122);
				}
				if(p_arg132 != null) {
					args2.push(p_arg132);
				}
				if(p_arg142 != null) {
					args2.push(p_arg142);
				}
				if(p_arg152 != null) {
					args2.push(p_arg152);
				}
				if(p_arg162 != null) {
					args2.push(p_arg162);
				}
				if(p_arg172 != null) {
					args2.push(p_arg172);
				}
				if(p_arg182 != null) {
					args2.push(p_arg182);
				}
				if(p_arg192 != null) {
					args2.push(p_arg192);
				}
				if(p_arg202 != null) {
					args2.push(p_arg202);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos2,args2);
				}
				var msg2 = "WARNING: ";
				if(pos2 != null) {
					msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
				}
				if(args2.length > 0) {
					msg2 += args2.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg2;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg2);
				}
			}
			this.renderer.texture = com_genome2d_textures_GTextureManager.getTexture("g2d_internal");
		} else {
			var textureId = texture.relativePath;
			this.renderer.texture = com_genome2d_textures_GTextureManager.getTexture(textureId);
			if(this.renderer.texture == null) {
				var p_arg114 = "Couldn't find texture";
				var p_arg23 = textureId;
				var p_arg33 = null;
				var p_arg43 = null;
				var p_arg53 = null;
				var p_arg63 = null;
				var p_arg73 = null;
				var p_arg83 = null;
				var p_arg93 = null;
				var p_arg103 = null;
				var p_arg115 = null;
				var p_arg123 = null;
				var p_arg133 = null;
				var p_arg143 = null;
				var p_arg153 = null;
				var p_arg163 = null;
				var p_arg173 = null;
				var p_arg183 = null;
				var p_arg193 = null;
				var p_arg203 = null;
				var pos3 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 85, className : "com.genome2d.g3d.G3DModel", methodName : "invalidate"};
				if(com_genome2d_debug_GDebug.showPriority <= 4) {
					var args3 = [];
					if(p_arg114 != null) {
						args3.push(p_arg114);
					}
					if(p_arg23 != null) {
						args3.push(p_arg23);
					}
					if(p_arg33 != null) {
						args3.push(p_arg33);
					}
					if(p_arg43 != null) {
						args3.push(p_arg43);
					}
					if(p_arg53 != null) {
						args3.push(p_arg53);
					}
					if(p_arg63 != null) {
						args3.push(p_arg63);
					}
					if(p_arg73 != null) {
						args3.push(p_arg73);
					}
					if(p_arg83 != null) {
						args3.push(p_arg83);
					}
					if(p_arg93 != null) {
						args3.push(p_arg93);
					}
					if(p_arg103 != null) {
						args3.push(p_arg103);
					}
					if(p_arg115 != null) {
						args3.push(p_arg115);
					}
					if(p_arg123 != null) {
						args3.push(p_arg123);
					}
					if(p_arg133 != null) {
						args3.push(p_arg133);
					}
					if(p_arg143 != null) {
						args3.push(p_arg143);
					}
					if(p_arg153 != null) {
						args3.push(p_arg153);
					}
					if(p_arg163 != null) {
						args3.push(p_arg163);
					}
					if(p_arg173 != null) {
						args3.push(p_arg173);
					}
					if(p_arg183 != null) {
						args3.push(p_arg183);
					}
					if(p_arg193 != null) {
						args3.push(p_arg193);
					}
					if(p_arg203 != null) {
						args3.push(p_arg203);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos3,args3);
					}
					var msg3 = "WARNING: ";
					if(pos3 != null) {
						msg3 += pos3.fileName + ":" + pos3.lineNumber + " : " + pos3.methodName + " : ";
					}
					if(args3.length > 0) {
						msg3 += args3.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg3;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg3);
					}
				}
				this.renderer.texture = com_genome2d_textures_GTextureManager.getTexture("g2d_internal");
			}
		}
	}
	,checkValidity: function() {
		var geometry = this.getGeometry();
		if(geometry == null) {
			var p_arg1 = "Model has no geometry.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 94, className : "com.genome2d.g3d.G3DModel", methodName : "checkValidity"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
			return false;
		}
		var material = this.getMaterial();
		if(material == null) {
			var p_arg110 = "Model has no material.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 100, className : "com.genome2d.g3d.G3DModel", methodName : "checkValidity"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args1 = [];
				if(p_arg110 != null) {
					args1.push(p_arg110);
				}
				if(p_arg21 != null) {
					args1.push(p_arg21);
				}
				if(p_arg31 != null) {
					args1.push(p_arg31);
				}
				if(p_arg41 != null) {
					args1.push(p_arg41);
				}
				if(p_arg51 != null) {
					args1.push(p_arg51);
				}
				if(p_arg61 != null) {
					args1.push(p_arg61);
				}
				if(p_arg71 != null) {
					args1.push(p_arg71);
				}
				if(p_arg81 != null) {
					args1.push(p_arg81);
				}
				if(p_arg91 != null) {
					args1.push(p_arg91);
				}
				if(p_arg101 != null) {
					args1.push(p_arg101);
				}
				if(p_arg111 != null) {
					args1.push(p_arg111);
				}
				if(p_arg121 != null) {
					args1.push(p_arg121);
				}
				if(p_arg131 != null) {
					args1.push(p_arg131);
				}
				if(p_arg141 != null) {
					args1.push(p_arg141);
				}
				if(p_arg151 != null) {
					args1.push(p_arg151);
				}
				if(p_arg161 != null) {
					args1.push(p_arg161);
				}
				if(p_arg171 != null) {
					args1.push(p_arg171);
				}
				if(p_arg181 != null) {
					args1.push(p_arg181);
				}
				if(p_arg191 != null) {
					args1.push(p_arg191);
				}
				if(p_arg201 != null) {
					args1.push(p_arg201);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos1,args1);
				}
				var msg1 = "WARNING: ";
				if(pos1 != null) {
					msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
				}
				if(args1.length > 0) {
					msg1 += args1.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg1;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg1);
				}
			}
			return false;
		}
		var texture = this.getMaterial().getTexture();
		if(texture == null) {
			var p_arg112 = "Model material has no texture.";
			var p_arg22 = null;
			var p_arg32 = null;
			var p_arg42 = null;
			var p_arg52 = null;
			var p_arg62 = null;
			var p_arg72 = null;
			var p_arg82 = null;
			var p_arg92 = null;
			var p_arg102 = null;
			var p_arg113 = null;
			var p_arg122 = null;
			var p_arg132 = null;
			var p_arg142 = null;
			var p_arg152 = null;
			var p_arg162 = null;
			var p_arg172 = null;
			var p_arg182 = null;
			var p_arg192 = null;
			var p_arg202 = null;
			var pos2 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DModel.hx", lineNumber : 106, className : "com.genome2d.g3d.G3DModel", methodName : "checkValidity"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args2 = [];
				if(p_arg112 != null) {
					args2.push(p_arg112);
				}
				if(p_arg22 != null) {
					args2.push(p_arg22);
				}
				if(p_arg32 != null) {
					args2.push(p_arg32);
				}
				if(p_arg42 != null) {
					args2.push(p_arg42);
				}
				if(p_arg52 != null) {
					args2.push(p_arg52);
				}
				if(p_arg62 != null) {
					args2.push(p_arg62);
				}
				if(p_arg72 != null) {
					args2.push(p_arg72);
				}
				if(p_arg82 != null) {
					args2.push(p_arg82);
				}
				if(p_arg92 != null) {
					args2.push(p_arg92);
				}
				if(p_arg102 != null) {
					args2.push(p_arg102);
				}
				if(p_arg113 != null) {
					args2.push(p_arg113);
				}
				if(p_arg122 != null) {
					args2.push(p_arg122);
				}
				if(p_arg132 != null) {
					args2.push(p_arg132);
				}
				if(p_arg142 != null) {
					args2.push(p_arg142);
				}
				if(p_arg152 != null) {
					args2.push(p_arg152);
				}
				if(p_arg162 != null) {
					args2.push(p_arg162);
				}
				if(p_arg172 != null) {
					args2.push(p_arg172);
				}
				if(p_arg182 != null) {
					args2.push(p_arg182);
				}
				if(p_arg192 != null) {
					args2.push(p_arg192);
				}
				if(p_arg202 != null) {
					args2.push(p_arg202);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos2,args2);
				}
				var msg2 = "WARNING: ";
				if(pos2 != null) {
					msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
				}
				if(args2.length > 0) {
					msg2 += args2.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg2;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg2);
				}
			}
			return false;
		}
		return true;
	}
	,calculateCenter: function() {
		this.center = new com_genome2d_geom_GVector3D();
		var vertices = this.getGeometry().vertices;
		var _g = 0;
		var _g1 = vertices.length / 3 | 0;
		while(_g < _g1) {
			var i = _g++;
			this.center.x += vertices[i * 3];
			this.center.y += vertices[i * 3 + 1];
			this.center.z += vertices[i * 3 + 2];
		}
		this.center.x /= vertices.length;
		this.center.y /= vertices.length;
		this.center.z /= vertices.length;
	}
	,__class__: com_genome2d_g3d_G3DModel
});
var com_genome2d_g3d_G3DScene = function() {
	this.debugDrawMesh = [];
	this.g2d_nodes = new haxe_ds_StringMap();
	this.g2d_connections = [];
	this.lightDirection = new com_genome2d_geom_GFloat4(1,1,1);
	this.ambientColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.tintColor = new com_genome2d_geom_GFloat4(1,1,1,1);
	this.lightColor = new com_genome2d_geom_GFloat4(1,1,1,1);
};
$hxClasses["com.genome2d.g3d.G3DScene"] = com_genome2d_g3d_G3DScene;
com_genome2d_g3d_G3DScene.__name__ = "com.genome2d.g3d.G3DScene";
com_genome2d_g3d_G3DScene.projectPoint = function(p_point,p_sceneMatrix,p_cameraMatrix,p_projectionMatrix) {
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	var stageRect = com_genome2d_Genome2D.g2d_instance.g2d_context.getStageViewRect();
	if(p_projectionMatrix == null) {
		p_projectionMatrix = new com_genome2d_context_GProjectionMatrix();
		p_projectionMatrix.ortho(stageRect.width,stageRect.height,null);
	}
	p_point = p_sceneMatrix.transformVector(p_point);
	p_point = p_cameraMatrix.transformVector(p_point);
	p_point = p_projectionMatrix.transformVector(p_point);
	return new com_genome2d_geom_GPoint((p_point.x + 1) / 2 * stageRect.width,-(p_point.y - 1) / 2 * stageRect.height);
};
com_genome2d_g3d_G3DScene.prototype = {
	lightDirection: null
	,ambientColor: null
	,lightColor: null
	,tintColor: null
	,g2d_opaqueModels: null
	,g2d_transparentModels: null
	,debugDrawMesh: null
	,getOpaqueModels: function() {
		return this.g2d_opaqueModels;
	}
	,getTransparentModels: function() {
		return this.g2d_transparentModels;
	}
	,getModelByName: function(p_name) {
		var _g = 0;
		var _g1 = this.g2d_opaqueModels;
		while(_g < _g1.length) {
			var model = _g1[_g];
			++_g;
			if(model.name == p_name) {
				return model;
			}
		}
		var _g2 = 0;
		var _g3 = this.g2d_transparentModels;
		while(_g2 < _g3.length) {
			var model1 = _g3[_g2];
			++_g2;
			if(model1.name == p_name) {
				return model1;
			}
		}
		return null;
	}
	,g2d_nodes: null
	,addNode: function(p_id,p_node) {
		var _this = this.g2d_nodes;
		if(__map_reserved[p_id] != null) {
			_this.setReserved(p_id,p_node);
		} else {
			_this.h[p_id] = p_node;
		}
	}
	,getNode: function(p_id) {
		var _this = this.g2d_nodes;
		if(__map_reserved[p_id] != null) {
			return _this.getReserved(p_id);
		} else {
			return _this.h[p_id];
		}
	}
	,getNodes: function() {
		return this.g2d_nodes;
	}
	,g2d_sceneMatrix: null
	,getSceneMatrix: function() {
		return this.g2d_sceneMatrix;
	}
	,setSceneMatrix: function(p_matrix) {
		this.g2d_sceneMatrix = p_matrix;
	}
	,g2d_projectionMatrix: null
	,getProjectionMatrix: function() {
		return this.g2d_projectionMatrix;
	}
	,setProjectionMatrix: function(p_value) {
		this.g2d_projectionMatrix = p_value;
	}
	,g2d_connections: null
	,addConnection: function(p_sourceId,p_destinationId) {
		if(p_sourceId == "0" || p_destinationId == "0") {
			return;
		}
		var _this = this.g2d_nodes;
		var source = __map_reserved[p_sourceId] != null ? _this.getReserved(p_sourceId) : _this.h[p_sourceId];
		var _this1 = this.g2d_nodes;
		var destination = __map_reserved[p_destinationId] != null ? _this1.getReserved(p_destinationId) : _this1.h[p_destinationId];
		if(destination != null && source != null) {
			var key = source.id;
			var _this2 = destination.connections;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,source);
			} else {
				_this2.h[key] = source;
			}
			this.g2d_connections.push(new com_genome2d_g3d_G3DConnection(p_sourceId,p_destinationId));
		} else {
			var p_arg1 = "Invalid connection";
			var p_arg2 = p_sourceId;
			var p_arg3 = p_destinationId;
			var p_arg4 = source;
			var p_arg5 = destination;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/G3DScene.hx", lineNumber : 85, className : "com.genome2d.g3d.G3DScene", methodName : "addConnection"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
		}
	}
	,dispose: function() {
		var _this = this.g2d_nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			var model = ((node1) instanceof com_genome2d_g3d_G3DModel) ? node1 : null;
			if(model != null) {
				model.dispose();
			}
		}
	}
	,checkValidity: function() {
		var valid = true;
		var _this = this.g2d_nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			var model = ((node1) instanceof com_genome2d_g3d_G3DModel) ? node1 : null;
			if(model != null) {
				valid = valid && model.checkValidity();
			}
		}
		return valid;
	}
	,invalidate: function() {
		this.g2d_sceneMatrix = new com_genome2d_geom_GMatrix3D();
		this.g2d_opaqueModels = [];
		this.g2d_transparentModels = [];
		var _this = this.g2d_nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			var model = ((node1) instanceof com_genome2d_g3d_G3DModel) ? node1 : null;
			if(model != null) {
				model.invalidate();
				if(model.transparent) {
					model.calculateCenter();
					this.g2d_transparentModels.push(model);
				} else {
					this.g2d_opaqueModels.push(model);
				}
			}
		}
		this.g2d_transparentModels.sort($bind(this,this.sortOnCenter));
	}
	,sortOnCenter: function(p_model1,p_model2) {
		if(p_model1.center.z > p_model2.center.z) {
			return 1;
		} else if(p_model1.center.z < p_model2.center.z) {
			return -1;
		}
		return 0;
	}
	,render: function(p_cameraMatrix,p_type,p_textureOverride) {
		if(p_type == null) {
			p_type = 1;
		}
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
		context.setBlendMode(com_genome2d_context_GBlendMode.NORMAL,true);
		this.renderModels(this.g2d_opaqueModels,p_cameraMatrix,p_type,p_textureOverride);
		this.renderModels(this.g2d_transparentModels,p_cameraMatrix,p_type,p_textureOverride);
	}
	,renderModels: function(p_models,p_cameraMatrix,p_type,p_textureOverride) {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
		var renderer;
		var index = 0;
		var _g = 0;
		while(_g < p_models.length) {
			var model = p_models[_g];
			++_g;
			++index;
			if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
				continue;
			}
			if(model.visible) {
				renderer = model.renderer;
				if(p_textureOverride != null) {
					renderer.texture = p_textureOverride;
				}
				renderer.lightDirection = model.useSceneLighting ? this.lightDirection : model.lightDirection;
				renderer.ambientColor = model.useSceneLighting ? this.ambientColor : model.ambientColor;
				renderer.lightColor = model.useSceneLighting ? this.lightColor : model.lightColor;
				renderer.tintColor = model.useSceneLighting ? this.tintColor : model.tintColor;
				switch(model.inheritSceneMatrixMode._hx_index) {
				case 0:
					renderer.modelMatrix = this.g2d_sceneMatrix;
					break;
				case 1:
					renderer.modelMatrix = model.modelMatrix;
					break;
				case 2:
					renderer.modelMatrix = model.modelMatrix.clone();
					renderer.modelMatrix.append(this.g2d_sceneMatrix);
					break;
				}
				renderer.cameraMatrix = p_cameraMatrix;
				renderer.projectionMatrix = this.g2d_projectionMatrix;
			}
		}
		index = 0;
		switch(p_type) {
		case 0:
			var _g1 = 0;
			while(_g1 < p_models.length) {
				var model1 = p_models[_g1];
				++_g1;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model1.visible) {
					renderer = model1.renderer;
					context.setRenderer(renderer);
					renderer.draw(2,0);
				}
			}
			break;
		case 1:
			var _g11 = 0;
			while(_g11 < p_models.length) {
				var model2 = p_models[_g11];
				++_g11;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model2.visible) {
					renderer = model2.renderer;
					context.setRenderer(renderer);
					renderer.draw(2,1);
				}
			}
			break;
		case 2:
			var _g12 = 0;
			while(_g12 < p_models.length) {
				var model3 = p_models[_g12];
				++_g12;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model3.visible) {
					renderer = model3.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,1);
				}
			}
			break;
		case 3:
			var _g13 = 0;
			while(_g13 < p_models.length) {
				var model4 = p_models[_g13];
				++_g13;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model4.visible) {
					renderer = model4.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,2);
				}
			}
			break;
		case 4:
			var _g14 = 0;
			while(_g14 < p_models.length) {
				var model5 = p_models[_g14];
				++_g14;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model5.visible) {
					renderer = model5.renderer;
					context.setRenderer(renderer);
					renderer.tintColor.w = 0;
					renderer.draw(2,1);
					renderer.tintColor.w = 0;
				}
			}
			break;
		case 5:
			var _g15 = 0;
			while(_g15 < p_models.length) {
				var model6 = p_models[_g15];
				++_g15;
				++index;
				if(this.debugDrawMesh.length != 0 && this.debugDrawMesh.indexOf(index - 1) == -1) {
					continue;
				}
				if(model6.visible) {
					renderer = model6.renderer;
					context.setRenderer(renderer);
					renderer.draw(1,3);
				}
			}
			break;
		}
	}
	,__class__: com_genome2d_g3d_G3DScene
};
var com_genome2d_g3d_G3DConnection = function(p_sourceId,p_destinationId) {
	this.sourceId = p_sourceId;
	this.destinationId = p_destinationId;
};
$hxClasses["com.genome2d.g3d.G3DConnection"] = com_genome2d_g3d_G3DConnection;
com_genome2d_g3d_G3DConnection.__name__ = "com.genome2d.g3d.G3DConnection";
com_genome2d_g3d_G3DConnection.prototype = {
	sourceId: null
	,destinationId: null
	,__class__: com_genome2d_g3d_G3DConnection
};
var com_genome2d_g3d_G3DTexture = function(p_id,p_relativePath) {
	com_genome2d_g3d_G3DNode.call(this,p_id);
	this.relativePath = p_relativePath;
};
$hxClasses["com.genome2d.g3d.G3DTexture"] = com_genome2d_g3d_G3DTexture;
com_genome2d_g3d_G3DTexture.__name__ = "com.genome2d.g3d.G3DTexture";
com_genome2d_g3d_G3DTexture.__super__ = com_genome2d_g3d_G3DNode;
com_genome2d_g3d_G3DTexture.prototype = $extend(com_genome2d_g3d_G3DNode.prototype,{
	relativePath: null
	,__class__: com_genome2d_g3d_G3DTexture
});
var com_genome2d_g3d_importers_G3DAbstractImporter = function() {
};
$hxClasses["com.genome2d.g3d.importers.G3DAbstractImporter"] = com_genome2d_g3d_importers_G3DAbstractImporter;
com_genome2d_g3d_importers_G3DAbstractImporter.__name__ = "com.genome2d.g3d.importers.G3DAbstractImporter";
com_genome2d_g3d_importers_G3DAbstractImporter.prototype = {
	importScene: function(p_data) {
		return null;
	}
	,exportScene: function(p_scene,p_data) {
	}
	,__class__: com_genome2d_g3d_importers_G3DAbstractImporter
};
var com_genome2d_g3d_importers_G3DFbxImporter = function() {
	com_genome2d_g3d_importers_G3DAbstractImporter.call(this);
};
$hxClasses["com.genome2d.g3d.importers.G3DFbxImporter"] = com_genome2d_g3d_importers_G3DFbxImporter;
com_genome2d_g3d_importers_G3DFbxImporter.__name__ = "com.genome2d.g3d.importers.G3DFbxImporter";
com_genome2d_g3d_importers_G3DFbxImporter.__super__ = com_genome2d_g3d_importers_G3DAbstractImporter;
com_genome2d_g3d_importers_G3DFbxImporter.prototype = $extend(com_genome2d_g3d_importers_G3DAbstractImporter.prototype,{
	importScene: function(p_data) {
		var scene = new com_genome2d_g3d_G3DScene();
		var fbxData = com_genome2d_fbx_GFbxParser.parse(p_data.getString(0,p_data.length));
		this.g2d_initTextures(scene,fbxData);
		this.g2d_initModels(scene,fbxData);
		this.g2d_initMaterials(scene,fbxData);
		this.g2d_initGeometry(scene,fbxData);
		this.g2d_initConnections(scene,fbxData);
		return scene;
	}
	,g2d_initTextures: function(p_scene,p_fbxData) {
		var textureNodes = com_genome2d_fbx_GFbxTools.getAll(p_fbxData,"Objects.Texture");
		var _g = 0;
		while(_g < textureNodes.length) {
			var node = textureNodes[_g];
			++_g;
			var id = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[0]));
			var relativePathNode = com_genome2d_fbx_GFbxTools.get(node,"RelativeFilename",true);
			var relativePath = com_genome2d_fbx_GFbxTools.toString(relativePathNode.props[0]);
			var texture = new com_genome2d_g3d_G3DTexture(id,relativePath);
			p_scene.addNode(texture.id,texture);
		}
	}
	,g2d_initModels: function(p_scene,p_fbxData) {
		var modelNodes = com_genome2d_fbx_GFbxTools.getAll(p_fbxData,"Objects.Model");
		var _g = 0;
		while(_g < modelNodes.length) {
			var node = modelNodes[_g];
			++_g;
			var id = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[0]));
			var model = new com_genome2d_g3d_G3DModel(id);
			model.name = com_genome2d_fbx_GFbxTools.toString(node.props[1]);
			p_scene.addNode(model.id,model);
		}
	}
	,g2d_initMaterials: function(p_scene,p_fbxData) {
		var materialNodes = com_genome2d_fbx_GFbxTools.getAll(p_fbxData,"Objects.Material");
		var _g = 0;
		while(_g < materialNodes.length) {
			var node = materialNodes[_g];
			++_g;
			var id = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[0]));
			var material = new com_genome2d_g3d_G3DMaterial(id);
			p_scene.addNode(material.id,material);
		}
	}
	,g2d_initGeometry: function(p_scene,p_fbxData) {
		var geometryNodes = com_genome2d_fbx_GFbxTools.getAll(p_fbxData,"Objects.Geometry");
		var _g = 0;
		while(_g < geometryNodes.length) {
			var node = geometryNodes[_g];
			++_g;
			var id = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[0]));
			var vertexNode = com_genome2d_fbx_GFbxTools.getAll(node,"Vertices")[0];
			var vertexIndexNode = com_genome2d_fbx_GFbxTools.getAll(node,"PolygonVertexIndex")[0];
			var uvNode = com_genome2d_fbx_GFbxTools.getAll(node,"LayerElementUV.UV")[0];
			var uvIndexNode = com_genome2d_fbx_GFbxTools.getAll(node,"LayerElementUV.UVIndex")[0];
			var normalsNode = com_genome2d_fbx_GFbxTools.getAll(node,"LayerElementNormal.Normals")[0];
			var vertices = com_genome2d_fbx_GFbxTools.getFloats(vertexNode);
			var indices = com_genome2d_fbx_GFbxTools.getInts(vertexIndexNode);
			var uvs = com_genome2d_fbx_GFbxTools.getFloats(uvNode);
			var uvIndices = com_genome2d_fbx_GFbxTools.getInts(uvIndexNode);
			var normals = com_genome2d_fbx_GFbxTools.getFloats(normalsNode);
			var geometry = new com_genome2d_g3d_G3DGeometry(id);
			geometry.initImported(vertices,uvs,indices,uvIndices,normals);
			p_scene.addNode(geometry.id,geometry);
		}
	}
	,g2d_initConnections: function(p_scene,p_fbxData) {
		var connectionNodes = com_genome2d_fbx_GFbxTools.getAll(p_fbxData,"Connections.C");
		var _g = 0;
		while(_g < connectionNodes.length) {
			var node = connectionNodes[_g];
			++_g;
			var sourceId = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[1]));
			var destinationId = Std.string(com_genome2d_fbx_GFbxTools.toFloat(node.props[2]));
			p_scene.addConnection(sourceId,destinationId);
		}
	}
	,__class__: com_genome2d_g3d_importers_G3DFbxImporter
});
var com_genome2d_g3d_importers_G3DImporter = function(p_processed) {
	if(p_processed == null) {
		p_processed = false;
	}
	this.processed = false;
	com_genome2d_g3d_importers_G3DAbstractImporter.call(this);
	this.processed = p_processed;
};
$hxClasses["com.genome2d.g3d.importers.G3DImporter"] = com_genome2d_g3d_importers_G3DImporter;
com_genome2d_g3d_importers_G3DImporter.__name__ = "com.genome2d.g3d.importers.G3DImporter";
com_genome2d_g3d_importers_G3DImporter.__super__ = com_genome2d_g3d_importers_G3DAbstractImporter;
com_genome2d_g3d_importers_G3DImporter.prototype = $extend(com_genome2d_g3d_importers_G3DAbstractImporter.prototype,{
	processed: null
	,exportScene: function(p_scene,p_data) {
		var wrap = new com_genome2d_utils_GBytes(p_data);
		wrap.writeInt(102);
		var _this = p_scene.g2d_nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			if(((node1) instanceof com_genome2d_g3d_G3DTexture)) {
				wrap.writeByte(1);
				wrap.writeUTF(node1.id);
				var texture = node1;
				wrap.writeUTF(texture.relativePath);
			}
			if(((node1) instanceof com_genome2d_g3d_G3DModel)) {
				wrap.writeByte(2);
				wrap.writeUTF(node1.id);
				wrap.writeUTF(node1.name);
			}
			if(((node1) instanceof com_genome2d_g3d_G3DMaterial)) {
				wrap.writeByte(3);
				wrap.writeUTF(node1.id);
			}
			if(((node1) instanceof com_genome2d_g3d_G3DGeometry)) {
				wrap.writeByte(4);
				wrap.writeUTF(node1.id);
				var geometry = node1;
				wrap.writeInt(geometry.vertices.length);
				var _g1 = 0;
				var _g2 = geometry.vertices.length;
				while(_g1 < _g2) {
					var i = _g1++;
					wrap.writeFloat(geometry.vertices[i]);
				}
				if(this.processed) {
					wrap.writeInt(geometry.uvs.length);
					var _g3 = 0;
					var _g4 = geometry.uvs.length;
					while(_g3 < _g4) {
						var i1 = _g3++;
						wrap.writeFloat(geometry.uvs[i1]);
					}
				} else {
					wrap.writeInt(geometry.importedUvs.length);
					var _g31 = 0;
					var _g41 = geometry.importedUvs.length;
					while(_g31 < _g41) {
						var i2 = _g31++;
						wrap.writeFloat(geometry.importedUvs[i2]);
					}
				}
				if(this.processed) {
					wrap.writeInt(geometry.indices.length);
					var _g32 = 0;
					var _g42 = geometry.indices.length;
					while(_g32 < _g42) {
						var i3 = _g32++;
						wrap.writeInt(geometry.indices[i3]);
					}
				} else {
					wrap.writeInt(geometry.importedIndices.length);
					var _g33 = 0;
					var _g43 = geometry.importedIndices.length;
					while(_g33 < _g43) {
						var i4 = _g33++;
						wrap.writeInt(geometry.importedIndices[i4]);
					}
				}
				wrap.writeInt(geometry.normals.length);
				var _g34 = 0;
				var _g44 = geometry.normals.length;
				while(_g34 < _g44) {
					var i5 = _g34++;
					wrap.writeFloat(geometry.normals[i5]);
				}
				if(!this.processed) {
					wrap.writeInt(geometry.importedUvIndices.length);
					var _g5 = 0;
					var _g6 = geometry.importedUvIndices.length;
					while(_g5 < _g6) {
						var i6 = _g5++;
						wrap.writeInt(geometry.importedUvIndices[i6]);
					}
				}
			}
		}
		var c = 0;
		var _g = 0;
		var _g11 = p_scene.g2d_connections;
		while(_g < _g11.length) {
			var connection = _g11[_g];
			++_g;
			wrap.writeByte(5);
			wrap.writeUTF(connection.sourceId);
			wrap.writeUTF(connection.destinationId);
			++c;
		}
	}
	,getSceneSize: function(p_scene) {
		var size = 0;
	}
	,importScene: function(p_data) {
		var scene = new com_genome2d_g3d_G3DScene();
		var wrap = new com_genome2d_utils_GBytes(p_data);
		var version = wrap.readInt();
		if(version != 102) {
			var p_arg1 = "G3D format version not compatible.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/g3d/importers/G3DImporter.hx", lineNumber : 110, className : "com.genome2d.g3d.importers.G3DImporter", methodName : "importScene"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(15,pos,args);
			}
			var msg = "G2D_ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		while(_$UInt_UInt_$Impl_$.gt(wrap.getBytesAvailable(),0)) {
			var type = wrap.readByte();
			switch(type) {
			case 1:
				var id = wrap.readUTF();
				var relativePath = wrap.readUTF();
				var texture = new com_genome2d_g3d_G3DTexture(id,relativePath);
				scene.addNode(texture.id,texture);
				break;
			case 2:
				var id1 = wrap.readUTF();
				var model = new com_genome2d_g3d_G3DModel(id1);
				model.name = wrap.readUTF();
				scene.addNode(model.id,model);
				break;
			case 3:
				var id2 = wrap.readUTF();
				var material = new com_genome2d_g3d_G3DMaterial(id2);
				scene.addNode(material.id,material);
				break;
			case 4:
				var id3 = wrap.readUTF();
				var count = wrap.readInt();
				var vertices = [];
				var _g = 0;
				var _g1 = count;
				while(_g < _g1) {
					var i = _g++;
					vertices.push(wrap.readFloat());
				}
				var count1 = wrap.readInt();
				var uvs = [];
				var _g2 = 0;
				var _g3 = count1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					uvs.push(wrap.readFloat());
				}
				var count2 = wrap.readInt();
				var indices = [];
				var _g4 = 0;
				var _g5 = count2;
				while(_g4 < _g5) {
					var i2 = _g4++;
					indices.push(wrap.readInt());
				}
				var count3 = wrap.readInt();
				var normals = [];
				var _g6 = 0;
				var _g7 = count3;
				while(_g6 < _g7) {
					var i3 = _g6++;
					normals.push(wrap.readFloat());
				}
				var uvIndices = [];
				if(!this.processed) {
					var count4 = wrap.readInt();
					var _g8 = 0;
					var _g9 = count4;
					while(_g8 < _g9) {
						var i4 = _g8++;
						uvIndices.push(wrap.readInt());
					}
				}
				var geometry = new com_genome2d_g3d_G3DGeometry(id3);
				if(this.processed) {
					geometry.initProcessed(vertices,uvs,indices,normals);
				} else {
					geometry.initImported(vertices,uvs,indices,uvIndices,normals);
				}
				scene.addNode(geometry.id,geometry);
				break;
			case 5:
				var sourceId = wrap.readUTF();
				var destinationId = wrap.readUTF();
				scene.addConnection(sourceId,destinationId);
				break;
			}
		}
		return scene;
	}
	,__class__: com_genome2d_g3d_importers_G3DImporter
});
var com_genome2d_g3d2_G3DBase = function(p_id) {
	this.g2d_id = p_id;
};
$hxClasses["com.genome2d.g3d2.G3DBase"] = com_genome2d_g3d2_G3DBase;
com_genome2d_g3d2_G3DBase.__name__ = "com.genome2d.g3d2.G3DBase";
com_genome2d_g3d2_G3DBase.prototype = {
	g2d_id: null
	,getId: function() {
		return this.g2d_id;
	}
	,__class__: com_genome2d_g3d2_G3DBase
};
var com_genome2d_g3d2_G3DEdge = function(p_id,p_vertex1,p_vertex2) {
	com_genome2d_g3d2_G3DBase.call(this,p_id);
	this.g2d_vertex1 = p_vertex1;
	this.g2d_vertex2 = p_vertex2;
};
$hxClasses["com.genome2d.g3d2.G3DEdge"] = com_genome2d_g3d2_G3DEdge;
com_genome2d_g3d2_G3DEdge.__name__ = "com.genome2d.g3d2.G3DEdge";
com_genome2d_g3d2_G3DEdge.__super__ = com_genome2d_g3d2_G3DBase;
com_genome2d_g3d2_G3DEdge.prototype = $extend(com_genome2d_g3d2_G3DBase.prototype,{
	g2d_vertex1: null
	,g2d_vertex2: null
	,__class__: com_genome2d_g3d2_G3DEdge
});
var com_genome2d_g3d2_G3DGeometry = function(p_id,p_polys) {
	com_genome2d_g3d2_G3DBase.call(this,p_id);
	this.g2d_polys = p_polys;
};
$hxClasses["com.genome2d.g3d2.G3DGeometry"] = com_genome2d_g3d2_G3DGeometry;
com_genome2d_g3d2_G3DGeometry.__name__ = "com.genome2d.g3d2.G3DGeometry";
com_genome2d_g3d2_G3DGeometry.__super__ = com_genome2d_g3d2_G3DBase;
com_genome2d_g3d2_G3DGeometry.prototype = $extend(com_genome2d_g3d2_G3DBase.prototype,{
	g2d_polys: null
	,__class__: com_genome2d_g3d2_G3DGeometry
});
var com_genome2d_g3d2_G3DPoly = function(p_id,p_edges) {
	com_genome2d_g3d2_G3DBase.call(this,p_id);
	this.g2d_edges = p_edges;
};
$hxClasses["com.genome2d.g3d2.G3DPoly"] = com_genome2d_g3d2_G3DPoly;
com_genome2d_g3d2_G3DPoly.__name__ = "com.genome2d.g3d2.G3DPoly";
com_genome2d_g3d2_G3DPoly.__super__ = com_genome2d_g3d2_G3DBase;
com_genome2d_g3d2_G3DPoly.prototype = $extend(com_genome2d_g3d2_G3DBase.prototype,{
	g2d_edges: null
	,__class__: com_genome2d_g3d2_G3DPoly
});
var com_genome2d_g3d2_G3DRenderGeometry = function() {
};
$hxClasses["com.genome2d.g3d2.G3DRenderGeometry"] = com_genome2d_g3d2_G3DRenderGeometry;
com_genome2d_g3d2_G3DRenderGeometry.__name__ = "com.genome2d.g3d2.G3DRenderGeometry";
com_genome2d_g3d2_G3DRenderGeometry.prototype = {
	importedUvs: null
	,importedIndices: null
	,importedUvIndices: null
	,vertices: null
	,indices: null
	,uvs: null
	,vertexNormals: null
	,faceNormals: null
	,initProcessed: function(p_vertices,p_uvs,p_indices,p_normals) {
		this.vertices = p_vertices;
		this.uvs = p_uvs;
		this.indices = p_indices;
		this.vertexNormals = p_normals;
	}
	,initImported: function(p_vertices,p_uvs,p_indices,p_uvIndices) {
		this.vertices = p_vertices;
		this.importedUvs = p_uvs;
		this.importedIndices = p_indices;
		this.importedUvIndices = p_uvIndices;
		if(this.importedUvIndices.length != this.importedIndices.length) {
			throw new js__$Boot_HaxeError("Not same number of vertex and UV indices!");
		}
		this.uvs = [];
		var _g = 0;
		var _g1 = this.importedUvs.length;
		while(_g < _g1) {
			var j = _g++;
			this.uvs.push(0);
		}
		this.indices = [];
		var _g2 = 0;
		var _g3 = this.importedUvIndices.length;
		while(_g2 < _g3) {
			var j1 = _g2++;
			var vertexIndex = this.importedIndices[j1];
			if(vertexIndex < 0) {
				vertexIndex = -vertexIndex - 1;
			}
			this.indices.push(vertexIndex);
			var uvIndex = this.importedUvIndices[j1];
			this.uvs[vertexIndex * 2] = this.importedUvs[uvIndex * 2];
			this.uvs[vertexIndex * 2 + 1] = 1 - this.importedUvs[uvIndex * 2 + 1];
		}
		this.calculateFaceNormals();
		this.calculateVertexNormals();
	}
	,calculateFaceNormals: function() {
		this.faceNormals = [];
		var i = 0;
		while(i < this.indices.length) {
			var p1x = this.vertices[this.indices[i] * 3];
			var p1y = this.vertices[this.indices[i] * 3 + 1];
			var p1z = this.vertices[this.indices[i] * 3 + 2];
			var p2x = this.vertices[this.indices[i + 1] * 3];
			var p2y = this.vertices[this.indices[i + 1] * 3 + 1];
			var p2z = this.vertices[this.indices[i + 1] * 3 + 2];
			var p3x = this.vertices[this.indices[i + 2] * 3];
			var p3y = this.vertices[this.indices[i + 2] * 3 + 1];
			var p3z = this.vertices[this.indices[i + 2] * 3 + 2];
			var e1x = p1x - p2x;
			var e1y = p1y - p2y;
			var e1z = p1z - p2z;
			var e2x = p3x - p2x;
			var e2y = p3y - p2y;
			var e2z = p3z - p2z;
			var nx = e1y * e2z - e1z * e2y;
			var ny = e1z * e2x - e1x * e2z;
			var nz = e1x * e2y - e1y * e2x;
			var nl = Math.sqrt(nx * nx + ny * ny + nz * nz);
			nx /= nl;
			ny /= nl;
			nz /= nl;
			this.faceNormals.push(nx);
			this.faceNormals.push(ny);
			this.faceNormals.push(nz);
			i += 3;
		}
	}
	,getVertexFaces: function(p_vertexIndex) {
		var faces = [];
		var _g = 0;
		var _g1 = this.indices.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.indices[i] == p_vertexIndex) {
				var face = i / 3 | 0;
				if(faces.indexOf(face) == -1) {
					faces.push(face);
				}
			}
		}
		return faces;
	}
	,calculateVertexNormals: function() {
		this.vertexNormals = [];
		var vertexCount = this.vertices.length / 3 | 0;
		var _g = 0;
		var _g1 = vertexCount;
		while(_g < _g1) {
			var i = _g++;
			var sharedFaces = this.getVertexFaces(i);
			var nx = 0;
			var ny = 0;
			var nz = 0;
			var _g2 = 0;
			while(_g2 < sharedFaces.length) {
				var faceIndex = sharedFaces[_g2];
				++_g2;
				nx += this.faceNormals[faceIndex * 3];
				ny += this.faceNormals[faceIndex * 3 + 1];
				nz += this.faceNormals[faceIndex * 3 + 2];
			}
			var nl = Math.sqrt(nx * nx + ny * ny + nz * nz);
			this.vertexNormals.push(nx / nl);
			this.vertexNormals.push(ny / nl);
			this.vertexNormals.push(nz / nl);
		}
	}
	,__class__: com_genome2d_g3d2_G3DRenderGeometry
};
var com_genome2d_g3d2_G3DVertex = function(p_id,p_x,p_y,p_z) {
	com_genome2d_g3d2_G3DBase.call(this,p_id);
	this.x = p_x;
	this.y = p_y;
	this.z = p_z;
};
$hxClasses["com.genome2d.g3d2.G3DVertex"] = com_genome2d_g3d2_G3DVertex;
com_genome2d_g3d2_G3DVertex.__name__ = "com.genome2d.g3d2.G3DVertex";
com_genome2d_g3d2_G3DVertex.__super__ = com_genome2d_g3d2_G3DBase;
com_genome2d_g3d2_G3DVertex.prototype = $extend(com_genome2d_g3d2_G3DBase.prototype,{
	x: null
	,y: null
	,z: null
	,__class__: com_genome2d_g3d2_G3DVertex
});
var com_genome2d_geom_GCurve = function(p_start) {
	this.g2d_currentState = "default";
	this.start = p_start;
	this.g2d_segments = [];
	this.g2d_pathLength = 0;
	this.g2d_totalStrength = 0;
};
$hxClasses["com.genome2d.geom.GCurve"] = com_genome2d_geom_GCurve;
com_genome2d_geom_GCurve.__name__ = "com.genome2d.geom.GCurve";
com_genome2d_geom_GCurve.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_geom_GCurve.createLine = function(p_end,p_strength) {
	if(p_strength == null) {
		p_strength = 1;
	}
	return new com_genome2d_geom_GCurve(0).line(p_end,p_strength);
};
com_genome2d_geom_GCurve.prototype = {
	start: null
	,g2d_segments: null
	,g2d_pathLength: null
	,g2d_totalStrength: null
	,get_path: function() {
		var p = [this.start];
		var _g = 0;
		var _g1 = this.g2d_segments;
		while(_g < _g1.length) {
			var segment = _g1[_g];
			++_g;
			if(((segment) instanceof com_genome2d_geom_LinearSegment)) {
				p = p.concat([1,segment.end,segment.strength]);
			} else if(((segment) instanceof com_genome2d_geom_QuadraticBezierSegment)) {
				var qs = segment;
				p = p.concat([2,segment.end,segment.strength,qs.control]);
			} else if(((segment) instanceof com_genome2d_geom_CubicBezierSegment)) {
				var cs = segment;
				p = p.concat([3,segment.end,segment.strength,cs.control1,cs.control2]);
			} else {
				var p_arg1 = "Segment prototype not implemented.";
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/geom/GCurve.hx", lineNumber : 34, className : "com.genome2d.geom.GCurve", methodName : "get_path"};
				if(com_genome2d_debug_GDebug.showPriority <= 4) {
					var args = [];
					if(p_arg1 != null) {
						args.push(p_arg1);
					}
					if(p_arg2 != null) {
						args.push(p_arg2);
					}
					if(p_arg3 != null) {
						args.push(p_arg3);
					}
					if(p_arg4 != null) {
						args.push(p_arg4);
					}
					if(p_arg5 != null) {
						args.push(p_arg5);
					}
					if(p_arg6 != null) {
						args.push(p_arg6);
					}
					if(p_arg7 != null) {
						args.push(p_arg7);
					}
					if(p_arg8 != null) {
						args.push(p_arg8);
					}
					if(p_arg9 != null) {
						args.push(p_arg9);
					}
					if(p_arg10 != null) {
						args.push(p_arg10);
					}
					if(p_arg11 != null) {
						args.push(p_arg11);
					}
					if(p_arg12 != null) {
						args.push(p_arg12);
					}
					if(p_arg13 != null) {
						args.push(p_arg13);
					}
					if(p_arg14 != null) {
						args.push(p_arg14);
					}
					if(p_arg15 != null) {
						args.push(p_arg15);
					}
					if(p_arg16 != null) {
						args.push(p_arg16);
					}
					if(p_arg17 != null) {
						args.push(p_arg17);
					}
					if(p_arg18 != null) {
						args.push(p_arg18);
					}
					if(p_arg19 != null) {
						args.push(p_arg19);
					}
					if(p_arg20 != null) {
						args.push(p_arg20);
					}
					if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
						com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
					}
					var msg = "WARNING: ";
					if(pos != null) {
						msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
					}
					if(args.length > 0) {
						msg += args.toString();
					}
					com_genome2d_debug_GDebug.g2d_log += msg;
					if(com_genome2d_debug_GDebug.useNativeTrace) {
						window.console.log(msg);
					}
				}
			}
		}
		return p;
	}
	,set_path: function(p_value) {
		this.clear();
		this.start = p_value[0];
		var i = 1;
		while(i < p_value.length) switch(p_value[i]) {
		case 1:
			this.addSegment(new com_genome2d_geom_LinearSegment(p_value[i + 1],p_value[i + 2]));
			i += 3;
			break;
		case 2:
			this.addSegment(new com_genome2d_geom_QuadraticBezierSegment(p_value[i + 1],p_value[i + 2],p_value[i + 3]));
			i += 4;
			break;
		case 3:
			this.addSegment(new com_genome2d_geom_CubicBezierSegment(p_value[i + 1],p_value[i + 2],p_value[i + 3],p_value[i + 4]));
			i += 5;
			break;
		default:
			var p_arg1 = "Segment prototype not implemented.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/geom/GCurve.hx", lineNumber : 55, className : "com.genome2d.geom.GCurve", methodName : "set_path"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
		}
		return p_value;
	}
	,isConstant: function() {
		return this.g2d_pathLength == 0;
	}
	,addSegment: function(p_segment) {
		this.g2d_segments.push(p_segment);
		this.g2d_totalStrength += p_segment.strength;
		this.g2d_pathLength++;
	}
	,clear: function() {
		this.g2d_pathLength = 0;
		this.g2d_segments = [];
		this.g2d_totalStrength = 0;
	}
	,line: function(p_end,p_strength) {
		if(p_strength == null) {
			p_strength = 1;
		}
		this.addSegment(new com_genome2d_geom_LinearSegment(p_end,p_strength));
		return this;
	}
	,getEnd: function() {
		if(this.g2d_pathLength > 0) {
			return this.g2d_segments[this.g2d_pathLength - 1].end;
		} else {
			return NaN;
		}
	}
	,calculate: function(p_delta) {
		var r = this.start;
		if(this.g2d_pathLength == 1) {
			r = this.g2d_segments[0].calculate(this.start,p_delta);
		} else if(this.g2d_pathLength > 1) {
			var ratio = p_delta * this.g2d_totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.g2d_pathLength;
			while(_g < _g1) {
				var i = _g++;
				var path = this.g2d_segments[i];
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else {
					r = path.calculate(lastEnd,ratio / path.strength);
					break;
				}
			}
		}
		return r;
	}
	,quadraticBezier: function(p_end,p_control,p_strength) {
		if(p_strength == null) {
			p_strength = 1;
		}
		this.addSegment(new com_genome2d_geom_QuadraticBezierSegment(p_end,p_strength,p_control));
		return this;
	}
	,cubicBezier: function(p_end,p_control1,p_control2,p_strength) {
		if(p_strength == null) {
			p_strength = 1;
		}
		this.addSegment(new com_genome2d_geom_CubicBezierSegment(p_end,p_strength,p_control1,p_control2));
		return this;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GCurve");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GCurve");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_geom_GCurve
	,__properties__: {set_path:"set_path",get_path:"get_path"}
};
var com_genome2d_geom_Segment = function(p_end,p_strength) {
	this.end = p_end;
	this.strength = p_strength;
};
$hxClasses["com.genome2d.geom.Segment"] = com_genome2d_geom_Segment;
com_genome2d_geom_Segment.__name__ = "com.genome2d.geom.Segment";
com_genome2d_geom_Segment.prototype = {
	end: null
	,strength: null
	,calculate: function(p_start,p_d) {
		return NaN;
	}
	,__class__: com_genome2d_geom_Segment
};
var com_genome2d_geom_LinearSegment = function(p_end,p_strength) {
	com_genome2d_geom_Segment.call(this,p_end,p_strength);
};
$hxClasses["com.genome2d.geom.LinearSegment"] = com_genome2d_geom_LinearSegment;
com_genome2d_geom_LinearSegment.__name__ = "com.genome2d.geom.LinearSegment";
com_genome2d_geom_LinearSegment.__super__ = com_genome2d_geom_Segment;
com_genome2d_geom_LinearSegment.prototype = $extend(com_genome2d_geom_Segment.prototype,{
	calculate: function(p_start,p_delta) {
		return p_start + p_delta * (this.end - p_start);
	}
	,__class__: com_genome2d_geom_LinearSegment
});
var com_genome2d_geom_QuadraticBezierSegment = function(p_end,p_strength,p_control) {
	com_genome2d_geom_Segment.call(this,p_end,p_strength);
	this.control = p_control;
};
$hxClasses["com.genome2d.geom.QuadraticBezierSegment"] = com_genome2d_geom_QuadraticBezierSegment;
com_genome2d_geom_QuadraticBezierSegment.__name__ = "com.genome2d.geom.QuadraticBezierSegment";
com_genome2d_geom_QuadraticBezierSegment.__super__ = com_genome2d_geom_Segment;
com_genome2d_geom_QuadraticBezierSegment.prototype = $extend(com_genome2d_geom_Segment.prototype,{
	control: null
	,calculate: function(p_start,p_delta) {
		var inv = 1 - p_delta;
		return inv * inv * p_start + 2 * inv * p_delta * this.control + p_delta * p_delta * this.end;
	}
	,__class__: com_genome2d_geom_QuadraticBezierSegment
});
var com_genome2d_geom_CubicBezierSegment = function(p_end,p_strength,p_control1,p_control2) {
	com_genome2d_geom_Segment.call(this,p_end,p_strength);
	this.control1 = p_control1;
	this.control2 = p_control2;
};
$hxClasses["com.genome2d.geom.CubicBezierSegment"] = com_genome2d_geom_CubicBezierSegment;
com_genome2d_geom_CubicBezierSegment.__name__ = "com.genome2d.geom.CubicBezierSegment";
com_genome2d_geom_CubicBezierSegment.__super__ = com_genome2d_geom_Segment;
com_genome2d_geom_CubicBezierSegment.prototype = $extend(com_genome2d_geom_Segment.prototype,{
	control1: null
	,control2: null
	,calculate: function(p_start,p_delta) {
		var inv = 1 - p_delta;
		var inv2 = inv * inv;
		var d2 = p_delta * p_delta;
		return inv2 * inv * p_start + 3 * inv2 * p_delta * this.control1 + 3 * inv * d2 * this.control2 + d2 * p_delta * this.end;
	}
	,__class__: com_genome2d_geom_CubicBezierSegment
});
var com_genome2d_geom_GFloat4 = function(p_x,p_y,p_z,p_w) {
	if(p_w == null) {
		p_w = 0;
	}
	if(p_z == null) {
		p_z = 0;
	}
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.x = p_x;
	this.y = p_y;
	this.z = p_z;
	this.w = p_w;
};
$hxClasses["com.genome2d.geom.GFloat4"] = com_genome2d_geom_GFloat4;
com_genome2d_geom_GFloat4.__name__ = "com.genome2d.geom.GFloat4";
com_genome2d_geom_GFloat4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,__class__: com_genome2d_geom_GFloat4
};
var com_genome2d_geom_GIntPoint = function(p_x,p_y) {
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.g2d_currentState = "default";
	this.y = 0;
	this.x = 0;
	this.x = p_x;
	this.y = p_y;
};
$hxClasses["com.genome2d.geom.GIntPoint"] = com_genome2d_geom_GIntPoint;
com_genome2d_geom_GIntPoint.__name__ = "com.genome2d.geom.GIntPoint";
com_genome2d_geom_GIntPoint.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_geom_GIntPoint.prototype = {
	x: null
	,y: null
	,equals: function(p_point) {
		if(this.x == p_point.x) {
			return this.y == p_point.y;
		} else {
			return false;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GIntPoint");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GIntPoint");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_geom_GIntPoint
};
var com_genome2d_geom_GIntRectangle = function(p_x,p_y,p_width,p_height) {
	if(p_height == null) {
		p_height = 0;
	}
	if(p_width == null) {
		p_width = 0;
	}
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.g2d_currentState = "default";
	this.x = p_x;
	this.y = p_y;
	this.width = p_width;
	this.height = p_height;
};
$hxClasses["com.genome2d.geom.GIntRectangle"] = com_genome2d_geom_GIntRectangle;
com_genome2d_geom_GIntRectangle.__name__ = "com.genome2d.geom.GIntRectangle";
com_genome2d_geom_GIntRectangle.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_geom_GIntRectangle.prototype = {
	get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(p_value) {
		this.height = p_value - this.y;
		return p_value;
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(p_value) {
		this.width -= p_value - this.x;
		this.x = p_value;
		return p_value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(p_value) {
		this.width = p_value - this.x;
		return p_value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(p_value) {
		this.height -= p_value - this.y;
		this.y = p_value;
		return p_value;
	}
	,x: null
	,y: null
	,width: null
	,height: null
	,g2d_native: null
	,setTo: function(p_x,p_y,p_width,p_height) {
		this.x = p_x;
		this.y = p_y;
		this.width = p_width;
		this.height = p_height;
	}
	,clone: function() {
		return new com_genome2d_geom_GIntRectangle(this.x,this.y,this.width,this.height);
	}
	,intersection: function(p_rect) {
		var result;
		var x0 = this.x < p_rect.x ? p_rect.x : this.x;
		var x1 = this.get_right() > p_rect.get_right() ? p_rect.get_right() : this.get_right();
		if(x1 <= x0) {
			result = new com_genome2d_geom_GIntRectangle();
		} else {
			var y0 = this.y < p_rect.y ? p_rect.y : this.y;
			var y1 = this.get_bottom() > p_rect.get_bottom() ? p_rect.get_bottom() : this.get_bottom();
			if(y1 <= y0) {
				result = new com_genome2d_geom_GIntRectangle();
			} else {
				result = new com_genome2d_geom_GIntRectangle(x0,y0,x1 - x0,y1 - y0);
			}
		}
		return result;
	}
	,intersects: function(p_rect) {
		var result = false;
		var x0 = this.x < p_rect.x ? p_rect.x : this.x;
		var x1 = this.get_right() > p_rect.get_right() ? p_rect.get_right() : this.get_right();
		if(x1 > x0) {
			var y0 = this.y < p_rect.y ? p_rect.y : this.y;
			var y1 = this.get_bottom() > p_rect.get_bottom() ? p_rect.get_bottom() : this.get_bottom();
			if(y1 > y0) {
				result = true;
			}
		}
		return result;
	}
	,contains: function(p_x,p_y) {
		if(p_x >= this.x && p_y >= this.y && p_x <= this.get_right()) {
			return p_y <= this.get_bottom();
		} else {
			return false;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GIntRectangle");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GIntRectangle");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_geom_GIntRectangle
	,__properties__: {set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var com_genome2d_geom_GLine = function(p_start,p_end) {
	this.start = p_start;
	this.end = p_end;
	this.normal = new com_genome2d_geom_GVector2(p_end.y - p_start.y,-p_end.x + p_start.x);
	this.normal.normalize();
	this.vec = new com_genome2d_geom_GVector2(p_end.x - p_start.x,p_end.y - p_start.y);
	this.aabb = new com_genome2d_geom_GRectangle(this.start.x < this.end.x ? this.start.x : this.end.x,this.start.y < this.end.y ? this.start.y : this.end.y,(this.start.x > this.end.x ? this.start.x : this.end.x) - (this.start.x < this.end.x ? this.start.x : this.end.x),(this.start.y > this.end.y ? this.start.y : this.end.y) - (this.start.y < this.end.y ? this.start.y : this.end.y));
};
$hxClasses["com.genome2d.geom.GLine"] = com_genome2d_geom_GLine;
com_genome2d_geom_GLine.__name__ = "com.genome2d.geom.GLine";
com_genome2d_geom_GLine.prototype = {
	start: null
	,end: null
	,normal: null
	,vec: null
	,aabb: null
	,side: function(p_px,p_py) {
		var vx = -this.end.y + this.start.y;
		var vy = this.end.x - this.start.x;
		var px = p_px - this.start.x;
		var py = p_py - this.start.y;
		var dot = vx * px + vy * py;
		return dot;
	}
	,intersect: function(p_line,p_v1seg,p_v2seg) {
		if(p_v2seg == null) {
			p_v2seg = true;
		}
		if(p_v1seg == null) {
			p_v1seg = true;
		}
		var d = this.vec.y * p_line.vec.x - this.vec.x * p_line.vec.y;
		if(d == 0) {
			return null;
		}
		var n_a = this.vec.x * (p_line.start.y - this.start.y) - this.vec.y * (p_line.start.x - this.start.x);
		var n_b = p_line.vec.x * (p_line.start.y - this.start.y) - p_line.vec.y * (p_line.start.x - this.start.x);
		var ua = n_a / d;
		var ub = n_b / d;
		if(!p_v1seg && !p_v2seg) {
			return new com_genome2d_geom_GVector2(p_line.start.x + ua * p_line.vec.x,p_line.start.y + ua * p_line.vec.y);
		}
		if(!p_v1seg && ua >= 0 && ua <= 1) {
			return new com_genome2d_geom_GVector2(p_line.start.x + ua * p_line.vec.x,p_line.start.y + ua * p_line.vec.y);
		}
		if(!p_v2seg && ub >= 0 && ub <= 1) {
			return new com_genome2d_geom_GVector2(p_line.start.x + ua * p_line.vec.x,p_line.start.y + ua * p_line.vec.y);
		}
		if(ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
			return new com_genome2d_geom_GVector2(p_line.start.x + ua * p_line.vec.x,p_line.start.y + ua * p_line.vec.y);
		}
		return null;
	}
	,toString: function() {
		return Std.string(this.start) + " : " + Std.string(this.end);
	}
	,__class__: com_genome2d_geom_GLine
};
var com_genome2d_geom_GMatrix = function(p_a,p_b,p_c,p_d,p_tx,p_ty) {
	if(p_ty == null) {
		p_ty = 0;
	}
	if(p_tx == null) {
		p_tx = 0;
	}
	if(p_d == null) {
		p_d = 1;
	}
	if(p_c == null) {
		p_c = 0;
	}
	if(p_b == null) {
		p_b = 0;
	}
	if(p_a == null) {
		p_a = 1;
	}
	this.a = p_a;
	this.b = p_b;
	this.c = p_c;
	this.d = p_d;
	this.tx = p_tx;
	this.ty = p_ty;
};
$hxClasses["com.genome2d.geom.GMatrix"] = com_genome2d_geom_GMatrix;
com_genome2d_geom_GMatrix.__name__ = "com.genome2d.geom.GMatrix";
com_genome2d_geom_GMatrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,copyFrom: function(p_from) {
		this.a = p_from.a;
		this.b = p_from.b;
		this.c = p_from.c;
		this.d = p_from.d;
		this.tx = p_from.tx;
		this.ty = p_from.ty;
	}
	,setTo: function(p_a,p_b,p_c,p_d,p_tx,p_ty) {
		this.a = p_a;
		this.b = p_b;
		this.c = p_c;
		this.d = p_d;
		this.tx = p_tx;
		this.ty = p_ty;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,concat: function(p_matrix) {
		var a1 = this.a * p_matrix.a + this.b * p_matrix.c;
		this.b = this.a * p_matrix.b + this.b * p_matrix.d;
		this.a = a1;
		var c1 = this.c * p_matrix.a + this.d * p_matrix.c;
		this.d = this.c * p_matrix.b + this.d * p_matrix.d;
		this.c = c1;
		var tx1 = this.tx * p_matrix.a + this.ty * p_matrix.c + p_matrix.tx;
		this.ty = this.tx * p_matrix.b + this.ty * p_matrix.d + p_matrix.ty;
		this.tx = tx1;
	}
	,invert: function() {
		var n = this.a * this.d - this.b * this.c;
		if(n == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			n = 1 / n;
			var a1 = this.d * n;
			this.d = this.a * n;
			this.a = a1;
			this.b *= -n;
			this.c *= -n;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,scale: function(p_scaleX,p_scaleY) {
		this.a *= p_scaleX;
		this.b *= p_scaleY;
		this.c *= p_scaleX;
		this.d *= p_scaleY;
		this.tx *= p_scaleX;
		this.ty *= p_scaleY;
	}
	,rotate: function(p_angle) {
		var cos = Math.cos(p_angle);
		var sin = Math.sin(p_angle);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,translate: function(p_x,p_y) {
		this.tx += p_x;
		this.ty += p_y;
	}
	,__class__: com_genome2d_geom_GMatrix
};
var com_genome2d_geom_GMatrixUtils = function() { };
$hxClasses["com.genome2d.geom.GMatrixUtils"] = com_genome2d_geom_GMatrixUtils;
com_genome2d_geom_GMatrixUtils.__name__ = "com.genome2d.geom.GMatrixUtils";
com_genome2d_geom_GMatrixUtils.prependMatrix = function(p_matrix,p_by) {
	p_matrix.setTo(p_matrix.a * p_by.a + p_matrix.c * p_by.b,p_matrix.b * p_by.a + p_matrix.d * p_by.b,p_matrix.a * p_by.c + p_matrix.c * p_by.d,p_matrix.b * p_by.c + p_matrix.d * p_by.d,p_matrix.tx + p_matrix.a * p_by.tx + p_matrix.c * p_by.ty,p_matrix.ty + p_matrix.b * p_by.tx + p_matrix.d * p_by.ty);
};
var com_genome2d_geom_GPoint = function(p_x,p_y) {
	this.x = p_x;
	this.y = p_y;
};
$hxClasses["com.genome2d.geom.GPoint"] = com_genome2d_geom_GPoint;
com_genome2d_geom_GPoint.__name__ = "com.genome2d.geom.GPoint";
com_genome2d_geom_GPoint.distance = function(point1,point2) {
	var distX = point2.x - point1.x;
	distX *= distX;
	var distY = point2.y - point1.y;
	distY *= distY;
	return Math.sqrt(distX + distY);
};
com_genome2d_geom_GPoint.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: com_genome2d_geom_GPoint
	,__properties__: {get_length:"get_length"}
};
var com_genome2d_geom_GRectangle = function(p_x,p_y,p_width,p_height) {
	this.x = p_x;
	this.y = p_y;
	this.width = p_width;
	this.height = p_height;
};
$hxClasses["com.genome2d.geom.GRectangle"] = com_genome2d_geom_GRectangle;
com_genome2d_geom_GRectangle.__name__ = "com.genome2d.geom.GRectangle";
com_genome2d_geom_GRectangle.prototype = {
	get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(p_value) {
		this.height = p_value - this.y;
		return p_value;
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(p_value) {
		this.width -= p_value - this.x;
		this.x = p_value;
		return p_value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(p_value) {
		this.width = p_value - this.x;
		return p_value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(p_value) {
		this.height -= p_value - this.y;
		this.y = p_value;
		return p_value;
	}
	,x: null
	,y: null
	,width: null
	,height: null
	,setTo: function(p_x,p_y,p_width,p_height) {
		this.x = p_x;
		this.y = p_y;
		this.width = p_width;
		this.height = p_height;
	}
	,clone: function() {
		return new com_genome2d_geom_GRectangle(this.x,this.y,this.width,this.height);
	}
	,intersection: function(p_rect) {
		var result;
		var x0 = this.x < p_rect.x ? p_rect.x : this.x;
		var x1 = this.get_right() > p_rect.get_right() ? p_rect.get_right() : this.get_right();
		if(x1 <= x0) {
			result = new com_genome2d_geom_GRectangle(0,0,0,0);
		} else {
			var y0 = this.y < p_rect.y ? p_rect.y : this.y;
			var y1 = this.get_bottom() > p_rect.get_bottom() ? p_rect.get_bottom() : this.get_bottom();
			if(y1 <= y0) {
				result = new com_genome2d_geom_GRectangle(0,0,0,0);
			} else {
				result = new com_genome2d_geom_GRectangle(x0,y0,x1 - x0,y1 - y0);
			}
		}
		return result;
	}
	,intersects: function(p_rect) {
		var result = false;
		var x0 = this.x < p_rect.x ? p_rect.x : this.x;
		var x1 = this.get_right() > p_rect.get_right() ? p_rect.get_right() : this.get_right();
		if(x1 > x0) {
			var y0 = this.y < p_rect.y ? p_rect.y : this.y;
			var y1 = this.get_bottom() > p_rect.get_bottom() ? p_rect.get_bottom() : this.get_bottom();
			if(y1 > y0) {
				result = true;
			}
		}
		return result;
	}
	,contains: function(p_x,p_y) {
		if(p_x >= this.x && p_y >= this.y && p_x < this.get_right()) {
			return p_y < this.get_bottom();
		} else {
			return false;
		}
	}
	,__class__: com_genome2d_geom_GRectangle
	,__properties__: {set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var com_genome2d_geom_GVector2 = function(p_x,p_y) {
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.x = p_x;
	this.y = p_y;
};
$hxClasses["com.genome2d.geom.GVector2"] = com_genome2d_geom_GVector2;
com_genome2d_geom_GVector2.__name__ = "com.genome2d.geom.GVector2";
com_genome2d_geom_GVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,addEq: function(p_vector) {
		this.x += p_vector.x;
		this.y += p_vector.y;
	}
	,subEq: function(p_vector) {
		this.x -= p_vector.x;
		this.y -= p_vector.y;
	}
	,mulEq: function(p_s) {
		this.x *= p_s;
		this.y *= p_s;
	}
	,dot: function(p_vector) {
		return this.x * p_vector.x + this.y * p_vector.y;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
		}
		return this;
	}
	,toString: function() {
		return "[" + this.x + "," + this.y + "]";
	}
	,__class__: com_genome2d_geom_GVector2
	,__properties__: {get_length:"get_length"}
};
var com_genome2d_geom_GVector3D = function(p_x,p_y,p_z,p_w) {
	if(p_w == null) {
		p_w = 0;
	}
	if(p_z == null) {
		p_z = 0;
	}
	if(p_y == null) {
		p_y = 0;
	}
	if(p_x == null) {
		p_x = 0;
	}
	this.x = p_x;
	this.y = p_y;
	this.z = p_z;
	this.w = p_w;
};
$hxClasses["com.genome2d.geom.GVector3D"] = com_genome2d_geom_GVector3D;
com_genome2d_geom_GVector3D.__name__ = "com.genome2d.geom.GVector3D";
com_genome2d_geom_GVector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"};
com_genome2d_geom_GVector3D.X_AXIS = null;
com_genome2d_geom_GVector3D.get_X_AXIS = function() {
	return new com_genome2d_geom_GVector3D(1,0,0);
};
com_genome2d_geom_GVector3D.Y_AXIS = null;
com_genome2d_geom_GVector3D.get_Y_AXIS = function() {
	return new com_genome2d_geom_GVector3D(0,1,0);
};
com_genome2d_geom_GVector3D.Z_AXIS = null;
com_genome2d_geom_GVector3D.get_Z_AXIS = function() {
	return new com_genome2d_geom_GVector3D(0,0,1);
};
com_genome2d_geom_GVector3D.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,add: function(p_vector) {
		return new com_genome2d_geom_GVector3D(this.x + p_vector.x,this.y + p_vector.y,this.z + p_vector.z);
	}
	,subtract: function(p_vector) {
		return new com_genome2d_geom_GVector3D(this.x - p_vector.x,this.y - p_vector.y,this.z - p_vector.z);
	}
	,scaleBy: function(p_s) {
		this.x *= p_s;
		this.y *= p_s;
		this.z *= p_s;
	}
	,normalize: function() {
		var nf = 1 / Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		this.x *= nf;
		this.y *= nf;
		this.z *= nf;
	}
	,__class__: com_genome2d_geom_GVector3D
};
var com_genome2d_globals_GParameters = function() {
	this.g2d_parameters = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.globals.GParameters"] = com_genome2d_globals_GParameters;
com_genome2d_globals_GParameters.__name__ = "com.genome2d.globals.GParameters";
com_genome2d_globals_GParameters.prototype = {
	g2d_parameters: null
	,hasParameter: function(p_name) {
		var _this = this.g2d_parameters;
		if(__map_reserved[p_name] != null) {
			return _this.existsReserved(p_name);
		} else {
			return _this.h.hasOwnProperty(p_name);
		}
	}
	,setParameter: function(p_name,p_value) {
		var _this = this.g2d_parameters;
		var value = p_value;
		if(__map_reserved[p_name] != null) {
			_this.setReserved(p_name,value);
		} else {
			_this.h[p_name] = value;
		}
	}
	,getParameter: function(p_name) {
		var _this = this.g2d_parameters;
		return __map_reserved[p_name] != null ? _this.getReserved(p_name) : _this.h[p_name];
	}
	,parseParametersString: function(p_data) {
		var e_r = new RegExp("[\\s\r\n]+","gim".split("u").join(""));
		var lines = p_data.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			line = line.replace(e_r,"");
			if(line.indexOf("#") != 0) {
				var split = line.split("=");
				if(split.length == 2) {
					var f = parseFloat(split[1]);
					if(split[1].toLowerCase() == "true") {
						var _this = this.g2d_parameters;
						var key = split[0];
						if(__map_reserved[key] != null) {
							_this.setReserved(key,true);
						} else {
							_this.h[key] = true;
						}
					} else if(split[1].toLowerCase() == "false") {
						var _this1 = this.g2d_parameters;
						var key1 = split[0];
						if(__map_reserved[key1] != null) {
							_this1.setReserved(key1,false);
						} else {
							_this1.h[key1] = false;
						}
					} else if(!isNaN(f)) {
						var _this2 = this.g2d_parameters;
						var key2 = split[0];
						if(__map_reserved[key2] != null) {
							_this2.setReserved(key2,f);
						} else {
							_this2.h[key2] = f;
						}
					} else {
						var _this3 = this.g2d_parameters;
						var key3 = split[0];
						var value = split[1];
						if(__map_reserved[key3] != null) {
							_this3.setReserved(key3,value);
						} else {
							_this3.h[key3] = value;
						}
					}
				}
			}
		}
	}
	,__class__: com_genome2d_globals_GParameters
};
var com_genome2d_input_GFocusManager = function() { };
$hxClasses["com.genome2d.input.GFocusManager"] = com_genome2d_input_GFocusManager;
com_genome2d_input_GFocusManager.__name__ = "com.genome2d.input.GFocusManager";
com_genome2d_input_GFocusManager.g2d_focusInstance = null;
com_genome2d_input_GFocusManager.hasFocus = function(p_focusInstance) {
	return com_genome2d_input_GFocusManager.g2d_focusInstance == p_focusInstance;
};
com_genome2d_input_GFocusManager.setFocus = function(p_focusInstance) {
	if(com_genome2d_input_GFocusManager.g2d_focusInstance != null) {
		com_genome2d_input_GFocusManager.g2d_focusInstance.lostFocus();
	}
	com_genome2d_input_GFocusManager.g2d_focusInstance = p_focusInstance;
	if(com_genome2d_input_GFocusManager.g2d_focusInstance != null) {
		com_genome2d_input_GFocusManager.g2d_focusInstance.gotFocus();
	}
};
var com_genome2d_input_GKeyboardInput = function(p_type,p_keyCode,p_charCode) {
	this.shiftKey = false;
	this.ctrlKey = false;
	this.altKey = false;
	this.type = p_type;
	this.keyCode = p_keyCode;
	this.charCode = p_charCode;
};
$hxClasses["com.genome2d.input.GKeyboardInput"] = com_genome2d_input_GKeyboardInput;
com_genome2d_input_GKeyboardInput.__name__ = "com.genome2d.input.GKeyboardInput";
com_genome2d_input_GKeyboardInput.prototype = {
	altKey: null
	,ctrlKey: null
	,shiftKey: null
	,type: null
	,keyCode: null
	,charCode: null
	,__class__: com_genome2d_input_GKeyboardInput
};
var com_genome2d_input_GKeyboardInputType = function() { };
$hxClasses["com.genome2d.input.GKeyboardInputType"] = com_genome2d_input_GKeyboardInputType;
com_genome2d_input_GKeyboardInputType.__name__ = "com.genome2d.input.GKeyboardInputType";
com_genome2d_input_GKeyboardInputType.fromNative = function(p_nativeType) {
	var type = "";
	switch(p_nativeType) {
	case "keydown":
		type = "keyDown";
		break;
	case "keyup":
		type = "keyUp";
		break;
	}
	return type;
};
var com_genome2d_input_GMouseInput = function(p_target,p_dispatcher,p_type,p_localX,p_localY) {
	this.mouseOut = false;
	this.time = 0;
	this.delta = 0;
	this.nativeCaptured = false;
	this.shiftKey = false;
	this.altKey = false;
	this.ctrlKey = false;
	this.buttonDown = false;
	this.captured = false;
	this.dispatcher = p_dispatcher;
	this.target = p_target;
	this.type = p_type;
	this.localX = p_localX;
	this.localY = p_localY;
};
$hxClasses["com.genome2d.input.GMouseInput"] = com_genome2d_input_GMouseInput;
com_genome2d_input_GMouseInput.__name__ = "com.genome2d.input.GMouseInput";
com_genome2d_input_GMouseInput.prototype = {
	captured: null
	,dispatcher: null
	,target: null
	,camera: null
	,localX: null
	,localY: null
	,type: null
	,contextX: null
	,contextY: null
	,worldX: null
	,worldY: null
	,buttonDown: null
	,ctrlKey: null
	,altKey: null
	,shiftKey: null
	,nativeCaptured: null
	,delta: null
	,time: null
	,mouseOut: null
	,clone: function(p_target,p_dispatcher,p_type) {
		var input = new com_genome2d_input_GMouseInput(p_target,p_dispatcher,p_type,this.localX,this.localY);
		input.contextX = this.contextX;
		input.contextY = this.contextY;
		input.worldX = this.worldX;
		input.worldY = this.worldY;
		input.buttonDown = this.buttonDown;
		input.ctrlKey = this.ctrlKey;
		input.altKey = this.altKey;
		input.shiftKey = this.shiftKey;
		input.nativeCaptured = this.nativeCaptured;
		input.delta = this.delta;
		input.camera = this.camera;
		input.captured = this.captured;
		input.mouseOut = this.mouseOut;
		return input;
	}
	,__class__: com_genome2d_input_GMouseInput
};
var com_genome2d_input_GMouseInputType = function() { };
$hxClasses["com.genome2d.input.GMouseInputType"] = com_genome2d_input_GMouseInputType;
com_genome2d_input_GMouseInputType.__name__ = "com.genome2d.input.GMouseInputType";
com_genome2d_input_GMouseInputType.fromNative = function(p_nativeType) {
	var type = "";
	switch(p_nativeType) {
	case "mouseleave":case "mousemove":case "touchmove":
		type = "mouseMove";
		break;
	case "rightMouseDown":
		type = "rightMouseDown";
		break;
	case "rightMouseUp":
		type = "rightMouseUp";
		break;
	case "mouseup":case "touchcancel":case "touchend":
		type = "mouseUp";
		break;
	case "mousedown":case "touchstart":
		type = "mouseDown";
		break;
	case "wheel":
		type = "mouseWheel";
		break;
	}
	return type;
};
var com_genome2d_macros_MGBuild = function() { };
$hxClasses["com.genome2d.macros.MGBuild"] = com_genome2d_macros_MGBuild;
com_genome2d_macros_MGBuild.__name__ = "com.genome2d.macros.MGBuild";
var com_genome2d_macros_MGDebug = function() { };
$hxClasses["com.genome2d.macros.MGDebug"] = com_genome2d_macros_MGDebug;
com_genome2d_macros_MGDebug.__name__ = "com.genome2d.macros.MGDebug";
var com_genome2d_macros_MGDebugProcessor = function() { };
$hxClasses["com.genome2d.macros.MGDebugProcessor"] = com_genome2d_macros_MGDebugProcessor;
com_genome2d_macros_MGDebugProcessor.__name__ = "com.genome2d.macros.MGDebugProcessor";
var com_genome2d_node_GNode = function(p_name) {
	if(p_name == null) {
		p_name = "";
	}
	this.g2d_currentState = "default";
	this.g2d_localAlpha = 1;
	this.g2d_worldAlpha = 1;
	this.g2d_localBlue = 1;
	this.g2d_worldBlue = 1;
	this.g2d_localGreen = 1;
	this.g2d_worldGreen = 1;
	this.g2d_localRed = 1;
	this.g2d_worldRed = 1;
	this.g2d_localRotation = 0;
	this.g2d_worldRotation = 0;
	this.g2d_localScaleY = 1;
	this.g2d_worldScaleY = 1;
	this.g2d_localScaleX = 1;
	this.g2d_worldScaleX = 1;
	this.g2d_localUseMatrix = 0;
	this.g2d_localY = 0;
	this.g2d_worldY = 0;
	this.g2d_localX = 0;
	this.g2d_worldX = 0;
	this.visible = true;
	this.useWorldColor = false;
	this.useWorldSpace = false;
	this.g2d_colorDirty = false;
	this.g2d_transformDirty = false;
	this.g2d_matrixDirty = true;
	this.g2d_childCount = 0;
	this.g2d_componentCount = 0;
	this.g2d_lastClickTime = -1;
	this.mouseEnabled = false;
	this.mouseChildren = true;
	this.g2d_disposed = false;
	this.sameNameChildren = true;
	this.g2d_active = true;
	this.g2d_usedAsMask = 0;
	this.cameraGroup = 0;
	this.g2d_id = com_genome2d_node_GNode.g2d_nodeCount++;
	this.name = p_name == "" ? "node" : p_name;
	if(com_genome2d_node_GNode.g2d_cachedMatrix == null) {
		com_genome2d_node_GNode.g2d_cachedMatrix = new com_genome2d_geom_GMatrix();
		com_genome2d_node_GNode.g2d_cachedTransformMatrix = new com_genome2d_geom_GMatrix();
		com_genome2d_node_GNode.g2d_activeMasks = [];
	}
};
$hxClasses["com.genome2d.node.GNode"] = com_genome2d_node_GNode;
com_genome2d_node_GNode.__name__ = "com.genome2d.node.GNode";
com_genome2d_node_GNode.__interfaces__ = [com_genome2d_proto_IGPrototypable,com_genome2d_input_IGFocusable];
com_genome2d_node_GNode.createWithComponent = function(p_componentClass,p_name) {
	if(p_name == null) {
		p_name = "";
	}
	var node = new com_genome2d_node_GNode();
	if(p_name != "") {
		node.name = p_name;
	}
	return node.addComponent(p_componentClass);
};
com_genome2d_node_GNode.createWithGSpriteComponent = function(p_name) {
	if(p_name == null) {
		p_name = "";
	}
	var node = new com_genome2d_node_GNode();
	if(p_name != "") {
		node.name = p_name;
	}
	var component = new com_genome2d_components_renderable_GSprite();
	component.g2d_node = node;
	node.g2d_defaultRenderable = component;
	node.g2d_components = [component];
	node.g2d_componentCount = 1;
	component.init();
	component.g2d_start();
	return component;
};
com_genome2d_node_GNode.g2d_cachedArray = null;
com_genome2d_node_GNode.g2d_cachedMatrix = null;
com_genome2d_node_GNode.g2d_activeMasks = null;
com_genome2d_node_GNode.g2d_core = null;
com_genome2d_node_GNode.g2d_cachedTransformMatrix = null;
com_genome2d_node_GNode.prototype = {
	get_core: function() {
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		return com_genome2d_node_GNode.g2d_core;
	}
	,cameraGroup: null
	,g2d_pool: null
	,g2d_poolNext: null
	,g2d_poolPrevious: null
	,maskRect: null
	,g2d_usedAsMask: null
	,g2d_mask: null
	,get_mask: function() {
		return this.g2d_mask;
	}
	,set_mask: function(p_value) {
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		if(!com_genome2d_node_GNode.g2d_core.g2d_context.hasFeature(1)) {
			var p_arg1 = "Stencil masking feature not supported.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 129, className : "com.genome2d.node.GNode", methodName : "set_mask"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(this.g2d_mask != null) {
			this.g2d_mask.g2d_usedAsMask--;
		}
		this.g2d_mask = p_value;
		this.g2d_mask.g2d_usedAsMask++;
		return this.g2d_mask;
	}
	,userData: null
	,g2d_active: null
	,isActive: function() {
		return this.g2d_active;
	}
	,setActive: function(p_value) {
		if(p_value != this.g2d_active) {
			if(this.g2d_disposed) {
				var p_arg1 = "Node already disposed.";
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 155, className : "com.genome2d.node.GNode", methodName : "setActive"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
			this.g2d_active = p_value;
			var _g = 0;
			var _g1 = this.g2d_componentCount;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_components[i].setActive(p_value);
			}
			var child = this.g2d_firstChild;
			while(child != null) {
				var next = child.g2d_next;
				child.setActive(p_value);
				child = next;
			}
		}
	}
	,g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,name: null
	,sameNameChildren: null
	,postProcess: null
	,g2d_parent: null
	,get_parent: function() {
		return this.g2d_parent;
	}
	,g2d_disposed: null
	,isDisposed: function() {
		return this.g2d_disposed;
	}
	,dispose: function() {
		if(this.g2d_disposed) {
			return;
		}
		this.disposeComponents();
		this.disposeChildren();
		if(this.g2d_parent != null) {
			this.g2d_parent.removeChild(this);
		}
		this.disposeCallbacks();
		this.g2d_disposed = true;
	}
	,disposeCallbacks: function() {
		if(this.g2d_onAddedToStage != null) {
			this.g2d_onAddedToStage.removeAll();
			this.g2d_onAddedToStage = null;
		}
		if(this.g2d_onRemovedFromStage != null) {
			this.g2d_onRemovedFromStage.removeAll();
			this.g2d_onRemovedFromStage = null;
		}
		if(this.g2d_onMouseClick != null) {
			this.g2d_onMouseClick.removeAll();
			this.g2d_onMouseClick = null;
		}
		if(this.g2d_onMouseDown != null) {
			this.g2d_onMouseDown.removeAll();
			this.g2d_onMouseDown = null;
		}
		if(this.g2d_onMouseMove != null) {
			this.g2d_onMouseMove.removeAll();
			this.g2d_onMouseMove = null;
		}
		if(this.g2d_onMouseOut != null) {
			this.g2d_onMouseOut.removeAll();
			this.g2d_onMouseOut = null;
		}
		if(this.g2d_onMouseOver != null) {
			this.g2d_onMouseOver.removeAll();
			this.g2d_onMouseOver = null;
		}
		if(this.g2d_onMouseUp != null) {
			this.g2d_onMouseUp.removeAll();
			this.g2d_onMouseUp = null;
		}
		if(this.g2d_onRightMouseClick != null) {
			this.g2d_onRightMouseClick.removeAll();
			this.g2d_onRightMouseClick = null;
		}
		if(this.g2d_onRightMouseDown != null) {
			this.g2d_onRightMouseDown.removeAll();
			this.g2d_onRightMouseDown = null;
		}
		if(this.g2d_onRightMouseUp != null) {
			this.g2d_onRightMouseUp.removeAll();
			this.g2d_onRightMouseUp = null;
		}
	}
	,hitTest: function(p_x,p_y,p_hierarchy) {
		if(p_hierarchy == null) {
			p_hierarchy = false;
		}
		if(this.g2d_active && this.visible) {
			if(p_hierarchy) {
				var child = this.g2d_lastChild;
				while(child != null) {
					var previous = child.g2d_previous;
					if(child.hitTest(p_x,p_y,true)) {
						return true;
					}
					child = previous;
				}
			}
			if(this.g2d_renderable != null || this.g2d_defaultRenderable != null) {
				var tx = p_x - this.g2d_worldX;
				var ty = p_y - this.g2d_worldY;
				if(this.g2d_worldRotation != 0) {
					var cos = Math.cos(-this.g2d_worldRotation);
					var sin = Math.sin(-this.g2d_worldRotation);
					var ox = tx;
					tx = tx * cos - ty * sin;
					ty = ty * cos + ox * sin;
				}
				tx /= this.g2d_worldScaleX;
				ty /= this.g2d_worldScaleY;
				var tmp;
				if(this.g2d_defaultRenderable != null) {
					var _this = this.g2d_defaultRenderable;
					var p_x1 = tx;
					var p_y1 = ty;
					var hit = false;
					if(_this.texture != null) {
						var _this1 = _this.texture;
						p_x1 = p_x1 / (_this1.g2d_nativeWidth * _this1.g2d_scaleFactor) + .5;
						var _this2 = _this.texture;
						p_y1 = p_y1 / (_this2.g2d_nativeHeight * _this2.g2d_scaleFactor) + .5;
						var hit1;
						var hit2;
						var hit3;
						var _this3 = _this.texture;
						var _this4 = _this.texture;
						if(p_x1 >= -(_this3.g2d_pivotX * _this3.g2d_scaleFactor) / (_this4.g2d_nativeWidth * _this4.g2d_scaleFactor)) {
							var _this5 = _this.texture;
							var _this6 = _this.texture;
							hit3 = p_x1 <= 1 - _this5.g2d_pivotX * _this5.g2d_scaleFactor / (_this6.g2d_nativeWidth * _this6.g2d_scaleFactor);
						} else {
							hit3 = false;
						}
						if(hit3) {
							var _this7 = _this.texture;
							var _this8 = _this.texture;
							hit2 = p_y1 >= -(_this7.g2d_pivotY * _this7.g2d_scaleFactor) / (_this8.g2d_nativeHeight * _this8.g2d_scaleFactor);
						} else {
							hit2 = false;
						}
						if(hit2) {
							var _this9 = _this.texture;
							var _this10 = _this.texture;
							hit1 = p_y1 <= 1 - _this9.g2d_pivotY * _this9.g2d_scaleFactor / (_this10.g2d_nativeHeight * _this10.g2d_scaleFactor);
						} else {
							hit1 = false;
						}
						if(hit1) {
							if(!(!_this.mousePixelEnabled)) {
								var _this11 = _this.texture;
								var _this12 = _this.texture;
								var _this13 = _this.texture;
								var _this14 = _this.texture;
								var a = _this.texture.getAlphaAtUV(p_x1 + _this11.g2d_pivotX * _this11.g2d_scaleFactor / (_this12.g2d_nativeWidth * _this12.g2d_scaleFactor),p_y1 + _this13.g2d_pivotY * _this13.g2d_scaleFactor / (_this14.g2d_nativeHeight * _this14.g2d_scaleFactor));
								hit = _$UInt_UInt_$Impl_$.gte(_this.mousePixelTreshold,a);
							} else {
								hit = true;
							}
						} else {
							hit = false;
						}
					}
					tmp = hit;
				} else {
					tmp = this.g2d_renderable.hitTest(tx,ty);
				}
				if(tmp) {
					return true;
				}
			}
		}
		return false;
	}
	,getNodesUnderPoint: function(p_x,p_y,p_nodes) {
		if(p_nodes == null) {
			p_nodes = [];
		}
		if(this.g2d_active && this.visible) {
			var child = this.g2d_lastChild;
			while(child != null) {
				var previous = child.g2d_previous;
				child.getNodesUnderPoint(p_x,p_y,p_nodes);
				child = previous;
			}
			if(this.g2d_renderable != null || this.g2d_defaultRenderable != null) {
				var tx = p_x - this.g2d_worldX;
				var ty = p_y - this.g2d_worldY;
				if(this.g2d_worldRotation != 0) {
					var cos = Math.cos(-this.g2d_worldRotation);
					var sin = Math.sin(-this.g2d_worldRotation);
					var ox = tx;
					tx = tx * cos - ty * sin;
					ty = ty * cos + ox * sin;
				}
				tx /= this.g2d_worldScaleX;
				ty /= this.g2d_worldScaleY;
				var tmp;
				if(this.g2d_defaultRenderable != null) {
					var _this = this.g2d_defaultRenderable;
					var p_x1 = tx;
					var p_y1 = ty;
					var hit = false;
					if(_this.texture != null) {
						var _this1 = _this.texture;
						p_x1 = p_x1 / (_this1.g2d_nativeWidth * _this1.g2d_scaleFactor) + .5;
						var _this2 = _this.texture;
						p_y1 = p_y1 / (_this2.g2d_nativeHeight * _this2.g2d_scaleFactor) + .5;
						var hit1;
						var hit2;
						var hit3;
						var _this3 = _this.texture;
						var _this4 = _this.texture;
						if(p_x1 >= -(_this3.g2d_pivotX * _this3.g2d_scaleFactor) / (_this4.g2d_nativeWidth * _this4.g2d_scaleFactor)) {
							var _this5 = _this.texture;
							var _this6 = _this.texture;
							hit3 = p_x1 <= 1 - _this5.g2d_pivotX * _this5.g2d_scaleFactor / (_this6.g2d_nativeWidth * _this6.g2d_scaleFactor);
						} else {
							hit3 = false;
						}
						if(hit3) {
							var _this7 = _this.texture;
							var _this8 = _this.texture;
							hit2 = p_y1 >= -(_this7.g2d_pivotY * _this7.g2d_scaleFactor) / (_this8.g2d_nativeHeight * _this8.g2d_scaleFactor);
						} else {
							hit2 = false;
						}
						if(hit2) {
							var _this9 = _this.texture;
							var _this10 = _this.texture;
							hit1 = p_y1 <= 1 - _this9.g2d_pivotY * _this9.g2d_scaleFactor / (_this10.g2d_nativeHeight * _this10.g2d_scaleFactor);
						} else {
							hit1 = false;
						}
						if(hit1) {
							if(!(!_this.mousePixelEnabled)) {
								var _this11 = _this.texture;
								var _this12 = _this.texture;
								var _this13 = _this.texture;
								var _this14 = _this.texture;
								var a = _this.texture.getAlphaAtUV(p_x1 + _this11.g2d_pivotX * _this11.g2d_scaleFactor / (_this12.g2d_nativeWidth * _this12.g2d_scaleFactor),p_y1 + _this13.g2d_pivotY * _this13.g2d_scaleFactor / (_this14.g2d_nativeHeight * _this14.g2d_scaleFactor));
								hit = _$UInt_UInt_$Impl_$.gte(_this.mousePixelTreshold,a);
							} else {
								hit = true;
							}
						} else {
							hit = false;
						}
					}
					tmp = hit;
				} else {
					tmp = this.g2d_renderable.hitTest(tx,ty);
				}
				if(tmp) {
					p_nodes.push(this);
				}
			}
		}
		return p_nodes;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		if(this.g2d_components != null) {
			var _g = 0;
			var _g1 = this.g2d_components;
			while(_g < _g1.length) {
				var component = _g1[_g];
				++_g;
				p_prototype.addChild(component.getPrototype(),"components");
			}
		}
		var child = this.g2d_firstChild;
		while(child != null) {
			p_prototype.addChild(child.getPrototype(),"children");
			child = child.g2d_next;
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		var components = p_prototype.getGroup("components");
		if(components != null) {
			var _g = 0;
			while(_g < components.length) {
				var component = components[_g];
				++_g;
				this.addComponentPrototype(component);
			}
		}
		var children = p_prototype.getGroup("children");
		if(children != null) {
			var _g1 = 0;
			while(_g1 < children.length) {
				var child = children[_g1];
				++_g1;
				if(this.sameNameChildren) {
					this.addChild(com_genome2d_proto_GPrototypeFactory.createInstance(child));
				} else {
					var childNode = this.getChildByName(child.getProperty("name").value);
					if(childNode == null) {
						this.addChild(com_genome2d_proto_GPrototypeFactory.createInstance(child));
					} else {
						childNode.bindPrototype(child);
					}
				}
			}
		}
	}
	,mouseChildren: null
	,mouseEnabled: null
	,g2d_mouseDownNode: null
	,g2d_mouseOverNode: null
	,g2d_rightMouseDownNode: null
	,captureMouseInput: function(p_input) {
		if(!this.g2d_active || !this.visible || p_input.camera != null && (this.cameraGroup & p_input.camera.g2d_contextCamera.group) == 0 && this.cameraGroup != 0) {
			return;
		}
		if(this.mouseChildren) {
			var child = this.g2d_lastChild;
			while(child != null) {
				var previous = child.g2d_previous;
				child.captureMouseInput(p_input);
				child = previous;
			}
		}
		if(this.mouseEnabled) {
			if(p_input.captured && p_input.type == "mouseUp") {
				this.g2d_mouseDownNode = null;
			}
			var previouslyCaptured = p_input.captured;
			if(this.g2d_components != null) {
				var tx = p_input.worldX - this.g2d_worldX;
				var ty = p_input.worldY - this.g2d_worldY;
				if(this.g2d_worldRotation != 0) {
					var cos = Math.cos(-this.g2d_worldRotation);
					var sin = Math.sin(-this.g2d_worldRotation);
					var ox = tx;
					tx = tx * cos - ty * sin;
					ty = ty * cos + ox * sin;
				}
				p_input.localX = this.g2d_worldScaleX == 0 ? Infinity : tx / this.g2d_worldScaleX;
				p_input.localY = this.g2d_worldScaleY == 0 ? Infinity : ty / this.g2d_worldScaleY;
				var _g = 0;
				var _g1 = this.g2d_components;
				while(_g < _g1.length) {
					var component = _g1[_g];
					++_g;
					if(js_Boot.__implements(component,com_genome2d_components_renderable_IGInteractive)) {
						(js_Boot.__cast(component , com_genome2d_components_renderable_IGInteractive)).captureMouseInput(p_input);
					}
				}
			}
			if(!previouslyCaptured && p_input.captured) {
				this.g2d_dispatchMouseCallback(p_input.type,this,p_input);
				if(this.g2d_mouseOverNode != this) {
					this.g2d_dispatchMouseCallback("mouseOver",this,p_input);
				}
			} else if(this.g2d_mouseOverNode == this) {
				this.g2d_dispatchMouseCallback("mouseOut",this,p_input);
			}
		}
	}
	,g2d_lastClickTime: null
	,g2d_dispatchMouseCallback: function(p_type,p_object,p_input) {
		if(this.mouseEnabled) {
			var mouseInput = p_input.clone(this,p_object,p_type);
			switch(p_type) {
			case "mouseDown":
				this.g2d_mouseDownNode = p_object;
				if(this.g2d_onMouseDown != null) {
					this.g2d_onMouseDown.dispatch(mouseInput);
				}
				break;
			case "mouseMove":
				if(this.g2d_onMouseMove != null) {
					this.g2d_onMouseMove.dispatch(mouseInput);
				}
				break;
			case "mouseOut":
				this.g2d_mouseOverNode = null;
				if(this.g2d_onMouseOut != null) {
					this.g2d_onMouseOut.dispatch(mouseInput);
				}
				break;
			case "mouseOver":
				this.g2d_mouseOverNode = p_object;
				if(this.g2d_onMouseOver != null) {
					this.g2d_onMouseOver.dispatch(mouseInput);
				}
				break;
			case "mouseUp":
				if(this.g2d_mouseDownNode == p_object && this.g2d_onMouseClick != null) {
					var mouseClickInput = p_input.clone(this,p_object,"mouseUp");
					if(this.g2d_onMouseClick != null) {
						this.g2d_onMouseClick.dispatch(mouseClickInput);
					}
					if(this.g2d_lastClickTime > 0 && p_input.time - this.g2d_lastClickTime < com_genome2d_input_GMouseInput.DOUBLE_CLICK_TIME) {
						if(this.g2d_onDoubleMouseClick != null) {
							this.g2d_onDoubleMouseClick.dispatch(mouseClickInput);
						}
						this.g2d_lastClickTime = -1;
					} else {
						this.g2d_lastClickTime = p_input.time;
					}
				}
				this.g2d_mouseDownNode = null;
				if(this.g2d_onMouseUp != null) {
					this.g2d_onMouseUp.dispatch(mouseInput);
				}
				break;
			case "mouseWheel":
				if(this.g2d_onMouseWheel != null) {
					this.g2d_onMouseWheel.dispatch(mouseInput);
				}
				break;
			case "rightMouseDown":
				this.g2d_rightMouseDownNode = p_object;
				if(this.g2d_onRightMouseDown != null) {
					this.g2d_onRightMouseDown.dispatch(mouseInput);
				}
				break;
			}
		}
		if(this.g2d_parent != null) {
			this.g2d_parent.g2d_dispatchMouseCallback(p_type,p_object,p_input);
		}
	}
	,gotFocus: function() {
	}
	,lostFocus: function() {
	}
	,g2d_renderable: null
	,g2d_defaultRenderable: null
	,g2d_components: null
	,g2d_componentCount: null
	,getComponent: function(p_componentClass) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 611, className : "com.genome2d.node.GNode", methodName : "getComponent"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var _g = 0;
		var _g1 = this.g2d_componentCount;
		while(_g < _g1) {
			var i = _g++;
			var component = this.g2d_components[i];
			if(js_Boot.__instanceof(component,p_componentClass)) {
				return component;
			}
		}
		return null;
	}
	,getComponents: function() {
		return this.g2d_components;
	}
	,hasComponent: function(p_componentLookupClass) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 627, className : "com.genome2d.node.GNode", methodName : "hasComponent"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		return this.getComponent(p_componentLookupClass) != null;
	}
	,g2d_addComponent: function(p_componentClass) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 632, className : "com.genome2d.node.GNode", methodName : "g2d_addComponent"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var lookup = this.getComponent(p_componentClass);
		if(lookup != null) {
			return lookup;
		}
		var component = Type.createInstance(p_componentClass,[]);
		if(component == null) {
			var p_arg110 = "Invalid components.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 638, className : "com.genome2d.node.GNode", methodName : "g2d_addComponent"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		component.g2d_node = this;
		if(((component) instanceof com_genome2d_components_renderable_GSprite)) {
			this.g2d_defaultRenderable = component;
		} else if(js_Boot.__implements(component,com_genome2d_components_renderable_IGRenderable)) {
			this.g2d_renderable = component;
		}
		if(this.g2d_components == null) {
			this.g2d_components = [];
		}
		this.g2d_components.push(component);
		this.g2d_componentCount++;
		return component;
	}
	,addComponent: function(p_componentClass) {
		var component = this.g2d_addComponent(p_componentClass);
		component.init();
		component.g2d_start();
		return component;
	}
	,addComponentPrototype: function(p_prototype) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 673, className : "com.genome2d.node.GNode", methodName : "addComponentPrototype"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var component = this.g2d_addComponent(p_prototype.prototypeClass);
		component.init();
		component.bindPrototype(p_prototype);
		component.g2d_start();
		return component;
	}
	,removeComponent: function(p_componentClass) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 693, className : "com.genome2d.node.GNode", methodName : "removeComponent"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var component = this.getComponent(p_componentClass);
		if(component == null) {
			return;
		}
		HxOverrides.remove(this.g2d_components,component);
		this.g2d_componentCount--;
		if(((component) instanceof com_genome2d_components_renderable_GSprite)) {
			this.g2d_defaultRenderable = null;
		} else if(js_Boot.__implements(component,com_genome2d_components_renderable_IGRenderable)) {
			this.g2d_renderable = null;
		}
		component.g2d_dispose();
	}
	,disposeComponents: function() {
		while(this.g2d_componentCount > 0) {
			this.g2d_components.pop().g2d_dispose();
			this.g2d_componentCount--;
		}
		this.g2d_defaultRenderable = null;
		this.g2d_renderable = null;
	}
	,g2d_firstChild: null
	,get_firstChild: function() {
		return this.g2d_firstChild;
	}
	,g2d_lastChild: null
	,get_lastChild: function() {
		return this.g2d_lastChild;
	}
	,g2d_next: null
	,get_next: function() {
		return this.g2d_next;
	}
	,g2d_previous: null
	,get_previous: function() {
		return this.g2d_previous;
	}
	,g2d_childCount: null
	,get_childCount: function() {
		return this.g2d_childCount;
	}
	,g2d_onAddedToStage: null
	,get_onAddedToStage: function() {
		if(this.g2d_onAddedToStage == null) {
			this.g2d_onAddedToStage = new com_genome2d_callbacks_GCallback0();
		}
		return this.g2d_onAddedToStage;
	}
	,g2d_onRemovedFromStage: null
	,get_onRemovedFromStage: function() {
		if(this.g2d_onRemovedFromStage == null) {
			this.g2d_onRemovedFromStage = new com_genome2d_callbacks_GCallback0();
		}
		return this.g2d_onRemovedFromStage;
	}
	,addChild: function(p_child,p_before) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 794, className : "com.genome2d.node.GNode", methodName : "addChild"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_child == this) {
			var p_arg110 = "Can't add child to itself.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 795, className : "com.genome2d.node.GNode", methodName : "addChild"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		if(p_child.g2d_parent != null) {
			p_child.g2d_parent.removeChild(p_child);
		}
		p_child.g2d_parent = this;
		if(this.g2d_firstChild == null) {
			this.g2d_firstChild = p_child;
			this.g2d_lastChild = p_child;
		} else if(p_before == null) {
			this.g2d_lastChild.g2d_next = p_child;
			p_child.g2d_previous = this.g2d_lastChild;
			this.g2d_lastChild = p_child;
		} else {
			if(p_before != this.g2d_firstChild) {
				p_before.g2d_previous.g2d_next = p_child;
			} else {
				this.g2d_firstChild = p_child;
			}
			p_child.g2d_previous = p_before.g2d_previous;
			p_child.g2d_next = p_before;
			p_before.g2d_previous = p_child;
		}
		this.g2d_childCount++;
		if(this.g2d_childCount == 1 && (this.g2d_localScaleX != this.g2d_localScaleY && this.g2d_localRotation != 0)) {
			var _g = this;
			var p_value = _g.g2d_localUseMatrix + 1;
			if(_g.g2d_parent != null) {
				var _g1 = _g.g2d_parent;
				var p_value1 = _g1.g2d_localUseMatrix + (p_value - _g.g2d_localUseMatrix);
				if(_g1.g2d_parent != null) {
					var _g2 = _g1.g2d_parent;
					_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value1 - _g1.g2d_localUseMatrix));
				}
				_g1.g2d_localUseMatrix = p_value1;
			}
			_g.g2d_localUseMatrix = p_value;
		}
		if(this.isOnStage()) {
			if(p_child.g2d_onAddedToStage != null) {
				p_child.g2d_onAddedToStage.dispatch();
			}
			com_genome2d_context_stats_GStats.nodeCount++;
			var child = p_child.g2d_firstChild;
			while(child != null) {
				var next = child.g2d_next;
				if(child.g2d_onAddedToStage != null) {
					child.g2d_onAddedToStage.dispatch();
				}
				com_genome2d_context_stats_GStats.nodeCount++;
				var child1 = child.g2d_firstChild;
				while(child1 != null) {
					var next1 = child1.g2d_next;
					child1.addedToStage();
					child1 = next1;
				}
				child = next;
			}
		}
		return p_child;
	}
	,addChildAt: function(p_child,p_index) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 829, className : "com.genome2d.node.GNode", methodName : "addChildAt"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_child == this) {
			var p_arg110 = "Can't add child to itself.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 830, className : "com.genome2d.node.GNode", methodName : "addChildAt"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		if(p_child.g2d_parent != null) {
			p_child.g2d_parent.removeChild(p_child);
		}
		var i = 0;
		var after = this.g2d_firstChild;
		while(i < p_index && after != null) {
			after = after.g2d_next;
			++i;
		}
		return this.addChild(p_child,after == null ? null : after);
	}
	,getChildAt: function(p_index) {
		if(p_index >= this.g2d_childCount) {
			var p_arg1 = "Index out of bounds.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 843, className : "com.genome2d.node.GNode", methodName : "getChildAt"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var child = this.g2d_firstChild;
		var _g = 0;
		var _g1 = p_index;
		while(_g < _g1) {
			var i = _g++;
			child = child.g2d_next;
		}
		return child;
	}
	,getChildByName: function(p_name) {
		var child = this.g2d_firstChild;
		while(child != null) {
			if(child.name == p_name) {
				return child;
			}
			child = child.g2d_next;
		}
		return child;
	}
	,getChildIndex: function(p_child) {
		if(p_child.g2d_parent != this) {
			return -1;
		}
		var child = this.g2d_firstChild;
		var _g = 0;
		var _g1 = this.g2d_childCount;
		while(_g < _g1) {
			var i = _g++;
			if(child == p_child) {
				return i;
			}
			child = child.g2d_next;
		}
		return -1;
	}
	,setChildIndex: function(p_child,p_index) {
		if(p_child.g2d_parent != this) {
			var p_arg1 = "Not a child of this node.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 871, className : "com.genome2d.node.GNode", methodName : "setChildIndex"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_index >= this.g2d_childCount) {
			var p_arg110 = "Index out of bounds.";
			var p_arg21 = null;
			var p_arg31 = null;
			var p_arg41 = null;
			var p_arg51 = null;
			var p_arg61 = null;
			var p_arg71 = null;
			var p_arg81 = null;
			var p_arg91 = null;
			var p_arg101 = null;
			var p_arg111 = null;
			var p_arg121 = null;
			var p_arg131 = null;
			var p_arg141 = null;
			var p_arg151 = null;
			var p_arg161 = null;
			var p_arg171 = null;
			var p_arg181 = null;
			var p_arg191 = null;
			var p_arg201 = null;
			var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 872, className : "com.genome2d.node.GNode", methodName : "setChildIndex"};
			var args1 = [];
			if(p_arg110 != null) {
				args1.push(p_arg110);
			}
			if(p_arg21 != null) {
				args1.push(p_arg21);
			}
			if(p_arg31 != null) {
				args1.push(p_arg31);
			}
			if(p_arg41 != null) {
				args1.push(p_arg41);
			}
			if(p_arg51 != null) {
				args1.push(p_arg51);
			}
			if(p_arg61 != null) {
				args1.push(p_arg61);
			}
			if(p_arg71 != null) {
				args1.push(p_arg71);
			}
			if(p_arg81 != null) {
				args1.push(p_arg81);
			}
			if(p_arg91 != null) {
				args1.push(p_arg91);
			}
			if(p_arg101 != null) {
				args1.push(p_arg101);
			}
			if(p_arg111 != null) {
				args1.push(p_arg111);
			}
			if(p_arg121 != null) {
				args1.push(p_arg121);
			}
			if(p_arg131 != null) {
				args1.push(p_arg131);
			}
			if(p_arg141 != null) {
				args1.push(p_arg141);
			}
			if(p_arg151 != null) {
				args1.push(p_arg151);
			}
			if(p_arg161 != null) {
				args1.push(p_arg161);
			}
			if(p_arg171 != null) {
				args1.push(p_arg171);
			}
			if(p_arg181 != null) {
				args1.push(p_arg181);
			}
			if(p_arg191 != null) {
				args1.push(p_arg191);
			}
			if(p_arg201 != null) {
				args1.push(p_arg201);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
			}
			var msg1 = "ERROR: ";
			if(pos1 != null) {
				msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
			}
			if(args1.length > 0) {
				msg1 += args1.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg1;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg1);
			}
			throw new js__$Boot_HaxeError(msg1);
		}
		var index = 0;
		var child = this.g2d_firstChild;
		while(child != null && index < p_index) {
			child = child.g2d_next;
			++index;
		}
		if(index == p_index && child != p_child) {
			if(p_child != this.g2d_lastChild) {
				p_child.g2d_next.g2d_previous = p_child.g2d_previous;
			} else {
				this.g2d_lastChild = p_child.g2d_previous;
			}
			if(p_child != this.g2d_firstChild) {
				p_child.g2d_previous.g2d_next = p_child.g2d_next;
			} else {
				this.g2d_firstChild = p_child.g2d_next;
			}
			if(child != this.g2d_firstChild) {
				child.g2d_previous.g2d_next = p_child;
			} else {
				this.g2d_firstChild = p_child;
			}
			p_child.g2d_previous = child.g2d_previous;
			p_child.g2d_next = child;
			child.g2d_previous = p_child;
		}
	}
	,swapChildrenAt: function(p_index1,p_index2) {
		this.swapChildren(this.getChildAt(p_index1),this.getChildAt(p_index2));
	}
	,swapChildren: function(p_child1,p_child2) {
		if(p_child1.g2d_parent != this || p_child2.g2d_parent != this) {
			return;
		}
		var temp = p_child1.g2d_next;
		if(p_child2.g2d_next == p_child1) {
			p_child1.g2d_next = p_child2;
		} else {
			p_child1.g2d_next = p_child2.g2d_next;
			if(p_child1.g2d_next != null) {
				p_child1.g2d_next.g2d_previous = p_child1;
			}
		}
		if(temp == p_child2) {
			p_child2.g2d_next = p_child1;
		} else {
			p_child2.g2d_next = temp;
			if(p_child2.g2d_next != null) {
				p_child2.g2d_next.g2d_previous = p_child2;
			}
		}
		temp = p_child1.g2d_previous;
		if(p_child2.g2d_previous == p_child1) {
			p_child1.g2d_previous = p_child2;
		} else {
			p_child1.g2d_previous = p_child2.g2d_previous;
			if(p_child1.g2d_previous != null) {
				p_child1.g2d_previous.g2d_next = p_child1;
			}
		}
		if(temp == p_child2) {
			p_child2.g2d_previous = p_child1;
		} else {
			p_child2.g2d_previous = temp;
			if(p_child2.g2d_previous != null) {
				p_child2.g2d_previous.g2d_next = p_child2;
			}
		}
		if(p_child1 == this.g2d_firstChild) {
			this.g2d_firstChild = p_child2;
		} else if(p_child2 == this.g2d_firstChild) {
			this.g2d_firstChild = p_child1;
		}
		if(p_child1 == this.g2d_lastChild) {
			this.g2d_lastChild = p_child2;
		} else if(p_child2 == this.g2d_lastChild) {
			this.g2d_lastChild = p_child1;
		}
	}
	,putChildToFront: function(p_child) {
		if(p_child.g2d_parent != this || p_child == this.g2d_lastChild) {
			return;
		}
		if(p_child.g2d_next != null) {
			p_child.g2d_next.g2d_previous = p_child.g2d_previous;
		}
		if(p_child.g2d_previous != null) {
			p_child.g2d_previous.g2d_next = p_child.g2d_next;
		}
		if(p_child == this.g2d_firstChild) {
			this.g2d_firstChild = this.g2d_firstChild.g2d_next;
		}
		if(this.g2d_lastChild != null) {
			this.g2d_lastChild.g2d_next = p_child;
		}
		p_child.g2d_previous = this.g2d_lastChild;
		p_child.g2d_next = null;
		this.g2d_lastChild = p_child;
	}
	,putChildToBack: function(p_child) {
		if(p_child.g2d_parent != this || p_child == this.g2d_firstChild) {
			return;
		}
		if(p_child.g2d_next != null) {
			p_child.g2d_next.g2d_previous = p_child.g2d_previous;
		}
		if(p_child.g2d_previous != null) {
			p_child.g2d_previous.g2d_next = p_child.g2d_next;
		}
		if(p_child == this.g2d_lastChild) {
			this.g2d_lastChild = this.g2d_lastChild.g2d_previous;
		}
		if(this.g2d_firstChild != null) {
			this.g2d_firstChild.g2d_previous = p_child;
		}
		p_child.g2d_previous = null;
		p_child.g2d_next = this.g2d_firstChild;
		this.g2d_firstChild = p_child;
	}
	,removeChild: function(p_child) {
		if(this.g2d_disposed) {
			var p_arg1 = "Node already disposed.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 977, className : "com.genome2d.node.GNode", methodName : "removeChild"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		if(p_child.g2d_parent != this) {
			return null;
		}
		if(p_child.g2d_previous != null) {
			p_child.g2d_previous.g2d_next = p_child.g2d_next;
		} else {
			this.g2d_firstChild = this.g2d_firstChild.g2d_next;
		}
		if(p_child.g2d_next != null) {
			p_child.g2d_next.g2d_previous = p_child.g2d_previous;
		} else {
			this.g2d_lastChild = this.g2d_lastChild.g2d_previous;
		}
		p_child.g2d_next = p_child.g2d_previous = p_child.g2d_parent = null;
		this.g2d_childCount--;
		if(this.g2d_childCount == 0 && (this.g2d_localScaleX != this.g2d_localScaleY && this.g2d_localRotation != 0)) {
			var _g = this;
			var p_value = _g.g2d_localUseMatrix - 1;
			if(_g.g2d_parent != null) {
				var _g1 = _g.g2d_parent;
				var p_value1 = _g1.g2d_localUseMatrix + (p_value - _g.g2d_localUseMatrix);
				if(_g1.g2d_parent != null) {
					var _g2 = _g1.g2d_parent;
					_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value1 - _g1.g2d_localUseMatrix));
				}
				_g1.g2d_localUseMatrix = p_value1;
			}
			_g.g2d_localUseMatrix = p_value;
		}
		if(this.isOnStage()) {
			if(p_child.g2d_onRemovedFromStage != null) {
				p_child.g2d_onRemovedFromStage.dispatch();
			}
			com_genome2d_context_stats_GStats.nodeCount--;
			var child = p_child.g2d_firstChild;
			while(child != null) {
				var next = child.g2d_next;
				if(child.g2d_onRemovedFromStage != null) {
					child.g2d_onRemovedFromStage.dispatch();
				}
				com_genome2d_context_stats_GStats.nodeCount--;
				var child1 = child.g2d_firstChild;
				while(child1 != null) {
					var next1 = child1.g2d_next;
					child1.removedFromStage();
					child1 = next1;
				}
				child = next;
			}
		}
		return p_child;
	}
	,removeChildAt: function(p_index) {
		if(p_index >= this.g2d_childCount) {
			var p_arg1 = "Index out of bounds.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/node/GNode.hx", lineNumber : 1004, className : "com.genome2d.node.GNode", methodName : "removeChildAt"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var index = 0;
		var child = this.g2d_firstChild;
		while(child != null && index < p_index) {
			child = child.g2d_next;
			++index;
		}
		return this.removeChild(child);
	}
	,disposeChildren: function() {
		while(this.g2d_firstChild != null) this.g2d_firstChild.dispose();
	}
	,callOnChild: function(p_function) {
		var child = this.g2d_firstChild;
		while(child != null) {
			var next = child.g2d_next;
			p_function(child);
			child = next;
		}
	}
	,addedToStage: function() {
		if(this.g2d_onAddedToStage != null) {
			this.g2d_onAddedToStage.dispatch();
		}
		com_genome2d_context_stats_GStats.nodeCount++;
		var child = this.g2d_firstChild;
		while(child != null) {
			var next = child.g2d_next;
			child.addedToStage();
			child = next;
		}
	}
	,removedFromStage: function() {
		if(this.g2d_onRemovedFromStage != null) {
			this.g2d_onRemovedFromStage.dispatch();
		}
		com_genome2d_context_stats_GStats.nodeCount--;
		var child = this.g2d_firstChild;
		while(child != null) {
			var next = child.g2d_next;
			child.removedFromStage();
			child = next;
		}
	}
	,isOnStage: function() {
		if(com_genome2d_node_GNode.g2d_core == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
		}
		if(this == com_genome2d_node_GNode.g2d_core.g2d_root) {
			return true;
		} else if(this.g2d_parent == null) {
			return false;
		} else {
			return this.g2d_parent.isOnStage();
		}
	}
	,getBounds: function(p_targetSpace,p_bounds) {
		if(p_targetSpace == null) {
			if(com_genome2d_node_GNode.g2d_core == null) {
				if(com_genome2d_Genome2D.g2d_instance == null) {
					com_genome2d_Genome2D.g2d_instantiable = true;
					new com_genome2d_Genome2D();
					com_genome2d_Genome2D.g2d_instantiable = false;
				}
				com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
			}
			p_targetSpace = com_genome2d_node_GNode.g2d_core.g2d_root;
		}
		if(p_bounds == null) {
			p_bounds = new com_genome2d_geom_GRectangle(0,0,0,0);
		}
		var found = false;
		var minX = 10000000;
		var maxX = -10000000;
		var minY = 10000000;
		var maxY = -10000000;
		var aabb = new com_genome2d_geom_GRectangle(0,0,0,0);
		if(this.g2d_defaultRenderable != null) {
			this.g2d_defaultRenderable.getBounds(aabb);
		} else if(this.g2d_renderable != null) {
			this.g2d_renderable.getBounds(aabb);
		}
		if(aabb.width != 0 && aabb.height != 0) {
			this.getTransformationMatrix(p_targetSpace,com_genome2d_node_GNode.g2d_cachedMatrix);
			var tx1 = com_genome2d_node_GNode.g2d_cachedMatrix.a * aabb.x + com_genome2d_node_GNode.g2d_cachedMatrix.c * aabb.y + com_genome2d_node_GNode.g2d_cachedMatrix.tx;
			var ty1 = com_genome2d_node_GNode.g2d_cachedMatrix.d * aabb.y + com_genome2d_node_GNode.g2d_cachedMatrix.b * aabb.x + com_genome2d_node_GNode.g2d_cachedMatrix.ty;
			var tx2 = com_genome2d_node_GNode.g2d_cachedMatrix.a * aabb.x + com_genome2d_node_GNode.g2d_cachedMatrix.c * aabb.get_bottom() + com_genome2d_node_GNode.g2d_cachedMatrix.tx;
			var ty2 = com_genome2d_node_GNode.g2d_cachedMatrix.d * aabb.get_bottom() + com_genome2d_node_GNode.g2d_cachedMatrix.b * aabb.x + com_genome2d_node_GNode.g2d_cachedMatrix.ty;
			var tx3 = com_genome2d_node_GNode.g2d_cachedMatrix.a * aabb.get_right() + com_genome2d_node_GNode.g2d_cachedMatrix.c * aabb.y + com_genome2d_node_GNode.g2d_cachedMatrix.tx;
			var ty3 = com_genome2d_node_GNode.g2d_cachedMatrix.d * aabb.y + com_genome2d_node_GNode.g2d_cachedMatrix.b * aabb.get_right() + com_genome2d_node_GNode.g2d_cachedMatrix.ty;
			var tx4 = com_genome2d_node_GNode.g2d_cachedMatrix.a * aabb.get_right() + com_genome2d_node_GNode.g2d_cachedMatrix.c * aabb.get_bottom() + com_genome2d_node_GNode.g2d_cachedMatrix.tx;
			var ty4 = com_genome2d_node_GNode.g2d_cachedMatrix.d * aabb.get_bottom() + com_genome2d_node_GNode.g2d_cachedMatrix.b * aabb.get_right() + com_genome2d_node_GNode.g2d_cachedMatrix.ty;
			if(minX > tx1) {
				minX = tx1;
			}
			if(minX > tx2) {
				minX = tx2;
			}
			if(minX > tx3) {
				minX = tx3;
			}
			if(minX > tx4) {
				minX = tx4;
			}
			if(minY > ty1) {
				minY = ty1;
			}
			if(minY > ty2) {
				minY = ty2;
			}
			if(minY > ty3) {
				minY = ty3;
			}
			if(minY > ty4) {
				minY = ty4;
			}
			if(maxX < tx1) {
				maxX = tx1;
			}
			if(maxX < tx2) {
				maxX = tx2;
			}
			if(maxX < tx3) {
				maxX = tx3;
			}
			if(maxX < tx4) {
				maxX = tx4;
			}
			if(maxY < ty1) {
				maxY = ty1;
			}
			if(maxY < ty2) {
				maxY = ty2;
			}
			if(maxY < ty3) {
				maxY = ty3;
			}
			if(maxY < ty4) {
				maxY = ty4;
			}
			found = true;
		}
		var child = this.g2d_firstChild;
		while(child != null) {
			var next = child.g2d_next;
			child.getBounds(p_targetSpace,aabb);
			if(aabb.width == 0 || aabb.height == 0) {
				child = next;
				continue;
			}
			if(minX > aabb.x) {
				minX = aabb.x;
			}
			if(maxX < aabb.get_right()) {
				maxX = aabb.get_right();
			}
			if(minY > aabb.y) {
				minY = aabb.y;
			}
			if(maxY < aabb.get_bottom()) {
				maxY = aabb.get_bottom();
			}
			found = true;
			child = next;
		}
		if(found) {
			p_bounds.setTo(minX,minY,maxX - minX,maxY - minY);
		}
		return p_bounds;
	}
	,getCommonParent: function(p_node) {
		var current = this;
		com_genome2d_node_GNode.g2d_cachedArray = [];
		while(current != null) {
			com_genome2d_node_GNode.g2d_cachedArray.push(current);
			current = current.g2d_parent;
		}
		current = p_node;
		while(current != null && Lambda.indexOf(com_genome2d_node_GNode.g2d_cachedArray,current) == -1) current = current.g2d_parent;
		return current;
	}
	,sortChildren: function(p_nodeSorter,p_ascending) {
		if(p_ascending == null) {
			p_ascending = true;
		}
		if(this.g2d_firstChild == null) {
			return;
		}
		var insize = 1;
		var psize;
		var qsize;
		var nmerges;
		var p;
		var q;
		var e;
		while(true) {
			p = this.g2d_firstChild;
			this.g2d_firstChild = null;
			this.g2d_lastChild = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				var _g = 0;
				var _g1 = insize;
				while(_g < _g1) {
					var i = _g++;
					++psize;
					q = q.g2d_next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.g2d_next;
						--qsize;
					} else if(qsize == 0 || q == null) {
						e = p;
						p = p.g2d_next;
						--psize;
					} else if(p_ascending) {
						if(p_nodeSorter.getSortValue(p) >= p_nodeSorter.getSortValue(q)) {
							e = p;
							p = p.g2d_next;
							--psize;
						} else {
							e = q;
							q = q.g2d_next;
							--qsize;
						}
					} else if(p_nodeSorter.getSortValue(p) <= p_nodeSorter.getSortValue(q)) {
						e = p;
						p = p.g2d_next;
						--psize;
					} else {
						e = q;
						q = q.g2d_next;
						--qsize;
					}
					if(this.g2d_lastChild != null) {
						this.g2d_lastChild.g2d_next = e;
					} else {
						this.g2d_firstChild = e;
					}
					e.g2d_previous = this.g2d_lastChild;
					this.g2d_lastChild = e;
				}
				p = q;
			}
			this.g2d_lastChild.g2d_next = null;
			if(nmerges <= 1) {
				return;
			}
			insize *= 2;
		}
	}
	,sortChildrenOnY: function(p_ascending) {
		if(p_ascending == null) {
			p_ascending = true;
		}
		if(this.g2d_firstChild == null) {
			return;
		}
		var insize = 1;
		var psize;
		var qsize;
		var nmerges;
		var p;
		var q;
		var e;
		while(true) {
			p = this.g2d_firstChild;
			this.g2d_firstChild = null;
			this.g2d_lastChild = null;
			nmerges = 0;
			while(p != null) {
				++nmerges;
				q = p;
				psize = 0;
				var _g = 0;
				var _g1 = insize;
				while(_g < _g1) {
					var i = _g++;
					++psize;
					q = q.g2d_next;
					if(q == null) {
						break;
					}
				}
				qsize = insize;
				while(psize > 0 || qsize > 0 && q != null) {
					if(psize == 0) {
						e = q;
						q = q.g2d_next;
						--qsize;
					} else if(qsize == 0 || q == null) {
						e = p;
						p = p.g2d_next;
						--psize;
					} else if(p_ascending) {
						if(p.g2d_localY >= q.g2d_localY) {
							e = p;
							p = p.g2d_next;
							--psize;
						} else {
							e = q;
							q = q.g2d_next;
							--qsize;
						}
					} else if(p.g2d_localY <= q.g2d_localY) {
						e = p;
						p = p.g2d_next;
						--psize;
					} else {
						e = q;
						q = q.g2d_next;
						--qsize;
					}
					if(this.g2d_lastChild != null) {
						this.g2d_lastChild.g2d_next = e;
					} else {
						this.g2d_firstChild = e;
					}
					e.g2d_previous = this.g2d_lastChild;
					this.g2d_lastChild = e;
				}
				p = q;
			}
			this.g2d_lastChild.g2d_next = null;
			if(nmerges <= 1) {
				return;
			}
			insize *= 2;
		}
	}
	,toString: function() {
		return "[GNode " + this.name + "]";
	}
	,g2d_matrixDirty: null
	,g2d_transformDirty: null
	,g2d_colorDirty: null
	,useWorldSpace: null
	,useWorldColor: null
	,visible: null
	,g2d_worldX: null
	,g2d_localX: null
	,get_x: function() {
		return this.g2d_localX;
	}
	,set_x: function(p_value) {
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		return this.g2d_localX = this.g2d_worldX = p_value;
	}
	,g2d_worldY: null
	,g2d_localY: null
	,get_y: function() {
		return this.g2d_localY;
	}
	,set_y: function(p_value) {
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		return this.g2d_localY = this.g2d_worldY = p_value;
	}
	,hasUniformRotation: function() {
		if(this.g2d_localScaleX != this.g2d_localScaleY) {
			return this.g2d_localRotation != 0;
		} else {
			return false;
		}
	}
	,g2d_localUseMatrix: null
	,get_g2d_useMatrix: function() {
		return this.g2d_localUseMatrix;
	}
	,set_g2d_useMatrix: function(p_value) {
		if(this.g2d_parent != null) {
			var _g = this.g2d_parent;
			_g.set_g2d_useMatrix(_g.g2d_localUseMatrix + (p_value - this.g2d_localUseMatrix));
		}
		this.g2d_localUseMatrix = p_value;
		return this.g2d_localUseMatrix;
	}
	,g2d_worldScaleX: null
	,g2d_localScaleX: null
	,get_scaleX: function() {
		return this.g2d_localScaleX;
	}
	,set_scaleX: function(p_value) {
		if(this.g2d_localScaleX == this.g2d_localScaleY && p_value != this.g2d_localScaleY && this.g2d_localRotation != 0 && this.g2d_childCount > 0) {
			var _g = this;
			var p_value1 = _g.g2d_localUseMatrix + 1;
			if(_g.g2d_parent != null) {
				var _g1 = _g.g2d_parent;
				var p_value2 = _g1.g2d_localUseMatrix + (p_value1 - _g.g2d_localUseMatrix);
				if(_g1.g2d_parent != null) {
					var _g2 = _g1.g2d_parent;
					_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value2 - _g1.g2d_localUseMatrix));
				}
				_g1.g2d_localUseMatrix = p_value2;
			}
			_g.g2d_localUseMatrix = p_value1;
		}
		if(this.g2d_localScaleX == this.g2d_localScaleY && p_value == this.g2d_localScaleY && this.g2d_localRotation != 0 && this.g2d_childCount > 0) {
			var _g3 = this;
			var p_value3 = _g3.g2d_localUseMatrix - 1;
			if(_g3.g2d_parent != null) {
				var _g4 = _g3.g2d_parent;
				var p_value4 = _g4.g2d_localUseMatrix + (p_value3 - _g3.g2d_localUseMatrix);
				if(_g4.g2d_parent != null) {
					var _g5 = _g4.g2d_parent;
					_g5.set_g2d_useMatrix(_g5.g2d_localUseMatrix + (p_value4 - _g4.g2d_localUseMatrix));
				}
				_g4.g2d_localUseMatrix = p_value4;
			}
			_g3.g2d_localUseMatrix = p_value3;
		}
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		return this.g2d_localScaleX = this.g2d_worldScaleX = p_value;
	}
	,g2d_worldScaleY: null
	,g2d_localScaleY: null
	,get_scaleY: function() {
		return this.g2d_localScaleY;
	}
	,set_scaleY: function(p_value) {
		if(this.g2d_localScaleX == this.g2d_localScaleY && p_value != this.g2d_localScaleX && this.g2d_localRotation != 0 && this.g2d_childCount > 0) {
			var _g = this;
			var p_value1 = _g.g2d_localUseMatrix + 1;
			if(_g.g2d_parent != null) {
				var _g1 = _g.g2d_parent;
				var p_value2 = _g1.g2d_localUseMatrix + (p_value1 - _g.g2d_localUseMatrix);
				if(_g1.g2d_parent != null) {
					var _g2 = _g1.g2d_parent;
					_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value2 - _g1.g2d_localUseMatrix));
				}
				_g1.g2d_localUseMatrix = p_value2;
			}
			_g.g2d_localUseMatrix = p_value1;
		}
		if(this.g2d_localScaleX == this.g2d_localScaleY && p_value == this.g2d_localScaleX && this.g2d_localRotation != 0 && this.g2d_childCount > 0) {
			var _g3 = this;
			var p_value3 = _g3.g2d_localUseMatrix - 1;
			if(_g3.g2d_parent != null) {
				var _g4 = _g3.g2d_parent;
				var p_value4 = _g4.g2d_localUseMatrix + (p_value3 - _g3.g2d_localUseMatrix);
				if(_g4.g2d_parent != null) {
					var _g5 = _g4.g2d_parent;
					_g5.set_g2d_useMatrix(_g5.g2d_localUseMatrix + (p_value4 - _g4.g2d_localUseMatrix));
				}
				_g4.g2d_localUseMatrix = p_value4;
			}
			_g3.g2d_localUseMatrix = p_value3;
		}
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		return this.g2d_localScaleY = this.g2d_worldScaleY = p_value;
	}
	,g2d_worldRotation: null
	,g2d_localRotation: null
	,get_rotation: function() {
		return this.g2d_localRotation;
	}
	,set_rotation: function(p_value) {
		if(this.g2d_localRotation == 0 && p_value != 0 && this.g2d_localScaleX != this.g2d_localScaleY && this.g2d_childCount > 0) {
			var _g = this;
			var p_value1 = _g.g2d_localUseMatrix + 1;
			if(_g.g2d_parent != null) {
				var _g1 = _g.g2d_parent;
				var p_value2 = _g1.g2d_localUseMatrix + (p_value1 - _g.g2d_localUseMatrix);
				if(_g1.g2d_parent != null) {
					var _g2 = _g1.g2d_parent;
					_g2.set_g2d_useMatrix(_g2.g2d_localUseMatrix + (p_value2 - _g1.g2d_localUseMatrix));
				}
				_g1.g2d_localUseMatrix = p_value2;
			}
			_g.g2d_localUseMatrix = p_value1;
		}
		if(this.g2d_localRotation != 0 && p_value == 0 && this.g2d_localScaleX != this.g2d_localScaleY && this.g2d_childCount > 0) {
			var _g3 = this;
			var p_value3 = _g3.g2d_localUseMatrix - 1;
			if(_g3.g2d_parent != null) {
				var _g4 = _g3.g2d_parent;
				var p_value4 = _g4.g2d_localUseMatrix + (p_value3 - _g3.g2d_localUseMatrix);
				if(_g4.g2d_parent != null) {
					var _g5 = _g4.g2d_parent;
					_g5.set_g2d_useMatrix(_g5.g2d_localUseMatrix + (p_value4 - _g4.g2d_localUseMatrix));
				}
				_g4.g2d_localUseMatrix = p_value4;
			}
			_g3.g2d_localUseMatrix = p_value3;
		}
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		return this.g2d_localRotation = this.g2d_worldRotation = p_value;
	}
	,g2d_worldRed: null
	,g2d_localRed: null
	,get_red: function() {
		return this.g2d_localRed;
	}
	,set_red: function(p_value) {
		this.g2d_colorDirty = true;
		return this.g2d_localRed = this.g2d_worldRed = p_value;
	}
	,g2d_worldGreen: null
	,g2d_localGreen: null
	,get_green: function() {
		return this.g2d_localGreen;
	}
	,set_green: function(p_value) {
		this.g2d_colorDirty = true;
		return this.g2d_localGreen = this.g2d_worldGreen = p_value;
	}
	,g2d_worldBlue: null
	,g2d_localBlue: null
	,get_blue: function() {
		return this.g2d_localBlue;
	}
	,set_blue: function(p_value) {
		this.g2d_colorDirty = true;
		return this.g2d_localBlue = this.g2d_worldBlue = p_value;
	}
	,g2d_worldAlpha: null
	,g2d_localAlpha: null
	,get_alpha: function() {
		return this.g2d_localAlpha;
	}
	,set_alpha: function(p_value) {
		this.g2d_colorDirty = true;
		return this.g2d_localAlpha = this.g2d_worldAlpha = p_value;
	}
	,get_color: function() {
		var red = (this.g2d_localRed * 255 | 0) << 16;
		var green = (this.g2d_localGreen * 255 | 0) << 8;
		var blue = this.g2d_localBlue * 255 | 0;
		return red + green + blue;
	}
	,set_color: function(p_value) {
		this.g2d_colorDirty = true;
		this.g2d_localRed = this.g2d_worldRed = (p_value >> 16 & 255) / 255;
		this.g2d_colorDirty = true;
		this.g2d_localGreen = this.g2d_worldGreen = (p_value >> 8 & 255) / 255;
		this.g2d_colorDirty = true;
		this.g2d_localBlue = this.g2d_worldBlue = (p_value & 255) / 255;
		return p_value;
	}
	,g2d_matrix: null
	,get_matrix: function() {
		if(this.g2d_matrixDirty) {
			if(this.g2d_matrix == null) {
				this.g2d_matrix = new com_genome2d_geom_GMatrix();
			}
			if(this.g2d_localRotation == 0.0) {
				this.g2d_matrix.setTo(this.g2d_localScaleX,0.0,0.0,this.g2d_localScaleY,this.g2d_localX,this.g2d_localY);
			} else {
				var cos = Math.cos(this.g2d_localRotation);
				var sin = Math.sin(this.g2d_localRotation);
				var a = this.g2d_localScaleX * cos;
				var b = this.g2d_localScaleX * sin;
				var c = this.g2d_localScaleY * -sin;
				var d = this.g2d_localScaleY * cos;
				var tx = this.g2d_localX;
				var ty = this.g2d_localY;
				this.g2d_matrix.setTo(a,b,c,d,tx,ty);
			}
			this.g2d_matrixDirty = false;
		}
		return this.g2d_matrix;
	}
	,getTransformationMatrix: function(p_targetSpace,p_resultMatrix) {
		if(p_resultMatrix == null) {
			p_resultMatrix = new com_genome2d_geom_GMatrix();
		} else {
			p_resultMatrix.identity();
		}
		if(p_targetSpace == this.g2d_parent) {
			if(this.g2d_matrixDirty) {
				if(this.g2d_matrix == null) {
					this.g2d_matrix = new com_genome2d_geom_GMatrix();
				}
				if(this.g2d_localRotation == 0.0) {
					this.g2d_matrix.setTo(this.g2d_localScaleX,0.0,0.0,this.g2d_localScaleY,this.g2d_localX,this.g2d_localY);
				} else {
					var cos = Math.cos(this.g2d_localRotation);
					var sin = Math.sin(this.g2d_localRotation);
					var a = this.g2d_localScaleX * cos;
					var b = this.g2d_localScaleX * sin;
					var c = this.g2d_localScaleY * -sin;
					var d = this.g2d_localScaleY * cos;
					var tx = this.g2d_localX;
					var ty = this.g2d_localY;
					this.g2d_matrix.setTo(a,b,c,d,tx,ty);
				}
				this.g2d_matrixDirty = false;
			}
			p_resultMatrix.copyFrom(this.g2d_matrix);
		} else if(p_targetSpace != this) {
			var current = this;
			com_genome2d_node_GNode.g2d_cachedArray = [];
			while(current != null) {
				com_genome2d_node_GNode.g2d_cachedArray.push(current);
				current = current.g2d_parent;
			}
			current = p_targetSpace;
			while(current != null && Lambda.indexOf(com_genome2d_node_GNode.g2d_cachedArray,current) == -1) current = current.g2d_parent;
			var common = current;
			if(common != null) {
				var current1 = this;
				while(common != current1) {
					if(current1.g2d_matrixDirty) {
						if(current1.g2d_matrix == null) {
							current1.g2d_matrix = new com_genome2d_geom_GMatrix();
						}
						if(current1.g2d_localRotation == 0.0) {
							current1.g2d_matrix.setTo(current1.g2d_localScaleX,0.0,0.0,current1.g2d_localScaleY,current1.g2d_localX,current1.g2d_localY);
						} else {
							var cos1 = Math.cos(current1.g2d_localRotation);
							var sin1 = Math.sin(current1.g2d_localRotation);
							var a1 = current1.g2d_localScaleX * cos1;
							var b1 = current1.g2d_localScaleX * sin1;
							var c1 = current1.g2d_localScaleY * -sin1;
							var d1 = current1.g2d_localScaleY * cos1;
							var tx1 = current1.g2d_localX;
							var ty1 = current1.g2d_localY;
							current1.g2d_matrix.setTo(a1,b1,c1,d1,tx1,ty1);
						}
						current1.g2d_matrixDirty = false;
					}
					p_resultMatrix.concat(current1.g2d_matrix);
					current1 = current1.g2d_parent;
				}
				if(common != p_targetSpace) {
					com_genome2d_node_GNode.g2d_cachedTransformMatrix.identity();
					while(p_targetSpace != common) {
						var tmp = com_genome2d_node_GNode.g2d_cachedTransformMatrix;
						if(p_targetSpace.g2d_matrixDirty) {
							if(p_targetSpace.g2d_matrix == null) {
								p_targetSpace.g2d_matrix = new com_genome2d_geom_GMatrix();
							}
							if(p_targetSpace.g2d_localRotation == 0.0) {
								p_targetSpace.g2d_matrix.setTo(p_targetSpace.g2d_localScaleX,0.0,0.0,p_targetSpace.g2d_localScaleY,p_targetSpace.g2d_localX,p_targetSpace.g2d_localY);
							} else {
								var cos2 = Math.cos(p_targetSpace.g2d_localRotation);
								var sin2 = Math.sin(p_targetSpace.g2d_localRotation);
								var a2 = p_targetSpace.g2d_localScaleX * cos2;
								var b2 = p_targetSpace.g2d_localScaleX * sin2;
								var c2 = p_targetSpace.g2d_localScaleY * -sin2;
								var d2 = p_targetSpace.g2d_localScaleY * cos2;
								var tx2 = p_targetSpace.g2d_localX;
								var ty2 = p_targetSpace.g2d_localY;
								p_targetSpace.g2d_matrix.setTo(a2,b2,c2,d2,tx2,ty2);
							}
							p_targetSpace.g2d_matrixDirty = false;
						}
						tmp.concat(p_targetSpace.g2d_matrix);
						p_targetSpace = p_targetSpace.g2d_parent;
					}
					com_genome2d_node_GNode.g2d_cachedTransformMatrix.invert();
					p_resultMatrix.concat(com_genome2d_node_GNode.g2d_cachedTransformMatrix);
				}
			}
		}
		return p_resultMatrix;
	}
	,localToWorld: function(p_local,p_result) {
		this.getTransformationMatrix(com_genome2d_node_GNode.g2d_core.g2d_root,com_genome2d_node_GNode.g2d_cachedTransformMatrix);
		if(p_result == null) {
			p_result = new com_genome2d_geom_GPoint(0,0);
		}
		p_result.x = com_genome2d_node_GNode.g2d_cachedTransformMatrix.a * p_local.x + com_genome2d_node_GNode.g2d_cachedTransformMatrix.c * p_local.y + com_genome2d_node_GNode.g2d_cachedTransformMatrix.tx;
		p_result.y = com_genome2d_node_GNode.g2d_cachedTransformMatrix.d * p_local.y + com_genome2d_node_GNode.g2d_cachedTransformMatrix.b * p_local.x + com_genome2d_node_GNode.g2d_cachedTransformMatrix.ty;
		return p_result;
	}
	,worldToLocal: function(p_world,p_result) {
		this.getTransformationMatrix(com_genome2d_node_GNode.g2d_core.g2d_root,com_genome2d_node_GNode.g2d_cachedTransformMatrix);
		com_genome2d_node_GNode.g2d_cachedTransformMatrix.invert();
		if(p_result == null) {
			p_result = new com_genome2d_geom_GPoint(0,0);
		}
		p_result.x = com_genome2d_node_GNode.g2d_cachedTransformMatrix.a * p_world.x + com_genome2d_node_GNode.g2d_cachedTransformMatrix.c * p_world.y + com_genome2d_node_GNode.g2d_cachedTransformMatrix.tx;
		p_result.y = com_genome2d_node_GNode.g2d_cachedTransformMatrix.d * p_world.y + com_genome2d_node_GNode.g2d_cachedTransformMatrix.b * p_world.x + com_genome2d_node_GNode.g2d_cachedTransformMatrix.ty;
		return p_result;
	}
	,setPosition: function(p_x,p_y) {
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		this.g2d_localX = this.g2d_worldX = p_x;
		this.g2d_localY = this.g2d_worldY = p_y;
	}
	,setScale: function(p_scaleX,p_scaleY) {
		this.g2d_transformDirty = this.g2d_matrixDirty = true;
		this.g2d_localScaleX = this.g2d_worldScaleX = p_scaleX;
		this.g2d_localScaleY = this.g2d_worldScaleY = p_scaleY;
	}
	,invalidateTransform: function(p_invalidateParentTransform) {
		if(p_invalidateParentTransform && !this.useWorldSpace) {
			if(this.g2d_parent.g2d_worldRotation != 0) {
				var cos = Math.cos(this.g2d_parent.g2d_worldRotation);
				var sin = Math.sin(this.g2d_parent.g2d_worldRotation);
				this.g2d_worldX = (this.g2d_localX * cos - this.g2d_localY * sin) * this.g2d_parent.g2d_worldScaleX + this.g2d_parent.g2d_worldX;
				this.g2d_worldY = (this.g2d_localY * cos + this.g2d_localX * sin) * this.g2d_parent.g2d_worldScaleY + this.g2d_parent.g2d_worldY;
			} else {
				this.g2d_worldX = this.g2d_localX * this.g2d_parent.g2d_worldScaleX + this.g2d_parent.g2d_worldX;
				this.g2d_worldY = this.g2d_localY * this.g2d_parent.g2d_worldScaleY + this.g2d_parent.g2d_worldY;
			}
			this.g2d_worldScaleX = this.g2d_localScaleX * this.g2d_parent.g2d_worldScaleX;
			this.g2d_worldScaleY = this.g2d_localScaleY * this.g2d_parent.g2d_worldScaleY;
			this.g2d_worldRotation = this.g2d_localRotation + this.g2d_parent.g2d_worldRotation;
			this.g2d_transformDirty = false;
		}
	}
	,invalidateColor: function(p_invalidateParentColor) {
		if(p_invalidateParentColor && !this.useWorldColor) {
			this.g2d_worldRed = this.g2d_localRed * this.g2d_parent.g2d_worldRed;
			this.g2d_worldGreen = this.g2d_localGreen * this.g2d_parent.g2d_worldGreen;
			this.g2d_worldBlue = this.g2d_localBlue * this.g2d_parent.g2d_worldBlue;
			this.g2d_worldAlpha = this.g2d_localAlpha * this.g2d_parent.g2d_worldAlpha;
			this.g2d_colorDirty = false;
		}
	}
	,render: function(p_parentTransformUpdate,p_parentColorUpdate,p_camera,p_renderAsMask,p_useMatrix) {
		if(this.g2d_active) {
			var doInvalidateTransform = p_parentTransformUpdate || this.g2d_transformDirty;
			var doInvalidateColor = p_parentColorUpdate || this.g2d_colorDirty;
			if(doInvalidateTransform) {
				if(p_parentTransformUpdate && !this.useWorldSpace) {
					if(this.g2d_parent.g2d_worldRotation != 0) {
						var cos = Math.cos(this.g2d_parent.g2d_worldRotation);
						var sin = Math.sin(this.g2d_parent.g2d_worldRotation);
						this.g2d_worldX = (this.g2d_localX * cos - this.g2d_localY * sin) * this.g2d_parent.g2d_worldScaleX + this.g2d_parent.g2d_worldX;
						this.g2d_worldY = (this.g2d_localY * cos + this.g2d_localX * sin) * this.g2d_parent.g2d_worldScaleY + this.g2d_parent.g2d_worldY;
					} else {
						this.g2d_worldX = this.g2d_localX * this.g2d_parent.g2d_worldScaleX + this.g2d_parent.g2d_worldX;
						this.g2d_worldY = this.g2d_localY * this.g2d_parent.g2d_worldScaleY + this.g2d_parent.g2d_worldY;
					}
					this.g2d_worldScaleX = this.g2d_localScaleX * this.g2d_parent.g2d_worldScaleX;
					this.g2d_worldScaleY = this.g2d_localScaleY * this.g2d_parent.g2d_worldScaleY;
					this.g2d_worldRotation = this.g2d_localRotation + this.g2d_parent.g2d_worldRotation;
					this.g2d_transformDirty = false;
				}
			}
			if(doInvalidateColor) {
				if(p_parentColorUpdate && !this.useWorldColor) {
					this.g2d_worldRed = this.g2d_localRed * this.g2d_parent.g2d_worldRed;
					this.g2d_worldGreen = this.g2d_localGreen * this.g2d_parent.g2d_worldGreen;
					this.g2d_worldBlue = this.g2d_localBlue * this.g2d_parent.g2d_worldBlue;
					this.g2d_worldAlpha = this.g2d_localAlpha * this.g2d_parent.g2d_worldAlpha;
					this.g2d_colorDirty = false;
				}
			}
			if(this.g2d_active && this.visible && ((this.cameraGroup & p_camera.group) != 0 || this.cameraGroup == 0) && (this.g2d_usedAsMask == 0 || p_renderAsMask)) {
				var hasMask = false;
				var previousMask = null;
				if(this.maskRect != null && (this.maskRect != this.g2d_parent.maskRect || this.g2d_parent.maskRect != null && (this.maskRect.width != this.g2d_parent.maskRect.width || this.maskRect.height != this.g2d_parent.maskRect.height && this.maskRect.x != this.g2d_parent.maskRect.x || this.maskRect.y != this.g2d_parent.maskRect.y))) {
					hasMask = true;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					previousMask = com_genome2d_node_GNode.g2d_core.g2d_context.getMaskRect();
					var intersection = previousMask == null ? this.maskRect : this.maskRect.intersection(previousMask);
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.setMaskRect(intersection);
				}
				if(!p_renderAsMask && this.g2d_mask != null) {
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.renderToStencil(com_genome2d_node_GNode.g2d_activeMasks.length);
					this.g2d_mask.render(true,false,p_camera,true,false);
					com_genome2d_node_GNode.g2d_activeMasks.push(this.g2d_mask);
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.renderToColor(com_genome2d_node_GNode.g2d_activeMasks.length);
				}
				var useMatrix = p_useMatrix || this.g2d_localUseMatrix > 0;
				if(useMatrix) {
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var tmp = com_genome2d_node_GNode.g2d_core.g2d_renderMatrixArray.length;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					if(tmp <= com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex) {
						if(com_genome2d_node_GNode.g2d_core == null) {
							if(com_genome2d_Genome2D.g2d_instance == null) {
								com_genome2d_Genome2D.g2d_instantiable = true;
								new com_genome2d_Genome2D();
								com_genome2d_Genome2D.g2d_instantiable = false;
							}
							com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
						}
						var tmp1 = com_genome2d_node_GNode.g2d_core.g2d_renderMatrixArray;
						if(com_genome2d_node_GNode.g2d_core == null) {
							if(com_genome2d_Genome2D.g2d_instance == null) {
								com_genome2d_Genome2D.g2d_instantiable = true;
								new com_genome2d_Genome2D();
								com_genome2d_Genome2D.g2d_instantiable = false;
							}
							com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
						}
						tmp1[com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex] = new com_genome2d_geom_GMatrix();
					}
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var tmp2 = com_genome2d_node_GNode.g2d_core.g2d_renderMatrixArray;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var tmp3 = tmp2[com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex];
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					tmp3.copyFrom(com_genome2d_node_GNode.g2d_core.g2d_renderMatrix);
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var p_matrix = com_genome2d_node_GNode.g2d_core.g2d_renderMatrix;
					if(this.g2d_matrixDirty) {
						if(this.g2d_matrix == null) {
							this.g2d_matrix = new com_genome2d_geom_GMatrix();
						}
						if(this.g2d_localRotation == 0.0) {
							this.g2d_matrix.setTo(this.g2d_localScaleX,0.0,0.0,this.g2d_localScaleY,this.g2d_localX,this.g2d_localY);
						} else {
							var cos1 = Math.cos(this.g2d_localRotation);
							var sin1 = Math.sin(this.g2d_localRotation);
							var a = this.g2d_localScaleX * cos1;
							var b = this.g2d_localScaleX * sin1;
							var c = this.g2d_localScaleY * -sin1;
							var d = this.g2d_localScaleY * cos1;
							var tx = this.g2d_localX;
							var ty = this.g2d_localY;
							this.g2d_matrix.setTo(a,b,c,d,tx,ty);
						}
						this.g2d_matrixDirty = false;
					}
					var p_by = this.g2d_matrix;
					p_matrix.setTo(p_matrix.a * p_by.a + p_matrix.c * p_by.b,p_matrix.b * p_by.a + p_matrix.d * p_by.b,p_matrix.a * p_by.c + p_matrix.c * p_by.d,p_matrix.b * p_by.c + p_matrix.d * p_by.d,p_matrix.tx + p_matrix.a * p_by.tx + p_matrix.c * p_by.ty,p_matrix.ty + p_matrix.b * p_by.tx + p_matrix.d * p_by.ty);
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex++;
				}
				if(this.g2d_defaultRenderable != null) {
					var _this = this.g2d_defaultRenderable;
					if(_this.frameAnimation != null) {
						var _this1 = _this.frameAnimation;
						var _this2 = _this.g2d_node;
						if(com_genome2d_node_GNode.g2d_core == null) {
							if(com_genome2d_Genome2D.g2d_instance == null) {
								com_genome2d_Genome2D.g2d_instantiable = true;
								new com_genome2d_Genome2D();
								com_genome2d_Genome2D.g2d_instantiable = false;
							}
							com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
						}
						if(_this1.g2d_playing && _this1.g2d_frameCount > 1) {
							_this1.g2d_accumulatedTime += com_genome2d_node_GNode.g2d_core.g2d_currentFrameDeltaTime * _this1.timeDilation;
							if(_this1.g2d_accumulatedTime >= _this1.g2d_speed) {
								_this1.g2d_currentFrame += _this1.reversed ? -(_this1.g2d_accumulatedTime / _this1.g2d_speed | 0) : _this1.g2d_accumulatedTime / _this1.g2d_speed | 0;
								if(_this1.reversed && _this1.g2d_currentFrame < 0) {
									if(_this1.repeatable) {
										_this1.g2d_currentFrame = _this1.g2d_frameCount + _this1.g2d_currentFrame % _this1.g2d_frameCount;
									} else {
										_this1.g2d_currentFrame = 0;
										_this1.g2d_playing = false;
									}
								} else if(!_this1.reversed && _this1.g2d_currentFrame >= _this1.g2d_frameCount) {
									if(_this1.repeatable) {
										_this1.g2d_currentFrame %= _this1.g2d_frameCount;
									} else {
										_this1.g2d_currentFrame = _this1.g2d_frameCount - 1;
										_this1.g2d_playing = false;
									}
								}
								_this1.currentFrameTexture = _this1.g2d_frameTextures[_this1.g2d_currentFrame];
							}
							_this1.g2d_accumulatedTime %= _this1.g2d_speed;
						}
						_this.texture = _this.frameAnimation.currentFrameTexture;
					}
					if(_this.texture != null && (_this.texture.getSourceType() != com_genome2d_textures_GTextureSourceType.RENDER_TARGET || _this.texture.g2d_initializedRenderTarget)) {
						if(useMatrix && !_this.ignoreMatrix) {
							var _this3 = _this.g2d_node;
							if(com_genome2d_node_GNode.g2d_core == null) {
								if(com_genome2d_Genome2D.g2d_instance == null) {
									com_genome2d_Genome2D.g2d_instantiable = true;
									new com_genome2d_Genome2D();
									com_genome2d_Genome2D.g2d_instantiable = false;
								}
								com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
							}
							var matrix = com_genome2d_node_GNode.g2d_core.g2d_renderMatrix;
							var _this4 = _this.g2d_node;
							if(com_genome2d_node_GNode.g2d_core == null) {
								if(com_genome2d_Genome2D.g2d_instance == null) {
									com_genome2d_Genome2D.g2d_instantiable = true;
									new com_genome2d_Genome2D();
									com_genome2d_Genome2D.g2d_instantiable = false;
								}
								com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
							}
							com_genome2d_node_GNode.g2d_core.g2d_context.drawMatrix(_this.texture,_this.blendMode,matrix.a,matrix.b,matrix.c,matrix.d,matrix.tx,matrix.ty,_this.g2d_node.g2d_worldRed,_this.g2d_node.g2d_worldGreen,_this.g2d_node.g2d_worldBlue,_this.g2d_node.g2d_worldAlpha,_this.filter);
						} else {
							var _this5 = _this.g2d_node;
							if(com_genome2d_node_GNode.g2d_core == null) {
								if(com_genome2d_Genome2D.g2d_instance == null) {
									com_genome2d_Genome2D.g2d_instantiable = true;
									new com_genome2d_Genome2D();
									com_genome2d_Genome2D.g2d_instantiable = false;
								}
								com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
							}
							com_genome2d_node_GNode.g2d_core.g2d_context.draw(_this.texture,_this.blendMode,_this.g2d_node.g2d_worldX,_this.g2d_node.g2d_worldY,_this.g2d_node.g2d_worldScaleX,_this.g2d_node.g2d_worldScaleY,_this.g2d_node.g2d_worldRotation,_this.g2d_node.g2d_worldRed,_this.g2d_node.g2d_worldGreen,_this.g2d_node.g2d_worldBlue,_this.g2d_node.g2d_worldAlpha,_this.filter);
						}
					}
				} else if(this.g2d_renderable != null) {
					this.g2d_renderable.render(p_camera,useMatrix);
				}
				var child = this.g2d_firstChild;
				while(child != null) {
					var next = child.g2d_next;
					if(child.postProcess != null) {
						child.postProcess.renderNode(doInvalidateTransform,doInvalidateColor,p_camera,child);
					} else {
						child.render(doInvalidateTransform,doInvalidateColor,p_camera,p_renderAsMask,useMatrix);
					}
					child = next;
				}
				if(hasMask) {
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.setMaskRect(previousMask);
				}
				if(!p_renderAsMask && this.g2d_mask != null) {
					com_genome2d_node_GNode.g2d_activeMasks.pop();
					if(com_genome2d_node_GNode.g2d_activeMasks.length == 0) {
						if(com_genome2d_node_GNode.g2d_core == null) {
							if(com_genome2d_Genome2D.g2d_instance == null) {
								com_genome2d_Genome2D.g2d_instantiable = true;
								new com_genome2d_Genome2D();
								com_genome2d_Genome2D.g2d_instantiable = false;
							}
							com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
						}
						com_genome2d_node_GNode.g2d_core.g2d_context.clearStencil();
					}
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_context.renderToColor(com_genome2d_node_GNode.g2d_activeMasks.length);
				}
				if(useMatrix) {
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex--;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var tmp4 = com_genome2d_node_GNode.g2d_core.g2d_renderMatrix;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					var tmp5 = com_genome2d_node_GNode.g2d_core.g2d_renderMatrixArray;
					if(com_genome2d_node_GNode.g2d_core == null) {
						if(com_genome2d_Genome2D.g2d_instance == null) {
							com_genome2d_Genome2D.g2d_instantiable = true;
							new com_genome2d_Genome2D();
							com_genome2d_Genome2D.g2d_instantiable = false;
						}
						com_genome2d_node_GNode.g2d_core = com_genome2d_Genome2D.g2d_instance;
					}
					tmp4.copyFrom(tmp5[com_genome2d_node_GNode.g2d_core.g2d_renderMatrixIndex]);
				}
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"node");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"node");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,g2d_onMouseWheel: null
	,get_onMouseWheel: function() {
		if(this.g2d_onMouseWheel == null) {
			this.g2d_onMouseWheel = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseWheel;
	}
	,g2d_onDoubleMouseClick: null
	,get_onDoubleMouseClick: function() {
		if(this.g2d_onDoubleMouseClick == null) {
			this.g2d_onDoubleMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onDoubleMouseClick;
	}
	,g2d_onMouseDown: null
	,get_onMouseDown: function() {
		if(this.g2d_onMouseDown == null) {
			this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseDown;
	}
	,g2d_onMouseUp: null
	,get_onMouseUp: function() {
		if(this.g2d_onMouseUp == null) {
			this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseUp;
	}
	,g2d_onMouseMove: null
	,get_onMouseMove: function() {
		if(this.g2d_onMouseMove == null) {
			this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseMove;
	}
	,g2d_onMouseOver: null
	,get_onMouseOver: function() {
		if(this.g2d_onMouseOver == null) {
			this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseOver;
	}
	,g2d_onMouseOut: null
	,get_onMouseOut: function() {
		if(this.g2d_onMouseOut == null) {
			this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseOut;
	}
	,g2d_onRightMouseDown: null
	,get_onRightMouseDown: function() {
		if(this.g2d_onRightMouseDown == null) {
			this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseDown;
	}
	,g2d_onRightMouseUp: null
	,get_onRightMouseUp: function() {
		if(this.g2d_onRightMouseUp == null) {
			this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseUp;
	}
	,g2d_onMouseClick: null
	,get_onMouseClick: function() {
		if(this.g2d_onMouseClick == null) {
			this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseClick;
	}
	,g2d_onRightMouseClick: null
	,get_onRightMouseClick: function() {
		if(this.g2d_onRightMouseClick == null) {
			this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseClick;
	}
	,__class__: com_genome2d_node_GNode
	,__properties__: {get_onRightMouseClick:"get_onRightMouseClick",get_onMouseClick:"get_onMouseClick",get_onRightMouseUp:"get_onRightMouseUp",get_onRightMouseDown:"get_onRightMouseDown",get_onMouseOut:"get_onMouseOut",get_onMouseOver:"get_onMouseOver",get_onMouseMove:"get_onMouseMove",get_onMouseUp:"get_onMouseUp",get_onMouseDown:"get_onMouseDown",get_onDoubleMouseClick:"get_onDoubleMouseClick",get_onMouseWheel:"get_onMouseWheel",get_matrix:"get_matrix",set_color:"set_color",get_color:"get_color",set_alpha:"set_alpha",get_alpha:"get_alpha",set_blue:"set_blue",get_blue:"get_blue",set_green:"set_green",get_green:"get_green",set_red:"set_red",get_red:"get_red",set_rotation:"set_rotation",get_rotation:"get_rotation",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_g2d_useMatrix:"set_g2d_useMatrix",get_g2d_useMatrix:"get_g2d_useMatrix",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",get_onRemovedFromStage:"get_onRemovedFromStage",get_onAddedToStage:"get_onAddedToStage",get_childCount:"get_childCount",get_previous:"get_previous",get_next:"get_next",get_lastChild:"get_lastChild",get_firstChild:"get_firstChild",get_parent:"get_parent",get_id:"get_id",set_mask:"set_mask",get_mask:"get_mask",get_core:"get_core"}
};
var com_genome2d_node_GNodePool = function(p_prototype,p_maxCount,p_precacheCount) {
	if(p_precacheCount == null) {
		p_precacheCount = 0;
	}
	if(p_maxCount == null) {
		p_maxCount = 0;
	}
	this.g2d_cachedCount = 0;
	this.g2d_prototype = p_prototype;
	this.g2d_maxCount = p_maxCount;
	var _g = 0;
	var _g1 = p_precacheCount;
	while(_g < _g1) {
		var i = _g++;
		this.g2d_createNew(true);
	}
};
$hxClasses["com.genome2d.node.GNodePool"] = com_genome2d_node_GNodePool;
com_genome2d_node_GNodePool.__name__ = "com.genome2d.node.GNodePool";
com_genome2d_node_GNodePool.prototype = {
	g2d_first: null
	,g2d_last: null
	,g2d_prototype: null
	,g2d_maxCount: null
	,g2d_cachedCount: null
	,getCachedCount: function() {
		return this.g2d_cachedCount;
	}
	,getNext: function() {
		var node;
		if(this.g2d_first == null || this.g2d_first.g2d_active) {
			node = this.g2d_createNew();
		} else {
			node = this.g2d_first;
			this.g2d_putToBack(node);
			node.setActive(true);
		}
		return node;
	}
	,recycle: function(p_node,p_reset) {
		if(p_reset == null) {
			p_reset = false;
		}
		p_node.setActive(false);
		p_node.bindPrototype(this.g2d_prototype);
		this.g2d_putToFront(p_node);
	}
	,g2d_putToFront: function(p_node) {
		if(p_node == this.g2d_first) {
			return;
		}
		if(p_node.g2d_poolNext != null) {
			p_node.g2d_poolNext.g2d_poolPrevious = p_node.g2d_poolPrevious;
		}
		if(p_node.g2d_poolPrevious != null) {
			p_node.g2d_poolPrevious.g2d_poolNext = p_node.g2d_poolNext;
		}
		if(p_node == this.g2d_last) {
			this.g2d_last = this.g2d_last.g2d_poolPrevious;
		}
		if(this.g2d_first != null) {
			this.g2d_first.g2d_poolPrevious = p_node;
		}
		p_node.g2d_poolPrevious = null;
		p_node.g2d_poolNext = this.g2d_first;
		this.g2d_first = p_node;
	}
	,g2d_putToBack: function(p_node) {
		if(p_node == this.g2d_last) {
			return;
		}
		if(p_node.g2d_poolNext != null) {
			p_node.g2d_poolNext.g2d_poolPrevious = p_node.g2d_poolPrevious;
		}
		if(p_node.g2d_poolPrevious != null) {
			p_node.g2d_poolPrevious.g2d_poolNext = p_node.g2d_poolNext;
		}
		if(p_node == this.g2d_first) {
			this.g2d_first = this.g2d_first.g2d_poolNext;
		}
		if(this.g2d_last != null) {
			this.g2d_last.g2d_poolNext = p_node;
		}
		p_node.g2d_poolPrevious = this.g2d_last;
		p_node.g2d_poolNext = null;
		this.g2d_last = p_node;
	}
	,g2d_createNew: function(p_precache) {
		if(p_precache == null) {
			p_precache = false;
		}
		var node = null;
		if(this.g2d_maxCount == 0 || this.g2d_cachedCount < this.g2d_maxCount) {
			this.g2d_cachedCount++;
			node = com_genome2d_proto_GPrototypeFactory.createInstance(this.g2d_prototype);
			if(p_precache) {
				node.setActive(false);
			}
			node.g2d_pool = this;
			if(this.g2d_first == null) {
				this.g2d_first = node;
				this.g2d_last = node;
			} else {
				node.g2d_poolPrevious = this.g2d_last;
				this.g2d_last.g2d_poolNext = node;
				this.g2d_last = node;
			}
		}
		return node;
	}
	,dispose: function() {
		while(this.g2d_first != null) {
			var next = this.g2d_first.g2d_poolNext;
			this.g2d_first.dispose();
			this.g2d_first = next;
		}
	}
	,__class__: com_genome2d_node_GNodePool
};
var com_genome2d_node_IGNodeSorter = function() { };
$hxClasses["com.genome2d.node.IGNodeSorter"] = com_genome2d_node_IGNodeSorter;
com_genome2d_node_IGNodeSorter.__name__ = "com.genome2d.node.IGNodeSorter";
com_genome2d_node_IGNodeSorter.__isInterface__ = true;
com_genome2d_node_IGNodeSorter.prototype = {
	getSortValue: null
	,__class__: com_genome2d_node_IGNodeSorter
};
var com_genome2d_particles_GParticle = function(p_pool) {
	this.index = 0;
	this.die = false;
	this.accumulatedEnergy = 0;
	this.totalEnergy = 0;
	this.velocityY = 0;
	this.velocityX = 0;
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.implementRender = false;
	this.type = 0;
	this.fixed = false;
	this.densityNear = 0;
	this.density = 0;
	this.gridY = 0;
	this.gridX = 0;
	this.viscosity = .1;
	this.fluidY = 0;
	this.fluidX = 0;
	this.instanceId = com_genome2d_particles_GParticle.g2d_instanceId++;
	this.g2d_pool = p_pool;
	this.index = this.g2d_pool.g2d_count;
	this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
};
$hxClasses["com.genome2d.particles.GParticle"] = com_genome2d_particles_GParticle;
com_genome2d_particles_GParticle.__name__ = "com.genome2d.particles.GParticle";
com_genome2d_particles_GParticle.prototype = {
	fluidX: null
	,fluidY: null
	,viscosity: null
	,gridX: null
	,gridY: null
	,density: null
	,densityNear: null
	,fixed: null
	,type: null
	,group: null
	,implementRender: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,red: null
	,green: null
	,blue: null
	,alpha: null
	,texture: null
	,blendMode: null
	,velocityX: null
	,velocityY: null
	,totalEnergy: null
	,accumulatedEnergy: null
	,accumulatedTime: null
	,currentFrame: null
	,die: null
	,g2d_next: null
	,g2d_previous: null
	,get_previous: function() {
		return this.g2d_previous;
	}
	,g2d_nextAvailableInstance: null
	,index: null
	,g2d_pool: null
	,instanceId: null
	,g2d_spawn: function(p_emitter) {
		this.fluidX = this.fluidY = this.velocityX = this.velocityY = 0;
		this.fixed = false;
		this.texture = p_emitter.texture;
		if(p_emitter.useWorldSpace) {
			this.x = p_emitter.g2d_particleSystem.x + p_emitter.x * p_emitter.g2d_particleSystem.scaleY;
			this.y = p_emitter.g2d_particleSystem.y + p_emitter.y * p_emitter.g2d_particleSystem.scaleX;
		} else {
			this.x = 0;
			this.y = 0;
		}
		this.scaleX = this.scaleY = 1;
		this.rotation = 0;
		this.totalEnergy = 0;
		this.accumulatedEnergy = 0;
		this.red = 1;
		this.green = 1;
		this.blue = 1;
		this.alpha = 1;
		this.accumulatedTime = 0;
		this.currentFrame = 0;
	}
	,g2d_render: function(p_context,p_emitter) {
	}
	,g2d_dispose: function() {
		this.group = null;
		this.die = false;
		if(this.g2d_next != null) {
			this.g2d_next.g2d_previous = this.g2d_previous;
		}
		if(this.g2d_previous != null) {
			this.g2d_previous.g2d_next = this.g2d_next;
		}
		this.g2d_next = null;
		this.g2d_previous = null;
		this.g2d_nextAvailableInstance = this.g2d_pool.g2d_availableInstance;
		this.g2d_pool.g2d_availableInstance = this;
	}
	,__class__: com_genome2d_particles_GParticle
	,__properties__: {get_previous:"get_previous"}
};
var com_genome2d_particles_GParticleEmitter = function(p_particlePool) {
	this.g2d_currentState = "default";
	this.g2d_accumulatedEmission = 0;
	this.g2d_accumulatedSecond = 0;
	this.g2d_accumulatedTime = 0;
	this.g2d_useConstantRate = false;
	this.delayVariance = 0;
	this.delay = 0;
	this.loop = false;
	this.g2d_currentDuration = -1;
	this.durationVariance = 0;
	this.duration = 0;
	this.emit = true;
	this.rotation = 0;
	this.y = 0;
	this.x = 0;
	this.enableSph = false;
	this.useWorldSpace = true;
	this.g2d_particlePool = p_particlePool == null ? com_genome2d_particles_GParticlePool.g2d_defaultPool : p_particlePool;
	this.g2d_modules = [];
};
$hxClasses["com.genome2d.particles.GParticleEmitter"] = com_genome2d_particles_GParticleEmitter;
com_genome2d_particles_GParticleEmitter.__name__ = "com.genome2d.particles.GParticleEmitter";
com_genome2d_particles_GParticleEmitter.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_particles_GParticleEmitter.prototype = {
	useWorldSpace: null
	,enableSph: null
	,x: null
	,y: null
	,rotation: null
	,emit: null
	,texture: null
	,duration: null
	,durationVariance: null
	,g2d_currentDuration: null
	,loop: null
	,delay: null
	,delayVariance: null
	,g2d_rate: null
	,get_rate: function() {
		return this.g2d_rate;
	}
	,set_rate: function(p_value) {
		this.g2d_rate = p_value;
		this.g2d_useConstantRate = this.g2d_rate.isConstant();
		if(this.g2d_useConstantRate) {
			this.g2d_constantRate = this.g2d_rate.start;
		}
		return p_value;
	}
	,g2d_useConstantRate: null
	,g2d_constantRate: null
	,burstDistribution: null
	,g2d_accumulatedTime: null
	,g2d_accumulatedSecond: null
	,g2d_accumulatedEmission: null
	,g2d_firstParticle: null
	,g2d_lastParticle: null
	,g2d_particlePool: null
	,g2d_particleSystem: null
	,getParticleSystem: function() {
		return this.g2d_particleSystem;
	}
	,g2d_modules: null
	,getModules: function() {
		return this.g2d_modules;
	}
	,addModule: function(p_module) {
		this.g2d_modules.push(p_module);
		p_module.addedToEmitter(this);
	}
	,removeModule: function(p_module) {
		HxOverrides.remove(this.g2d_modules,p_module);
		p_module.removedFromEmitter(this);
	}
	,update: function(p_deltaTime) {
		if(this.g2d_currentDuration == -1) {
			this.g2d_currentDuration = this.duration + Math.random() * this.durationVariance;
		}
		this.g2d_accumulatedTime += p_deltaTime * .001;
		if(this.g2d_accumulatedTime > this.g2d_currentDuration && this.loop) {
			this.g2d_accumulatedTime %= this.g2d_currentDuration;
		}
		var _g = 0;
		var _g1 = this.g2d_modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			if(module.updateEmitterModule && module.enabled) {
				module.updateEmitter(this,p_deltaTime);
			}
		}
		if(this.emit) {
			if(this.g2d_accumulatedTime > this.g2d_currentDuration) {
				this.emit = false;
			} else {
				if(this.g2d_rate != null) {
					if(this.g2d_useConstantRate) {
						this.g2d_accumulatedEmission += this.g2d_constantRate * p_deltaTime * .001;
					} else {
						this.g2d_accumulatedEmission += this.g2d_rate.calculate(this.g2d_accumulatedTime / this.g2d_currentDuration) * p_deltaTime * .001;
					}
				}
				if(this.burstDistribution != null) {
					var _g2 = 0;
					var _g11 = this.burstDistribution.length >> 1;
					while(_g2 < _g11) {
						var i = _g2++;
						var time = this.burstDistribution[2 * i];
						if(time > this.g2d_accumulatedTime - p_deltaTime * .001 && time < this.g2d_accumulatedTime) {
							this.g2d_accumulatedEmission += this.burstDistribution[2 * i + 1];
						}
					}
				}
			}
		}
		while(this.g2d_accumulatedEmission >= 1) {
			var particle = this.g2d_particlePool.g2d_get();
			if(this.g2d_lastParticle != null) {
				particle.g2d_previous = this.g2d_lastParticle;
				this.g2d_lastParticle.g2d_next = particle;
				this.g2d_lastParticle = particle;
			} else {
				this.g2d_firstParticle = particle;
				this.g2d_lastParticle = particle;
			}
			particle.g2d_spawn(this);
			var _g3 = 0;
			var _g12 = this.g2d_modules;
			while(_g3 < _g12.length) {
				var module1 = _g12[_g3];
				++_g3;
				if(module1.spawnParticleModule && module1.enabled) {
					module1.spawnParticle(this,particle);
				}
			}
			this.g2d_accumulatedEmission--;
		}
		var particle1 = this.g2d_firstParticle;
		if(particle1 != null) {
			while(particle1 != null) {
				var next = particle1.g2d_next;
				var _g21 = 0;
				var _g31 = this.g2d_modules;
				while(_g21 < _g31.length) {
					var module2 = _g31[_g21];
					++_g21;
					if(module2.updateParticleModule && module2.enabled) {
						module2.updateParticle(this,particle1,p_deltaTime);
					}
				}
				particle1 = next;
			}
		}
		var particle2 = this.g2d_firstParticle;
		while(particle2 != null) {
			var next1 = particle2.g2d_next;
			if(particle2.die) {
				if(particle2 == this.g2d_lastParticle) {
					this.g2d_lastParticle = this.g2d_lastParticle.g2d_previous;
				}
				if(particle2 == this.g2d_firstParticle) {
					this.g2d_firstParticle = this.g2d_firstParticle.g2d_next;
				}
				particle2.g2d_dispose();
			}
			particle2 = next1;
		}
	}
	,doEmission: function(p_deltaTime) {
		if(this.emit) {
			if(this.g2d_accumulatedTime > this.g2d_currentDuration) {
				this.emit = false;
			} else {
				if(this.g2d_rate != null) {
					if(this.g2d_useConstantRate) {
						this.g2d_accumulatedEmission += this.g2d_constantRate * p_deltaTime * .001;
					} else {
						this.g2d_accumulatedEmission += this.g2d_rate.calculate(this.g2d_accumulatedTime / this.g2d_currentDuration) * p_deltaTime * .001;
					}
				}
				if(this.burstDistribution != null) {
					var _g = 0;
					var _g1 = this.burstDistribution.length >> 1;
					while(_g < _g1) {
						var i = _g++;
						var time = this.burstDistribution[2 * i];
						if(time > this.g2d_accumulatedTime - p_deltaTime * .001 && time < this.g2d_accumulatedTime) {
							this.g2d_accumulatedEmission += this.burstDistribution[2 * i + 1];
						}
					}
				}
			}
		}
		while(this.g2d_accumulatedEmission >= 1) {
			var particle = this.g2d_particlePool.g2d_get();
			if(this.g2d_lastParticle != null) {
				particle.g2d_previous = this.g2d_lastParticle;
				this.g2d_lastParticle.g2d_next = particle;
				this.g2d_lastParticle = particle;
			} else {
				this.g2d_firstParticle = particle;
				this.g2d_lastParticle = particle;
			}
			particle.g2d_spawn(this);
			var _g2 = 0;
			var _g11 = this.g2d_modules;
			while(_g2 < _g11.length) {
				var module = _g11[_g2];
				++_g2;
				if(module.spawnParticleModule && module.enabled) {
					module.spawnParticle(this,particle);
				}
			}
			this.g2d_accumulatedEmission--;
		}
	}
	,render: function(p_context) {
		var particle = this.g2d_firstParticle;
		var tx = this.useWorldSpace ? 0 : this.g2d_particleSystem.x + this.x * this.g2d_particleSystem.scaleX;
		var ty = this.useWorldSpace ? 0 : this.g2d_particleSystem.y + this.y * this.g2d_particleSystem.scaleY;
		var sx = this.useWorldSpace ? 1 : this.g2d_particleSystem.scaleX;
		var sy = this.useWorldSpace ? 1 : this.g2d_particleSystem.scaleY;
		while(particle != null) {
			var next = particle.g2d_next;
			if(particle.implementRender) {
				particle.g2d_render(p_context,this);
			} else if(particle.texture != null) {
				p_context.draw(particle.texture,particle.blendMode,tx + particle.x * sx,ty + particle.y * sy,sx * particle.scaleX,sy * particle.scaleY,particle.rotation,particle.red,particle.green,particle.blue,particle.alpha,null);
			}
			particle = next;
		}
	}
	,burst: function(p_emission) {
		var _g = 0;
		var _g1 = p_emission;
		while(_g < _g1) {
			var i = _g++;
			var particle = this.g2d_particlePool.g2d_get();
			if(this.g2d_lastParticle != null) {
				particle.g2d_previous = this.g2d_lastParticle;
				this.g2d_lastParticle.g2d_next = particle;
				this.g2d_lastParticle = particle;
			} else {
				this.g2d_firstParticle = particle;
				this.g2d_lastParticle = particle;
			}
			particle.g2d_spawn(this);
			var _g2 = 0;
			var _g11 = this.g2d_modules;
			while(_g2 < _g11.length) {
				var module = _g11[_g2];
				++_g2;
				if(module.spawnParticleModule && module.enabled) {
					module.spawnParticle(this,particle);
				}
			}
		}
	}
	,spawnParticle: function(p_applySpawnModules) {
		if(p_applySpawnModules == null) {
			p_applySpawnModules = true;
		}
		var particle = this.g2d_particlePool.g2d_get();
		if(this.g2d_lastParticle != null) {
			particle.g2d_previous = this.g2d_lastParticle;
			this.g2d_lastParticle.g2d_next = particle;
			this.g2d_lastParticle = particle;
		} else {
			this.g2d_firstParticle = particle;
			this.g2d_lastParticle = particle;
		}
		particle.g2d_spawn(this);
		var _g = 0;
		var _g1 = this.g2d_modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			if(module.spawnParticleModule && module.enabled) {
				module.spawnParticle(this,particle);
			}
		}
		return particle;
	}
	,disposeParticle: function(p_particle) {
		if(p_particle == this.g2d_lastParticle) {
			this.g2d_lastParticle = this.g2d_lastParticle.g2d_previous;
		}
		if(p_particle == this.g2d_firstParticle) {
			this.g2d_firstParticle = this.g2d_firstParticle.g2d_next;
		}
		p_particle.g2d_dispose();
	}
	,hasLiveParticles: function() {
		return this.g2d_firstParticle != null;
	}
	,disposeParticles: function() {
		while(this.g2d_firstParticle != null) {
			var p_particle = this.g2d_firstParticle;
			if(p_particle == this.g2d_lastParticle) {
				this.g2d_lastParticle = this.g2d_lastParticle.g2d_previous;
			}
			if(p_particle == this.g2d_firstParticle) {
				this.g2d_firstParticle = this.g2d_firstParticle.g2d_next;
			}
			p_particle.g2d_dispose();
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		var _g = 0;
		var _g1 = this.g2d_modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			p_prototype.addChild(module.getPrototype(),com_genome2d_particles_GParticleEmitter.PROTOTYPE_DEFAULT_CHILD_GROUP);
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,com_genome2d_particles_GParticleEmitter.PROTOTYPE_NAME);
		var group = p_prototype.getGroup(com_genome2d_particles_GParticleEmitter.PROTOTYPE_DEFAULT_CHILD_GROUP);
		if(group != null) {
			var _g = 0;
			while(_g < group.length) {
				var prototype = group[_g];
				++_g;
				var prototype1 = com_genome2d_proto_GPrototypeFactory.createInstance(prototype);
				this.addModule(prototype1);
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"particle_emitter");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"particle_emitter");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_particles_GParticleEmitter
	,__properties__: {set_rate:"set_rate",get_rate:"get_rate"}
};
var com_genome2d_particles_GParticleGroup = function() {
	this.id = 0;
	this.rigidAllowRotation = true;
	this.rigidAllowTranslation = true;
	this.rigid = false;
	this.torque = 0;
	this.vy = 0;
	this.vx = 0;
	this.massY = 0;
	this.massX = 0;
	this.particleCount = 0;
	this.id = com_genome2d_particles_GParticleGroup.g2d_id++;
	this.particles = [];
};
$hxClasses["com.genome2d.particles.GParticleGroup"] = com_genome2d_particles_GParticleGroup;
com_genome2d_particles_GParticleGroup.__name__ = "com.genome2d.particles.GParticleGroup";
com_genome2d_particles_GParticleGroup.prototype = {
	particles: null
	,particleCount: null
	,massX: null
	,massY: null
	,vx: null
	,vy: null
	,torque: null
	,rigid: null
	,rigidAllowTranslation: null
	,rigidAllowRotation: null
	,id: null
	,addParticle: function(p_particle) {
		this.particles[this.particleCount++] = p_particle;
		this.massX += p_particle.x;
		this.massY += p_particle.y;
	}
	,calculateForce: function() {
		this.massX /= _$UInt_UInt_$Impl_$.toFloat(this.particleCount);
		this.massY /= _$UInt_UInt_$Impl_$.toFloat(this.particleCount);
		if(this.rigid) {
			var t = 0;
			var ax = 0;
			var ay = 0;
			var _g = 0;
			var _g1 = this.particleCount;
			while(_g < _g1) {
				var i = _g++;
				var particle = this.particles[i];
				var fx = particle.fluidX / (particle.density * 0.9 + 0.1);
				var fy = particle.fluidY / (particle.density * 0.9 + 0.1);
				if(this.rigidAllowRotation) {
					t += (this.massX - particle.x) * fy - (this.massY - particle.y) * fx;
				}
				if(this.rigidAllowTranslation) {
					ax += fx;
					ay += fy;
				}
			}
			this.torque += t / _$UInt_UInt_$Impl_$.toFloat(this.particleCount);
			this.vx += ax / _$UInt_UInt_$Impl_$.toFloat(this.particleCount);
			this.vy += ay / _$UInt_UInt_$Impl_$.toFloat(this.particleCount);
			var sin = Math.sin(-this.torque / 1000);
			var cos = Math.cos(-this.torque / 1000);
			var _g2 = 0;
			var _g3 = this.particleCount;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var particle1 = this.particles[i1];
				if(!particle1.fixed) {
					if(this.rigidAllowRotation) {
						var tx = particle1.x - this.massX;
						var ty = particle1.y - this.massY;
						var nx = tx * cos - ty * sin;
						var ny = tx * sin + ty * cos;
						particle1.x = this.massX + nx;
						particle1.y = this.massY + ny;
					}
					if(this.rigidAllowTranslation) {
						particle1.velocityX = this.vx;
						particle1.velocityY = this.vy;
					}
				}
			}
		} else {
			var _g4 = 0;
			var _g11 = this.particleCount;
			while(_g4 < _g11) {
				var i2 = _g4++;
				var particle2 = this.particles[i2];
				if(particle2.density > 0 && !particle2.fixed) {
					particle2.velocityX += particle2.fluidX / (particle2.density * 0.9 + 0.1);
					particle2.velocityY += particle2.fluidY / (particle2.density * 0.9 + 0.1);
				}
			}
		}
	}
	,crossProduct: function(p_v1x,p_v1y,p_v2x,p_v2y) {
		return p_v1x * p_v2y - p_v1y * p_v2x;
	}
	,__class__: com_genome2d_particles_GParticleGroup
};
var com_genome2d_particles_GParticlePool = function(p_particleClass) {
	this.g2d_count = 0;
	this.g2d_particleClass = p_particleClass == null ? com_genome2d_particles_GParticle : p_particleClass;
};
$hxClasses["com.genome2d.particles.GParticlePool"] = com_genome2d_particles_GParticlePool;
com_genome2d_particles_GParticlePool.__name__ = "com.genome2d.particles.GParticlePool";
com_genome2d_particles_GParticlePool.prototype = {
	g2d_availableInstance: null
	,g2d_count: null
	,g2d_particleClass: null
	,precache: function(p_precacheCount) {
		if(p_precacheCount < this.g2d_count) {
			return;
		}
		var precached = this.g2d_get();
		while(this.g2d_count < p_precacheCount) {
			var n = this.g2d_get();
			n.g2d_previous = precached;
			precached = n;
		}
		while(precached != null) {
			var d = precached;
			precached = d.g2d_previous;
			d.g2d_dispose();
		}
	}
	,g2d_get: function() {
		var instance = this.g2d_availableInstance;
		if(instance != null) {
			this.g2d_availableInstance = instance.g2d_nextAvailableInstance;
			instance.g2d_nextAvailableInstance = null;
		} else {
			instance = Type.createInstance(this.g2d_particleClass,[this]);
			this.g2d_count++;
		}
		return instance;
	}
	,__class__: com_genome2d_particles_GParticlePool
};
var com_genome2d_particles_GParticleSystem = function() {
	this.g2d_currentState = "default";
	this.g2d_neighborPrecacheCount = 0;
	this.g2d_neighborCount = 0;
	this.g2d_invertedGridCellSize = 0;
	this.g2d_gridHeightCount = 0;
	this.g2d_gridWidthCount = 0;
	this.g2d_gridCellSize = 0;
	this.g2d_height = 0;
	this.g2d_width = 0;
	this.enabled = true;
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.g2d_emitterCount = 0;
	this.enableSph = false;
	this.timeDilation = 1;
	this.g2d_emitters = [];
	this.g2d_groups = new haxe_ds_ObjectMap();
	this.g2d_defaultGroup = new com_genome2d_particles_GParticleGroup();
};
$hxClasses["com.genome2d.particles.GParticleSystem"] = com_genome2d_particles_GParticleSystem;
com_genome2d_particles_GParticleSystem.__name__ = "com.genome2d.particles.GParticleSystem";
com_genome2d_particles_GParticleSystem.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_particles_GParticleSystem.prototype = {
	timeDilation: null
	,enableSph: null
	,g2d_emitters: null
	,getEmitters: function() {
		return this.g2d_emitters;
	}
	,g2d_emitterCount: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,red: null
	,green: null
	,blue: null
	,alpha: null
	,enabled: null
	,g2d_width: null
	,g2d_height: null
	,g2d_gridCellSize: null
	,g2d_gridWidthCount: null
	,g2d_gridHeightCount: null
	,g2d_grids: null
	,g2d_invertedGridCellSize: null
	,g2d_neighborCount: null
	,g2d_neighbors: null
	,g2d_neighborPrecacheCount: null
	,g2d_groups: null
	,g2d_defaultGroup: null
	,setupGrid: function(p_width,p_height,p_cellSize,p_precacheNeighbors) {
		if(p_precacheNeighbors == null) {
			p_precacheNeighbors = 0;
		}
		this.g2d_neighbors = [];
		this.g2d_neighborPrecacheCount = p_precacheNeighbors;
		var _g = 0;
		var _g1 = this.g2d_neighborPrecacheCount;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_neighbors.push(new com_genome2d_particles_GSPHNeighbor());
		}
		this.g2d_neighborCount = 0;
		this.g2d_width = p_width;
		this.g2d_height = p_height;
		this.g2d_gridCellSize = p_cellSize;
		this.g2d_gridWidthCount = Math.ceil(p_width / this.g2d_gridCellSize);
		this.g2d_gridHeightCount = Math.ceil(p_height / this.g2d_gridCellSize);
		this.g2d_invertedGridCellSize = 1 / this.g2d_gridCellSize;
		this.g2d_grids = [];
		var _g2 = 0;
		var _g3 = this.g2d_gridWidthCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.g2d_grids.push([]);
			var _g21 = 0;
			var _g31 = this.g2d_gridHeightCount;
			while(_g21 < _g31) {
				var j = _g21++;
				this.g2d_grids[i1].push(new com_genome2d_particles_GSPHGrid());
			}
		}
	}
	,addEmitter: function(p_emitter) {
		p_emitter.g2d_particleSystem = this;
		this.g2d_emitterCount = this.g2d_emitters.push(p_emitter);
	}
	,removeEmitter: function(p_emitter) {
		if(HxOverrides.remove(this.g2d_emitters,p_emitter)) {
			p_emitter.g2d_particleSystem = null;
			this.g2d_emitterCount--;
		}
	}
	,getEmitter: function(p_emitterIndex) {
		if(p_emitterIndex < this.g2d_emitterCount) {
			return this.g2d_emitters[p_emitterIndex];
		} else {
			return null;
		}
	}
	,update: function(p_deltaTime) {
		if(this.enabled) {
			p_deltaTime *= this.timeDilation;
			if(this.enableSph && this.g2d_neighbors != null) {
				this.g2d_updateGrids();
				this.g2d_findNeighbors();
				var _g = 0;
				var _g1 = this.g2d_neighborCount;
				while(_g < _g1) {
					var i = _g++;
					var _this = this.g2d_neighbors[i];
					var p;
					if(_this.particle1.group != _this.particle2.group || _this.particle1.group == null) {
						if(_this.particle1.type != _this.particle2.type || _this.particle1.fixed != _this.particle2.fixed || _this.particle1.group != _this.particle2.group) {
							p = (_this.particle1.density + _this.particle2.density - _this.density * 1.5) * _this.PRESSURE;
						} else {
							p = (_this.particle1.density + _this.particle2.density - _this.density * 2) * _this.PRESSURE;
						}
						var np = (_this.particle1.densityNear + _this.particle2.densityNear) * _this.NEAR_PRESSURE;
						var pressureWeight = _this.weight * (p + _this.weight * np);
						var fx = _this.nx * pressureWeight;
						var fy = _this.ny * pressureWeight;
						var fax = (_this.particle2.velocityX - _this.particle1.velocityX) * _this.weight;
						var fay = (_this.particle2.velocityY - _this.particle1.velocityY) * _this.weight;
						if(fx == 0) {
							fx += .0000001;
						}
						if(fy == 0) {
							fy += .0000001;
						}
						_this.particle1.fluidX += fx + fax * _this.particle2.viscosity;
						_this.particle1.fluidY += fy + fay * _this.particle2.viscosity;
						_this.particle2.fluidX -= fx + fax * _this.particle1.viscosity;
						_this.particle2.fluidY -= fy + fay * _this.particle1.viscosity;
					}
				}
				var _this1 = this.g2d_defaultGroup;
				_this1.massX /= _$UInt_UInt_$Impl_$.toFloat(_this1.particleCount);
				_this1.massY /= _$UInt_UInt_$Impl_$.toFloat(_this1.particleCount);
				if(_this1.rigid) {
					var t = 0;
					var ax = 0;
					var ay = 0;
					var _g2 = 0;
					var _g11 = _this1.particleCount;
					while(_g2 < _g11) {
						var i1 = _g2++;
						var particle = _this1.particles[i1];
						var fx1 = particle.fluidX / (particle.density * 0.9 + 0.1);
						var fy1 = particle.fluidY / (particle.density * 0.9 + 0.1);
						if(_this1.rigidAllowRotation) {
							t += (_this1.massX - particle.x) * fy1 - (_this1.massY - particle.y) * fx1;
						}
						if(_this1.rigidAllowTranslation) {
							ax += fx1;
							ay += fy1;
						}
					}
					_this1.torque += t / _$UInt_UInt_$Impl_$.toFloat(_this1.particleCount);
					_this1.vx += ax / _$UInt_UInt_$Impl_$.toFloat(_this1.particleCount);
					_this1.vy += ay / _$UInt_UInt_$Impl_$.toFloat(_this1.particleCount);
					var sin = Math.sin(-_this1.torque / 1000);
					var cos = Math.cos(-_this1.torque / 1000);
					var _g21 = 0;
					var _g3 = _this1.particleCount;
					while(_g21 < _g3) {
						var i2 = _g21++;
						var particle1 = _this1.particles[i2];
						if(!particle1.fixed) {
							if(_this1.rigidAllowRotation) {
								var tx = particle1.x - _this1.massX;
								var ty = particle1.y - _this1.massY;
								var nx = tx * cos - ty * sin;
								var ny = tx * sin + ty * cos;
								particle1.x = _this1.massX + nx;
								particle1.y = _this1.massY + ny;
							}
							if(_this1.rigidAllowTranslation) {
								particle1.velocityX = _this1.vx;
								particle1.velocityY = _this1.vy;
							}
						}
					}
				} else {
					var _g4 = 0;
					var _g12 = _this1.particleCount;
					while(_g4 < _g12) {
						var i3 = _g4++;
						var particle2 = _this1.particles[i3];
						if(particle2.density > 0 && !particle2.fixed) {
							particle2.velocityX += particle2.fluidX / (particle2.density * 0.9 + 0.1);
							particle2.velocityY += particle2.fluidY / (particle2.density * 0.9 + 0.1);
						}
					}
				}
				var group = this.g2d_groups.keys();
				while(group.hasNext()) {
					var group1 = group.next();
					group1.massX /= _$UInt_UInt_$Impl_$.toFloat(group1.particleCount);
					group1.massY /= _$UInt_UInt_$Impl_$.toFloat(group1.particleCount);
					if(group1.rigid) {
						var t1 = 0;
						var ax1 = 0;
						var ay1 = 0;
						var _g5 = 0;
						var _g13 = group1.particleCount;
						while(_g5 < _g13) {
							var i4 = _g5++;
							var particle3 = group1.particles[i4];
							var fx2 = particle3.fluidX / (particle3.density * 0.9 + 0.1);
							var fy2 = particle3.fluidY / (particle3.density * 0.9 + 0.1);
							if(group1.rigidAllowRotation) {
								t1 += (group1.massX - particle3.x) * fy2 - (group1.massY - particle3.y) * fx2;
							}
							if(group1.rigidAllowTranslation) {
								ax1 += fx2;
								ay1 += fy2;
							}
						}
						group1.torque += t1 / _$UInt_UInt_$Impl_$.toFloat(group1.particleCount);
						group1.vx += ax1 / _$UInt_UInt_$Impl_$.toFloat(group1.particleCount);
						group1.vy += ay1 / _$UInt_UInt_$Impl_$.toFloat(group1.particleCount);
						var sin1 = Math.sin(-group1.torque / 1000);
						var cos1 = Math.cos(-group1.torque / 1000);
						var _g22 = 0;
						var _g31 = group1.particleCount;
						while(_g22 < _g31) {
							var i5 = _g22++;
							var particle4 = group1.particles[i5];
							if(!particle4.fixed) {
								if(group1.rigidAllowRotation) {
									var tx1 = particle4.x - group1.massX;
									var ty1 = particle4.y - group1.massY;
									var nx1 = tx1 * cos1 - ty1 * sin1;
									var ny1 = tx1 * sin1 + ty1 * cos1;
									particle4.x = group1.massX + nx1;
									particle4.y = group1.massY + ny1;
								}
								if(group1.rigidAllowTranslation) {
									particle4.velocityX = group1.vx;
									particle4.velocityY = group1.vy;
								}
							}
						}
					} else {
						var _g6 = 0;
						var _g14 = group1.particleCount;
						while(_g6 < _g14) {
							var i6 = _g6++;
							var particle5 = group1.particles[i6];
							if(particle5.density > 0 && !particle5.fixed) {
								particle5.velocityX += particle5.fluidX / (particle5.density * 0.9 + 0.1);
								particle5.velocityY += particle5.fluidY / (particle5.density * 0.9 + 0.1);
							}
						}
					}
				}
			}
			var _g7 = 0;
			var _g15 = this.g2d_emitters;
			while(_g7 < _g15.length) {
				var emitter = _g15[_g7];
				++_g7;
				emitter.update(p_deltaTime);
			}
		}
	}
	,render: function(p_context) {
		var _g = 0;
		var _g1 = this.g2d_emitters;
		while(_g < _g1.length) {
			var emitter = _g1[_g];
			++_g;
			emitter.render(p_context);
		}
	}
	,dispose: function() {
	}
	,g2d_updateGrids: function() {
		var _g = 0;
		var _g1 = this.g2d_gridWidthCount;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g11 = this.g2d_gridHeightCount;
			while(_g2 < _g11) {
				var j = _g2++;
				this.g2d_grids[i][j].particleCount = 0;
			}
		}
		this.g2d_defaultGroup.particleCount = 0;
		this.g2d_defaultGroup.massX = 0;
		this.g2d_defaultGroup.massY = 0;
		var group = this.g2d_groups.keys();
		while(group.hasNext()) {
			var group1 = group.next();
			group1.particleCount = 0;
			group1.massX = 0;
			group1.massY = 0;
		}
		var _g21 = 0;
		var _g3 = this.g2d_emitters;
		while(_g21 < _g3.length) {
			var emitter = _g3[_g21];
			++_g21;
			if(emitter.enableSph) {
				var particle = emitter.g2d_firstParticle;
				while(particle != null) {
					var next = particle.g2d_next;
					if(particle.group != null) {
						var _this = particle.group;
						_this.particles[_this.particleCount++] = particle;
						_this.massX += particle.x;
						_this.massY += particle.y;
						this.g2d_groups.set(particle.group,true);
					} else {
						var _this1 = this.g2d_defaultGroup;
						_this1.particles[_this1.particleCount++] = particle;
						_this1.massX += particle.x;
						_this1.massY += particle.y;
					}
					particle.fluidX = particle.fluidY = particle.density = particle.densityNear = 0;
					particle.gridX = particle.x * this.g2d_invertedGridCellSize | 0;
					particle.gridY = particle.y * this.g2d_invertedGridCellSize | 0;
					if(particle.gridX < 0) {
						particle.gridX = 0;
					} else if(particle.gridX > this.g2d_gridWidthCount - 1) {
						particle.gridX = this.g2d_gridWidthCount - 1;
					}
					if(particle.gridY < 0) {
						particle.gridY = 0;
					} else if(particle.gridY > this.g2d_gridHeightCount - 1) {
						particle.gridY = this.g2d_gridHeightCount - 1;
					}
					particle = next;
				}
			}
		}
	}
	,g2d_findNeighbors: function() {
		this.g2d_neighborCount = 0;
		var _g = 0;
		var _g1 = this.g2d_emitters;
		while(_g < _g1.length) {
			var emitter = _g1[_g];
			++_g;
			if(emitter.enableSph) {
				var particle = emitter.g2d_firstParticle;
				while(particle != null) {
					if(!particle.die) {
						var minX = particle.gridX != 0;
						var maxX = particle.gridX != this.g2d_gridWidthCount - 1;
						var minY = particle.gridY != 0;
						var maxY = particle.gridY != this.g2d_gridHeightCount - 1;
						var p_grid = this.g2d_grids[particle.gridX][particle.gridY];
						var _g2 = 0;
						var _g11 = p_grid.particleCount;
						while(_g2 < _g11) {
							var i = _g2++;
							var particle1 = p_grid.particles[i];
							var distance = (particle.x - particle1.x) * (particle.x - particle1.x) + (particle.y - particle1.y) * (particle.y - particle1.y);
							if(distance < 256.) {
								if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
									this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
									this.g2d_neighborPrecacheCount++;
								}
								var _this = this.g2d_neighbors[this.g2d_neighborCount++];
								_this.particle1 = particle;
								_this.particle2 = particle1;
								_this.nx = _this.particle1.x - _this.particle2.x;
								_this.ny = _this.particle1.y - _this.particle2.y;
								_this.distance = Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny);
								_this.nx /= _this.distance;
								_this.ny /= _this.distance;
								_this.weight = 1 - _this.distance / _this.RANGE;
								var density = _this.weight * _this.weight;
								_this.particle1.density += density;
								_this.particle2.density += density;
								density *= _this.weight * _this.NEAR_PRESSURE;
								_this.particle1.densityNear += density;
								_this.particle2.densityNear += density;
							}
						}
						if(minX) {
							var p_grid1 = this.g2d_grids[particle.gridX - 1][particle.gridY];
							var _g3 = 0;
							var _g12 = p_grid1.particleCount;
							while(_g3 < _g12) {
								var i1 = _g3++;
								var particle2 = p_grid1.particles[i1];
								var distance1 = (particle.x - particle2.x) * (particle.x - particle2.x) + (particle.y - particle2.y) * (particle.y - particle2.y);
								if(distance1 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this1 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this1.particle1 = particle;
									_this1.particle2 = particle2;
									_this1.nx = _this1.particle1.x - _this1.particle2.x;
									_this1.ny = _this1.particle1.y - _this1.particle2.y;
									_this1.distance = Math.sqrt(_this1.nx * _this1.nx + _this1.ny * _this1.ny);
									_this1.nx /= _this1.distance;
									_this1.ny /= _this1.distance;
									_this1.weight = 1 - _this1.distance / _this1.RANGE;
									var density1 = _this1.weight * _this1.weight;
									_this1.particle1.density += density1;
									_this1.particle2.density += density1;
									density1 *= _this1.weight * _this1.NEAR_PRESSURE;
									_this1.particle1.densityNear += density1;
									_this1.particle2.densityNear += density1;
								}
							}
						}
						if(maxX) {
							var p_grid2 = this.g2d_grids[particle.gridX + 1][particle.gridY];
							var _g4 = 0;
							var _g13 = p_grid2.particleCount;
							while(_g4 < _g13) {
								var i2 = _g4++;
								var particle3 = p_grid2.particles[i2];
								var distance2 = (particle.x - particle3.x) * (particle.x - particle3.x) + (particle.y - particle3.y) * (particle.y - particle3.y);
								if(distance2 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this2 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this2.particle1 = particle;
									_this2.particle2 = particle3;
									_this2.nx = _this2.particle1.x - _this2.particle2.x;
									_this2.ny = _this2.particle1.y - _this2.particle2.y;
									_this2.distance = Math.sqrt(_this2.nx * _this2.nx + _this2.ny * _this2.ny);
									_this2.nx /= _this2.distance;
									_this2.ny /= _this2.distance;
									_this2.weight = 1 - _this2.distance / _this2.RANGE;
									var density2 = _this2.weight * _this2.weight;
									_this2.particle1.density += density2;
									_this2.particle2.density += density2;
									density2 *= _this2.weight * _this2.NEAR_PRESSURE;
									_this2.particle1.densityNear += density2;
									_this2.particle2.densityNear += density2;
								}
							}
						}
						if(minY) {
							var p_grid3 = this.g2d_grids[particle.gridX][particle.gridY - 1];
							var _g5 = 0;
							var _g14 = p_grid3.particleCount;
							while(_g5 < _g14) {
								var i3 = _g5++;
								var particle4 = p_grid3.particles[i3];
								var distance3 = (particle.x - particle4.x) * (particle.x - particle4.x) + (particle.y - particle4.y) * (particle.y - particle4.y);
								if(distance3 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this3 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this3.particle1 = particle;
									_this3.particle2 = particle4;
									_this3.nx = _this3.particle1.x - _this3.particle2.x;
									_this3.ny = _this3.particle1.y - _this3.particle2.y;
									_this3.distance = Math.sqrt(_this3.nx * _this3.nx + _this3.ny * _this3.ny);
									_this3.nx /= _this3.distance;
									_this3.ny /= _this3.distance;
									_this3.weight = 1 - _this3.distance / _this3.RANGE;
									var density3 = _this3.weight * _this3.weight;
									_this3.particle1.density += density3;
									_this3.particle2.density += density3;
									density3 *= _this3.weight * _this3.NEAR_PRESSURE;
									_this3.particle1.densityNear += density3;
									_this3.particle2.densityNear += density3;
								}
							}
						}
						if(maxY) {
							var p_grid4 = this.g2d_grids[particle.gridX][particle.gridY + 1];
							var _g6 = 0;
							var _g15 = p_grid4.particleCount;
							while(_g6 < _g15) {
								var i4 = _g6++;
								var particle5 = p_grid4.particles[i4];
								var distance4 = (particle.x - particle5.x) * (particle.x - particle5.x) + (particle.y - particle5.y) * (particle.y - particle5.y);
								if(distance4 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this4 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this4.particle1 = particle;
									_this4.particle2 = particle5;
									_this4.nx = _this4.particle1.x - _this4.particle2.x;
									_this4.ny = _this4.particle1.y - _this4.particle2.y;
									_this4.distance = Math.sqrt(_this4.nx * _this4.nx + _this4.ny * _this4.ny);
									_this4.nx /= _this4.distance;
									_this4.ny /= _this4.distance;
									_this4.weight = 1 - _this4.distance / _this4.RANGE;
									var density4 = _this4.weight * _this4.weight;
									_this4.particle1.density += density4;
									_this4.particle2.density += density4;
									density4 *= _this4.weight * _this4.NEAR_PRESSURE;
									_this4.particle1.densityNear += density4;
									_this4.particle2.densityNear += density4;
								}
							}
						}
						if(minX && minY) {
							var p_grid5 = this.g2d_grids[particle.gridX - 1][particle.gridY - 1];
							var _g7 = 0;
							var _g16 = p_grid5.particleCount;
							while(_g7 < _g16) {
								var i5 = _g7++;
								var particle6 = p_grid5.particles[i5];
								var distance5 = (particle.x - particle6.x) * (particle.x - particle6.x) + (particle.y - particle6.y) * (particle.y - particle6.y);
								if(distance5 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this5 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this5.particle1 = particle;
									_this5.particle2 = particle6;
									_this5.nx = _this5.particle1.x - _this5.particle2.x;
									_this5.ny = _this5.particle1.y - _this5.particle2.y;
									_this5.distance = Math.sqrt(_this5.nx * _this5.nx + _this5.ny * _this5.ny);
									_this5.nx /= _this5.distance;
									_this5.ny /= _this5.distance;
									_this5.weight = 1 - _this5.distance / _this5.RANGE;
									var density5 = _this5.weight * _this5.weight;
									_this5.particle1.density += density5;
									_this5.particle2.density += density5;
									density5 *= _this5.weight * _this5.NEAR_PRESSURE;
									_this5.particle1.densityNear += density5;
									_this5.particle2.densityNear += density5;
								}
							}
						}
						if(minX && maxY) {
							var p_grid6 = this.g2d_grids[particle.gridX - 1][particle.gridY + 1];
							var _g8 = 0;
							var _g17 = p_grid6.particleCount;
							while(_g8 < _g17) {
								var i6 = _g8++;
								var particle7 = p_grid6.particles[i6];
								var distance6 = (particle.x - particle7.x) * (particle.x - particle7.x) + (particle.y - particle7.y) * (particle.y - particle7.y);
								if(distance6 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this6 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this6.particle1 = particle;
									_this6.particle2 = particle7;
									_this6.nx = _this6.particle1.x - _this6.particle2.x;
									_this6.ny = _this6.particle1.y - _this6.particle2.y;
									_this6.distance = Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny);
									_this6.nx /= _this6.distance;
									_this6.ny /= _this6.distance;
									_this6.weight = 1 - _this6.distance / _this6.RANGE;
									var density6 = _this6.weight * _this6.weight;
									_this6.particle1.density += density6;
									_this6.particle2.density += density6;
									density6 *= _this6.weight * _this6.NEAR_PRESSURE;
									_this6.particle1.densityNear += density6;
									_this6.particle2.densityNear += density6;
								}
							}
						}
						if(maxX && minY) {
							var p_grid7 = this.g2d_grids[particle.gridX + 1][particle.gridY - 1];
							var _g9 = 0;
							var _g18 = p_grid7.particleCount;
							while(_g9 < _g18) {
								var i7 = _g9++;
								var particle8 = p_grid7.particles[i7];
								var distance7 = (particle.x - particle8.x) * (particle.x - particle8.x) + (particle.y - particle8.y) * (particle.y - particle8.y);
								if(distance7 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this7 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this7.particle1 = particle;
									_this7.particle2 = particle8;
									_this7.nx = _this7.particle1.x - _this7.particle2.x;
									_this7.ny = _this7.particle1.y - _this7.particle2.y;
									_this7.distance = Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny);
									_this7.nx /= _this7.distance;
									_this7.ny /= _this7.distance;
									_this7.weight = 1 - _this7.distance / _this7.RANGE;
									var density7 = _this7.weight * _this7.weight;
									_this7.particle1.density += density7;
									_this7.particle2.density += density7;
									density7 *= _this7.weight * _this7.NEAR_PRESSURE;
									_this7.particle1.densityNear += density7;
									_this7.particle2.densityNear += density7;
								}
							}
						}
						if(maxX && maxY) {
							var p_grid8 = this.g2d_grids[particle.gridX + 1][particle.gridY + 1];
							var _g10 = 0;
							var _g19 = p_grid8.particleCount;
							while(_g10 < _g19) {
								var i8 = _g10++;
								var particle9 = p_grid8.particles[i8];
								var distance8 = (particle.x - particle9.x) * (particle.x - particle9.x) + (particle.y - particle9.y) * (particle.y - particle9.y);
								if(distance8 < 256.) {
									if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
										this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
										this.g2d_neighborPrecacheCount++;
									}
									var _this8 = this.g2d_neighbors[this.g2d_neighborCount++];
									_this8.particle1 = particle;
									_this8.particle2 = particle9;
									_this8.nx = _this8.particle1.x - _this8.particle2.x;
									_this8.ny = _this8.particle1.y - _this8.particle2.y;
									_this8.distance = Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny);
									_this8.nx /= _this8.distance;
									_this8.ny /= _this8.distance;
									_this8.weight = 1 - _this8.distance / _this8.RANGE;
									var density8 = _this8.weight * _this8.weight;
									_this8.particle1.density += density8;
									_this8.particle2.density += density8;
									density8 *= _this8.weight * _this8.NEAR_PRESSURE;
									_this8.particle1.densityNear += density8;
									_this8.particle2.densityNear += density8;
								}
							}
						}
						var _this9 = this.g2d_grids[particle.gridX][particle.gridY];
						_this9.particles[_this9.particleCount++] = particle;
					}
					particle = particle.g2d_next;
				}
			}
		}
	}
	,g2d_findNeighborsInGrid: function(p_particle1,p_grid) {
		var _g = 0;
		var _g1 = p_grid.particleCount;
		while(_g < _g1) {
			var i = _g++;
			var particle = p_grid.particles[i];
			var distance = (p_particle1.x - particle.x) * (p_particle1.x - particle.x) + (p_particle1.y - particle.y) * (p_particle1.y - particle.y);
			if(distance < 256.) {
				if(this.g2d_neighborPrecacheCount == this.g2d_neighborCount) {
					this.g2d_neighbors[this.g2d_neighborCount] = new com_genome2d_particles_GSPHNeighbor();
					this.g2d_neighborPrecacheCount++;
				}
				var _this = this.g2d_neighbors[this.g2d_neighborCount++];
				_this.particle1 = p_particle1;
				_this.particle2 = particle;
				_this.nx = _this.particle1.x - _this.particle2.x;
				_this.ny = _this.particle1.y - _this.particle2.y;
				_this.distance = Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny);
				_this.nx /= _this.distance;
				_this.ny /= _this.distance;
				_this.weight = 1 - _this.distance / _this.RANGE;
				var density = _this.weight * _this.weight;
				_this.particle1.density += density;
				_this.particle2.density += density;
				density *= _this.weight * _this.NEAR_PRESSURE;
				_this.particle1.densityNear += density;
				_this.particle2.densityNear += density;
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		var _g = 0;
		var _g1 = this.g2d_emitters;
		while(_g < _g1.length) {
			var emitter = _g1[_g];
			++_g;
			p_prototype.addChild(emitter.getPrototype(),com_genome2d_particles_GParticleSystem.PROTOTYPE_DEFAULT_CHILD_GROUP);
		}
		if(this.g2d_width != 0) {
			p_prototype.createPrototypeProperty("sphGrid","String",4,null,this.g2d_width + "," + this.g2d_height + "," + this.g2d_gridCellSize);
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		if(p_prototype.hasProperty("sphGrid")) {
			var grid = p_prototype.getProperty("sphGrid").value.toString();
			var split = grid.split(",");
			this.setupGrid(parseFloat(split[0]),parseFloat(split[1]),Std.parseInt(split[2]));
		}
		var group = p_prototype.getGroup(com_genome2d_particles_GParticleSystem.PROTOTYPE_DEFAULT_CHILD_GROUP);
		if(group != null) {
			var _g = 0;
			while(_g < group.length) {
				var prototype = group[_g];
				++_g;
				var prototype1 = com_genome2d_proto_GPrototypeFactory.createInstance(prototype);
				this.addEmitter(prototype1);
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"particle_system");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"particle_system");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_particles_GParticleSystem
};
var com_genome2d_particles_GSPHNeighbor = function() {
	this.density = 2;
	this.NEAR_PRESSURE = 1;
	this.PRESSURE = 1;
	this.RANGE = 16;
};
$hxClasses["com.genome2d.particles.GSPHNeighbor"] = com_genome2d_particles_GSPHNeighbor;
com_genome2d_particles_GSPHNeighbor.__name__ = "com.genome2d.particles.GSPHNeighbor";
com_genome2d_particles_GSPHNeighbor.prototype = {
	RANGE: null
	,PRESSURE: null
	,NEAR_PRESSURE: null
	,particle1: null
	,particle2: null
	,nx: null
	,ny: null
	,weight: null
	,density: null
	,distance: null
	,setParticles: function(p_particle1,p_particle2) {
		this.particle1 = p_particle1;
		this.particle2 = p_particle2;
		this.nx = this.particle1.x - this.particle2.x;
		this.ny = this.particle1.y - this.particle2.y;
		this.distance = Math.sqrt(this.nx * this.nx + this.ny * this.ny);
		this.nx /= this.distance;
		this.ny /= this.distance;
		this.weight = 1 - this.distance / this.RANGE;
		var density = this.weight * this.weight;
		this.particle1.density += density;
		this.particle2.density += density;
		density *= this.weight * this.NEAR_PRESSURE;
		this.particle1.densityNear += density;
		this.particle2.densityNear += density;
	}
	,calculateForce: function() {
		var p;
		if(this.particle1.group != this.particle2.group || this.particle1.group == null) {
			if(this.particle1.type != this.particle2.type || this.particle1.fixed != this.particle2.fixed || this.particle1.group != this.particle2.group) {
				p = (this.particle1.density + this.particle2.density - this.density * 1.5) * this.PRESSURE;
			} else {
				p = (this.particle1.density + this.particle2.density - this.density * 2) * this.PRESSURE;
			}
			var np = (this.particle1.densityNear + this.particle2.densityNear) * this.NEAR_PRESSURE;
			var pressureWeight = this.weight * (p + this.weight * np);
			var fx = this.nx * pressureWeight;
			var fy = this.ny * pressureWeight;
			var fax = (this.particle2.velocityX - this.particle1.velocityX) * this.weight;
			var fay = (this.particle2.velocityY - this.particle1.velocityY) * this.weight;
			if(fx == 0) {
				fx += .0000001;
			}
			if(fy == 0) {
				fy += .0000001;
			}
			this.particle1.fluidX += fx + fax * this.particle2.viscosity;
			this.particle1.fluidY += fy + fay * this.particle2.viscosity;
			this.particle2.fluidX -= fx + fax * this.particle1.viscosity;
			this.particle2.fluidY -= fy + fay * this.particle1.viscosity;
		}
	}
	,__class__: com_genome2d_particles_GSPHNeighbor
};
var com_genome2d_particles_GSPHGrid = function() {
	this.particleCount = 0;
	this.particles = [];
};
$hxClasses["com.genome2d.particles.GSPHGrid"] = com_genome2d_particles_GSPHGrid;
com_genome2d_particles_GSPHGrid.__name__ = "com.genome2d.particles.GSPHGrid";
com_genome2d_particles_GSPHGrid.prototype = {
	particles: null
	,particleCount: null
	,addParticle: function(p_particle) {
		this.particles[this.particleCount++] = p_particle;
	}
	,__class__: com_genome2d_particles_GSPHGrid
};
var com_genome2d_particles_modules_GParticleEmitterModule = function() {
	this.g2d_currentState = "default";
	this.enabled = true;
	this.updateEmitterModule = false;
	this.updateParticleModule = false;
	this.spawnParticleModule = false;
};
$hxClasses["com.genome2d.particles.modules.GParticleEmitterModule"] = com_genome2d_particles_modules_GParticleEmitterModule;
com_genome2d_particles_modules_GParticleEmitterModule.__name__ = "com.genome2d.particles.modules.GParticleEmitterModule";
com_genome2d_particles_modules_GParticleEmitterModule.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_particles_modules_GParticleEmitterModule.prototype = {
	spawnParticleModule: null
	,updateParticleModule: null
	,updateEmitterModule: null
	,enabled: null
	,spawnParticle: function(p_emitter,p_particle) {
	}
	,updateParticle: function(p_emitter,p_particle,p_deltaTime) {
	}
	,updateEmitter: function(p_emitter,p_deltaTime) {
	}
	,addedToEmitter: function(p_emitter) {
	}
	,removedFromEmitter: function(p_emitter) {
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GParticleEmitterModule");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GParticleEmitterModule");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_particles_modules_GParticleEmitterModule
};
var com_genome2d_particles_modules_GSPHVelocityModule = function() {
	com_genome2d_particles_modules_GParticleEmitterModule.call(this);
	this.updateParticleModule = true;
};
$hxClasses["com.genome2d.particles.modules.GSPHVelocityModule"] = com_genome2d_particles_modules_GSPHVelocityModule;
com_genome2d_particles_modules_GSPHVelocityModule.__name__ = "com.genome2d.particles.modules.GSPHVelocityModule";
com_genome2d_particles_modules_GSPHVelocityModule.__super__ = com_genome2d_particles_modules_GParticleEmitterModule;
com_genome2d_particles_modules_GSPHVelocityModule.prototype = $extend(com_genome2d_particles_modules_GParticleEmitterModule.prototype,{
	updateParticle: function(p_emitter,p_particle,p_deltaTime) {
		if(p_particle.density > 0 && !p_particle.fixed && p_particle.group == null) {
			p_particle.velocityX += p_particle.fluidX / (p_particle.density * 0.9 + 0.1);
			p_particle.velocityY += p_particle.fluidY / (p_particle.density * 0.9 + 0.1);
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GSPHVelocityModule");
		return com_genome2d_particles_modules_GParticleEmitterModule.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_particles_modules_GParticleEmitterModule.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GSPHVelocityModule");
	}
	,__class__: com_genome2d_particles_modules_GSPHVelocityModule
});
var com_genome2d_particles_modules_GScriptModule = function() {
	this.g2d_script = null;
	com_genome2d_particles_modules_GParticleEmitterModule.call(this);
};
$hxClasses["com.genome2d.particles.modules.GScriptModule"] = com_genome2d_particles_modules_GScriptModule;
com_genome2d_particles_modules_GScriptModule.__name__ = "com.genome2d.particles.modules.GScriptModule";
com_genome2d_particles_modules_GScriptModule.__super__ = com_genome2d_particles_modules_GParticleEmitterModule;
com_genome2d_particles_modules_GScriptModule.prototype = $extend(com_genome2d_particles_modules_GParticleEmitterModule.prototype,{
	g2d_script: null
	,get_script: function() {
		return this.g2d_script;
	}
	,set_script: function(p_value) {
		if(this.g2d_script != null) {
			this.g2d_script.g2d_onInvalidated.remove($bind(this,this.invalidate));
		}
		this.g2d_script = p_value;
		this.g2d_script.g2d_onInvalidated.add($bind(this,this.invalidate));
		this.invalidate();
		return this.g2d_script;
	}
	,g2d_executeSpawnParticle: null
	,g2d_executeUpdateParticle: null
	,g2d_executeUpdateEmitter: null
	,g2d_executeAddedToEmitter: null
	,g2d_executeRemovedFromEmitter: null
	,invalidate: function() {
		if(this.g2d_script != null) {
			this.g2d_executeSpawnParticle = this.g2d_script.getVariable("spawnParticle");
			this.g2d_executeUpdateParticle = this.g2d_script.getVariable("updateParticle");
			this.g2d_executeUpdateEmitter = this.g2d_script.getVariable("updateEmitter");
			this.g2d_executeAddedToEmitter = this.g2d_script.getVariable("addedToEmitter");
			this.g2d_executeRemovedFromEmitter = this.g2d_script.getVariable("removedFromEmitter");
			this.spawnParticleModule = this.g2d_executeSpawnParticle != null;
			this.updateParticleModule = this.g2d_executeUpdateParticle != null;
			this.updateEmitterModule = this.g2d_executeUpdateEmitter != null;
		}
	}
	,spawnParticle: function(p_emitter,p_particle) {
		if(this.g2d_executeSpawnParticle != null) {
			this.g2d_executeSpawnParticle(p_emitter,p_particle);
		}
	}
	,updateParticle: function(p_emitter,p_particle,p_deltaTime) {
		if(this.g2d_executeUpdateParticle != null) {
			this.g2d_executeUpdateParticle(p_emitter,p_particle,p_deltaTime);
		}
	}
	,updateEmitter: function(p_emitter,p_deltaTime) {
		if(this.g2d_executeUpdateEmitter != null) {
			this.g2d_executeUpdateEmitter(p_emitter,p_deltaTime);
		}
	}
	,addedToEmitter: function(p_emitter) {
		if(this.g2d_executeAddedToEmitter != null) {
			this.g2d_executeAddedToEmitter(p_emitter);
		}
	}
	,removedFromEmitter: function(p_emitter) {
		if(this.g2d_executeRemovedFromEmitter != null) {
			this.g2d_executeRemovedFromEmitter(p_emitter);
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GScriptModule");
		return com_genome2d_particles_modules_GParticleEmitterModule.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_particles_modules_GParticleEmitterModule.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GScriptModule");
	}
	,__class__: com_genome2d_particles_modules_GScriptModule
	,__properties__: {set_script:"set_script",get_script:"get_script"}
});
var com_genome2d_postprocess_GPostProcess = function(p_passes,p_filters) {
	if(p_passes == null) {
		p_passes = 1;
	}
	this.g2d_currentState = "default";
	this.g2d_bottomMargin = 0;
	this.g2d_topMargin = 0;
	this.g2d_rightMargin = 0;
	this.g2d_leftMargin = 0;
	this.renderOut = true;
	this.g2d_passes = 1;
	this.g2d_id = Std.string(com_genome2d_postprocess_GPostProcess.g2d_count++);
	if(p_passes < 1) {
		var p_arg1 = "There are no passes.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/postprocess/GPostProcess.hx", lineNumber : 52, className : "com.genome2d.postprocess.GPostProcess", methodName : "new"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	this.g2d_passes = p_passes;
	this.g2d_matrix = new com_genome2d_geom_GMatrix3D();
	if(p_filters == null) {
		this.g2d_passFilters = [];
		var _g = 0;
		var _g1 = this.g2d_passes;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_passFilters.push(null);
		}
	} else {
		this.g2d_passFilters = p_filters;
	}
	this.g2d_passTextures = [];
	var _g2 = 0;
	var _g11 = this.g2d_passes;
	while(_g2 < _g11) {
		var i1 = _g2++;
		this.g2d_passTextures.push(null);
	}
	this.createPassTextures();
};
$hxClasses["com.genome2d.postprocess.GPostProcess"] = com_genome2d_postprocess_GPostProcess;
com_genome2d_postprocess_GPostProcess.__name__ = "com.genome2d.postprocess.GPostProcess";
com_genome2d_postprocess_GPostProcess.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_postprocess_GPostProcess.prototype = {
	g2d_passes: null
	,getPassCount: function() {
		return this.g2d_passes;
	}
	,renderOut: null
	,g2d_passFilters: null
	,g2d_passTextures: null
	,g2d_activeBounds: null
	,bounds: null
	,g2d_leftMargin: null
	,g2d_rightMargin: null
	,g2d_topMargin: null
	,g2d_bottomMargin: null
	,g2d_matrix: null
	,g2d_id: null
	,setBounds: function(p_bounds) {
		this.bounds = p_bounds;
	}
	,setMargins: function(p_leftMargin,p_rightMargin,p_topMargin,p_bottomMargin) {
		if(p_bottomMargin == null) {
			p_bottomMargin = 0;
		}
		if(p_topMargin == null) {
			p_topMargin = 0;
		}
		if(p_rightMargin == null) {
			p_rightMargin = 0;
		}
		if(p_leftMargin == null) {
			p_leftMargin = 0;
		}
		this.g2d_leftMargin = p_leftMargin;
		this.g2d_rightMargin = p_rightMargin;
		this.g2d_topMargin = p_topMargin;
		this.g2d_bottomMargin = p_bottomMargin;
	}
	,render: function(p_source,p_x,p_y,p_bounds,p_target) {
		var currentBounds = p_bounds == null ? this.bounds : p_bounds;
		if(currentBounds.width > 4096) {
			return;
		}
		this.updatePassTextures(currentBounds);
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
		if(p_target == null) {
			com_genome2d_utils_GRenderTargetStack.pushRenderTarget(context.getRenderTarget(),context.getRenderTargetMatrix());
		}
		if(p_source == null) {
			var p_arg1 = "Invalid source for post process.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/postprocess/GPostProcess.hx", lineNumber : 92, className : "com.genome2d.postprocess.GPostProcess", methodName : "render"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		this.g2d_matrix.identity();
		this.g2d_matrix.prependTranslation(-currentBounds.x + this.g2d_leftMargin,-currentBounds.y + this.g2d_topMargin,0);
		context.setRenderTarget(this.g2d_passTextures[0],this.g2d_matrix,true);
		context.draw(p_source,com_genome2d_context_GBlendMode.NORMAL,p_x,p_y,1,1,0,1,1,1,1,null);
		var zero = this.g2d_passTextures[0];
		var _g = 1;
		var _g1 = this.g2d_passes;
		while(_g < _g1) {
			var i = _g++;
			context.setRenderTarget(this.g2d_passTextures[i],null,true);
			context.draw(this.g2d_passTextures[i - 1],com_genome2d_context_GBlendMode.NORMAL,0,0,1,1,0,1,1,1,1,this.g2d_passFilters[i - 1]);
		}
		if(p_target == null) {
			com_genome2d_utils_GRenderTargetStack.popRenderTarget(context);
			if(this.renderOut) {
				context.draw(this.g2d_passTextures[this.g2d_passes - 1],com_genome2d_context_GBlendMode.NORMAL,currentBounds.x - this.g2d_leftMargin,currentBounds.y - this.g2d_topMargin,1,1,0,1,1,1,1,this.g2d_passFilters[this.g2d_passes - 1]);
			}
		} else {
			context.setRenderTarget(p_target);
			context.draw(this.g2d_passTextures[this.g2d_passes - 1],com_genome2d_context_GBlendMode.NORMAL,0,0,1,1,0,1,1,1,1,this.g2d_passFilters[this.g2d_passes - 1]);
		}
		this.g2d_passTextures[0] = zero;
	}
	,renderNode: function(p_parentTransformUpdate,p_parentColorUpdate,p_camera,p_node,p_bounds,p_source,p_target) {
		var currentBounds = p_bounds;
		if(currentBounds == null) {
			currentBounds = this.bounds != null ? this.bounds : p_node.getBounds(null,this.g2d_activeBounds);
		}
		if(currentBounds.width > 4096) {
			return;
		}
		this.updatePassTextures(currentBounds);
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
		com_genome2d_utils_GRenderTargetStack.pushRenderTarget(context.getRenderTarget(),context.getRenderTargetMatrix());
		if(p_source == null) {
			this.g2d_matrix.identity();
			this.g2d_matrix.prependTranslation(-currentBounds.x + this.g2d_leftMargin,-currentBounds.y + this.g2d_topMargin,0);
			context.setRenderTarget(this.g2d_passTextures[0],this.g2d_matrix,true);
			p_node.render(true,true,p_camera,false,false);
		}
		var zero = this.g2d_passTextures[0];
		if(p_source != null) {
			this.g2d_passTextures[0] = p_source;
		}
		var _g = 1;
		var _g1 = this.g2d_passes;
		while(_g < _g1) {
			var i = _g++;
			context.setRenderTarget(this.g2d_passTextures[i],null,true);
			context.draw(this.g2d_passTextures[i - 1],com_genome2d_context_GBlendMode.NORMAL,0,0,1,1,0,1,1,1,1,this.g2d_passFilters[i - 1]);
		}
		if(p_target == null) {
			com_genome2d_utils_GRenderTargetStack.popRenderTarget(context);
			if(context.getRenderTarget() == null) {
				context.setActiveCamera(p_camera);
			}
			if(this.renderOut) {
				context.draw(this.g2d_passTextures[this.g2d_passes - 1],com_genome2d_context_GBlendMode.NORMAL,currentBounds.x - this.g2d_leftMargin,currentBounds.y - this.g2d_topMargin,1,1,0,1,1,1,1,this.g2d_passFilters[this.g2d_passes - 1]);
			}
		} else {
			context.setRenderTarget(p_target);
			context.draw(this.g2d_passTextures[this.g2d_passes - 1],com_genome2d_context_GBlendMode.NORMAL,0,0,1,1,0,1,1,1,1,this.g2d_passFilters[this.g2d_passes - 1]);
		}
		this.g2d_passTextures[0] = zero;
	}
	,getPassTexture: function(p_pass) {
		return this.g2d_passTextures[p_pass];
	}
	,getPassFilter: function(p_pass) {
		return this.g2d_passFilters[p_pass];
	}
	,updatePassTextures: function(p_bounds) {
		var w = p_bounds.width + this.g2d_leftMargin + this.g2d_rightMargin | 0;
		var h = p_bounds.height + this.g2d_topMargin + this.g2d_bottomMargin | 0;
		var tmp;
		var _this = this.g2d_passTextures[0];
		if(_this.g2d_nativeWidth * _this.g2d_scaleFactor == w) {
			var _this1 = this.g2d_passTextures[0];
			tmp = _this1.g2d_nativeHeight * _this1.g2d_scaleFactor != h;
		} else {
			tmp = true;
		}
		if(tmp && w > 0 && h > 0) {
			var i = this.g2d_passTextures.length - 1;
			while(i >= 0) {
				var texture = this.g2d_passTextures[i];
				texture.g2d_region = new com_genome2d_geom_GRectangle(0,0,w,h);
				texture.invalidateRegion();
				texture.g2d_pivotX = -(texture.g2d_nativeWidth * texture.g2d_scaleFactor) / 2 / texture.g2d_scaleFactor;
				texture.g2d_pivotY = -(texture.g2d_nativeHeight * texture.g2d_scaleFactor) / 2 / texture.g2d_scaleFactor;
				texture.invalidateNativeTexture(true);
				--i;
			}
		}
	}
	,createPassTextures: function() {
		var _g = 0;
		var _g1 = this.g2d_passes;
		while(_g < _g1) {
			var i = _g++;
			var texture = com_genome2d_textures_GTextureManager.createRenderTexture("g2d_pp_" + this.g2d_id + "_" + i,2,2);
			texture.g2d_filteringType = com_genome2d_textures_GTextureFilteringType.NEAREST;
			texture.g2d_pivotX = -(texture.g2d_nativeWidth * texture.g2d_scaleFactor) / 2 / texture.g2d_scaleFactor;
			texture.g2d_pivotY = -(texture.g2d_nativeHeight * texture.g2d_scaleFactor) / 2 / texture.g2d_scaleFactor;
			this.g2d_passTextures[i] = texture;
		}
	}
	,dispose: function() {
		var i = this.g2d_passTextures.length - 1;
		while(i >= 0) {
			this.g2d_passTextures[i].dispose();
			--i;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GPostProcess");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GPostProcess");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_postprocess_GPostProcess
};
var com_genome2d_postprocess_GBloomPP = function(p_passes,p_filters) {
	com_genome2d_postprocess_GPostProcess.call(this,p_passes,p_filters);
};
$hxClasses["com.genome2d.postprocess.GBloomPP"] = com_genome2d_postprocess_GBloomPP;
com_genome2d_postprocess_GBloomPP.__name__ = "com.genome2d.postprocess.GBloomPP";
com_genome2d_postprocess_GBloomPP.__super__ = com_genome2d_postprocess_GPostProcess;
com_genome2d_postprocess_GBloomPP.prototype = $extend(com_genome2d_postprocess_GPostProcess.prototype,{
	getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GBloomPP");
		return com_genome2d_postprocess_GPostProcess.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_postprocess_GPostProcess.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GBloomPP");
	}
	,__class__: com_genome2d_postprocess_GBloomPP
});
var com_genome2d_postprocess_GFilterPP = function(p_filters) {
	com_genome2d_postprocess_GPostProcess.call(this,p_filters.length);
	this.g2d_passFilters = p_filters;
};
$hxClasses["com.genome2d.postprocess.GFilterPP"] = com_genome2d_postprocess_GFilterPP;
com_genome2d_postprocess_GFilterPP.__name__ = "com.genome2d.postprocess.GFilterPP";
com_genome2d_postprocess_GFilterPP.__super__ = com_genome2d_postprocess_GPostProcess;
com_genome2d_postprocess_GFilterPP.prototype = $extend(com_genome2d_postprocess_GPostProcess.prototype,{
	getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GFilterPP");
		return com_genome2d_postprocess_GPostProcess.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_postprocess_GPostProcess.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GFilterPP");
	}
	,__class__: com_genome2d_postprocess_GFilterPP
});
var com_genome2d_project_GProjectConfig = function(p_contextConfig) {
	this.initGenome = true;
	this.contextConfig = p_contextConfig == null ? new com_genome2d_context_GContextConfig(null) : p_contextConfig;
};
$hxClasses["com.genome2d.project.GProjectConfig"] = com_genome2d_project_GProjectConfig;
com_genome2d_project_GProjectConfig.__name__ = "com.genome2d.project.GProjectConfig";
com_genome2d_project_GProjectConfig.prototype = {
	initGenome: null
	,contextConfig: null
	,__class__: com_genome2d_project_GProjectConfig
};
var com_genome2d_proto_GPropertyState = function(p_name,p_value,p_extras,p_transition) {
	this.g2d_name = p_name;
	this.g2d_value = p_value;
	this.g2d_extras = p_extras;
	this.g2d_transition = p_transition;
};
$hxClasses["com.genome2d.proto.GPropertyState"] = com_genome2d_proto_GPropertyState;
com_genome2d_proto_GPropertyState.__name__ = "com.genome2d.proto.GPropertyState";
com_genome2d_proto_GPropertyState.prototype = {
	g2d_name: null
	,g2d_value: null
	,g2d_transition: null
	,g2d_extras: null
	,bind: function(p_instance) {
		if(this.g2d_transition != "") {
			var transition = com_genome2d_transitions_GTransitionManager.getTransition(this.g2d_transition);
			if(transition != null) {
				transition.apply(p_instance,this.g2d_name,this.g2d_value);
			} else {
				Reflect.setProperty(p_instance,this.g2d_name,this.g2d_value);
			}
		} else {
			Reflect.setProperty(p_instance,this.g2d_name,this.g2d_value);
		}
	}
	,__class__: com_genome2d_proto_GPropertyState
};
var com_genome2d_proto_GPrototype = function() {
	this.referenceId = "";
	this.g2d_id = "";
	this.properties = new haxe_ds_StringMap();
	this.children = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.proto.GPrototype"] = com_genome2d_proto_GPrototype;
com_genome2d_proto_GPrototype.__name__ = "com.genome2d.proto.GPrototype";
com_genome2d_proto_GPrototype.prototype = {
	g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		com_genome2d_proto_GPrototypeFactory.g2d_removeReference(this);
		this.g2d_id = p_value;
		com_genome2d_proto_GPrototypeFactory.g2d_addReference(this);
		return this.g2d_id;
	}
	,referenceId: null
	,prototypeName: null
	,prototypeClass: null
	,properties: null
	,children: null
	,process: function(p_instance,p_prototypeName) {
		var currentPrototypeClass = com_genome2d_proto_GPrototypeFactory.getPrototypeClass(p_prototypeName);
		if(this.prototypeClass == null) {
			this.prototypeName = p_prototypeName;
			this.prototypeClass = currentPrototypeClass;
		}
		if(this.prototypeClass == null) {
			var p_arg1 = "Unknown class for prototype";
			var p_arg2 = p_prototypeName;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototype.hx", lineNumber : 51, className : "com.genome2d.proto.GPrototype", methodName : "process"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		var propertyNames = Reflect.field(currentPrototypeClass,"PROTOTYPE_PROPERTY_NAMES");
		var propertyTypes = Reflect.field(currentPrototypeClass,"PROTOTYPE_PROPERTY_TYPES");
		var propertyExtras = Reflect.field(currentPrototypeClass,"PROTOTYPE_PROPERTY_EXTRAS");
		var _g = 0;
		var _g1 = propertyNames.length;
		while(_g < _g1) {
			var i = _g++;
			var name = propertyNames[i];
			var extras = propertyExtras[i];
			var lookupClass = this.prototypeClass;
			var meta = Reflect.getProperty(haxe_rtti_Meta.getFields(lookupClass),name);
			while(meta == null && lookupClass != null) {
				lookupClass = lookupClass.__super__;
				if(lookupClass != null) {
					meta = Reflect.getProperty(haxe_rtti_Meta.getFields(lookupClass),name);
				}
			}
			var value = Reflect.getProperty(p_instance,name);
			var property = this.createPrototypeProperty(name,propertyTypes[i],extras,meta,null);
			property.setDynamicValue(value);
		}
	}
	,bind: function(p_instance,p_prototypeName) {
		var currentPrototypeClass = com_genome2d_proto_GPrototypeFactory.getPrototypeClass(p_prototypeName);
		var propertyNames = Reflect.field(currentPrototypeClass,"PROTOTYPE_PROPERTY_NAMES");
		var _this = this.properties;
		var property = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(property.hasNext()) {
			var property1 = property.next();
			var name = property1.name.split(".")[0];
			if(propertyNames.indexOf(name) != -1 && (property1.extras & 4) == 0) {
				property1.bind(p_instance);
			}
		}
	}
	,addChild: function(p_prototype,p_groupName) {
		var _this = this.children;
		if(!(__map_reserved[p_groupName] != null ? _this.existsReserved(p_groupName) : _this.h.hasOwnProperty(p_groupName))) {
			var this1 = this.children;
			var value = [];
			var _this1 = this1;
			if(__map_reserved[p_groupName] != null) {
				_this1.setReserved(p_groupName,value);
			} else {
				_this1.h[p_groupName] = value;
			}
		}
		var _this2 = this.children;
		(__map_reserved[p_groupName] != null ? _this2.getReserved(p_groupName) : _this2.h[p_groupName]).push(p_prototype);
	}
	,getGroup: function(p_groupName) {
		var _this = this.children;
		if(__map_reserved[p_groupName] != null) {
			return _this.getReserved(p_groupName);
		} else {
			return _this.h[p_groupName];
		}
	}
	,hasProperty: function(p_propertyName) {
		var _this = this.properties;
		if(__map_reserved[p_propertyName] != null) {
			return _this.existsReserved(p_propertyName);
		} else {
			return _this.h.hasOwnProperty(p_propertyName);
		}
	}
	,getProperty: function(p_propertyName) {
		var _this = this.properties;
		if(__map_reserved[p_propertyName] != null) {
			return _this.getReserved(p_propertyName);
		} else {
			return _this.h[p_propertyName];
		}
	}
	,getNonAutoBindProperties: function() {
		var gen = new haxe_ds_StringMap();
		var key = this.properties.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.properties;
			var property = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if((property.extras & 4) == 4) {
				if(__map_reserved[key1] != null) {
					gen.setReserved(key1,property);
				} else {
					gen.h[key1] = property;
				}
			}
		}
		return gen;
	}
	,setPropertyFromString: function(p_name,p_value) {
		var split = p_name.split(".");
		var lookupClass = this.prototypeClass;
		var propertyNames = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_NAMES");
		while(propertyNames.indexOf(split[0]) == -1 && lookupClass != null) {
			lookupClass = lookupClass.__super__;
			if(lookupClass != null) {
				propertyNames = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_NAMES");
			}
		}
		if(lookupClass != null) {
			var propertyTypes = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_TYPES");
			var propertyExtras = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_EXTRAS");
			var propertyIndex = propertyNames.indexOf(split[0]);
			var meta = Reflect.getProperty(haxe_rtti_Meta.getFields(lookupClass),p_name);
			var property = this.createPrototypeProperty(p_name,propertyTypes[propertyIndex],propertyExtras[propertyIndex],meta,null);
			property.setStringValue(p_value);
		} else {
			this.createPrototypeProperty(p_name,"String",0,null,p_value);
		}
	}
	,createPrototypeProperty: function(p_name,p_type,p_extras,p_meta,p_value) {
		var property = new com_genome2d_proto_GPrototypeProperty(p_name,p_type,p_extras,p_meta);
		var _this = this.properties;
		if(__map_reserved[p_name] != null) {
			_this.setReserved(p_name,property);
		} else {
			_this.h[p_name] = property;
		}
		property.value = p_value;
		return property;
	}
	,__class__: com_genome2d_proto_GPrototype
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var com_genome2d_proto_GPrototypeProperty = function(p_name,p_type,p_extras,p_meta) {
	this.isEnum = false;
	this.isParameter = false;
	this.name = p_name;
	this.type = p_type;
	this.extras = p_extras;
	this.meta = p_meta;
};
$hxClasses["com.genome2d.proto.GPrototypeProperty"] = com_genome2d_proto_GPrototypeProperty;
com_genome2d_proto_GPrototypeProperty.__name__ = "com.genome2d.proto.GPrototypeProperty";
com_genome2d_proto_GPrototypeProperty.prototype = {
	name: null
	,value: null
	,type: null
	,extras: null
	,isParameter: null
	,isEnum: null
	,meta: null
	,setDynamicValue: function(p_value) {
		if((this.extras & 2) != 0) {
			this.value = p_value != null ? (js_Boot.__cast(p_value , com_genome2d_proto_IGPrototypable)).toReference() : null;
		} else if(this.type == "Bool" || this.type == "Int" || this.type == "Float" || this.type == "String" || this.type.indexOf("Array") == 0) {
			this.value = p_value;
		} else {
			try {
				var _g = Type.typeof(p_value);
				switch(_g._hx_index) {
				case 6:
					var c = _g.c;
					this.value = p_value == null ? null : (js_Boot.__cast(p_value , com_genome2d_proto_IGPrototypable)).getPrototype();
					break;
				case 7:
					var e = _g.e;
					if(p_value != "null") {
						if(com_genome2d_proto_GPrototype.resolveEnum != null) {
							this.value = Type.createEnum(com_genome2d_proto_GPrototype.resolveEnum(this.type),Std.string(p_value));
						} else {
							var name = this.type;
							this.value = Type.createEnum($hxEnums[name],Std.string(p_value));
						}
						this.isEnum = true;
					} else {
						this.value = null;
					}
					break;
				default:
				}
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				var p_arg1 = "Invalid prototype property";
				var p_arg2 = this.name;
				var p_arg3 = this.type;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototype.hx", lineNumber : 211, className : "com.genome2d.proto.GPrototypeProperty", methodName : "setDynamicValue"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
		}
	}
	,setStringValue: function(p_value) {
		if(p_value.indexOf("$") == 0) {
			this.isParameter = true;
			this.value = HxOverrides.substr(p_value,1,null);
		} else {
			this.value = this.getRealValue(p_value);
		}
	}
	,getRealValue: function(p_value) {
		var realValue = null;
		if((this.extras & 2) != 0) {
			realValue = p_value == "null" ? null : p_value;
		} else {
			switch(this.type) {
			case "Bool":
				realValue = p_value != "false" && p_value != "0";
				break;
			case "Float":
				realValue = parseFloat(p_value);
				break;
			case "Int":
				realValue = Std.parseInt(p_value);
				break;
			case "Dynamic":case "String":
				realValue = p_value;
				break;
			default:
				var split = this.type.split(":");
				if(split.length == 2 && split[0] == "Array") {
					realValue = p_value == "null" ? null : HxOverrides.substr(p_value,1,p_value.length - 2).split(",");
				} else {
					try {
						if(p_value != "null") {
							if(com_genome2d_proto_GPrototype.resolveEnum != null) {
								realValue = Type.createEnum(com_genome2d_proto_GPrototype.resolveEnum(this.type),p_value == null ? "null" : "" + p_value);
							} else {
								var name = this.type;
								realValue = Type.createEnum($hxEnums[name],p_value == null ? "null" : "" + p_value);
							}
							this.isEnum = true;
						} else {
							realValue = null;
						}
					} catch( e ) {
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						if(typeof(e1) == "string") {
							var e2 = e1;
							var p_arg1 = "Error during prototype binding invalid value for type: " + this.type;
							var p_arg2 = null;
							var p_arg3 = null;
							var p_arg4 = null;
							var p_arg5 = null;
							var p_arg6 = null;
							var p_arg7 = null;
							var p_arg8 = null;
							var p_arg9 = null;
							var p_arg10 = null;
							var p_arg11 = null;
							var p_arg12 = null;
							var p_arg13 = null;
							var p_arg14 = null;
							var p_arg15 = null;
							var p_arg16 = null;
							var p_arg17 = null;
							var p_arg18 = null;
							var p_arg19 = null;
							var p_arg20 = null;
							var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototype.hx", lineNumber : 258, className : "com.genome2d.proto.GPrototypeProperty", methodName : "getRealValue"};
							var args = [];
							if(p_arg1 != null) {
								args.push(p_arg1);
							}
							if(p_arg2 != null) {
								args.push(p_arg2);
							}
							if(p_arg3 != null) {
								args.push(p_arg3);
							}
							if(p_arg4 != null) {
								args.push(p_arg4);
							}
							if(p_arg5 != null) {
								args.push(p_arg5);
							}
							if(p_arg6 != null) {
								args.push(p_arg6);
							}
							if(p_arg7 != null) {
								args.push(p_arg7);
							}
							if(p_arg8 != null) {
								args.push(p_arg8);
							}
							if(p_arg9 != null) {
								args.push(p_arg9);
							}
							if(p_arg10 != null) {
								args.push(p_arg10);
							}
							if(p_arg11 != null) {
								args.push(p_arg11);
							}
							if(p_arg12 != null) {
								args.push(p_arg12);
							}
							if(p_arg13 != null) {
								args.push(p_arg13);
							}
							if(p_arg14 != null) {
								args.push(p_arg14);
							}
							if(p_arg15 != null) {
								args.push(p_arg15);
							}
							if(p_arg16 != null) {
								args.push(p_arg16);
							}
							if(p_arg17 != null) {
								args.push(p_arg17);
							}
							if(p_arg18 != null) {
								args.push(p_arg18);
							}
							if(p_arg19 != null) {
								args.push(p_arg19);
							}
							if(p_arg20 != null) {
								args.push(p_arg20);
							}
							if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
								com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
							}
							var msg = "ERROR: ";
							if(pos != null) {
								msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
							}
							if(args.length > 0) {
								msg += args.toString();
							}
							com_genome2d_debug_GDebug.g2d_log += msg;
							if(com_genome2d_debug_GDebug.useNativeTrace) {
								window.console.log(msg);
							}
							throw new js__$Boot_HaxeError(msg);
						} else {
							throw e;
						}
					}
				}
			}
		}
		return realValue;
	}
	,bind: function(p_instance) {
		var realValue;
		var mapValue = this.value;
		if(this.isParameter) {
			if(!com_genome2d_proto_GPrototypeFactory.getParameters().hasParameter(this.value)) {
				var p_arg1 = "Invalid parameter in prototype";
				var p_arg2 = this.value;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototype.hx", lineNumber : 271, className : "com.genome2d.proto.GPrototypeProperty", methodName : "bind"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
			mapValue = this.getRealValue(com_genome2d_proto_GPrototypeFactory.getParameters().getParameter(this.value));
		}
		if((this.extras & 2) != 0 && mapValue != null) {
			var parsedType = StringTools.replace(this.type,".","_");
			var c = com_genome2d_proto_GPrototypeFactory.getPrototypeClass(parsedType);
			realValue = c != null ? Reflect.field(c,"fromReference").apply(c,[mapValue]) : null;
		} else if((this.value == null || ((this.value) instanceof com_genome2d_proto_GPrototype)) && mapValue != null) {
			realValue = com_genome2d_proto_GPrototypeFactory.createInstance(mapValue);
		} else {
			realValue = mapValue;
		}
		var split = this.name.split(".");
		if(split.length == 1 || split[1].split("-").indexOf("default") != -1) {
			try {
				Reflect.setProperty(p_instance,split[0],realValue);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			}
		}
		var _this = p_instance.g2d_prototypeStates;
		var p_property = split[0];
		var p_extras = this.extras;
		var p_stateName = split[1];
		var p_transition = split[2];
		if(p_stateName == null) {
			p_stateName = "default";
		}
		var split1 = p_stateName.split("-");
		if(split1.length > 1) {
			var _g = 0;
			var _g1 = split1.length;
			while(_g < _g1) {
				var i = _g++;
				var p_stateName1 = split1[i];
				if(p_stateName1 == null) {
					p_stateName1 = "default";
				}
				var split2 = p_stateName1.split("-");
				if(split2.length > 1) {
					var _g2 = 0;
					var _g11 = split2.length;
					while(_g2 < _g11) {
						var i1 = _g2++;
						_this.setProperty(p_property,realValue,p_extras,split2[i1],p_transition);
					}
				} else {
					var _this1 = _this.g2d_states;
					var state = __map_reserved[p_stateName1] != null ? _this1.getReserved(p_stateName1) : _this1.h[p_stateName1];
					if(state == null) {
						state = new haxe_ds_StringMap();
						var _this2 = _this.g2d_states;
						if(__map_reserved[p_stateName1] != null) {
							_this2.setReserved(p_stateName1,state);
						} else {
							_this2.h[p_stateName1] = state;
						}
					}
					var value = new com_genome2d_proto_GPropertyState(p_property,realValue,p_extras,p_transition);
					if(__map_reserved[p_property] != null) {
						state.setReserved(p_property,value);
					} else {
						state.h[p_property] = value;
					}
				}
			}
		} else {
			var _this3 = _this.g2d_states;
			var state1 = __map_reserved[p_stateName] != null ? _this3.getReserved(p_stateName) : _this3.h[p_stateName];
			if(state1 == null) {
				state1 = new haxe_ds_StringMap();
				var _this4 = _this.g2d_states;
				if(__map_reserved[p_stateName] != null) {
					_this4.setReserved(p_stateName,state1);
				} else {
					_this4.h[p_stateName] = state1;
				}
			}
			var value1 = new com_genome2d_proto_GPropertyState(p_property,realValue,p_extras,p_transition);
			if(__map_reserved[p_property] != null) {
				state1.setReserved(p_property,value1);
			} else {
				state1.h[p_property] = value1;
			}
		}
	}
	,isBasicType: function() {
		if(!(this.type == "Bool" || this.type == "Int" || this.type == "Float" || this.type == "String")) {
			return this.type.indexOf("Array") == 0;
		} else {
			return true;
		}
	}
	,isReference: function() {
		return (this.extras & 2) != 0;
	}
	,isPrototype: function() {
		if(this.value != null) {
			return ((this.value) instanceof com_genome2d_proto_GPrototype);
		} else {
			return true;
		}
	}
	,__class__: com_genome2d_proto_GPrototypeProperty
};
var com_genome2d_proto_GPrototypeConstructorLookups = function() { };
$hxClasses["com.genome2d.proto.GPrototypeConstructorLookups"] = com_genome2d_proto_GPrototypeConstructorLookups;
com_genome2d_proto_GPrototypeConstructorLookups.__name__ = "com.genome2d.proto.GPrototypeConstructorLookups";
com_genome2d_proto_GPrototypeConstructorLookups._arguments = null;
com_genome2d_proto_GPrototypeConstructorLookups.getArguments = function(p_prototypeName) {
	var _this = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var args = __map_reserved[p_prototypeName] != null ? _this.getReserved(p_prototypeName) : _this.h[p_prototypeName];
	if(args == null) {
		return [];
	} else {
		return args;
	}
};
com_genome2d_proto_GPrototypeConstructorLookups.initialize = function() {
	com_genome2d_proto_GPrototypeConstructorLookups._arguments = new haxe_ds_StringMap();
	var _this = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value = ["",null,true,null];
	if(__map_reserved["textureSkin"] != null) {
		_this.setReserved("textureSkin",value);
	} else {
		_this.h["textureSkin"] = value;
	}
	var _this1 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value1 = ["",null,1,true,null];
	if(__map_reserved["fontSkin"] != null) {
		_this1.setReserved("fontSkin",value1);
	} else {
		_this1.h["fontSkin"] = value1;
	}
	var _this2 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value2 = [null];
	if(__map_reserved["element"] != null) {
		_this2.setReserved("element",value2);
	} else {
		_this2.h["element"] = value2;
	}
	var _this3 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value3 = [null];
	if(__map_reserved["particle_emitter"] != null) {
		_this3.setReserved("particle_emitter",value3);
	} else {
		_this3.h["particle_emitter"] = value3;
	}
	var _this4 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value4 = [0.0];
	if(__map_reserved["GCurve"] != null) {
		_this4.setReserved("GCurve",value4);
	} else {
		_this4.h["GCurve"] = value4;
	}
	var _this5 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value5 = [0,0];
	if(__map_reserved["GIntPoint"] != null) {
		_this5.setReserved("GIntPoint",value5);
	} else {
		_this5.h["GIntPoint"] = value5;
	}
	var _this6 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value6 = [1,null];
	if(__map_reserved["GPostProcess"] != null) {
		_this6.setReserved("GPostProcess",value6);
	} else {
		_this6.h["GPostProcess"] = value6;
	}
	var _this7 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value7 = ["",0,null,0];
	if(__map_reserved["transition"] != null) {
		_this7.setReserved("transition",value7);
	} else {
		_this7.h["transition"] = value7;
	}
	var _this8 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value8 = [null];
	if(__map_reserved["GCurveInterp"] != null) {
		_this8.setReserved("GCurveInterp",value8);
	} else {
		_this8.h["GCurveInterp"] = value8;
	}
	var _this9 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value9 = [null];
	if(__map_reserved["tweenFloat"] != null) {
		_this9.setReserved("tweenFloat",value9);
	} else {
		_this9.h["tweenFloat"] = value9;
	}
	var _this10 = com_genome2d_proto_GPrototypeConstructorLookups._arguments;
	var value10 = [""];
	if(__map_reserved["node"] != null) {
		_this10.setReserved("node",value10);
	} else {
		_this10.h["node"] = value10;
	}
};
var com_genome2d_proto_GPrototypeExtras = function() { };
$hxClasses["com.genome2d.proto.GPrototypeExtras"] = com_genome2d_proto_GPrototypeExtras;
com_genome2d_proto_GPrototypeExtras.__name__ = "com.genome2d.proto.GPrototypeExtras";
var com_genome2d_proto_GPrototypeFactory = function() { };
$hxClasses["com.genome2d.proto.GPrototypeFactory"] = com_genome2d_proto_GPrototypeFactory;
com_genome2d_proto_GPrototypeFactory.__name__ = "com.genome2d.proto.GPrototypeFactory";
com_genome2d_proto_GPrototypeFactory.g2d_helper = null;
com_genome2d_proto_GPrototypeFactory.g2d_lookups = null;
com_genome2d_proto_GPrototypeFactory.g2d_prototypeReferences = null;
com_genome2d_proto_GPrototypeFactory.getParameters = function() {
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	return com_genome2d_Genome2D.g2d_instance.getParameters();
};
com_genome2d_proto_GPrototypeFactory.initializePrototypes = function() {
	if(com_genome2d_proto_GPrototypeFactory.g2d_lookups != null) {
		return;
	}
	com_genome2d_proto_GPrototypeFactory.g2d_lookups = new haxe_ds_StringMap();
	com_genome2d_proto_GPrototypeFactory.g2d_prototypeReferences = new haxe_ds_StringMap();
	var fields = Type.getClassFields(com_genome2d_proto_GPrototypeHelper);
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(field.indexOf("g2d_") == 0) {
			continue;
		}
		var name = Reflect.field(com_genome2d_proto_GPrototypeHelper,field);
		var cls = $hxClasses[name];
		if(cls != null) {
			var _this = com_genome2d_proto_GPrototypeFactory.g2d_lookups;
			if(__map_reserved[field] != null) {
				_this.setReserved(field,cls);
			} else {
				_this.h[field] = cls;
			}
		}
	}
};
com_genome2d_proto_GPrototypeFactory.g2d_addReference = function(p_prototype) {
	var key = p_prototype.g2d_id;
	var _this = com_genome2d_proto_GPrototypeFactory.g2d_prototypeReferences;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,p_prototype);
	} else {
		_this.h[key] = p_prototype;
	}
};
com_genome2d_proto_GPrototypeFactory.g2d_removeReference = function(p_prototype) {
	com_genome2d_proto_GPrototypeFactory.g2d_prototypeReferences.remove(p_prototype.g2d_id);
};
com_genome2d_proto_GPrototypeFactory.setPrototypeClass = function(p_prototypeName,p_class) {
	var _this = com_genome2d_proto_GPrototypeFactory.g2d_lookups;
	if(__map_reserved[p_prototypeName] != null) {
		_this.setReserved(p_prototypeName,p_class);
	} else {
		_this.h[p_prototypeName] = p_class;
	}
};
com_genome2d_proto_GPrototypeFactory.getPrototypeClass = function(p_prototypeName) {
	var _this = com_genome2d_proto_GPrototypeFactory.g2d_lookups;
	if(__map_reserved[p_prototypeName] != null) {
		return _this.getReserved(p_prototypeName);
	} else {
		return _this.h[p_prototypeName];
	}
};
com_genome2d_proto_GPrototypeFactory.createInstance = function(p_prototype,p_args) {
	if(p_prototype.prototypeClass == null) {
		var p_arg1 = "Non existing prototype class " + p_prototype.prototypeName;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototypeFactory.hx", lineNumber : 66, className : "com.genome2d.proto.GPrototypeFactory", methodName : "createInstance"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	if(p_args == null) {
		p_args = [];
	}
	var proto = Type.createInstance(p_prototype.prototypeClass,p_args);
	if(proto == null) {
		var p_arg110 = "Invalid prototype class " + p_prototype.prototypeName;
		var p_arg21 = null;
		var p_arg31 = null;
		var p_arg41 = null;
		var p_arg51 = null;
		var p_arg61 = null;
		var p_arg71 = null;
		var p_arg81 = null;
		var p_arg91 = null;
		var p_arg101 = null;
		var p_arg111 = null;
		var p_arg121 = null;
		var p_arg131 = null;
		var p_arg141 = null;
		var p_arg151 = null;
		var p_arg161 = null;
		var p_arg171 = null;
		var p_arg181 = null;
		var p_arg191 = null;
		var p_arg201 = null;
		var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototypeFactory.hx", lineNumber : 78, className : "com.genome2d.proto.GPrototypeFactory", methodName : "createInstance"};
		var args1 = [];
		if(p_arg110 != null) {
			args1.push(p_arg110);
		}
		if(p_arg21 != null) {
			args1.push(p_arg21);
		}
		if(p_arg31 != null) {
			args1.push(p_arg31);
		}
		if(p_arg41 != null) {
			args1.push(p_arg41);
		}
		if(p_arg51 != null) {
			args1.push(p_arg51);
		}
		if(p_arg61 != null) {
			args1.push(p_arg61);
		}
		if(p_arg71 != null) {
			args1.push(p_arg71);
		}
		if(p_arg81 != null) {
			args1.push(p_arg81);
		}
		if(p_arg91 != null) {
			args1.push(p_arg91);
		}
		if(p_arg101 != null) {
			args1.push(p_arg101);
		}
		if(p_arg111 != null) {
			args1.push(p_arg111);
		}
		if(p_arg121 != null) {
			args1.push(p_arg121);
		}
		if(p_arg131 != null) {
			args1.push(p_arg131);
		}
		if(p_arg141 != null) {
			args1.push(p_arg141);
		}
		if(p_arg151 != null) {
			args1.push(p_arg151);
		}
		if(p_arg161 != null) {
			args1.push(p_arg161);
		}
		if(p_arg171 != null) {
			args1.push(p_arg171);
		}
		if(p_arg181 != null) {
			args1.push(p_arg181);
		}
		if(p_arg191 != null) {
			args1.push(p_arg191);
		}
		if(p_arg201 != null) {
			args1.push(p_arg201);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
		}
		var msg1 = "ERROR: ";
		if(pos1 != null) {
			msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
		}
		if(args1.length > 0) {
			msg1 += args1.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg1;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg1);
		}
		throw new js__$Boot_HaxeError(msg1);
	}
	if(p_prototype.referenceId == "") {
		proto.bindPrototype(p_prototype);
	} else {
		var key = p_prototype.referenceId;
		var _this = com_genome2d_proto_GPrototypeFactory.g2d_prototypeReferences;
		var ref = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(ref != null) {
			proto.bindPrototype(ref);
		} else {
			var p_arg112 = "Invalid prototype reference " + p_prototype.referenceId;
			var p_arg22 = null;
			var p_arg32 = null;
			var p_arg42 = null;
			var p_arg52 = null;
			var p_arg62 = null;
			var p_arg72 = null;
			var p_arg82 = null;
			var p_arg92 = null;
			var p_arg102 = null;
			var p_arg113 = null;
			var p_arg122 = null;
			var p_arg132 = null;
			var p_arg142 = null;
			var p_arg152 = null;
			var p_arg162 = null;
			var p_arg172 = null;
			var p_arg182 = null;
			var p_arg192 = null;
			var p_arg202 = null;
			var pos2 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototypeFactory.hx", lineNumber : 87, className : "com.genome2d.proto.GPrototypeFactory", methodName : "createInstance"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args2 = [];
				if(p_arg112 != null) {
					args2.push(p_arg112);
				}
				if(p_arg22 != null) {
					args2.push(p_arg22);
				}
				if(p_arg32 != null) {
					args2.push(p_arg32);
				}
				if(p_arg42 != null) {
					args2.push(p_arg42);
				}
				if(p_arg52 != null) {
					args2.push(p_arg52);
				}
				if(p_arg62 != null) {
					args2.push(p_arg62);
				}
				if(p_arg72 != null) {
					args2.push(p_arg72);
				}
				if(p_arg82 != null) {
					args2.push(p_arg82);
				}
				if(p_arg92 != null) {
					args2.push(p_arg92);
				}
				if(p_arg102 != null) {
					args2.push(p_arg102);
				}
				if(p_arg113 != null) {
					args2.push(p_arg113);
				}
				if(p_arg122 != null) {
					args2.push(p_arg122);
				}
				if(p_arg132 != null) {
					args2.push(p_arg132);
				}
				if(p_arg142 != null) {
					args2.push(p_arg142);
				}
				if(p_arg152 != null) {
					args2.push(p_arg152);
				}
				if(p_arg162 != null) {
					args2.push(p_arg162);
				}
				if(p_arg172 != null) {
					args2.push(p_arg172);
				}
				if(p_arg182 != null) {
					args2.push(p_arg182);
				}
				if(p_arg192 != null) {
					args2.push(p_arg192);
				}
				if(p_arg202 != null) {
					args2.push(p_arg202);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos2,args2);
				}
				var msg2 = "WARNING: ";
				if(pos2 != null) {
					msg2 += pos2.fileName + ":" + pos2.lineNumber + " : " + pos2.methodName + " : ";
				}
				if(args2.length > 0) {
					msg2 += args2.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg2;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg2);
				}
			}
		}
	}
	return proto;
};
com_genome2d_proto_GPrototypeFactory.createPrototypeInstances = function(p_prototypes) {
	var prototypeInstances = [];
	var _g = 0;
	while(_g < p_prototypes.length) {
		var prototype = p_prototypes[_g];
		++_g;
		prototypeInstances.push(com_genome2d_proto_GPrototypeFactory.createInstance(prototype));
	}
	return prototypeInstances;
};
com_genome2d_proto_GPrototypeFactory.isValidProtototypeName = function(p_prototypeName) {
	var _this = com_genome2d_proto_GPrototypeFactory.g2d_lookups;
	if(__map_reserved[p_prototypeName] != null) {
		return _this.existsReserved(p_prototypeName);
	} else {
		return _this.h.hasOwnProperty(p_prototypeName);
	}
};
com_genome2d_proto_GPrototypeFactory.g2d_getPrototype = function(p_prototype,p_instance,p_prototypeName) {
	if(p_prototype == null) {
		p_prototype = new com_genome2d_proto_GPrototype();
	}
	p_prototype.process(p_instance,p_prototypeName);
	return p_prototype;
};
com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype = function(p_instance,p_prototype,p_prototypeName) {
	if(p_prototype == null) {
		var p_arg1 = "Null prototype";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/GPrototypeFactory.hx", lineNumber : 129, className : "com.genome2d.proto.GPrototypeFactory", methodName : "g2d_bindPrototype"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	if(p_instance.g2d_prototypeStates == null) {
		p_instance.g2d_prototypeStates = new com_genome2d_proto_GPrototypeStates();
	}
	p_prototype.bind(p_instance,p_prototypeName);
};
var com_genome2d_proto_GPrototypeSpecs = function() { };
$hxClasses["com.genome2d.proto.GPrototypeSpecs"] = com_genome2d_proto_GPrototypeSpecs;
com_genome2d_proto_GPrototypeSpecs.__name__ = "com.genome2d.proto.GPrototypeSpecs";
var com_genome2d_proto_GPrototypeStates = function() {
	this.g2d_states = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.proto.GPrototypeStates"] = com_genome2d_proto_GPrototypeStates;
com_genome2d_proto_GPrototypeStates.__name__ = "com.genome2d.proto.GPrototypeStates";
com_genome2d_proto_GPrototypeStates.prototype = {
	g2d_states: null
	,setProperty: function(p_property,p_value,p_extras,p_stateName,p_transition) {
		if(p_stateName == null) {
			p_stateName = "default";
		}
		var split = p_stateName.split("-");
		if(split.length > 1) {
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				this.setProperty(p_property,p_value,p_extras,split[i],p_transition);
			}
		} else {
			var _this = this.g2d_states;
			var state = __map_reserved[p_stateName] != null ? _this.getReserved(p_stateName) : _this.h[p_stateName];
			if(state == null) {
				state = new haxe_ds_StringMap();
				var _this1 = this.g2d_states;
				if(__map_reserved[p_stateName] != null) {
					_this1.setReserved(p_stateName,state);
				} else {
					_this1.h[p_stateName] = state;
				}
			}
			var value = new com_genome2d_proto_GPropertyState(p_property,p_value,p_extras,p_transition);
			if(__map_reserved[p_property] != null) {
				state.setReserved(p_property,value);
			} else {
				state.h[p_property] = value;
			}
		}
	}
	,getState: function(p_stateName) {
		if(p_stateName == null) {
			p_stateName = "default";
		}
		var _this = this.g2d_states;
		if(__map_reserved[p_stateName] != null) {
			return _this.getReserved(p_stateName);
		} else {
			return _this.h[p_stateName];
		}
	}
	,hasState: function(p_stateName) {
		var _this = this.g2d_states;
		if(__map_reserved[p_stateName] != null) {
			return _this.existsReserved(p_stateName);
		} else {
			return _this.h.hasOwnProperty(p_stateName);
		}
	}
	,__class__: com_genome2d_proto_GPrototypeStates
};
var com_genome2d_proto_parsers_GXmlPrototypeParser = function() { };
$hxClasses["com.genome2d.proto.parsers.GXmlPrototypeParser"] = com_genome2d_proto_parsers_GXmlPrototypeParser;
com_genome2d_proto_parsers_GXmlPrototypeParser.__name__ = "com.genome2d.proto.parsers.GXmlPrototypeParser";
com_genome2d_proto_parsers_GXmlPrototypeParser.createPrototypeFromXmlString = function(p_xmlString) {
	return com_genome2d_proto_GPrototypeFactory.createInstance(com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml(Xml.parse(p_xmlString).firstElement()));
};
com_genome2d_proto_parsers_GXmlPrototypeParser.toXml = function(p_prototype) {
	var xml = Xml.createElement(p_prototype.prototypeName);
	var _this = p_prototype.properties;
	var property = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(property.hasNext()) {
		var property1 = property.next();
		if(property1.type == "Bool" || property1.type == "Int" || property1.type == "Float" || property1.type == "String" || property1.type.indexOf("Array") == 0 || (property1.extras & 2) != 0 || property1.isEnum) {
			xml.set(property1.name,Std.string(property1.value));
		} else if(property1.value == null || ((property1.value) instanceof com_genome2d_proto_GPrototype)) {
			var propertyXml = Xml.createElement("p:" + property1.name);
			if(property1.value != null) {
				propertyXml.addChild(com_genome2d_proto_parsers_GXmlPrototypeParser.toXml(property1.value));
			}
			xml.addChild(propertyXml);
		} else {
			var p_arg1 = "Error during prototype parsing unknown property type";
			var p_arg2 = property1.type;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/parsers/GXmlPrototypeParser.hx", lineNumber : 30, className : "com.genome2d.proto.parsers.GXmlPrototypeParser", methodName : "toXml"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
	}
	var groupName = p_prototype.children.keys();
	while(groupName.hasNext()) {
		var groupName1 = groupName.next();
		var isDefaultChildGroup = groupName1 == Reflect.field(p_prototype.prototypeClass,"PROTOTYPE_DEFAULT_CHILD_GROUP");
		var groupXml = isDefaultChildGroup ? null : Xml.createElement(groupName1);
		var _this1 = p_prototype.children;
		var group = __map_reserved[groupName1] != null ? _this1.getReserved(groupName1) : _this1.h[groupName1];
		var _g = 0;
		while(_g < group.length) {
			var prototype = group[_g];
			++_g;
			if(!isDefaultChildGroup) {
				groupXml.addChild(com_genome2d_proto_parsers_GXmlPrototypeParser.toXml(prototype));
			} else {
				xml.addChild(com_genome2d_proto_parsers_GXmlPrototypeParser.toXml(prototype));
			}
		}
		if(!isDefaultChildGroup) {
			xml.addChild(groupXml);
		}
	}
	if(p_prototype.g2d_id != "") {
		xml.set("prototypeId",p_prototype.g2d_id);
	} else if(p_prototype.referenceId != "") {
		xml.set("referenceId",p_prototype.referenceId);
	}
	return xml;
};
com_genome2d_proto_parsers_GXmlPrototypeParser.setPropertyFromXml = function(p_prototype,p_name,p_value) {
	var split = p_name.split(".");
	var lookupClass = p_prototype.prototypeClass;
	var propertyNames = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_NAMES");
	while(propertyNames.indexOf(split[0]) == -1 && lookupClass != null) {
		lookupClass = lookupClass.__super__;
		if(lookupClass != null) {
			propertyNames = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_NAMES");
		}
	}
	if(lookupClass != null) {
		var propertyTypes = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_TYPES");
		var propertyExtras = Reflect.field(lookupClass,"PROTOTYPE_PROPERTY_EXTRAS");
		var propertyIndex = propertyNames.indexOf(split[0]);
		var meta = Reflect.getProperty(haxe_rtti_Meta.getFields(lookupClass),p_name);
		p_prototype.createPrototypeProperty(p_name,propertyTypes[propertyIndex],propertyExtras[propertyIndex],meta,com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml(p_value));
	}
};
com_genome2d_proto_parsers_GXmlPrototypeParser.getPrototypeName = function(p_xml) {
	if(p_xml.nodeType == Xml.Document) {
		p_xml = p_xml.firstElement();
	}
	if(p_xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(p_xml.nodeType));
	}
	return p_xml.nodeName;
};
com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml = function(p_xml) {
	if(p_xml.nodeType == Xml.Document) {
		p_xml = p_xml.firstElement();
	}
	var prototype = new com_genome2d_proto_GPrototype();
	if(p_xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(p_xml.nodeType));
	}
	prototype.prototypeName = p_xml.nodeName;
	prototype.prototypeClass = com_genome2d_proto_GPrototypeFactory.getPrototypeClass(prototype.prototypeName);
	if(prototype.prototypeClass == null) {
		var p_arg1 = "Invalid prototype type";
		var p_arg2 = prototype.prototypeName;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/proto/parsers/GXmlPrototypeParser.hx", lineNumber : 86, className : "com.genome2d.proto.parsers.GXmlPrototypeParser", methodName : "fromXml"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	if(p_xml.get("referenceId") != null) {
		prototype.referenceId = p_xml.get("referenceId");
	} else {
		var defaultChildGroup = Reflect.field(prototype.prototypeClass,"PROTOTYPE_DEFAULT_CHILD_GROUP");
		var attribute = p_xml.attributes();
		while(attribute.hasNext()) {
			var attribute1 = attribute.next();
			if(attribute1 == "prototypeId") {
				var p_value = p_xml.get(attribute1);
				com_genome2d_proto_GPrototypeFactory.g2d_removeReference(prototype);
				prototype.g2d_id = p_value;
				com_genome2d_proto_GPrototypeFactory.g2d_addReference(prototype);
			} else {
				prototype.setPropertyFromString(attribute1,p_xml.get(attribute1));
			}
		}
		var element = p_xml.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			if(element1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(element1.nodeType));
			}
			if(element1.nodeName.indexOf("p:") == 0) {
				if(element1.firstElement() == null) {
					if(element1.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(element1.nodeType));
					}
					prototype.setPropertyFromString(HxOverrides.substr(element1.nodeName,2,null),"null");
				} else {
					if(element1.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(element1.nodeType));
					}
					com_genome2d_proto_parsers_GXmlPrototypeParser.setPropertyFromXml(prototype,HxOverrides.substr(element1.nodeName,2,null),element1.firstElement());
				}
			} else {
				if(element1.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(element1.nodeType));
				}
				if(element1.nodeName == defaultChildGroup || defaultChildGroup == "*") {
					prototype.addChild(com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml(element1),defaultChildGroup);
				} else {
					var child = element1.elements();
					while(child.hasNext()) {
						var child1 = child.next();
						var tmp = com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml(child1);
						if(element1.nodeType != Xml.Element) {
							throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(element1.nodeType));
						}
						prototype.addChild(tmp,element1.nodeName);
					}
				}
			}
		}
	}
	return prototype;
};
com_genome2d_proto_parsers_GXmlPrototypeParser.multipleFromXml = function(p_xml) {
	if(p_xml.nodeType == Xml.Document) {
		p_xml = p_xml.firstElement();
	}
	var prototypes = [];
	var element = p_xml.elements();
	while(element.hasNext()) {
		var element1 = element.next();
		var prototype = com_genome2d_proto_parsers_GXmlPrototypeParser.fromXml(element1);
		prototypes.push(prototype);
	}
	return prototypes;
};
var com_genome2d_scripts_GScript = function() {
	this.g2d_currentState = "default";
	this.g2d_compiled = false;
	this.includeMath = true;
	this.g2d_onInvalidated = new com_genome2d_callbacks_GCallback0();
	this.g2d_parser = new hscript_Parser();
	this.g2d_parser.allowTypes = true;
	this.g2d_prototypeProperties = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.scripts.GScript"] = com_genome2d_scripts_GScript;
com_genome2d_scripts_GScript.__name__ = "com.genome2d.scripts.GScript";
com_genome2d_scripts_GScript.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_scripts_GScript.fromReference = function(p_reference) {
	return com_genome2d_scripts_GScriptManager.getScript(HxOverrides.substr(p_reference,1,null));
};
com_genome2d_scripts_GScript.prototype = {
	g2d_onInvalidated: null
	,onInvalidated: null
	,get_onInvalidated: function() {
		return this.g2d_onInvalidated;
	}
	,g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		com_genome2d_scripts_GScriptManager.g2d_removeScript(this);
		this.g2d_id = p_value;
		com_genome2d_scripts_GScriptManager.g2d_addScript(this);
		return this.g2d_id;
	}
	,includeMath: null
	,g2d_interpreter: null
	,g2d_parser: null
	,g2d_program: null
	,g2d_scriptProperties: null
	,g2d_scriptPropertyTypes: null
	,g2d_prototypeProperties: null
	,g2d_compiled: null
	,isCompiled: function() {
		return this.g2d_compiled;
	}
	,g2d_source: null
	,getSource: function() {
		return this.g2d_source;
	}
	,setSource: function(p_source) {
		this.g2d_source = p_source;
		if(this.g2d_source != null) {
			this.recompile();
		}
	}
	,preparseSource: function() {
		this.g2d_scriptProperties = new haxe_ds_StringMap();
		this.g2d_scriptPropertyTypes = new haxe_ds_StringMap();
		var e_r = new RegExp("[\\s\r\n]+","gim".split("u").join(""));
		var preparsedSource = "";
		var lines = this.g2d_source.split("\n");
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var regLine = line.replace(e_r,"");
			if(regLine.indexOf("import") == 0) {
				var className = HxOverrides.substr(regLine,6,null);
				if(className.lastIndexOf(";") == className.length - 1) {
					className = HxOverrides.substr(className,0,-1);
				}
				var c = $hxClasses[className];
				var key = HxOverrides.substr(className,className.lastIndexOf(".") + 1,null);
				var _this = this.g2d_interpreter.variables;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,c);
				} else {
					_this.h[key] = c;
				}
			} else if(regLine.indexOf("var") == 0) {
				var strip = HxOverrides.substr(regLine,3,null);
				if(strip.indexOf(";") == strip.length - 1) {
					strip = HxOverrides.substr(strip,0,strip.length - 1);
				}
				var varName = "";
				var varType = "";
				var varValue = "";
				if(strip.indexOf(":") != -1) {
					var split = strip.split(":");
					varName = split[0];
					strip = split[1];
				}
				if(strip.indexOf("=") != -1) {
					var split1 = strip.split("=");
					if(varName != "") {
						varType = split1[0];
					} else {
						varName = split1[0];
					}
					varValue = split1[1];
				} else if(varName == "") {
					varName = strip;
				} else {
					varType = strip;
				}
				var _this1 = this.g2d_scriptProperties;
				if(__map_reserved[varName] != null) {
					_this1.setReserved(varName,varValue);
				} else {
					_this1.h[varName] = varValue;
				}
				var _this2 = this.g2d_scriptPropertyTypes;
				var value = varType == "" ? "String" : varType;
				if(__map_reserved[varName] != null) {
					_this2.setReserved(varName,value);
				} else {
					_this2.h[varName] = value;
				}
			} else {
				preparsedSource += line + "\n";
			}
		}
		return preparsedSource;
	}
	,getVariableValue: function(p_type,p_stringValue) {
		switch(p_type) {
		case "Float":
			if(p_stringValue == "") {
				return 0;
			} else {
				return parseFloat(p_stringValue);
			}
			break;
		case "Int":
			if(p_stringValue == "") {
				return 0;
			} else {
				return Std.parseInt(p_stringValue);
			}
			break;
		case "String":
			if(p_stringValue == "") {
				return "";
			} else {
				return p_stringValue;
			}
			break;
		default:
			return p_stringValue;
		}
	}
	,recompile: function() {
		this.g2d_interpreter = new hscript_Interp();
		if(this.includeMath) {
			var _this = this.g2d_interpreter.variables;
			var value = Math;
			if(__map_reserved["Math"] != null) {
				_this.setReserved("Math",value);
			} else {
				_this.h["Math"] = value;
			}
		}
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		var genome = com_genome2d_Genome2D.g2d_instance;
		var _this1 = this.g2d_interpreter.variables;
		if(__map_reserved["genome"] != null) {
			_this1.setReserved("genome",genome);
		} else {
			_this1.h["genome"] = genome;
		}
		var preparsedSource = this.preparseSource();
		var key = this.g2d_scriptProperties.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this2 = this.g2d_prototypeProperties;
			if(!(__map_reserved[key1] != null ? _this2.existsReserved(key1) : _this2.h.hasOwnProperty(key1))) {
				var this1 = this.g2d_prototypeProperties;
				var _this3 = this.g2d_scriptProperties;
				var value1 = __map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1];
				var _this4 = this1;
				if(__map_reserved[key1] != null) {
					_this4.setReserved(key1,value1);
				} else {
					_this4.h[key1] = value1;
				}
			}
		}
		var key2 = this.g2d_prototypeProperties.keys();
		while(key2.hasNext()) {
			var key3 = key2.next();
			var _this5 = this.g2d_scriptProperties;
			if(__map_reserved[key3] != null ? _this5.existsReserved(key3) : _this5.h.hasOwnProperty(key3)) {
				var this2 = this.g2d_interpreter.variables;
				var _this6 = this.g2d_scriptPropertyTypes;
				var value2 = __map_reserved[key3] != null ? _this6.getReserved(key3) : _this6.h[key3];
				var _this7 = this.g2d_prototypeProperties;
				var _this8 = this2;
				var value3 = this.getVariableValue(value2,__map_reserved[key3] != null ? _this7.getReserved(key3) : _this7.h[key3]);
				if(__map_reserved[key3] != null) {
					_this8.setReserved(key3,value3);
				} else {
					_this8.h[key3] = value3;
				}
			} else {
				this.g2d_prototypeProperties.remove(key3);
			}
		}
		this.g2d_compiled = true;
		try {
			this.g2d_program = this.g2d_parser.parseString(preparsedSource);
			this.g2d_interpreter.execute(this.g2d_program);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			var p_arg1 = "Invalid script";
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/scripts/GScript.hx", lineNumber : 186, className : "com.genome2d.scripts.GScript", methodName : "recompile"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(e1 != null) {
					args.push(e1);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
			this.g2d_compiled = false;
		}
		this.g2d_onInvalidated.dispatch();
	}
	,setVariable: function(p_name,p_value) {
		if(this.g2d_interpreter != null) {
			var _this = this.g2d_interpreter.variables;
			var value = p_value;
			if(__map_reserved[p_name] != null) {
				_this.setReserved(p_name,value);
			} else {
				_this.h[p_name] = value;
			}
		}
	}
	,getVariable: function(p_name) {
		if(this.g2d_interpreter == null) {
			return null;
		} else {
			var _this = this.g2d_interpreter.variables;
			if(__map_reserved[p_name] != null) {
				return _this.getReserved(p_name);
			} else {
				return _this.h[p_name];
			}
		}
	}
	,getVariables: function() {
		var variables = new haxe_ds_StringMap();
		if(this.g2d_interpreter != null) {
			var variable = this.g2d_interpreter.variables.keys();
			while(variable.hasNext()) {
				var variable1 = variable.next();
				switch(variable1) {
				case "Math":case "false":case "genome":case "null":case "trace":case "true":
					break;
				default:
					var _this = this.g2d_interpreter.variables;
					var value = __map_reserved[variable1] != null ? _this.getReserved(variable1) : _this.h[variable1];
					if(__map_reserved[variable1] != null) {
						variables.setReserved(variable1,value);
					} else {
						variables.h[variable1] = value;
					}
				}
			}
		}
		return variables;
	}
	,dispose: function() {
		this.g2d_onInvalidated.removeAll();
	}
	,internalDispose: function() {
	}
	,toReference: function() {
		return "@" + this.g2d_id;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		var key = this.g2d_prototypeProperties.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this.g2d_prototypeProperties;
			p_prototype.createPrototypeProperty(key1,"String",4,null,__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,com_genome2d_scripts_GScript.PROTOTYPE_NAME);
		this.g2d_prototypeProperties = new haxe_ds_StringMap();
		var key = p_prototype.properties.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(com_genome2d_scripts_GScript.PROTOTYPE_PROPERTY_NAMES.indexOf(key1) == -1) {
				var _this = p_prototype.properties;
				var property = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
				var value = property.value;
				var _this1 = this.g2d_prototypeProperties;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,value);
				} else {
					_this1.h[key1] = value;
				}
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GScript");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GScript");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_scripts_GScript
	,__properties__: {set_id:"set_id",get_id:"get_id",get_onInvalidated:"get_onInvalidated"}
};
var com_genome2d_scripts_GScriptManager = function() { };
$hxClasses["com.genome2d.scripts.GScriptManager"] = com_genome2d_scripts_GScriptManager;
com_genome2d_scripts_GScriptManager.__name__ = "com.genome2d.scripts.GScriptManager";
com_genome2d_scripts_GScriptManager.g2d_onScriptChanged = null;
com_genome2d_scripts_GScriptManager.g2d_scripts = null;
com_genome2d_scripts_GScriptManager.getScript = function(p_id) {
	if(com_genome2d_scripts_GScriptManager.g2d_scripts != null) {
		var _this = com_genome2d_scripts_GScriptManager.g2d_scripts;
		if(__map_reserved[p_id] != null) {
			return _this.getReserved(p_id);
		} else {
			return _this.h[p_id];
		}
	} else {
		return null;
	}
};
com_genome2d_scripts_GScriptManager.createScript = function(p_id,p_source) {
	if(p_source == null) {
		p_source = "";
	}
	var script = new com_genome2d_scripts_GScript();
	com_genome2d_scripts_GScriptManager.g2d_removeScript(script);
	script.g2d_id = p_id;
	com_genome2d_scripts_GScriptManager.g2d_addScript(script);
	if(p_source != "") {
		script.setSource(p_source);
	}
	return script;
};
com_genome2d_scripts_GScriptManager.g2d_addScript = function(p_script) {
	if(com_genome2d_scripts_GScriptManager.g2d_scripts == null) {
		com_genome2d_scripts_GScriptManager.g2d_scripts = new haxe_ds_StringMap();
	}
	var key = p_script.g2d_id;
	var _this = com_genome2d_scripts_GScriptManager.g2d_scripts;
	var oldScript = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var key1 = p_script.g2d_id;
	var _this1 = com_genome2d_scripts_GScriptManager.g2d_scripts;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,p_script);
	} else {
		_this1.h[key1] = p_script;
	}
	if(oldScript != null && oldScript != p_script) {
		com_genome2d_scripts_GScriptManager.g2d_onScriptChanged.dispatch(oldScript);
		oldScript.internalDispose();
	}
};
com_genome2d_scripts_GScriptManager.g2d_removeScript = function(p_script) {
	if(com_genome2d_scripts_GScriptManager.g2d_scripts != null) {
		com_genome2d_scripts_GScriptManager.g2d_scripts.remove(p_script.g2d_id);
	}
};
com_genome2d_scripts_GScriptManager.getAllScripts = function() {
	return com_genome2d_scripts_GScriptManager.g2d_scripts;
};
com_genome2d_scripts_GScriptManager.disposeAll = function() {
	var _this = com_genome2d_scripts_GScriptManager.g2d_scripts;
	var script = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(script.hasNext()) {
		var script1 = script.next();
		if(script1.g2d_id.indexOf("g2d_") != 0) {
			script1.dispose();
		}
	}
};
var com_genome2d_signals_GKeyboardSignal = function(p_keyCode) {
	this.keyCode = p_keyCode;
};
$hxClasses["com.genome2d.signals.GKeyboardSignal"] = com_genome2d_signals_GKeyboardSignal;
com_genome2d_signals_GKeyboardSignal.__name__ = "com.genome2d.signals.GKeyboardSignal";
com_genome2d_signals_GKeyboardSignal.prototype = {
	keyCode: null
	,__class__: com_genome2d_signals_GKeyboardSignal
};
var com_genome2d_signals_GMouseSignal = function(p_type,p_x,p_y,p_nativeCaptured) {
	this.type = p_type;
	this.x = p_x;
	this.y = p_y;
	this.nativeCaptured = p_nativeCaptured;
};
$hxClasses["com.genome2d.signals.GMouseSignal"] = com_genome2d_signals_GMouseSignal;
com_genome2d_signals_GMouseSignal.__name__ = "com.genome2d.signals.GMouseSignal";
com_genome2d_signals_GMouseSignal.prototype = {
	x: null
	,y: null
	,buttonDown: null
	,ctrlDown: null
	,type: null
	,nativeCaptured: null
	,__class__: com_genome2d_signals_GMouseSignal
};
var com_genome2d_signals_GMouseSignalType = function() { };
$hxClasses["com.genome2d.signals.GMouseSignalType"] = com_genome2d_signals_GMouseSignalType;
com_genome2d_signals_GMouseSignalType.__name__ = "com.genome2d.signals.GMouseSignalType";
com_genome2d_signals_GMouseSignalType.fromNative = function(p_nativeType) {
	var type = "";
	switch(p_nativeType) {
	case "mouseup":case "touchend":
		type = "mouseUp";
		break;
	case "mousemove":case "touchmove":
		type = "mouseMove";
		break;
	case "mousedown":case "touchstart":
		type = "mouseDown";
		break;
	}
	return type;
};
var com_genome2d_text_GFont = function() {
	this.g2d_currentState = "default";
};
$hxClasses["com.genome2d.text.GFont"] = com_genome2d_text_GFont;
com_genome2d_text_GFont.__name__ = "com.genome2d.text.GFont";
com_genome2d_text_GFont.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_text_GFont.prototype = {
	g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		if(p_value != this.g2d_id) {
			com_genome2d_text_GFontManager.g2d_removeFont(this);
			this.g2d_id = p_value;
			com_genome2d_text_GFontManager.g2d_addFont(this);
		}
		return this.g2d_id;
	}
	,dispose: function() {
		com_genome2d_text_GFontManager.g2d_removeFont(this);
	}
	,toReference: function() {
		return "@" + this.g2d_id;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GFont");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GFont");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_text_GFont
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var com_genome2d_text_GFontManager = function() { };
$hxClasses["com.genome2d.text.GFontManager"] = com_genome2d_text_GFontManager;
com_genome2d_text_GFontManager.__name__ = "com.genome2d.text.GFontManager";
com_genome2d_text_GFontManager.g2d_addFont = function(p_font) {
	if(p_font.g2d_id == null || p_font.g2d_id.length == 0) {
		var p_arg1 = "Invalid font id";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/text/GFontManager.hx", lineNumber : 16, className : "com.genome2d.text.GFontManager", methodName : "g2d_addFont"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	var key = p_font.g2d_id;
	var _this = com_genome2d_text_GFontManager.g2d_fonts;
	if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
		var p_arg110 = "Duplicate font id: " + p_font.g2d_id;
		var p_arg21 = null;
		var p_arg31 = null;
		var p_arg41 = null;
		var p_arg51 = null;
		var p_arg61 = null;
		var p_arg71 = null;
		var p_arg81 = null;
		var p_arg91 = null;
		var p_arg101 = null;
		var p_arg111 = null;
		var p_arg121 = null;
		var p_arg131 = null;
		var p_arg141 = null;
		var p_arg151 = null;
		var p_arg161 = null;
		var p_arg171 = null;
		var p_arg181 = null;
		var p_arg191 = null;
		var p_arg201 = null;
		var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/text/GFontManager.hx", lineNumber : 17, className : "com.genome2d.text.GFontManager", methodName : "g2d_addFont"};
		var args1 = [];
		if(p_arg110 != null) {
			args1.push(p_arg110);
		}
		if(p_arg21 != null) {
			args1.push(p_arg21);
		}
		if(p_arg31 != null) {
			args1.push(p_arg31);
		}
		if(p_arg41 != null) {
			args1.push(p_arg41);
		}
		if(p_arg51 != null) {
			args1.push(p_arg51);
		}
		if(p_arg61 != null) {
			args1.push(p_arg61);
		}
		if(p_arg71 != null) {
			args1.push(p_arg71);
		}
		if(p_arg81 != null) {
			args1.push(p_arg81);
		}
		if(p_arg91 != null) {
			args1.push(p_arg91);
		}
		if(p_arg101 != null) {
			args1.push(p_arg101);
		}
		if(p_arg111 != null) {
			args1.push(p_arg111);
		}
		if(p_arg121 != null) {
			args1.push(p_arg121);
		}
		if(p_arg131 != null) {
			args1.push(p_arg131);
		}
		if(p_arg141 != null) {
			args1.push(p_arg141);
		}
		if(p_arg151 != null) {
			args1.push(p_arg151);
		}
		if(p_arg161 != null) {
			args1.push(p_arg161);
		}
		if(p_arg171 != null) {
			args1.push(p_arg171);
		}
		if(p_arg181 != null) {
			args1.push(p_arg181);
		}
		if(p_arg191 != null) {
			args1.push(p_arg191);
		}
		if(p_arg201 != null) {
			args1.push(p_arg201);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
		}
		var msg1 = "ERROR: ";
		if(pos1 != null) {
			msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
		}
		if(args1.length > 0) {
			msg1 += args1.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg1;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg1);
		}
		throw new js__$Boot_HaxeError(msg1);
	}
	var key1 = p_font.g2d_id;
	var _this1 = com_genome2d_text_GFontManager.g2d_fonts;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,p_font);
	} else {
		_this1.h[key1] = p_font;
	}
};
com_genome2d_text_GFontManager.g2d_removeFont = function(p_font) {
	if(p_font.g2d_id == null) {
		return;
	}
	com_genome2d_text_GFontManager.g2d_fonts.remove(p_font.g2d_id);
};
com_genome2d_text_GFontManager.g2d_fonts = null;
com_genome2d_text_GFontManager.getAllFonts = function() {
	return com_genome2d_text_GFontManager.g2d_fonts;
};
com_genome2d_text_GFontManager.init = function() {
	com_genome2d_text_GFontManager.g2d_fonts = new haxe_ds_StringMap();
};
com_genome2d_text_GFontManager.getFont = function(p_id) {
	var _this = com_genome2d_text_GFontManager.g2d_fonts;
	if(__map_reserved[p_id] != null) {
		return _this.getReserved(p_id);
	} else {
		return _this.h[p_id];
	}
};
com_genome2d_text_GFontManager.createTextureFont = function(p_id,p_texture,p_fontXml,p_regionOffsetX,p_regionOffsetY) {
	if(p_regionOffsetY == null) {
		p_regionOffsetY = 0;
	}
	if(p_regionOffsetX == null) {
		p_regionOffsetX = 0;
	}
	var textureFont = new com_genome2d_text_GTextureFont();
	if(p_id != textureFont.g2d_id) {
		com_genome2d_text_GFontManager.g2d_removeFont(textureFont);
		textureFont.g2d_id = p_id;
		com_genome2d_text_GFontManager.g2d_addFont(textureFont);
	}
	textureFont.texture = p_texture;
	textureFont.regionOffsetX = p_regionOffsetX;
	textureFont.regionOffsetY = p_regionOffsetY;
	textureFont.addCharsFromXml(p_fontXml);
	return textureFont;
};
var com_genome2d_text_GTextFormat = function() {
	this.g2d_formatMap = new haxe_ds_IntMap();
};
$hxClasses["com.genome2d.text.GTextFormat"] = com_genome2d_text_GTextFormat;
com_genome2d_text_GTextFormat.__name__ = "com.genome2d.text.GTextFormat";
com_genome2d_text_GTextFormat.prototype = {
	g2d_formatMap: null
	,setIndexColor: function(p_index,p_color) {
		this.g2d_formatMap.h[p_index] = p_color;
	}
	,getIndexColor: function(p_index) {
		var color = -2;
		if(this.g2d_formatMap.h.hasOwnProperty(p_index)) {
			color = this.g2d_formatMap.h[p_index];
		}
		return color;
	}
	,hasIndexColor: function(p_index) {
		return this.g2d_formatMap.h.hasOwnProperty(p_index);
	}
	,__class__: com_genome2d_text_GTextFormat
};
var com_genome2d_text_GTextRenderer = function() {
	this.g2d_textHeight = 0;
	this.g2d_textWidth = 0;
	this.g2d_height = 100;
	this.g2d_width = 100;
	this.g2d_autoSize = false;
	this.g2d_text = "";
	this.g2d_lineSpace = 0;
	this.g2d_tracking = 0;
	this.g2d_fontScale = 1;
	this.g2d_dirty = false;
	this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
	this.g2d_vAlign = com_genome2d_utils_GVAlignType.TOP;
	this.g2d_hAlign = com_genome2d_utils_GHAlignType.LEFT;
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	this.g2d_context = com_genome2d_Genome2D.g2d_instance.g2d_context;
};
$hxClasses["com.genome2d.text.GTextRenderer"] = com_genome2d_text_GTextRenderer;
com_genome2d_text_GTextRenderer.__name__ = "com.genome2d.text.GTextRenderer";
com_genome2d_text_GTextRenderer.prototype = {
	g2d_context: null
	,blendMode: null
	,g2d_dirty: null
	,isDirty: function() {
		return this.g2d_dirty;
	}
	,g2d_fontScale: null
	,get_fontScale: function() {
		return this.g2d_fontScale;
	}
	,set_fontScale: function(p_value) {
		this.g2d_fontScale = p_value;
		this.g2d_dirty = true;
		return this.g2d_fontScale;
	}
	,g2d_tracking: null
	,get_tracking: function() {
		return this.g2d_tracking;
	}
	,set_tracking: function(p_tracking) {
		this.g2d_tracking = p_tracking;
		this.g2d_dirty = true;
		return this.g2d_tracking;
	}
	,g2d_lineSpace: null
	,get_lineSpace: function() {
		return this.g2d_lineSpace;
	}
	,set_lineSpace: function(p_value) {
		this.g2d_lineSpace = p_value;
		this.g2d_dirty = true;
		return this.g2d_lineSpace;
	}
	,g2d_vAlign: null
	,get_vAlign: function() {
		return this.g2d_vAlign;
	}
	,set_vAlign: function(p_value) {
		this.g2d_vAlign = p_value;
		this.g2d_dirty = true;
		return this.g2d_vAlign;
	}
	,g2d_hAlign: null
	,get_hAlign: function() {
		return this.g2d_hAlign;
	}
	,set_hAlign: function(p_value) {
		this.g2d_hAlign = p_value;
		this.g2d_dirty = true;
		return this.g2d_hAlign;
	}
	,g2d_textLength: null
	,g2d_text: null
	,get_text: function() {
		return this.g2d_text;
	}
	,set_text: function(p_value) {
		this.g2d_text = p_value;
		this.g2d_textLength = this.g2d_text.length;
		this.g2d_dirty = true;
		return this.g2d_text;
	}
	,g2d_autoSize: null
	,get_autoSize: function() {
		return this.g2d_autoSize;
	}
	,set_autoSize: function(p_value) {
		this.g2d_autoSize = p_value;
		this.g2d_dirty = true;
		return this.g2d_autoSize;
	}
	,g2d_width: null
	,get_width: function() {
		if(this.g2d_autoSize && this.g2d_dirty) {
			this.invalidate();
		}
		return this.g2d_width;
	}
	,set_width: function(p_value) {
		if(p_value != this.g2d_width) {
			this.g2d_width = p_value;
			this.g2d_dirty = true;
		}
		return this.g2d_width;
	}
	,g2d_height: null
	,get_height: function() {
		if(this.g2d_autoSize && this.g2d_dirty) {
			this.invalidate();
		}
		return this.g2d_height;
	}
	,set_height: function(p_value) {
		if(p_value != this.g2d_height) {
			this.g2d_height = p_value;
			this.g2d_dirty = true;
		}
		return this.g2d_height;
	}
	,g2d_textWidth: null
	,textWidth: null
	,get_textWidth: function() {
		if(this.g2d_dirty) {
			this.invalidate();
		}
		return this.g2d_textWidth;
	}
	,g2d_textHeight: null
	,textHeight: null
	,get_textHeight: function() {
		if(this.g2d_dirty) {
			this.invalidate();
		}
		return this.g2d_textHeight;
	}
	,render: function(p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha) {
	}
	,invalidate: function() {
	}
	,__class__: com_genome2d_text_GTextRenderer
	,__properties__: {get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_text:"set_text",get_text:"get_text",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_lineSpace:"set_lineSpace",get_lineSpace:"get_lineSpace",set_tracking:"set_tracking",get_tracking:"get_tracking",set_fontScale:"set_fontScale",get_fontScale:"get_fontScale"}
};
var com_genome2d_text_GTextureChar = function(p_texture) {
	this.g2d_xadvance = 0;
	this.g2d_yoffset = 0;
	this.g2d_xoffset = 0;
	this.g2d_texture = p_texture;
};
$hxClasses["com.genome2d.text.GTextureChar"] = com_genome2d_text_GTextureChar;
com_genome2d_text_GTextureChar.__name__ = "com.genome2d.text.GTextureChar";
com_genome2d_text_GTextureChar.prototype = {
	g2d_xoffset: null
	,get_xoffset: function() {
		return this.g2d_xoffset * this.g2d_texture.g2d_scaleFactor;
	}
	,set_xoffset: function(p_value) {
		this.g2d_xoffset = p_value / this.g2d_texture.g2d_scaleFactor;
		return this.g2d_xoffset;
	}
	,g2d_yoffset: null
	,get_yoffset: function() {
		return this.g2d_yoffset * this.g2d_texture.g2d_scaleFactor;
	}
	,set_yoffset: function(p_value) {
		this.g2d_yoffset = p_value / this.g2d_texture.g2d_scaleFactor;
		return this.g2d_yoffset;
	}
	,g2d_xadvance: null
	,get_xadvance: function() {
		return this.g2d_xadvance * this.g2d_texture.g2d_scaleFactor;
	}
	,set_xadvance: function(p_value) {
		this.g2d_xadvance = p_value / this.g2d_texture.g2d_scaleFactor;
		return this.g2d_xadvance;
	}
	,g2d_texture: null
	,get_texture: function() {
		return this.g2d_texture;
	}
	,dispose: function() {
		this.g2d_texture = null;
	}
	,__class__: com_genome2d_text_GTextureChar
	,__properties__: {get_texture:"get_texture",set_xadvance:"set_xadvance",get_xadvance:"get_xadvance",set_yoffset:"set_yoffset",get_yoffset:"get_yoffset",set_xoffset:"set_xoffset",get_xoffset:"get_xoffset"}
};
var com_genome2d_text_GTextureFont = function() {
	this.regionOffsetY = 0;
	this.regionOffsetX = 0;
	this.bold = false;
	this.italic = false;
	this.base = 0;
	this.lineHeight = 0;
	com_genome2d_text_GFont.call(this);
	this.g2d_chars = new haxe_ds_IntMap();
};
$hxClasses["com.genome2d.text.GTextureFont"] = com_genome2d_text_GTextureFont;
com_genome2d_text_GTextureFont.__name__ = "com.genome2d.text.GTextureFont";
com_genome2d_text_GTextureFont.fromReference = function(p_reference) {
	return com_genome2d_text_GFontManager.getFont(HxOverrides.substr(p_reference,1,null));
};
com_genome2d_text_GTextureFont.__super__ = com_genome2d_text_GFont;
com_genome2d_text_GTextureFont.prototype = $extend(com_genome2d_text_GFont.prototype,{
	texture: null
	,lineHeight: null
	,base: null
	,face: null
	,italic: null
	,bold: null
	,regionOffsetX: null
	,regionOffsetY: null
	,kerning: null
	,g2d_chars: null
	,getChar: function(p_charId) {
		return this.g2d_chars.h[p_charId];
	}
	,addCharsFromXml: function(p_xml) {
		var root = p_xml.firstElement();
		var info = root.elementsNamed("info").next();
		this.face = info.get("face");
		this.italic = info.get("italic") == "1";
		this.bold = info.get("bold") == "1";
		var common = root.elementsNamed("common").next();
		this.lineHeight = Std.parseInt(common.get("lineHeight"));
		this.base = Std.parseInt(common.get("base"));
		var it = root.elementsNamed("chars");
		it = it.next().elements();
		while(it.hasNext()) {
			var node = it.next();
			var w = Std.parseInt(node.get("width"));
			var h = Std.parseInt(node.get("height"));
			var region = new com_genome2d_geom_GRectangle(Std.parseInt(node.get("x")) + this.regionOffsetX,Std.parseInt(node.get("y")) + this.regionOffsetY,w,h);
			this.addChar(Std.parseInt(node.get("id")),region,parseFloat(node.get("xoffset")),parseFloat(node.get("yoffset")),parseFloat(node.get("xadvance")));
		}
		var kernings = root.elementsNamed("kernings").next();
		if(kernings != null) {
			it = kernings.elements();
			this.kerning = new haxe_ds_IntMap();
			while(it.hasNext()) {
				var node1 = it.next();
				var first = Std.parseInt(node1.get("first"));
				var map = this.kerning.h[first];
				if(map == null) {
					map = new haxe_ds_IntMap();
					this.kerning.h[first] = map;
				}
				var second = Std.parseInt(node1.get("second"));
				var value = Std.parseInt(node1.get("amount"));
				map.h[second] = value;
			}
		}
	}
	,addChar: function(p_charId,p_region,p_xoffset,p_yoffset,p_xadvance) {
		var charTexture = com_genome2d_textures_GTextureManager.createSubTexture(this.g2d_id + "_" + p_charId,this.texture,p_region);
		charTexture.g2d_pivotX = -p_region.width / 2 / charTexture.g2d_scaleFactor;
		charTexture.g2d_pivotY = -p_region.height / 2 / charTexture.g2d_scaleFactor;
		var char = new com_genome2d_text_GTextureChar(charTexture);
		char.g2d_xoffset = p_xoffset / char.g2d_texture.g2d_scaleFactor;
		char.g2d_yoffset = p_yoffset / char.g2d_texture.g2d_scaleFactor;
		char.g2d_xadvance = p_xadvance / char.g2d_texture.g2d_scaleFactor;
		this.g2d_chars.h[p_charId] = char;
		return char;
	}
	,getKerning: function(p_first,p_second) {
		if(this.kerning != null && this.kerning.h.hasOwnProperty(p_first)) {
			var map = this.kerning.h[p_first];
			if(!map.h.hasOwnProperty(p_second)) {
				return 0;
			} else {
				return map.h[p_second] * this.texture.g2d_scaleFactor;
			}
		}
		return 0;
	}
	,dispose: function() {
		com_genome2d_text_GFont.prototype.dispose.call(this);
		var char = this.g2d_chars.iterator();
		while(char.hasNext()) {
			var char1 = char.next();
			char1.dispose();
		}
		this.g2d_chars = null;
		this.texture = null;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTextureFont");
		return com_genome2d_text_GFont.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_text_GFont.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTextureFont");
	}
	,__class__: com_genome2d_text_GTextureFont
});
var com_genome2d_text_GTextureTextAccuracy = $hxEnums["com.genome2d.text.GTextureTextAccuracy"] = { __ename__ : "com.genome2d.text.GTextureTextAccuracy", __constructs__ : ["OFF","FLOOR","ROUND","CEIL"]
	,OFF: {_hx_index:0,__enum__:"com.genome2d.text.GTextureTextAccuracy",toString:$estr}
	,FLOOR: {_hx_index:1,__enum__:"com.genome2d.text.GTextureTextAccuracy",toString:$estr}
	,ROUND: {_hx_index:2,__enum__:"com.genome2d.text.GTextureTextAccuracy",toString:$estr}
	,CEIL: {_hx_index:3,__enum__:"com.genome2d.text.GTextureTextAccuracy",toString:$estr}
};
com_genome2d_text_GTextureTextAccuracy.__empty_constructs__ = [com_genome2d_text_GTextureTextAccuracy.OFF,com_genome2d_text_GTextureTextAccuracy.FLOOR,com_genome2d_text_GTextureTextAccuracy.ROUND,com_genome2d_text_GTextureTextAccuracy.CEIL];
var com_genome2d_text_GTextureTextRenderer = function() {
	this.g2d_pivotY = 0;
	this.g2d_pivotX = 0;
	this.g2d_maxVisibleLine = 0;
	this.g2d_cursorCurrentIndex = 0;
	this.g2d_lineCount = 0;
	this.forcePixelAccuracy = com_genome2d_text_GTextureTextAccuracy.ROUND;
	this.autoScroll = false;
	this.scrollLine = 0;
	this.enableCursor = false;
	this.cursorEndIndex = 0;
	this.cursorStartIndex = 0;
	this.g2d_cursorBlinkCount = 0;
	this.g2d_wordWrapWhitespace = true;
	this.g2d_wordWrap = false;
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	com_genome2d_text_GTextRenderer.call(this);
	this.g2d_chars = [];
	if(com_genome2d_text_GTextureTextRenderer.g2d_helperTexture == null) {
		var imageData = new ImageData(new Uint8ClampedArray([255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255]),4);
		com_genome2d_text_GTextureTextRenderer.g2d_helperTexture = com_genome2d_textures_GTextureManager.createTexture("g2d_GTextureTextRenderer_helper",imageData);
		var _this = com_genome2d_text_GTextureTextRenderer.g2d_helperTexture;
		var _this1 = com_genome2d_text_GTextureTextRenderer.g2d_helperTexture;
		_this.g2d_pivotX = (_this1.g2d_pivotY = -2 / _this1.g2d_scaleFactor) / _this.g2d_scaleFactor;
	}
};
$hxClasses["com.genome2d.text.GTextureTextRenderer"] = com_genome2d_text_GTextureTextRenderer;
com_genome2d_text_GTextureTextRenderer.__name__ = "com.genome2d.text.GTextureTextRenderer";
com_genome2d_text_GTextureTextRenderer.g2d_helperTexture = null;
com_genome2d_text_GTextureTextRenderer.__super__ = com_genome2d_text_GTextRenderer;
com_genome2d_text_GTextureTextRenderer.prototype = $extend(com_genome2d_text_GTextRenderer.prototype,{
	red: null
	,green: null
	,blue: null
	,alpha: null
	,g2d_textureFont: null
	,get_textureFont: function() {
		return this.g2d_textureFont;
	}
	,set_textureFont: function(p_value) {
		this.g2d_textureFont = p_value;
		this.g2d_dirty = true;
		return this.g2d_textureFont;
	}
	,g2d_wordWrap: null
	,get_wordWrap: function() {
		return this.g2d_wordWrap;
	}
	,set_wordWrap: function(p_value) {
		this.g2d_wordWrap = p_value;
		this.g2d_dirty = true;
		return this.g2d_wordWrap;
	}
	,g2d_wordWrapWhitespace: null
	,get_wordWrapWhitespace: function() {
		return this.g2d_wordWrapWhitespace;
	}
	,set_wordWrapWhitespace: function(p_value) {
		this.g2d_wordWrapWhitespace = p_value;
		this.g2d_dirty = true;
		return this.g2d_wordWrapWhitespace;
	}
	,g2d_chars: null
	,g2d_cursorBlinkCount: null
	,cursorStartIndex: null
	,cursorEndIndex: null
	,enableCursor: null
	,scrollLine: null
	,autoScroll: null
	,forcePixelAccuracy: null
	,g2d_lineCount: null
	,get_lineCount: function() {
		return this.g2d_lineCount;
	}
	,g2d_cursorCurrentIndex: null
	,g2d_maxVisibleLine: null
	,get_maxVisibleLine: function() {
		return this.g2d_maxVisibleLine;
	}
	,format: null
	,g2d_pivotX: null
	,get_pivotX: function() {
		return this.g2d_pivotX;
	}
	,set_pivotX: function(p_value) {
		return this.g2d_pivotX = p_value;
	}
	,g2d_pivotY: null
	,get_pivotY: function() {
		return this.g2d_pivotY;
	}
	,set_pivotY: function(p_value) {
		return this.g2d_pivotY = p_value;
	}
	,render: function(p_x,p_y,p_scaleX,p_scaleY,p_rotation,p_red,p_green,p_blue,p_alpha) {
		if(this.g2d_textureFont == null) {
			return;
		}
		if(this.g2d_dirty) {
			this.invalidate();
		}
		if(this.enableCursor) {
			this.renderSelection(p_x,p_y,p_scaleX,p_scaleY,0);
		}
		var charCount = this.g2d_chars.length;
		var cos = 1;
		var sin = 0;
		if(p_rotation != 0) {
			cos = Math.cos(p_rotation);
			sin = Math.sin(p_rotation);
		}
		var finalScale = this.g2d_fontScale * com_genome2d_text_GTextureTextRenderer.fontScaleMultiplier;
		var tx;
		var ty;
		var lastRenderColor = 16777215;
		var charRed = 1;
		var charGreen = 1;
		var charBlue = 1;
		var charAlpha = 1;
		if(this.autoScroll && this.g2d_lineCount > this.g2d_maxVisibleLine) {
			this.scrollLine = this.g2d_lineCount - this.g2d_maxVisibleLine - 1;
		}
		var scrollOffset = this.scrollLine * (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale;
		var _g = 0;
		var _g1 = charCount;
		while(_g < _g1) {
			var i = _g++;
			var renderable = this.g2d_chars[i];
			if(this.format != null && this.format.hasIndexColor(i)) {
				var indexColor = this.format.getIndexColor(i);
				if(this.format.hasIndexColor(i) && lastRenderColor != indexColor) {
					charAlpha = _$UInt_UInt_$Impl_$.toFloat(indexColor >>> 24 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
					charRed = _$UInt_UInt_$Impl_$.toFloat(indexColor >>> 16 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
					charGreen = _$UInt_UInt_$Impl_$.toFloat(indexColor >>> 8 & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
					charBlue = _$UInt_UInt_$Impl_$.toFloat(indexColor & 255) / _$UInt_UInt_$Impl_$.toFloat(255);
					lastRenderColor = indexColor;
				}
			}
			if(!renderable.visible || renderable.line > this.g2d_maxVisibleLine + this.scrollLine) {
				break;
			}
			if(renderable.whiteSpace || renderable.line < this.scrollLine) {
				continue;
			}
			var cx;
			if(renderable.fontChar != null) {
				var _this = renderable.fontChar;
				cx = _this.g2d_xoffset * _this.g2d_texture.g2d_scaleFactor;
			} else {
				cx = 0;
			}
			var cx1 = renderable.x + cx * finalScale;
			var cy;
			if(renderable.fontChar != null) {
				var _this1 = renderable.fontChar;
				cy = _this1.g2d_yoffset * _this1.g2d_texture.g2d_scaleFactor;
			} else {
				cy = 0;
			}
			var cy1 = renderable.y + cy * finalScale - scrollOffset;
			if(p_rotation != 0) {
				var wh = this.g2d_width * this.g2d_pivotX;
				var hh = this.g2d_height * this.g2d_pivotY;
				tx = (cx1 * cos - cy1 * sin) * p_scaleX + p_x + (wh - (wh * cos - hh * sin)) * p_scaleX;
				ty = (cy1 * cos + cx1 * sin) * p_scaleY + p_y + (hh - (hh * cos + wh * sin)) * p_scaleY;
			} else {
				tx = cx1 * p_scaleX + p_x;
				ty = cy1 * p_scaleY + p_y;
			}
			switch(this.forcePixelAccuracy._hx_index) {
			case 1:
				tx = Math.floor(tx);
				ty = Math.floor(ty);
				break;
			case 2:
				tx = Math.round(tx);
				ty = Math.round(ty);
				break;
			case 3:
				tx = Math.ceil(tx);
				ty = Math.ceil(ty);
				break;
			default:
			}
			if(charRed == 1 && charBlue == 1 && charGreen == 1 && charAlpha == 1) {
				this.g2d_context.draw(renderable.fontChar != null ? renderable.fontChar.g2d_texture : null,com_genome2d_context_GBlendMode.NORMAL,tx,ty,p_scaleX * finalScale,p_scaleY * finalScale,p_rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,null);
			} else {
				this.g2d_context.draw(renderable.fontChar != null ? renderable.fontChar.g2d_texture : null,com_genome2d_context_GBlendMode.NORMAL,tx,ty,p_scaleX * finalScale,p_scaleY * finalScale,p_rotation,charRed * p_red,charGreen * p_green,charBlue * p_blue,charAlpha * p_alpha,null);
			}
		}
	}
	,renderSelection: function(p_x,p_y,p_scaleX,p_scaleY,p_rotation) {
		var finalScale = this.g2d_fontScale * com_genome2d_text_GTextureTextRenderer.fontScaleMultiplier;
		this.g2d_cursorBlinkCount++;
		if(this.cursorStartIndex == this.cursorEndIndex && (this.g2d_cursorBlinkCount / 10 | 0) % 2 == 0) {
			var tx = p_x;
			var ty = p_y;
			if(this.g2d_chars.length > 0) {
				var char = this.cursorEndIndex >= this.g2d_chars.length ? this.g2d_chars[this.g2d_chars.length - 1] : this.g2d_chars[this.cursorEndIndex];
				var tx1;
				if(this.cursorStartIndex >= this.g2d_chars.length) {
					var tx2;
					if(char.fontChar != null) {
						var _this = char.fontChar;
						tx2 = _this.g2d_xadvance * _this.g2d_texture.g2d_scaleFactor;
					} else {
						tx2 = 0;
					}
					tx1 = tx2 + this.g2d_tracking;
				} else {
					tx1 = 0;
				}
				tx = char.x * p_scaleX * finalScale + p_x + tx1;
				ty = char.y * p_scaleY * finalScale + p_y;
			}
			var char1 = this.g2d_textureFont.getChar(124);
			this.g2d_context.draw(char1.g2d_texture,com_genome2d_context_GBlendMode.NORMAL,tx,ty,p_scaleX * finalScale,p_scaleY * finalScale,p_rotation,this.red,this.green,this.blue,this.alpha,null);
		} else if(this.cursorStartIndex != this.cursorEndIndex) {
			var startChar = this.cursorStartIndex >= this.g2d_chars.length ? this.g2d_chars[this.g2d_chars.length - 1] : this.g2d_chars[this.cursorStartIndex];
			var sx;
			if(this.cursorStartIndex >= this.g2d_chars.length) {
				var sx1;
				if(startChar.fontChar != null) {
					var _this1 = startChar.fontChar;
					sx1 = _this1.g2d_xadvance * _this1.g2d_texture.g2d_scaleFactor;
				} else {
					sx1 = 0;
				}
				sx = sx1 + this.g2d_tracking;
			} else {
				sx = 0;
			}
			var sx2 = startChar.x * p_scaleX * finalScale + p_x + sx;
			var sy = startChar.y * p_scaleY * finalScale + p_y;
			var endChar = this.cursorEndIndex >= this.g2d_chars.length ? this.g2d_chars[this.g2d_chars.length - 1] : this.g2d_chars[this.cursorEndIndex];
			var ex;
			if(this.cursorEndIndex >= this.g2d_chars.length) {
				var ex1;
				if(endChar.fontChar != null) {
					var _this2 = endChar.fontChar;
					ex1 = _this2.g2d_xadvance * _this2.g2d_texture.g2d_scaleFactor;
				} else {
					ex1 = 0;
				}
				ex = ex1 + this.g2d_tracking;
			} else {
				ex = 0;
			}
			var ex2 = endChar.x * p_scaleX * finalScale + p_x + ex;
			var ey = endChar.y * p_scaleY * finalScale + p_y;
			if(sy == ey) {
				this.g2d_context.draw(com_genome2d_text_GTextureTextRenderer.g2d_helperTexture,com_genome2d_context_GBlendMode.NORMAL,sx2,sy,(ex2 - sx2) / 4 * p_scaleX * finalScale,this.g2d_textureFont.lineHeight / 4 * p_scaleY * finalScale,p_rotation,1,1,1,1,null);
			} else {
				this.g2d_context.draw(com_genome2d_text_GTextureTextRenderer.g2d_helperTexture,com_genome2d_context_GBlendMode.NORMAL,sx2,sy,(this.g2d_width + p_x - sx2) / 4 * p_scaleX * finalScale,this.g2d_textureFont.lineHeight / 4 * p_scaleY * finalScale,p_rotation,1,1,1,1,null);
				var _g = 1;
				var _g1 = (ey - sy) / this.g2d_textureFont.lineHeight | 0;
				while(_g < _g1) {
					var i = _g++;
					this.g2d_context.draw(com_genome2d_text_GTextureTextRenderer.g2d_helperTexture,com_genome2d_context_GBlendMode.NORMAL,p_x,sy + i * this.g2d_textureFont.lineHeight,this.g2d_width / 4 * p_scaleX * finalScale,this.g2d_textureFont.lineHeight / 4 * p_scaleY * finalScale,p_rotation,1,1,1,1,null);
				}
				this.g2d_context.draw(com_genome2d_text_GTextureTextRenderer.g2d_helperTexture,com_genome2d_context_GBlendMode.NORMAL,p_x,ey,(ex2 - p_x) / 4 * p_scaleX * finalScale,this.g2d_textureFont.lineHeight / 4 * p_scaleY * finalScale,p_rotation,1,1,1,1,null);
			}
		}
	}
	,invalidate: function() {
		if(this.g2d_textureFont == null) {
			return;
		}
		if(this.g2d_autoSize) {
			this.g2d_width = 0;
		}
		var offsetX = 0;
		var offsetY = 0;
		var renderable = null;
		var previousRenderable = null;
		var char = null;
		var currentCharCode = -1;
		var previousCharCode = -1;
		var finalScale = this.g2d_fontScale * com_genome2d_text_GTextureTextRenderer.fontScaleMultiplier;
		var lines = [];
		var currentLine = [];
		var charIndex = 0;
		var whiteSpaceIndex = -1;
		var i = 0;
		var isAllVisible = true;
		var maxLineWidth = 0;
		while(i < this.g2d_textLength) {
			if(charIndex >= this.g2d_chars.length) {
				renderable = new com_genome2d_text_GTextureCharRenderable(this);
				this.g2d_chars.push(renderable);
			} else {
				renderable = this.g2d_chars[charIndex];
			}
			currentCharCode = HxOverrides.cca(this.g2d_text,i);
			if(currentCharCode == 10 || currentCharCode == 13) {
				if(this.g2d_autoSize) {
					this.g2d_width = offsetX > this.g2d_width ? offsetX : this.g2d_width;
				}
				previousCharCode = -1;
				lines.push(currentLine);
				currentLine = [];
				if(!this.g2d_autoSize && offsetY + 2 * (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale > this.g2d_height && isAllVisible) {
					isAllVisible = false;
					this.g2d_maxVisibleLine = lines.length - 1;
				}
				var tmp;
				if(previousRenderable != null) {
					var tmp1;
					if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
						var _this = previousRenderable.fontChar.g2d_texture;
						tmp1 = _this.g2d_nativeWidth * _this.g2d_scaleFactor;
					} else {
						tmp1 = 0;
					}
					tmp = previousRenderable.x + tmp1 * finalScale > maxLineWidth;
				} else {
					tmp = false;
				}
				if(tmp) {
					var maxLineWidth1;
					if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
						var _this1 = previousRenderable.fontChar.g2d_texture;
						maxLineWidth1 = _this1.g2d_nativeWidth * _this1.g2d_scaleFactor;
					} else {
						maxLineWidth1 = 0;
					}
					maxLineWidth = previousRenderable.x + maxLineWidth1 * finalScale;
				}
				offsetX = 0;
				offsetY += (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale;
				renderable.line = lines.length - 1;
				renderable.x = offsetX;
				renderable.y = offsetY;
				renderable.whiteSpace = true;
				++charIndex;
			} else {
				if(!this.g2d_autoSize && offsetY + (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale > this.g2d_height && isAllVisible) {
					isAllVisible = false;
					this.g2d_maxVisibleLine = lines.length - 1;
				}
				char = this.g2d_textureFont.getChar(currentCharCode);
				if(char == null) {
					if(com_genome2d_text_GTextureTextRenderer.warnMissingCharTextures) {
						var p_arg1 = "Texture for character " + String.fromCodePoint(i) + " with code " + currentCharCode + " not found!";
						var p_arg2 = null;
						var p_arg3 = null;
						var p_arg4 = null;
						var p_arg5 = null;
						var p_arg6 = null;
						var p_arg7 = null;
						var p_arg8 = null;
						var p_arg9 = null;
						var p_arg10 = null;
						var p_arg11 = null;
						var p_arg12 = null;
						var p_arg13 = null;
						var p_arg14 = null;
						var p_arg15 = null;
						var p_arg16 = null;
						var p_arg17 = null;
						var p_arg18 = null;
						var p_arg19 = null;
						var p_arg20 = null;
						var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/text/GTextureTextRenderer.hx", lineNumber : 344, className : "com.genome2d.text.GTextureTextRenderer", methodName : "invalidate"};
						if(com_genome2d_debug_GDebug.showPriority <= 4) {
							var args = [];
							if(p_arg1 != null) {
								args.push(p_arg1);
							}
							if(p_arg2 != null) {
								args.push(p_arg2);
							}
							if(p_arg3 != null) {
								args.push(p_arg3);
							}
							if(p_arg4 != null) {
								args.push(p_arg4);
							}
							if(p_arg5 != null) {
								args.push(p_arg5);
							}
							if(p_arg6 != null) {
								args.push(p_arg6);
							}
							if(p_arg7 != null) {
								args.push(p_arg7);
							}
							if(p_arg8 != null) {
								args.push(p_arg8);
							}
							if(p_arg9 != null) {
								args.push(p_arg9);
							}
							if(p_arg10 != null) {
								args.push(p_arg10);
							}
							if(p_arg11 != null) {
								args.push(p_arg11);
							}
							if(p_arg12 != null) {
								args.push(p_arg12);
							}
							if(p_arg13 != null) {
								args.push(p_arg13);
							}
							if(p_arg14 != null) {
								args.push(p_arg14);
							}
							if(p_arg15 != null) {
								args.push(p_arg15);
							}
							if(p_arg16 != null) {
								args.push(p_arg16);
							}
							if(p_arg17 != null) {
								args.push(p_arg17);
							}
							if(p_arg18 != null) {
								args.push(p_arg18);
							}
							if(p_arg19 != null) {
								args.push(p_arg19);
							}
							if(p_arg20 != null) {
								args.push(p_arg20);
							}
							if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
								com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
							}
							var msg = "WARNING: ";
							if(pos != null) {
								msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
							}
							if(args.length > 0) {
								msg += args.toString();
							}
							com_genome2d_debug_GDebug.g2d_log += msg;
							if(com_genome2d_debug_GDebug.useNativeTrace) {
								window.console.log(msg);
							}
						}
					}
					++i;
					continue;
				}
				if(previousCharCode != -1) {
					offsetX += this.g2d_textureFont.getKerning(previousCharCode,currentCharCode) * finalScale;
				}
				renderable.g2d_charCode = currentCharCode;
				renderable.fontChar = renderable.renderer.g2d_textureFont.getChar(currentCharCode);
				if(renderable.fontChar == null) {
					var p_arg110 = "Texture for character " + String.fromCodePoint(currentCharCode) + " with code " + currentCharCode + " not found!";
					var p_arg21 = null;
					var p_arg31 = null;
					var p_arg41 = null;
					var p_arg51 = null;
					var p_arg61 = null;
					var p_arg71 = null;
					var p_arg81 = null;
					var p_arg91 = null;
					var p_arg101 = null;
					var p_arg111 = null;
					var p_arg121 = null;
					var p_arg131 = null;
					var p_arg141 = null;
					var p_arg151 = null;
					var p_arg161 = null;
					var p_arg171 = null;
					var p_arg181 = null;
					var p_arg191 = null;
					var p_arg201 = null;
					var pos1 = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/text/GTextureTextRenderer.hx", lineNumber : 548, className : "com.genome2d.text.GTextureCharRenderable", methodName : "setCharCode"};
					if(com_genome2d_debug_GDebug.showPriority <= 4) {
						var args1 = [];
						if(p_arg110 != null) {
							args1.push(p_arg110);
						}
						if(p_arg21 != null) {
							args1.push(p_arg21);
						}
						if(p_arg31 != null) {
							args1.push(p_arg31);
						}
						if(p_arg41 != null) {
							args1.push(p_arg41);
						}
						if(p_arg51 != null) {
							args1.push(p_arg51);
						}
						if(p_arg61 != null) {
							args1.push(p_arg61);
						}
						if(p_arg71 != null) {
							args1.push(p_arg71);
						}
						if(p_arg81 != null) {
							args1.push(p_arg81);
						}
						if(p_arg91 != null) {
							args1.push(p_arg91);
						}
						if(p_arg101 != null) {
							args1.push(p_arg101);
						}
						if(p_arg111 != null) {
							args1.push(p_arg111);
						}
						if(p_arg121 != null) {
							args1.push(p_arg121);
						}
						if(p_arg131 != null) {
							args1.push(p_arg131);
						}
						if(p_arg141 != null) {
							args1.push(p_arg141);
						}
						if(p_arg151 != null) {
							args1.push(p_arg151);
						}
						if(p_arg161 != null) {
							args1.push(p_arg161);
						}
						if(p_arg171 != null) {
							args1.push(p_arg171);
						}
						if(p_arg181 != null) {
							args1.push(p_arg181);
						}
						if(p_arg191 != null) {
							args1.push(p_arg191);
						}
						if(p_arg201 != null) {
							args1.push(p_arg201);
						}
						if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
							com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos1,args1);
						}
						var msg1 = "WARNING: ";
						if(pos1 != null) {
							msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
						}
						if(args1.length > 0) {
							msg1 += args1.toString();
						}
						com_genome2d_debug_GDebug.g2d_log += msg1;
						if(com_genome2d_debug_GDebug.useNativeTrace) {
							window.console.log(msg1);
						}
					}
				}
				var tmp2;
				if(!this.g2d_autoSize) {
					var _this2 = char.g2d_texture;
					tmp2 = offsetX + _this2.g2d_nativeWidth * _this2.g2d_scaleFactor * finalScale > this.g2d_width;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					if(!this.g2d_wordWrap) {
						break;
					}
					lines.push(currentLine);
					if(this.g2d_wordWrapWhitespace) {
						var backtrack = i - whiteSpaceIndex - 1;
						var currentCount = currentLine.length;
						if(backtrack >= currentCount) {
							if(currentCount < 2) {
								break;
							}
							backtrack = 1;
							whiteSpaceIndex = i - backtrack - 1;
						}
						currentLine.splice(currentLine.length - backtrack,backtrack);
						charIndex -= backtrack;
						i = whiteSpaceIndex + 1;
					}
					currentLine = [];
					if(!this.g2d_autoSize && offsetY + 2 * (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale > this.g2d_height && isAllVisible) {
						isAllVisible = false;
						this.g2d_maxVisibleLine = lines.length - 1;
					}
					var tmp3;
					if(previousRenderable != null) {
						var tmp4;
						if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
							var _this3 = previousRenderable.fontChar.g2d_texture;
							tmp4 = _this3.g2d_nativeWidth * _this3.g2d_scaleFactor;
						} else {
							tmp4 = 0;
						}
						tmp3 = previousRenderable.x + tmp4 * finalScale > maxLineWidth;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						var maxLineWidth2;
						if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
							var _this4 = previousRenderable.fontChar.g2d_texture;
							maxLineWidth2 = _this4.g2d_nativeWidth * _this4.g2d_scaleFactor;
						} else {
							maxLineWidth2 = 0;
						}
						maxLineWidth = previousRenderable.x + maxLineWidth2 * finalScale;
					}
					offsetX = 0;
					offsetY += (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale;
					if(this.g2d_wordWrapWhitespace) {
						continue;
					}
					if(currentCharCode == 32) {
						++charIndex;
						++i;
						continue;
					}
				}
				currentLine.push(renderable);
				renderable.line = lines.length;
				renderable.x = offsetX;
				renderable.y = offsetY;
				++charIndex;
				if(currentCharCode == 32 || currentCharCode == 46) {
					whiteSpaceIndex = i;
				}
				if(currentCharCode == 32) {
					renderable.whiteSpace = true;
				} else {
					renderable.whiteSpace = false;
				}
				offsetX += (char.g2d_xadvance * char.g2d_texture.g2d_scaleFactor + this.g2d_tracking) * finalScale;
				previousCharCode = currentCharCode;
			}
			renderable.visible = true;
			previousRenderable = renderable;
			++i;
		}
		var tmp5;
		if(previousRenderable != null) {
			var tmp6;
			if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
				var _this5 = previousRenderable.fontChar.g2d_texture;
				tmp6 = _this5.g2d_nativeWidth * _this5.g2d_scaleFactor;
			} else {
				tmp6 = 0;
			}
			tmp5 = previousRenderable.x + tmp6 * finalScale > maxLineWidth;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			var maxLineWidth3;
			if(previousRenderable.fontChar != null && previousRenderable.fontChar.g2d_texture != null) {
				var _this6 = previousRenderable.fontChar.g2d_texture;
				maxLineWidth3 = _this6.g2d_nativeWidth * _this6.g2d_scaleFactor;
			} else {
				maxLineWidth3 = 0;
			}
			maxLineWidth = previousRenderable.x + maxLineWidth3 * finalScale;
		}
		lines.push(currentLine);
		this.g2d_lineCount = lines.length;
		if(isAllVisible) {
			this.g2d_maxVisibleLine = lines.length - 1;
		}
		if(charIndex < 0) {
			charIndex = 0;
		}
		var charCount = this.g2d_chars.length;
		var _g = charIndex;
		var _g1 = charCount;
		while(_g < _g1) {
			var i1 = _g++;
			this.g2d_chars[i1].visible = false;
		}
		if(this.g2d_autoSize) {
			this.g2d_textWidth = this.g2d_width = maxLineWidth > this.g2d_width ? maxLineWidth : this.g2d_width;
			this.g2d_height = offsetY + this.g2d_textureFont.lineHeight * finalScale;
		} else {
			this.g2d_textWidth = maxLineWidth;
		}
		this.g2d_textHeight = offsetY + this.g2d_textureFont.lineHeight * finalScale;
		var bottom = this.g2d_maxVisibleLine * (this.g2d_textureFont.lineHeight + this.g2d_lineSpace) * finalScale + this.g2d_textureFont.lineHeight * finalScale;
		var offsetY1 = 0;
		if(this.g2d_vAlign == com_genome2d_utils_GVAlignType.MIDDLE) {
			offsetY1 = (this.g2d_height - bottom) * .5;
		} else if(this.g2d_vAlign == com_genome2d_utils_GVAlignType.BOTTOM) {
			offsetY1 = this.g2d_height - bottom;
		}
		var _g2 = 0;
		var _g3 = lines.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			var currentLine1 = lines[i2];
			charCount = currentLine1.length;
			if(charCount == 0) {
				continue;
			}
			var offsetX1 = 0;
			var last = currentLine1[charCount - 1];
			var right;
			if(last.fontChar != null) {
				var _this7 = last.fontChar;
				right = _this7.g2d_xoffset * _this7.g2d_texture.g2d_scaleFactor;
			} else {
				right = 0;
			}
			var right1;
			if(last.fontChar != null) {
				var _this8 = last.fontChar;
				right1 = _this8.g2d_xadvance * _this8.g2d_texture.g2d_scaleFactor;
			} else {
				right1 = 0;
			}
			var right2 = last.x - right * finalScale + right1 * finalScale;
			if(this.g2d_hAlign == com_genome2d_utils_GHAlignType.CENTER) {
				offsetX1 = (this.g2d_width - right2) * .5;
			} else if(this.g2d_hAlign == com_genome2d_utils_GHAlignType.RIGHT) {
				offsetX1 = this.g2d_width - right2;
			}
			var _g21 = 0;
			var _g31 = charCount;
			while(_g21 < _g31) {
				var j = _g21++;
				var renderable1 = currentLine1[j];
				renderable1.x += offsetX1;
				renderable1.y += offsetY1;
			}
		}
		this.g2d_dirty = false;
	}
	,getCharAt: function(p_x,p_y) {
		var finalScale = this.g2d_fontScale * com_genome2d_text_GTextureTextRenderer.fontScaleMultiplier;
		var minX = Infinity;
		var minY = Infinity;
		var charCount = this.g2d_chars.length;
		var minIndex = charCount;
		var _g = 0;
		var _g1 = charCount;
		while(_g < _g1) {
			var i = _g++;
			var char = this.g2d_chars[i];
			if(!char.visible) {
				break;
			}
			var tx = char.x * finalScale;
			var ty = char.y * finalScale;
			var difX = p_x - tx;
			if(difX < 0) {
				continue;
			}
			var difY = p_y - ty;
			var tmp;
			if(char.fontChar != null) {
				var _this = char.fontChar;
				tmp = _this.g2d_yoffset * _this.g2d_texture.g2d_scaleFactor;
			} else {
				tmp = 0;
			}
			if(difY < -tmp * finalScale) {
				continue;
			}
			if(difX < minX && difY < this.g2d_textureFont.lineHeight * finalScale) {
				minX = difX;
				minY = difY;
				minIndex = i;
			}
		}
		var tmp1;
		if(minIndex < charCount) {
			var _this1 = this.g2d_chars[minIndex];
			var tmp2;
			if(_this1.fontChar != null && _this1.fontChar.g2d_texture != null) {
				var _this2 = _this1.fontChar.g2d_texture;
				tmp2 = _this2.g2d_nativeWidth * _this2.g2d_scaleFactor;
			} else {
				tmp2 = 0;
			}
			tmp1 = minX > finalScale * tmp2 / 2;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			++minIndex;
		}
		return minIndex;
	}
	,captureMouseInput: function(p_input) {
		if(this.enableCursor && p_input.type == "mouseDown" || p_input.type == "mouseMove") {
			var index = this.getCharAt(p_input.localX,p_input.localY);
			if(p_input.type == "mouseDown") {
				this.g2d_cursorCurrentIndex = this.cursorEndIndex = this.cursorStartIndex = index;
			} else if(p_input.type == "mouseMove" && p_input.buttonDown) {
				if(index < this.g2d_cursorCurrentIndex) {
					this.cursorStartIndex = index;
					this.cursorEndIndex = this.g2d_cursorCurrentIndex;
				} else {
					this.cursorStartIndex = this.g2d_cursorCurrentIndex;
					this.cursorEndIndex = index;
				}
			}
		}
	}
	,__class__: com_genome2d_text_GTextureTextRenderer
	,__properties__: $extend(com_genome2d_text_GTextRenderer.prototype.__properties__,{set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",get_maxVisibleLine:"get_maxVisibleLine",get_lineCount:"get_lineCount",set_wordWrapWhitespace:"set_wordWrapWhitespace",get_wordWrapWhitespace:"get_wordWrapWhitespace",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_textureFont:"set_textureFont",get_textureFont:"get_textureFont"})
});
var com_genome2d_text_GTextureCharRenderable = function(p_renderer) {
	this.whiteSpace = false;
	this.visible = false;
	this.renderer = p_renderer;
};
$hxClasses["com.genome2d.text.GTextureCharRenderable"] = com_genome2d_text_GTextureCharRenderable;
com_genome2d_text_GTextureCharRenderable.__name__ = "com.genome2d.text.GTextureCharRenderable";
com_genome2d_text_GTextureCharRenderable.prototype = {
	renderer: null
	,g2d_charCode: null
	,charCode: null
	,get_charCode: function() {
		return this.g2d_charCode;
	}
	,fontChar: null
	,setCharCode: function(p_charCode) {
		this.g2d_charCode = p_charCode;
		this.fontChar = this.renderer.g2d_textureFont.getChar(p_charCode);
		if(this.fontChar == null) {
			var p_arg1 = "Texture for character " + String.fromCodePoint(p_charCode) + " with code " + p_charCode + " not found!";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/text/GTextureTextRenderer.hx", lineNumber : 548, className : "com.genome2d.text.GTextureCharRenderable", methodName : "setCharCode"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
		}
	}
	,get_texture: function() {
		if(this.fontChar != null) {
			return this.fontChar.g2d_texture;
		} else {
			return null;
		}
	}
	,get_xadvance: function() {
		if(this.fontChar != null) {
			var _this = this.fontChar;
			return _this.g2d_xadvance * _this.g2d_texture.g2d_scaleFactor;
		} else {
			return 0;
		}
	}
	,get_xoffset: function() {
		if(this.fontChar != null) {
			var _this = this.fontChar;
			return _this.g2d_xoffset * _this.g2d_texture.g2d_scaleFactor;
		} else {
			return 0;
		}
	}
	,get_yoffset: function() {
		if(this.fontChar != null) {
			var _this = this.fontChar;
			return _this.g2d_yoffset * _this.g2d_texture.g2d_scaleFactor;
		} else {
			return 0;
		}
	}
	,get_width: function() {
		if(this.fontChar != null && this.fontChar.g2d_texture != null) {
			var _this = this.fontChar.g2d_texture;
			return _this.g2d_nativeWidth * _this.g2d_scaleFactor;
		} else {
			return 0;
		}
	}
	,x: null
	,y: null
	,line: null
	,visible: null
	,whiteSpace: null
	,__class__: com_genome2d_text_GTextureCharRenderable
	,__properties__: {get_width:"get_width",get_yoffset:"get_yoffset",get_xoffset:"get_xoffset",get_xadvance:"get_xadvance",get_texture:"get_texture",get_charCode:"get_charCode"}
};
var com_genome2d_textures_GTextureBase = function(p_context,p_id,p_source,p_format) {
	this.g2d_currentState = "default";
	this.renderTargetAlpha = 0;
	this.g2d_dirty = true;
	this.g2d_inverted = false;
	this.rotate = false;
	this.g2d_disposed = false;
	this.g2d_context = p_context;
	this.g2d_id = p_id;
	this.g2d_nativeWidth = this.g2d_nativeHeight = 0;
	this.g2d_gpuWidth = this.g2d_gpuHeight = 0;
	this.g2d_region = new com_genome2d_geom_GRectangle(0,0,1,1);
	this.g2d_u = this.g2d_v = 0;
	this.g2d_uScale = this.g2d_vScale = 1;
	this.g2d_pivotX = this.g2d_pivotY = 0;
	this.g2d_initializedRenderTarget = false;
	this.premultiplied = true;
	this.g2d_dirty = true;
	this.g2d_scaleFactor = 1;
	com_genome2d_textures_GTextureBase.g2d_instanceCount++;
	this.g2d_contextId = com_genome2d_textures_GTextureBase.g2d_instanceCount;
	this.g2d_format = p_format;
	this.g2d_repeatable = false;
	this.g2d_filteringType = com_genome2d_textures_GTextureManager.defaultFilteringType;
	this.setSource(p_source);
	com_genome2d_textures_GTextureManager.g2d_addTexture(this);
};
$hxClasses["com.genome2d.textures.GTextureBase"] = com_genome2d_textures_GTextureBase;
com_genome2d_textures_GTextureBase.__name__ = "com.genome2d.textures.GTextureBase";
com_genome2d_textures_GTextureBase.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_textures_GTextureBase.fromReference = function(p_reference) {
	return com_genome2d_textures_GTextureManager.getTexture(HxOverrides.substr(p_reference,1,null));
};
com_genome2d_textures_GTextureBase.prototype = {
	g2d_context: null
	,g2d_disposed: null
	,g2d_onInvalidated: null
	,rotate: null
	,g2d_inverted: null
	,get_onInvalidated: function() {
		if(this.g2d_onInvalidated == null) {
			this.g2d_onInvalidated = new com_genome2d_callbacks_GCallback1(com_genome2d_textures_GTexture);
		}
		return this.g2d_onInvalidated;
	}
	,g2d_onDisposed: null
	,get_onDisposed: function() {
		if(this.g2d_onDisposed == null) {
			this.g2d_onDisposed = new com_genome2d_callbacks_GCallback1(com_genome2d_textures_GTexture);
		}
		return this.g2d_onDisposed;
	}
	,g2d_dirty: null
	,isDirty: function() {
		return this.g2d_dirty;
	}
	,g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		com_genome2d_textures_GTextureManager.g2d_removeTexture(this);
		this.g2d_id = p_value;
		com_genome2d_textures_GTextureManager.g2d_addTexture(this);
		return this.g2d_id;
	}
	,g2d_pivotX: null
	,get_pivotX: function() {
		return this.g2d_pivotX * this.g2d_scaleFactor;
	}
	,set_pivotX: function(p_value) {
		return this.g2d_pivotX = p_value / this.g2d_scaleFactor;
	}
	,g2d_pivotY: null
	,get_pivotY: function() {
		return this.g2d_pivotY * this.g2d_scaleFactor;
	}
	,set_pivotY: function(p_value) {
		return this.g2d_pivotY = p_value / this.g2d_scaleFactor;
	}
	,g2d_nativeWidth: null
	,get_nativeWidth: function() {
		return this.g2d_nativeWidth;
	}
	,g2d_nativeHeight: null
	,get_nativeHeight: function() {
		return this.g2d_nativeHeight;
	}
	,get_width: function() {
		return this.g2d_nativeWidth * this.g2d_scaleFactor;
	}
	,get_height: function() {
		return this.g2d_nativeHeight * this.g2d_scaleFactor;
	}
	,g2d_scaleFactor: null
	,get_scaleFactor: function() {
		return this.g2d_scaleFactor;
	}
	,set_scaleFactor: function(p_value) {
		this.g2d_scaleFactor = p_value;
		return this.g2d_scaleFactor;
	}
	,g2d_filteringType: null
	,get_filteringType: function() {
		return this.g2d_filteringType;
	}
	,set_filteringType: function(p_value) {
		return this.g2d_filteringType = p_value;
	}
	,g2d_sourceType: null
	,getSourceType: function() {
		return this.g2d_sourceType;
	}
	,g2d_format: null
	,get_format: function() {
		return this.g2d_format;
	}
	,set_format: function(p_value) {
		this.g2d_format = p_value;
		this.g2d_dirty = true;
		return p_value;
	}
	,g2d_u: null
	,get_u: function() {
		return this.g2d_u;
	}
	,set_u: function(p_value) {
		return this.g2d_u = p_value;
	}
	,g2d_v: null
	,get_v: function() {
		return this.g2d_v;
	}
	,set_v: function(p_value) {
		return this.g2d_v = p_value;
	}
	,g2d_uScale: null
	,get_uScale: function() {
		return this.g2d_uScale;
	}
	,set_uScale: function(p_value) {
		return this.g2d_uScale = p_value;
	}
	,g2d_vScale: null
	,get_vScale: function() {
		return this.g2d_vScale;
	}
	,set_vScale: function(p_value) {
		return this.g2d_vScale = p_value;
	}
	,g2d_repeatable: null
	,get_repeatable: function() {
		return this.g2d_repeatable;
	}
	,set_repeatable: function(p_value) {
		this.g2d_repeatable = p_value;
		this.g2d_dirty = true;
		return p_value;
	}
	,g2d_frame: null
	,getFrame: function() {
		if(this.g2d_frame != null) {
			return this.g2d_frame.clone();
		} else {
			return null;
		}
	}
	,g2d_region: null
	,get_region: function() {
		return this.g2d_region;
	}
	,set_region: function(p_value) {
		this.g2d_region = p_value;
		this.invalidateRegion();
		return this.g2d_region;
	}
	,g2d_source: null
	,getSource: function() {
		return this.g2d_source;
	}
	,setSource: function(p_value) {
		this.g2d_source = p_value;
		return this.g2d_source;
	}
	,premultiplied: null
	,renderTargetAlpha: null
	,g2d_initializedRenderTarget: null
	,isRenderTargetInitialized: function() {
		return this.g2d_initializedRenderTarget;
	}
	,g2d_contextId: null
	,invalidateRegion: function() {
		this.g2d_nativeWidth = this.g2d_region.width | 0;
		this.g2d_nativeHeight = this.g2d_region.height | 0;
		this.invalidateUV();
	}
	,invalidateUV: function() {
		this.g2d_u = this.g2d_region.x / this.g2d_gpuWidth;
		this.g2d_v = this.g2d_region.y / this.g2d_gpuHeight;
		this.g2d_uScale = this.g2d_region.width / this.g2d_gpuWidth;
		this.g2d_vScale = this.g2d_region.height / this.g2d_gpuHeight;
	}
	,usesRectangle: function() {
		if(!this.g2d_repeatable) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			return com_genome2d_Genome2D.g2d_instance.g2d_context.hasFeature(2);
		} else {
			return false;
		}
	}
	,needClearAsRenderTarget: function(p_clear) {
		if(!this.g2d_initializedRenderTarget || p_clear) {
			this.g2d_initializedRenderTarget = true;
			return true;
		}
		return false;
	}
	,dispose: function(p_disposeSource) {
		if(p_disposeSource == null) {
			p_disposeSource = false;
		}
		this.g2d_source = null;
		this.g2d_context = null;
		com_genome2d_textures_GTextureManager.g2d_removeTexture(this);
		if(this.g2d_onDisposed != null) {
			this.g2d_onDisposed.dispatch(this);
			this.g2d_onDisposed.removeAll();
		}
		if(this.g2d_onInvalidated != null) {
			this.g2d_onInvalidated.removeAll();
		}
		this.g2d_disposed = true;
	}
	,getAlphaAtUV: function(p_u,p_v) {
		return 255;
	}
	,getColorAtUV: function(p_u,p_v) {
		return 0;
	}
	,parentInvalidated_handler: function(p_texture) {
		this.g2d_gpuWidth = p_texture.g2d_gpuWidth;
		this.g2d_gpuHeight = p_texture.g2d_gpuHeight;
		this.invalidateUV();
		if(this.g2d_onInvalidated != null) {
			this.g2d_onInvalidated.dispatch(this);
		}
	}
	,parentDisposed_handler: function(p_texture) {
		this.dispose();
	}
	,toString: function() {
		return "@" + this.g2d_id;
	}
	,toReference: function() {
		return "@" + this.g2d_id;
	}
	,g2d_gpuWidth: null
	,get_gpuWidth: function() {
		return this.g2d_gpuWidth;
	}
	,g2d_gpuHeight: null
	,get_gpuHeight: function() {
		return this.g2d_gpuHeight;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTextureBase");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTextureBase");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_textures_GTextureBase
	,__properties__: {get_gpuHeight:"get_gpuHeight",get_gpuWidth:"get_gpuWidth",set_region:"set_region",get_region:"get_region",set_repeatable:"set_repeatable",get_repeatable:"get_repeatable",set_vScale:"set_vScale",get_vScale:"get_vScale",set_uScale:"set_uScale",get_uScale:"get_uScale",set_v:"set_v",get_v:"get_v",set_u:"set_u",get_u:"get_u",set_format:"set_format",get_format:"get_format",set_filteringType:"set_filteringType",get_filteringType:"get_filteringType",set_scaleFactor:"set_scaleFactor",get_scaleFactor:"get_scaleFactor",get_height:"get_height",get_width:"get_width",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_id:"set_id",get_id:"get_id",get_onDisposed:"get_onDisposed",get_onInvalidated:"get_onInvalidated"}
};
var com_genome2d_textures_GTexture = function(p_context,p_id,p_source,p_format) {
	com_genome2d_textures_GTextureBase.call(this,p_context,p_id,p_source,p_format);
};
$hxClasses["com.genome2d.textures.GTexture"] = com_genome2d_textures_GTexture;
com_genome2d_textures_GTexture.__name__ = "com.genome2d.textures.GTexture";
com_genome2d_textures_GTexture.fromReference = function(p_reference) {
	return com_genome2d_textures_GTextureManager.getTexture(HxOverrides.substr(p_reference,1,null));
};
com_genome2d_textures_GTexture.__super__ = com_genome2d_textures_GTextureBase;
com_genome2d_textures_GTexture.prototype = $extend(com_genome2d_textures_GTextureBase.prototype,{
	g2d_frameBuffer: null
	,getFrameBuffer: function() {
		return this.g2d_frameBuffer;
	}
	,getImage: function() {
		if(this.g2d_sourceType == com_genome2d_textures_GTextureSourceType.TEXTURE) {
			return (js_Boot.__cast(this.g2d_source , com_genome2d_textures_GTexture)).getImage();
		}
		return this.g2d_source;
	}
	,setSource: function(p_value) {
		if(this.g2d_source != p_value) {
			this.g2d_dirty = true;
			this.g2d_source = p_value;
			if(((this.g2d_source) instanceof HTMLImageElement)) {
				var imageElement = this.g2d_source;
				this.g2d_sourceType = com_genome2d_textures_GTextureSourceType.IMAGE;
				this.g2d_nativeWidth = imageElement.width;
				this.g2d_nativeHeight = imageElement.height;
				this.premultiplied = true;
			} else if(((this.g2d_source) instanceof ImageData)) {
				var imageData = this.g2d_source;
				this.g2d_sourceType = com_genome2d_textures_GTextureSourceType.IMAGEDATA;
				this.g2d_nativeWidth = imageData.width;
				this.g2d_nativeHeight = imageData.height;
				this.premultiplied = true;
			} else if(((this.g2d_source) instanceof com_genome2d_geom_GRectangle)) {
				this.g2d_sourceType = com_genome2d_textures_GTextureSourceType.RENDER_TARGET;
				this.g2d_nativeWidth = p_value.width;
				this.g2d_nativeHeight = p_value.height;
			} else if(((this.g2d_source) instanceof com_genome2d_textures_GTexture)) {
				var parent = this.g2d_source;
				if(parent.g2d_onInvalidated == null) {
					parent.g2d_onInvalidated = new com_genome2d_callbacks_GCallback1(com_genome2d_textures_GTexture);
				}
				parent.g2d_onInvalidated.add($bind(this,this.parentInvalidated_handler));
				if(parent.g2d_onDisposed == null) {
					parent.g2d_onDisposed = new com_genome2d_callbacks_GCallback1(com_genome2d_textures_GTexture);
				}
				parent.g2d_onDisposed.add($bind(this,this.parentDisposed_handler));
				this.g2d_gpuWidth = parent.g2d_gpuWidth;
				this.g2d_gpuHeight = parent.g2d_gpuHeight;
				this.g2d_nativeWidth = parent.g2d_nativeWidth;
				this.g2d_nativeHeight = parent.g2d_nativeHeight;
				this.g2d_nativeTexture = parent.g2d_nativeTexture;
				this.g2d_inverted = parent.g2d_inverted;
				this.g2d_sourceType = com_genome2d_textures_GTextureSourceType.TEXTURE;
				this.premultiplied = parent.premultiplied;
			} else {
				var p_arg1 = "Invalid texture source.";
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-ContextHTML/src/com/genome2d/textures/GTexture.hx", lineNumber : 74, className : "com.genome2d.textures.GTexture", methodName : "setSource"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
			this.g2d_dirty = true;
		}
		return this.g2d_source;
	}
	,invalidateNativeTexture: function(p_reinitialize) {
		if(((this.g2d_context) instanceof com_genome2d_context_GWebGLContext)) {
			var webglContext = this.g2d_context;
			var nativeContext = webglContext.g2d_nativeContext;
			if(this.g2d_sourceType != com_genome2d_textures_GTextureSourceType.TEXTURE) {
				var tmp;
				if(!this.g2d_repeatable) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					tmp = com_genome2d_Genome2D.g2d_instance.g2d_context.hasFeature(2);
				} else {
					tmp = false;
				}
				this.g2d_gpuWidth = tmp ? this.g2d_nativeWidth : com_genome2d_textures_GTextureUtils.getNextValidTextureSize(this.g2d_nativeWidth);
				var tmp1;
				if(!this.g2d_repeatable) {
					if(com_genome2d_Genome2D.g2d_instance == null) {
						com_genome2d_Genome2D.g2d_instantiable = true;
						new com_genome2d_Genome2D();
						com_genome2d_Genome2D.g2d_instantiable = false;
					}
					tmp1 = com_genome2d_Genome2D.g2d_instance.g2d_context.hasFeature(2);
				} else {
					tmp1 = false;
				}
				this.g2d_gpuHeight = tmp1 ? this.g2d_nativeHeight : com_genome2d_textures_GTextureUtils.getNextValidTextureSize(this.g2d_nativeHeight);
				switch(this.g2d_sourceType._hx_index) {
				case 2:
					if(this.g2d_nativeTexture == null || p_reinitialize) {
						this.g2d_nativeTexture = nativeContext.createTexture();
					}
					this.g2d_inverted = true;
					nativeContext.bindTexture(3553,this.g2d_nativeTexture);
					nativeContext.texImage2D(3553,0,6408,this.g2d_gpuWidth,this.g2d_gpuHeight,0,6408,5121,null);
					if(this.g2d_filteringType == com_genome2d_textures_GTextureFilteringType.LINEAR) {
						nativeContext.texParameteri(3553,10241,9729);
						nativeContext.texParameteri(3553,10240,9729);
					} else {
						nativeContext.texParameteri(3553,10241,9728);
						nativeContext.texParameteri(3553,10240,9728);
					}
					nativeContext.texParameteri(3553,10242,33071);
					nativeContext.texParameteri(3553,10243,33071);
					this.g2d_frameBuffer = nativeContext.createFramebuffer();
					nativeContext.bindFramebuffer(36160,this.g2d_frameBuffer);
					nativeContext.framebufferTexture2D(36160,36064,3553,this.g2d_nativeTexture,0);
					var renderbuffer = nativeContext.createRenderbuffer();
					nativeContext.bindRenderbuffer(36161,renderbuffer);
					nativeContext.renderbufferStorage(36161,33189,this.g2d_gpuWidth,this.g2d_gpuHeight);
					nativeContext.framebufferRenderbuffer(36160,36096,36161,renderbuffer);
					nativeContext.bindTexture(3553,null);
					nativeContext.bindFramebuffer(36160,null);
					nativeContext.bindRenderbuffer(36161,null);
					break;
				case 7:case 8:
					if(this.g2d_nativeTexture == null || p_reinitialize) {
						this.g2d_nativeTexture = nativeContext.createTexture();
					}
					nativeContext.bindTexture(3553,this.g2d_nativeTexture);
					nativeContext.texImage2D(3553,0,6408,6408,5121,this.g2d_source);
					if(this.g2d_filteringType == com_genome2d_textures_GTextureFilteringType.LINEAR) {
						nativeContext.texParameteri(3553,10241,9729);
						nativeContext.texParameteri(3553,10240,9729);
					} else if(this.g2d_filteringType == com_genome2d_textures_GTextureFilteringType.LINEAR_MIPMAP_LINEAR) {
						nativeContext.generateMipmap(3553);
						nativeContext.texParameteri(3553,10241,9987);
						nativeContext.texParameteri(3553,10240,9729);
					} else {
						nativeContext.texParameteri(3553,10241,9728);
						nativeContext.texParameteri(3553,10240,9728);
					}
					if(this.g2d_repeatable) {
						nativeContext.texParameteri(3553,10242,10497);
						nativeContext.texParameteri(3553,10243,10497);
					} else {
						nativeContext.texParameteri(3553,10242,33071);
						nativeContext.texParameteri(3553,10243,33071);
					}
					nativeContext.bindTexture(3553,null);
					break;
				default:
				}
			}
		} else {
			this.g2d_gpuWidth = this.g2d_nativeWidth;
			this.g2d_gpuHeight = this.g2d_nativeHeight;
		}
	}
	,getAlphaAtUV: function(p_u,p_v) {
		var imageData = ((this.g2d_source) instanceof com_genome2d_textures_GTexture) ? (js_Boot.__cast(this.g2d_source , com_genome2d_textures_GTexture)).g2d_source : ((this.g2d_source) instanceof ImageData) ? this.g2d_source : null;
		if(imageData == null) {
			return 255;
		}
		p_u = p_u * (this.g2d_nativeWidth * this.g2d_scaleFactor) / this.g2d_gpuWidth;
		p_v = p_v * (this.g2d_nativeHeight * this.g2d_scaleFactor) / this.g2d_gpuHeight;
		var offset = ((this.g2d_u + p_u) * this.g2d_gpuWidth | 0) + ((this.g2d_v + p_v) * this.g2d_gpuHeight | 0) * imageData.width;
		return imageData.data[offset * 4 + 3];
	}
	,dispose: function(p_disposeSource) {
		if(p_disposeSource == null) {
			p_disposeSource = false;
		}
		if(this.g2d_sourceType != com_genome2d_textures_GTextureSourceType.TEXTURE && this.g2d_nativeTexture != null) {
			(js_Boot.__cast(this.g2d_context , com_genome2d_context_GWebGLContext)).g2d_nativeContext.deleteTexture(this.g2d_nativeTexture);
		}
		this.g2d_nativeTexture = null;
		com_genome2d_textures_GTextureBase.prototype.dispose.call(this,p_disposeSource);
	}
	,g2d_nativeTexture: null
	,get_nativeTexture: function() {
		return this.g2d_nativeTexture;
	}
	,hasSameGPUTexture: function(p_texture) {
		return p_texture.g2d_nativeTexture == this.g2d_nativeTexture;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTexture");
		return com_genome2d_textures_GTextureBase.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_textures_GTextureBase.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTexture");
	}
	,__class__: com_genome2d_textures_GTexture
	,__properties__: $extend(com_genome2d_textures_GTextureBase.prototype.__properties__,{get_nativeTexture:"get_nativeTexture"})
});
var com_genome2d_textures_GTextureAtlas = function() {
	this.g2d_currentState = "default";
	this.g2d_subTextures = [];
};
$hxClasses["com.genome2d.textures.GTextureAtlas"] = com_genome2d_textures_GTextureAtlas;
com_genome2d_textures_GTextureAtlas.__name__ = "com.genome2d.textures.GTextureAtlas";
com_genome2d_textures_GTextureAtlas.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_textures_GTextureAtlas.fromReference = function(p_reference) {
	return com_genome2d_textures_GTextureManager.getTextureAtlas(HxOverrides.substr(p_reference,1,null));
};
com_genome2d_textures_GTextureAtlas.prototype = {
	g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		if(this.g2d_id != p_value) {
			com_genome2d_textures_GTextureManager.removeTextureAtlas(this);
			this.g2d_id = p_value;
			if(this.g2d_texture == null) {
				this.g2d_texture = com_genome2d_textures_GTextureManager.getTexture(this.g2d_id);
			}
			com_genome2d_textures_GTextureManager.addTextureAtlas(this);
		}
		return this.g2d_id;
	}
	,g2d_texture: null
	,getTexture: function() {
		return this.g2d_texture;
	}
	,g2d_subTextures: null
	,addSubTexture: function(p_texture) {
		this.g2d_subTextures.push(p_texture);
	}
	,getSubTexture: function(p_id) {
		var _g = 0;
		var _g1 = this.g2d_subTextures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			if(texture.g2d_id == p_id) {
				return texture;
			}
		}
		return null;
	}
	,findTexture: function(p_regExp) {
		var _g = 0;
		var _g1 = this.g2d_subTextures;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			if(p_regExp.match(texture.g2d_id)) {
				return texture;
			}
		}
		return null;
	}
	,addSubTexturesFromXml: function(p_xml,p_prefixParentId) {
		if(p_prefixParentId == null) {
			p_prefixParentId = true;
		}
		var root = p_xml.firstElement();
		var it = root.elements();
		while(it.hasNext()) {
			var node = it.next();
			var region = new com_genome2d_geom_GRectangle(Std.parseInt(node.get("x")),Std.parseInt(node.get("y")),Std.parseInt(node.get("width")),Std.parseInt(node.get("height")));
			var frame = null;
			if(node.get("frameX") != null && node.get("frameWidth") != null && node.get("frameY") != null && node.get("frameHeight") != null) {
				frame = new com_genome2d_geom_GRectangle(Std.parseInt(node.get("frameX")),Std.parseInt(node.get("frameY")),Std.parseInt(node.get("frameWidth")),Std.parseInt(node.get("frameHeight")));
			}
			this.addSubTexture(com_genome2d_textures_GTextureManager.createSubTexture(node.get("name"),this.g2d_texture,region,frame,p_prefixParentId));
		}
	}
	,toReference: function() {
		return "@" + this.g2d_id;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTextureAtlas");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTextureAtlas");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_textures_GTextureAtlas
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var com_genome2d_textures_GTextureFilteringType = $hxEnums["com.genome2d.textures.GTextureFilteringType"] = { __ename__ : "com.genome2d.textures.GTextureFilteringType", __constructs__ : ["NEAREST","LINEAR","LINEAR_MIPMAP_LINEAR"]
	,NEAREST: {_hx_index:0,__enum__:"com.genome2d.textures.GTextureFilteringType",toString:$estr}
	,LINEAR: {_hx_index:1,__enum__:"com.genome2d.textures.GTextureFilteringType",toString:$estr}
	,LINEAR_MIPMAP_LINEAR: {_hx_index:2,__enum__:"com.genome2d.textures.GTextureFilteringType",toString:$estr}
};
com_genome2d_textures_GTextureFilteringType.__empty_constructs__ = [com_genome2d_textures_GTextureFilteringType.NEAREST,com_genome2d_textures_GTextureFilteringType.LINEAR,com_genome2d_textures_GTextureFilteringType.LINEAR_MIPMAP_LINEAR];
var com_genome2d_textures_GTextureManager = function() { };
$hxClasses["com.genome2d.textures.GTextureManager"] = com_genome2d_textures_GTextureManager;
com_genome2d_textures_GTextureManager.__name__ = "com.genome2d.textures.GTextureManager";
com_genome2d_textures_GTextureManager.g2d_context = null;
com_genome2d_textures_GTextureManager.init = function(p_context) {
	com_genome2d_textures_GTextureManager.g2d_context = p_context;
	com_genome2d_textures_GTextureManager.g2d_textures = new haxe_ds_StringMap();
	com_genome2d_textures_GTextureManager.g2d_textureAtlases = new haxe_ds_StringMap();
};
com_genome2d_textures_GTextureManager.g2d_textures = null;
com_genome2d_textures_GTextureManager.getAllTextures = function() {
	return com_genome2d_textures_GTextureManager.g2d_textures;
};
com_genome2d_textures_GTextureManager.g2d_addTexture = function(p_texture) {
	if(p_texture.g2d_id == null || p_texture.g2d_id.length == 0) {
		var p_arg1 = "Invalid texture id";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 38, className : "com.genome2d.textures.GTextureManager", methodName : "g2d_addTexture"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	var key = p_texture.g2d_id;
	var _this = com_genome2d_textures_GTextureManager.g2d_textures;
	if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
		var p_arg110 = "Duplicate textures id: " + p_texture.g2d_id;
		var p_arg21 = null;
		var p_arg31 = null;
		var p_arg41 = null;
		var p_arg51 = null;
		var p_arg61 = null;
		var p_arg71 = null;
		var p_arg81 = null;
		var p_arg91 = null;
		var p_arg101 = null;
		var p_arg111 = null;
		var p_arg121 = null;
		var p_arg131 = null;
		var p_arg141 = null;
		var p_arg151 = null;
		var p_arg161 = null;
		var p_arg171 = null;
		var p_arg181 = null;
		var p_arg191 = null;
		var p_arg201 = null;
		var pos1 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 39, className : "com.genome2d.textures.GTextureManager", methodName : "g2d_addTexture"};
		var args1 = [];
		if(p_arg110 != null) {
			args1.push(p_arg110);
		}
		if(p_arg21 != null) {
			args1.push(p_arg21);
		}
		if(p_arg31 != null) {
			args1.push(p_arg31);
		}
		if(p_arg41 != null) {
			args1.push(p_arg41);
		}
		if(p_arg51 != null) {
			args1.push(p_arg51);
		}
		if(p_arg61 != null) {
			args1.push(p_arg61);
		}
		if(p_arg71 != null) {
			args1.push(p_arg71);
		}
		if(p_arg81 != null) {
			args1.push(p_arg81);
		}
		if(p_arg91 != null) {
			args1.push(p_arg91);
		}
		if(p_arg101 != null) {
			args1.push(p_arg101);
		}
		if(p_arg111 != null) {
			args1.push(p_arg111);
		}
		if(p_arg121 != null) {
			args1.push(p_arg121);
		}
		if(p_arg131 != null) {
			args1.push(p_arg131);
		}
		if(p_arg141 != null) {
			args1.push(p_arg141);
		}
		if(p_arg151 != null) {
			args1.push(p_arg151);
		}
		if(p_arg161 != null) {
			args1.push(p_arg161);
		}
		if(p_arg171 != null) {
			args1.push(p_arg171);
		}
		if(p_arg181 != null) {
			args1.push(p_arg181);
		}
		if(p_arg191 != null) {
			args1.push(p_arg191);
		}
		if(p_arg201 != null) {
			args1.push(p_arg201);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
		}
		var msg1 = "ERROR: ";
		if(pos1 != null) {
			msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
		}
		if(args1.length > 0) {
			msg1 += args1.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg1;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg1);
		}
		throw new js__$Boot_HaxeError(msg1);
	}
	var key1 = p_texture.g2d_id;
	var _this1 = com_genome2d_textures_GTextureManager.g2d_textures;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,p_texture);
	} else {
		_this1.h[key1] = p_texture;
	}
};
com_genome2d_textures_GTextureManager.g2d_removeTexture = function(p_texture) {
	if(p_texture.g2d_id == null) {
		return;
	}
	com_genome2d_textures_GTextureManager.g2d_textures.remove(p_texture.g2d_id);
};
com_genome2d_textures_GTextureManager.getTexture = function(p_id) {
	var _this = com_genome2d_textures_GTextureManager.g2d_textures;
	if(__map_reserved[p_id] != null) {
		return _this.getReserved(p_id);
	} else {
		return _this.h[p_id];
	}
};
com_genome2d_textures_GTextureManager.getTextures = function(p_ids) {
	var textures = [];
	var _g = 0;
	while(_g < p_ids.length) {
		var id = p_ids[_g];
		++_g;
		var _this = com_genome2d_textures_GTextureManager.g2d_textures;
		textures.push(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]);
	}
	return textures;
};
com_genome2d_textures_GTextureManager.findTextures = function(p_regExp) {
	var found = [];
	var _this = com_genome2d_textures_GTextureManager.g2d_textures;
	var tex = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tex.hasNext()) {
		var tex1 = tex.next();
		if(p_regExp != null) {
			if(p_regExp.match(tex1.g2d_id)) {
				found.push(tex1);
			}
		} else {
			found.push(tex1);
		}
	}
	return found;
};
com_genome2d_textures_GTextureManager.g2d_textureAtlases = null;
com_genome2d_textures_GTextureManager.getAllTextureAtlases = function() {
	return com_genome2d_textures_GTextureManager.g2d_textureAtlases;
};
com_genome2d_textures_GTextureManager.addTextureAtlas = function(p_textureAtlas) {
	if(p_textureAtlas.g2d_id == null || p_textureAtlas.g2d_id.length == 0) {
		var p_arg1 = "Invalid texture atlas id";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 82, className : "com.genome2d.textures.GTextureManager", methodName : "addTextureAtlas"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	var key = p_textureAtlas.g2d_id;
	var _this = com_genome2d_textures_GTextureManager.g2d_textureAtlases;
	if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
		var p_arg110 = "Duplicate textures id: " + p_textureAtlas.g2d_id;
		var p_arg21 = null;
		var p_arg31 = null;
		var p_arg41 = null;
		var p_arg51 = null;
		var p_arg61 = null;
		var p_arg71 = null;
		var p_arg81 = null;
		var p_arg91 = null;
		var p_arg101 = null;
		var p_arg111 = null;
		var p_arg121 = null;
		var p_arg131 = null;
		var p_arg141 = null;
		var p_arg151 = null;
		var p_arg161 = null;
		var p_arg171 = null;
		var p_arg181 = null;
		var p_arg191 = null;
		var p_arg201 = null;
		var pos1 = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 83, className : "com.genome2d.textures.GTextureManager", methodName : "addTextureAtlas"};
		var args1 = [];
		if(p_arg110 != null) {
			args1.push(p_arg110);
		}
		if(p_arg21 != null) {
			args1.push(p_arg21);
		}
		if(p_arg31 != null) {
			args1.push(p_arg31);
		}
		if(p_arg41 != null) {
			args1.push(p_arg41);
		}
		if(p_arg51 != null) {
			args1.push(p_arg51);
		}
		if(p_arg61 != null) {
			args1.push(p_arg61);
		}
		if(p_arg71 != null) {
			args1.push(p_arg71);
		}
		if(p_arg81 != null) {
			args1.push(p_arg81);
		}
		if(p_arg91 != null) {
			args1.push(p_arg91);
		}
		if(p_arg101 != null) {
			args1.push(p_arg101);
		}
		if(p_arg111 != null) {
			args1.push(p_arg111);
		}
		if(p_arg121 != null) {
			args1.push(p_arg121);
		}
		if(p_arg131 != null) {
			args1.push(p_arg131);
		}
		if(p_arg141 != null) {
			args1.push(p_arg141);
		}
		if(p_arg151 != null) {
			args1.push(p_arg151);
		}
		if(p_arg161 != null) {
			args1.push(p_arg161);
		}
		if(p_arg171 != null) {
			args1.push(p_arg171);
		}
		if(p_arg181 != null) {
			args1.push(p_arg181);
		}
		if(p_arg191 != null) {
			args1.push(p_arg191);
		}
		if(p_arg201 != null) {
			args1.push(p_arg201);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos1,args1);
		}
		var msg1 = "ERROR: ";
		if(pos1 != null) {
			msg1 += pos1.fileName + ":" + pos1.lineNumber + " : " + pos1.methodName + " : ";
		}
		if(args1.length > 0) {
			msg1 += args1.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg1;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg1);
		}
		throw new js__$Boot_HaxeError(msg1);
	}
	var key1 = p_textureAtlas.g2d_id;
	var _this1 = com_genome2d_textures_GTextureManager.g2d_textureAtlases;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,p_textureAtlas);
	} else {
		_this1.h[key1] = p_textureAtlas;
	}
};
com_genome2d_textures_GTextureManager.removeTextureAtlas = function(p_textureAtlas) {
	if(p_textureAtlas.g2d_id == null) {
		return;
	}
	com_genome2d_textures_GTextureManager.g2d_textureAtlases.remove(p_textureAtlas.g2d_id);
};
com_genome2d_textures_GTextureManager.getTextureAtlas = function(p_id) {
	var _this = com_genome2d_textures_GTextureManager.g2d_textureAtlases;
	if(__map_reserved[p_id] != null) {
		return _this.getReserved(p_id);
	} else {
		return _this.h[p_id];
	}
};
com_genome2d_textures_GTextureManager.disposeAll = function(p_disposeSource) {
	if(p_disposeSource == null) {
		p_disposeSource = false;
	}
	var _this = com_genome2d_textures_GTextureManager.g2d_textures;
	var texture = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(texture.hasNext()) {
		var texture1 = texture.next();
		if(texture1 == null) {
			continue;
		}
		var p_arg1 = texture1.g2d_id;
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 104, className : "com.genome2d.textures.GTextureManager", methodName : "disposeAll"};
		if(com_genome2d_debug_GDebug.showPriority <= 3) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(3,pos,args);
			}
			var msg = "INFO: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
		if(texture1.g2d_id.indexOf("g2d_") != 0) {
			texture1.dispose(p_disposeSource);
		}
	}
};
com_genome2d_textures_GTextureManager.g2d_asyncCallback = null;
com_genome2d_textures_GTextureManager.g2d_asyncTextureQueue = null;
com_genome2d_textures_GTextureManager.invalidateAll = function(p_force,p_async,p_callback) {
	if(p_async == null) {
		p_async = false;
	}
	if(p_async) {
		com_genome2d_textures_GTextureManager.g2d_asyncForce = p_force;
		com_genome2d_textures_GTextureManager.g2d_asyncCallback = p_callback;
		com_genome2d_textures_GTextureManager.g2d_asyncTextureQueue = [];
		var _this = com_genome2d_textures_GTextureManager.g2d_textures;
		var texture = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(texture.hasNext()) {
			var texture1 = texture.next();
			if(texture1.getSourceType() != com_genome2d_textures_GTextureSourceType.TEXTURE) {
				com_genome2d_textures_GTextureManager.g2d_asyncTextureQueue.push(texture1);
			}
		}
		com_genome2d_textures_GTextureManager.invalidateNextInQueue();
	} else {
		var _this1 = com_genome2d_textures_GTextureManager.g2d_textures;
		var texture2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(texture2.hasNext()) {
			var texture3 = texture2.next();
			texture3.invalidateNativeTexture(p_force);
		}
	}
};
com_genome2d_textures_GTextureManager.invalidateNextInQueue = function() {
	if(com_genome2d_textures_GTextureManager.g2d_asyncTextureQueue.length > 0) {
		com_genome2d_textures_GTextureManager.g2d_asyncTextureQueue.shift().invalidateNativeTexture(com_genome2d_textures_GTextureManager.g2d_asyncForce);
		com_genome2d_textures_GTextureManager.g2d_context.callNextFrame(com_genome2d_textures_GTextureManager.invalidateNextInQueue);
	} else {
		com_genome2d_textures_GTextureManager.g2d_asyncCallback();
	}
};
com_genome2d_textures_GTextureManager.createTexture = function(p_id,p_source,p_scaleFactor,p_repeatable,p_format) {
	if(p_format == null) {
		p_format = "bgra";
	}
	if(p_repeatable == null) {
		p_repeatable = false;
	}
	if(p_scaleFactor == null) {
		p_scaleFactor = 1;
	}
	var texture = null;
	if(((p_source) instanceof com_genome2d_assets_GImageAsset)) {
		var imageAsset = p_source;
		if(imageAsset.g2d_type._hx_index == 2) {
			texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_id,imageAsset.g2d_imageElement,p_format);
		}
	} else if(((p_source) instanceof HTMLImageElement)) {
		texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_id,p_source,p_format);
	} else if(((p_source) instanceof ImageData)) {
		texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_id,p_source,p_format);
	} else if(((p_source) instanceof com_genome2d_geom_GRectangle)) {
		texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_id,p_source,p_format);
	}
	if(texture != null) {
		texture.g2d_repeatable = p_repeatable;
		texture.g2d_dirty = true;
		texture.g2d_scaleFactor = p_scaleFactor;
		texture.invalidateNativeTexture(false);
	} else {
		var p_arg1 = "Invalid texture source.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/textures/GTextureManager.hx", lineNumber : 195, className : "com.genome2d.textures.GTextureManager", methodName : "createTexture"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	return texture;
};
com_genome2d_textures_GTextureManager.createSubTexture = function(p_id,p_texture,p_region,p_frame,p_prefixParentId) {
	if(p_prefixParentId == null) {
		p_prefixParentId = true;
	}
	var texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_prefixParentId ? p_texture.g2d_id + "_" + p_id : p_id,p_texture,p_texture.g2d_format);
	texture.g2d_region = p_texture.g2d_inverted ? new com_genome2d_geom_GRectangle(p_region.get_left(),p_texture.g2d_nativeHeight - p_region.get_top() - p_region.height,p_region.width,p_region.height) : p_region;
	texture.invalidateRegion();
	texture.g2d_dirty = false;
	if(p_frame != null) {
		texture.g2d_frame = p_frame;
		texture.g2d_pivotX = ((p_frame.width - p_region.width) * .5 + p_frame.x) / texture.g2d_scaleFactor;
		texture.g2d_pivotY = ((p_frame.height - p_region.height) * .5 + p_frame.y) / texture.g2d_scaleFactor;
	}
	return texture;
};
com_genome2d_textures_GTextureManager.createRenderTexture = function(p_id,p_width,p_height,p_scaleFactor) {
	if(p_scaleFactor == null) {
		p_scaleFactor = 1;
	}
	var texture = new com_genome2d_textures_GTexture(com_genome2d_textures_GTextureManager.g2d_context,p_id,new com_genome2d_geom_GRectangle(0,0,p_width,p_height),"bgra");
	texture.invalidateNativeTexture(false);
	return texture;
};
com_genome2d_textures_GTextureManager.createSubTextures = function(p_texture,p_xml,p_prefixParentId) {
	if(p_prefixParentId == null) {
		p_prefixParentId = true;
	}
	var textures = [];
	var root = p_xml.firstElement();
	var it = root.elements();
	while(it.hasNext()) {
		var node = it.next();
		var region = new com_genome2d_geom_GRectangle(Std.parseInt(node.get("x")),Std.parseInt(node.get("y")),Std.parseInt(node.get("width")),Std.parseInt(node.get("height")));
		var frame = null;
		if(node.get("frameX") != null && node.get("frameWidth") != null && node.get("frameY") != null && node.get("frameHeight") != null) {
			frame = new com_genome2d_geom_GRectangle(Std.parseInt(node.get("frameX")),Std.parseInt(node.get("frameY")),Std.parseInt(node.get("frameWidth")),Std.parseInt(node.get("frameHeight")));
		}
		textures.push(com_genome2d_textures_GTextureManager.createSubTexture(node.get("name"),p_texture,region,frame,p_prefixParentId));
	}
	return textures;
};
com_genome2d_textures_GTextureManager.createTextureAtlas = function(p_texture,p_xml,p_prefixParentId) {
	if(p_prefixParentId == null) {
		p_prefixParentId = true;
	}
	var textureAtlas = new com_genome2d_textures_GTextureAtlas();
	var p_value = p_texture.g2d_id;
	if(textureAtlas.g2d_id != p_value) {
		com_genome2d_textures_GTextureManager.removeTextureAtlas(textureAtlas);
		textureAtlas.g2d_id = p_value;
		if(textureAtlas.g2d_texture == null) {
			textureAtlas.g2d_texture = com_genome2d_textures_GTextureManager.getTexture(textureAtlas.g2d_id);
		}
		com_genome2d_textures_GTextureManager.addTextureAtlas(textureAtlas);
	}
	textureAtlas.addSubTexturesFromXml(p_xml,p_prefixParentId);
	return textureAtlas;
};
var com_genome2d_textures_GTextureSettings = function(p_texture) {
	this.g2d_currentState = "default";
	this.g2d_texture = p_texture;
};
$hxClasses["com.genome2d.textures.GTextureSettings"] = com_genome2d_textures_GTextureSettings;
com_genome2d_textures_GTextureSettings.__name__ = "com.genome2d.textures.GTextureSettings";
com_genome2d_textures_GTextureSettings.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_textures_GTextureSettings.prototype = {
	g2d_texture: null
	,getTexture: function() {
		return this.g2d_texture;
	}
	,get_repeatable: function() {
		return this.g2d_texture.g2d_repeatable;
	}
	,set_repeatable: function(p_value) {
		var _this = this.g2d_texture;
		_this.g2d_repeatable = p_value;
		_this.g2d_dirty = true;
		this.g2d_texture.invalidateNativeTexture(true);
		return p_value;
	}
	,get_u: function() {
		return this.g2d_texture.g2d_u;
	}
	,set_u: function(p_value) {
		return this.g2d_texture.g2d_u = p_value;
	}
	,get_v: function() {
		return this.g2d_texture.g2d_v;
	}
	,set_v: function(p_value) {
		return this.g2d_texture.g2d_v = p_value;
	}
	,get_uScale: function() {
		return this.g2d_texture.g2d_uScale;
	}
	,set_uScale: function(p_value) {
		return this.g2d_texture.g2d_uScale = p_value;
	}
	,get_vScale: function() {
		return this.g2d_texture.g2d_vScale;
	}
	,set_vScale: function(p_value) {
		return this.g2d_texture.g2d_vScale = p_value;
	}
	,get_filteringType: function() {
		return this.g2d_texture.g2d_filteringType;
	}
	,set_filteringType: function(p_value) {
		return this.g2d_texture.g2d_filteringType = p_value;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		p_prototype.createPrototypeProperty("texture","String",4,null,this.g2d_texture == null ? "" : this.g2d_texture.toReference());
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.g2d_texture = com_genome2d_textures_GTexture.fromReference(p_prototype.getProperty("texture").value);
		this.bindPrototypeDefault(p_prototype);
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GTextureSettings");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GTextureSettings");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_textures_GTextureSettings
	,__properties__: {set_filteringType:"set_filteringType",get_filteringType:"get_filteringType",set_vScale:"set_vScale",get_vScale:"get_vScale",set_uScale:"set_uScale",get_uScale:"get_uScale",set_v:"set_v",get_v:"get_v",set_u:"set_u",get_u:"get_u",set_repeatable:"set_repeatable",get_repeatable:"get_repeatable"}
};
var com_genome2d_textures_GTextureSourceType = $hxEnums["com.genome2d.textures.GTextureSourceType"] = { __ename__ : "com.genome2d.textures.GTextureSourceType", __constructs__ : ["BITMAPDATA","BYTEARRAY","RENDER_TARGET","ATF_BGRA","ATF_COMPRESSED","ATF_COMPRESSEDALPHA","TEXTURE","IMAGE","IMAGEDATA"]
	,BITMAPDATA: {_hx_index:0,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,BYTEARRAY: {_hx_index:1,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,RENDER_TARGET: {_hx_index:2,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,ATF_BGRA: {_hx_index:3,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,ATF_COMPRESSED: {_hx_index:4,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,ATF_COMPRESSEDALPHA: {_hx_index:5,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,TEXTURE: {_hx_index:6,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,IMAGE: {_hx_index:7,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
	,IMAGEDATA: {_hx_index:8,__enum__:"com.genome2d.textures.GTextureSourceType",toString:$estr}
};
com_genome2d_textures_GTextureSourceType.__empty_constructs__ = [com_genome2d_textures_GTextureSourceType.BITMAPDATA,com_genome2d_textures_GTextureSourceType.BYTEARRAY,com_genome2d_textures_GTextureSourceType.RENDER_TARGET,com_genome2d_textures_GTextureSourceType.ATF_BGRA,com_genome2d_textures_GTextureSourceType.ATF_COMPRESSED,com_genome2d_textures_GTextureSourceType.ATF_COMPRESSEDALPHA,com_genome2d_textures_GTextureSourceType.TEXTURE,com_genome2d_textures_GTextureSourceType.IMAGE,com_genome2d_textures_GTextureSourceType.IMAGEDATA];
var com_genome2d_textures_GTextureUtils = function() { };
$hxClasses["com.genome2d.textures.GTextureUtils"] = com_genome2d_textures_GTextureUtils;
com_genome2d_textures_GTextureUtils.__name__ = "com.genome2d.textures.GTextureUtils";
com_genome2d_textures_GTextureUtils.isValidTextureSize = function(p_size) {
	return com_genome2d_textures_GTextureUtils.getNextValidTextureSize(p_size) == p_size;
};
com_genome2d_textures_GTextureUtils.getNextValidTextureSize = function(p_size) {
	var size = 1;
	while(p_size > size) size *= 2;
	return size;
};
com_genome2d_textures_GTextureUtils.getPreviousValidTextureSize = function(p_size) {
	return com_genome2d_textures_GTextureUtils.getNextValidTextureSize(p_size) >> 1;
};
com_genome2d_textures_GTextureUtils.getNearestValidTextureSize = function(p_size) {
	var previous = com_genome2d_textures_GTextureUtils.getPreviousValidTextureSize(p_size);
	var next = com_genome2d_textures_GTextureUtils.getNextValidTextureSize(p_size);
	if(p_size - previous < next - p_size) {
		return previous;
	} else {
		return next;
	}
};
var com_genome2d_tilemap_GTile = function(p_sizeX,p_sizeY,p_mapX,p_mapY) {
	if(p_mapY == null) {
		p_mapY = -1;
	}
	if(p_mapX == null) {
		p_mapX = -1;
	}
	if(p_sizeY == null) {
		p_sizeY = 1;
	}
	if(p_sizeX == null) {
		p_sizeX = 1;
	}
	this.g2d_frameTexturesCount = 0;
	this.g2d_currentFrame = 0;
	this.g2d_accumulatedTime = 0;
	this.g2d_speed = 200.;
	this.g2d_playing = false;
	this.g2d_lastTimeRendered = 0;
	this.g2d_lastFrameRendered = 0;
	this.sizeY = 1;
	this.sizeX = 1;
	this.mapY = 0;
	this.mapX = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.reversed = false;
	this.yoyo = false;
	this.repeatable = true;
	this.visible = true;
	this.alpha = 1;
	this.rotation = 0;
	this.value = 0;
	if((p_sizeX != 1 || p_sizeY != 1) && (p_mapX == -1 || p_mapY == -1)) {
		var p_arg1 = "Invalid tile definition.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/tilemap/GTile.hx", lineNumber : 123, className : "com.genome2d.tilemap.GTile", methodName : "new"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	this.sizeX = p_sizeX;
	this.sizeY = p_sizeY;
	this.mapX = p_mapX;
	this.mapY = p_mapY;
};
$hxClasses["com.genome2d.tilemap.GTile"] = com_genome2d_tilemap_GTile;
com_genome2d_tilemap_GTile.__name__ = "com.genome2d.tilemap.GTile";
com_genome2d_tilemap_GTile.prototype = {
	texture: null
	,value: null
	,rotation: null
	,alpha: null
	,visible: null
	,repeatable: null
	,yoyo: null
	,reversed: null
	,red: null
	,green: null
	,blue: null
	,scaleX: null
	,scaleY: null
	,get_color: function() {
		var color = 0;
		color += (this.red * 255 | 0) << 16;
		color += (this.green * 255 | 0) << 8;
		color += this.blue * 255 | 0;
		return color;
	}
	,set_color: function(p_value) {
		this.red = (p_value >> 16 & 255 | 0) / 255;
		this.green = (p_value >> 8 & 255 | 0) / 255;
		this.blue = (p_value & 255 | 0) / 255;
		return p_value;
	}
	,g2d_userData: null
	,get_userData: function() {
		if(this.g2d_userData == null) {
			this.g2d_userData = new haxe_ds_StringMap();
		}
		return this.g2d_userData;
	}
	,mapX: null
	,mapY: null
	,sizeX: null
	,sizeY: null
	,g2d_lastFrameRendered: null
	,get_lastFrameRendered: function() {
		return this.g2d_lastFrameRendered;
	}
	,g2d_lastTimeRendered: null
	,g2d_playing: null
	,g2d_speed: null
	,g2d_accumulatedTime: null
	,g2d_currentFrame: null
	,get_currentFrame: function() {
		return this.g2d_currentFrame;
	}
	,g2d_frameTexturesCount: null
	,get_frameCount: function() {
		return this.g2d_frameTexturesCount;
	}
	,g2d_frameTextures: null
	,set_frameTextures: function(p_value) {
		this.g2d_frameTextures = p_value;
		this.g2d_frameTexturesCount = p_value.length;
		this.g2d_currentFrame = 0;
		if(this.g2d_frameTextures.length > 0) {
			this.texture = this.g2d_frameTextures[0];
		} else {
			this.texture = null;
		}
		if(this.g2d_frameTextures.length > 1) {
			this.g2d_playing = true;
		}
		return this.g2d_frameTextures;
	}
	,get_frameRate: function() {
		return 1000 / this.g2d_speed | 0;
	}
	,set_frameRate: function(p_value) {
		this.g2d_speed = 1000 / p_value;
		return p_value;
	}
	,stop: function() {
		this.g2d_playing = false;
	}
	,play: function() {
		this.g2d_playing = true;
	}
	,gotoFrame: function(p_frame) {
		if(this.g2d_frameTextures == null) {
			return;
		}
		this.g2d_currentFrame = p_frame;
		this.g2d_currentFrame %= this.g2d_frameTexturesCount;
		this.texture = this.g2d_frameTextures[this.g2d_currentFrame];
	}
	,gotoAndPlayFrame: function(p_frame) {
		this.gotoFrame(p_frame);
		this.g2d_playing = true;
	}
	,gotoAndStopFrame: function(p_frame) {
		this.gotoFrame(p_frame);
		this.g2d_playing = false;
	}
	,render: function(p_context,p_x,p_y,p_frameId,p_time,p_blendMode) {
		if(this.texture != null && this.visible) {
			if(this.g2d_playing && this.g2d_frameTextures != null && p_frameId != this.g2d_lastFrameRendered) {
				this.g2d_accumulatedTime += p_time - this.g2d_lastTimeRendered;
				if(this.g2d_accumulatedTime >= this.g2d_speed) {
					this.g2d_currentFrame += this.reversed ? -(this.g2d_accumulatedTime / this.g2d_speed | 0) : this.g2d_accumulatedTime / this.g2d_speed | 0;
					if(this.reversed && this.g2d_currentFrame < 0) {
						this.g2d_currentFrame = this.repeatable && !this.yoyo ? (this.g2d_frameTexturesCount + this.g2d_currentFrame % this.g2d_frameTexturesCount) % this.g2d_frameTexturesCount : 0;
						if(this.yoyo) {
							this.reversed = !this.reversed;
						}
					} else if(!this.reversed && this.g2d_currentFrame >= this.g2d_frameTexturesCount) {
						this.g2d_currentFrame = this.repeatable && !this.yoyo ? this.g2d_currentFrame % this.g2d_frameTexturesCount : this.g2d_frameTexturesCount - 1;
						if(this.yoyo) {
							this.reversed = !this.reversed;
						}
					}
					this.texture = this.g2d_frameTextures[this.g2d_currentFrame];
				}
				this.g2d_accumulatedTime %= this.g2d_speed;
			}
			p_context.draw(this.texture,p_blendMode,p_x,p_y,this.scaleX,this.scaleY,this.rotation,this.red,this.green,this.blue,this.alpha,null);
			this.g2d_lastTimeRendered = p_time;
			this.g2d_lastFrameRendered = p_frameId;
		}
	}
	,__class__: com_genome2d_tilemap_GTile
	,__properties__: {set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_frameTextures:"set_frameTextures",get_frameCount:"get_frameCount",get_currentFrame:"get_currentFrame",get_lastFrameRendered:"get_lastFrameRendered",get_userData:"get_userData",set_color:"set_color",get_color:"get_color"}
};
var com_genome2d_transitions_GTransition = function() {
	this.g2d_currentState = "default";
	this.delay = 0;
	this.time = 0;
};
$hxClasses["com.genome2d.transitions.GTransition"] = com_genome2d_transitions_GTransition;
com_genome2d_transitions_GTransition.__name__ = "com.genome2d.transitions.GTransition";
com_genome2d_transitions_GTransition.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_transitions_GTransition.prototype = {
	g2d_id: null
	,get_id: function() {
		return this.g2d_id;
	}
	,set_id: function(p_value) {
		if(p_value != this.g2d_id && p_value.length > 0) {
			if(com_genome2d_transitions_GTransitionManager.getTransition(p_value) != null) {
				var p_arg1 = "Duplicate transition id: " + p_value;
				var p_arg2 = null;
				var p_arg3 = null;
				var p_arg4 = null;
				var p_arg5 = null;
				var p_arg6 = null;
				var p_arg7 = null;
				var p_arg8 = null;
				var p_arg9 = null;
				var p_arg10 = null;
				var p_arg11 = null;
				var p_arg12 = null;
				var p_arg13 = null;
				var p_arg14 = null;
				var p_arg15 = null;
				var p_arg16 = null;
				var p_arg17 = null;
				var p_arg18 = null;
				var p_arg19 = null;
				var p_arg20 = null;
				var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/transitions/GTransition.hx", lineNumber : 20, className : "com.genome2d.transitions.GTransition", methodName : "set_id"};
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
				}
				var msg = "ERROR: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
				throw new js__$Boot_HaxeError(msg);
			}
			if(com_genome2d_transitions_GTransitionManager.getTransition(this.g2d_id) != null) {
				com_genome2d_transitions_GTransitionManager.g2d_references.remove(this.g2d_id);
			}
			this.g2d_id = p_value;
		}
		return this.g2d_id;
	}
	,time: null
	,delay: null
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"transition");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"transition");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_transitions_GTransition
	,__properties__: {set_id:"set_id",get_id:"get_id"}
};
var com_genome2d_transitions_GTransitionManager = function() { };
$hxClasses["com.genome2d.transitions.GTransitionManager"] = com_genome2d_transitions_GTransitionManager;
com_genome2d_transitions_GTransitionManager.__name__ = "com.genome2d.transitions.GTransitionManager";
com_genome2d_transitions_GTransitionManager.init = function() {
	com_genome2d_transitions_GTransitionManager.g2d_references = new haxe_ds_StringMap();
};
com_genome2d_transitions_GTransitionManager.g2d_references = null;
com_genome2d_transitions_GTransitionManager.getTransition = function(p_id) {
	var _this = com_genome2d_transitions_GTransitionManager.g2d_references;
	if(__map_reserved[p_id] != null) {
		return _this.getReserved(p_id);
	} else {
		return _this.h[p_id];
	}
};
com_genome2d_transitions_GTransitionManager.g2d_addTransition = function(p_id,p_value) {
	var _this = com_genome2d_transitions_GTransitionManager.g2d_references;
	if(__map_reserved[p_id] != null) {
		_this.setReserved(p_id,p_value);
	} else {
		_this.h[p_id] = p_value;
	}
};
com_genome2d_transitions_GTransitionManager.g2d_removeTransition = function(p_id) {
	com_genome2d_transitions_GTransitionManager.g2d_references.remove(p_id);
};
com_genome2d_transitions_GTransitionManager.getAllTransitions = function() {
	return com_genome2d_transitions_GTransitionManager.g2d_references;
};
var com_genome2d_transitions_IGTransition = function() { };
$hxClasses["com.genome2d.transitions.IGTransition"] = com_genome2d_transitions_IGTransition;
com_genome2d_transitions_IGTransition.__name__ = "com.genome2d.transitions.IGTransition";
com_genome2d_transitions_IGTransition.__isInterface__ = true;
com_genome2d_transitions_IGTransition.prototype = {
	apply: null
	,__class__: com_genome2d_transitions_IGTransition
};
var com_genome2d_tween_easing_GLinear = function() { };
$hxClasses["com.genome2d.tween.easing.GLinear"] = com_genome2d_tween_easing_GLinear;
com_genome2d_tween_easing_GLinear.__name__ = "com.genome2d.tween.easing.GLinear";
com_genome2d_tween_easing_GLinear.none = function(p_t) {
	return p_t;
};
var com_genome2d_tween_GTween = function() { };
$hxClasses["com.genome2d.tween.GTween"] = com_genome2d_tween_GTween;
com_genome2d_tween_GTween.__name__ = "com.genome2d.tween.GTween";
com_genome2d_tween_GTween.g2d_currentTimeline = null;
com_genome2d_tween_GTween.g2d_timelines = null;
com_genome2d_tween_GTween.removeTimeline = function(p_timeline) {
};
com_genome2d_tween_GTween.addTimeline = function(p_timeline,p_setCurrent) {
	if(p_setCurrent == null) {
		p_setCurrent = false;
	}
	if(p_setCurrent) {
		com_genome2d_tween_GTween.g2d_currentTimeline = p_timeline;
	}
	if(com_genome2d_tween_GTween.g2d_timelines == null) {
		com_genome2d_tween_GTween.g2d_timelines = [];
	}
	com_genome2d_tween_GTween.g2d_timelines.push(p_timeline);
};
com_genome2d_tween_GTween.createFromSequencePrototype = function(p_prototype) {
	var sequence = com_genome2d_proto_GPrototypeFactory.createInstance(p_prototype);
	if(com_genome2d_tween_GTween.g2d_currentTimeline == null) {
		var p_timeline = new com_genome2d_tween_GTweenTimeline();
		var p_setCurrent = true;
		if(p_setCurrent == null) {
			p_setCurrent = false;
		}
		if(p_setCurrent) {
			com_genome2d_tween_GTween.g2d_currentTimeline = p_timeline;
		}
		if(com_genome2d_tween_GTween.g2d_timelines == null) {
			com_genome2d_tween_GTween.g2d_timelines = [];
		}
		com_genome2d_tween_GTween.g2d_timelines.push(p_timeline);
	}
	var _this = com_genome2d_tween_GTween.g2d_currentTimeline;
	sequence.g2d_timeline = _this;
	_this.g2d_sequences.push(sequence);
	return sequence.getLastStep();
};
com_genome2d_tween_GTween.create = function(p_target,p_autoRun) {
	if(p_autoRun == null) {
		p_autoRun = true;
	}
	var sequence = com_genome2d_tween_GTweenSequence.getPoolInstance();
	if(com_genome2d_tween_GTween.g2d_currentTimeline == null) {
		var p_timeline = new com_genome2d_tween_GTweenTimeline();
		var p_setCurrent = true;
		if(p_setCurrent == null) {
			p_setCurrent = false;
		}
		if(p_setCurrent) {
			com_genome2d_tween_GTween.g2d_currentTimeline = p_timeline;
		}
		if(com_genome2d_tween_GTween.g2d_timelines == null) {
			com_genome2d_tween_GTween.g2d_timelines = [];
		}
		com_genome2d_tween_GTween.g2d_timelines.push(p_timeline);
	}
	var _this = com_genome2d_tween_GTween.g2d_currentTimeline;
	sequence.g2d_timeline = _this;
	_this.g2d_sequences.push(sequence);
	var p_tween = com_genome2d_tween_GTweenStep.getPoolInstance();
	p_tween.g2d_sequence = sequence;
	if(sequence.g2d_currentStep == null) {
		sequence.g2d_firstStep = sequence.g2d_lastStep = sequence.g2d_currentStep = p_tween;
	} else {
		sequence.g2d_lastStep.g2d_next = p_tween;
		p_tween.g2d_previous = sequence.g2d_lastStep;
		sequence.g2d_lastStep = p_tween;
	}
	sequence.g2d_stepCount++;
	var step = p_tween;
	if(typeof(p_target) == "string") {
		step.targetId = p_target;
	} else {
		step.g2d_target = p_target;
	}
	if(p_autoRun) {
		sequence.run();
	}
	return step;
};
com_genome2d_tween_GTween.delay = function(p_time,p_callback,p_args) {
	var _this = com_genome2d_tween_GTween.create(null).delay(p_time);
	_this.g2d_onCompleteArgs = p_args == null ? [] : p_args;
	_this.g2d_onComplete = p_callback;
	return _this;
};
com_genome2d_tween_GTween.update = function(p_delta) {
	p_delta *= com_genome2d_tween_GTween.timeScale / 1000;
	if(com_genome2d_tween_GTween.g2d_timelines != null) {
		var _g = 0;
		var _g1 = com_genome2d_tween_GTween.g2d_timelines;
		while(_g < _g1.length) {
			var timeline = _g1[_g];
			++_g;
			timeline.update(p_delta);
		}
	}
};
com_genome2d_tween_GTween.abortAllTimelines = function() {
	if(com_genome2d_tween_GTween.g2d_timelines != null) {
		while(com_genome2d_tween_GTween.g2d_timelines.length > 0) {
			var timeline = com_genome2d_tween_GTween.g2d_timelines.shift();
			timeline.abortAllSequences();
		}
	}
	com_genome2d_tween_GTween.g2d_currentTimeline = null;
};
var com_genome2d_tween_GTweenSequence = function() {
	this.g2d_currentState = "default";
	this.g2d_running = false;
	this.g2d_stepCount = 0;
};
$hxClasses["com.genome2d.tween.GTweenSequence"] = com_genome2d_tween_GTweenSequence;
com_genome2d_tween_GTweenSequence.__name__ = "com.genome2d.tween.GTweenSequence";
com_genome2d_tween_GTweenSequence.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_tween_GTweenSequence.g2d_poolFirst = null;
com_genome2d_tween_GTweenSequence.getPoolInstance = function() {
	var sequence = null;
	if(com_genome2d_tween_GTweenSequence.g2d_poolFirst == null) {
		sequence = new com_genome2d_tween_GTweenSequence();
	} else {
		sequence = com_genome2d_tween_GTweenSequence.g2d_poolFirst;
		com_genome2d_tween_GTweenSequence.g2d_poolFirst = com_genome2d_tween_GTweenSequence.g2d_poolFirst.g2d_poolNext;
		sequence.g2d_poolNext = null;
	}
	return sequence;
};
com_genome2d_tween_GTweenSequence.prototype = {
	g2d_poolNext: null
	,g2d_firstStep: null
	,g2d_currentStep: null
	,g2d_lastStep: null
	,getLastStep: function() {
		return this.g2d_lastStep;
	}
	,g2d_stepCount: null
	,g2d_running: null
	,g2d_timeline: null
	,g2d_complete: null
	,isComplete: function() {
		return this.g2d_complete;
	}
	,dispose: function() {
		while(this.g2d_currentStep != null) {
			var step = this.g2d_currentStep;
			this.g2d_stepCount--;
			if(this.g2d_firstStep == step) {
				this.g2d_firstStep = this.g2d_firstStep.g2d_next;
			}
			if(this.g2d_currentStep == step) {
				this.g2d_currentStep = step.g2d_next;
			}
			if(this.g2d_lastStep == step) {
				this.g2d_lastStep = step.g2d_previous;
			}
			if(step.g2d_previous != null) {
				step.g2d_previous.g2d_next = step.g2d_next;
			}
			if(step.g2d_next != null) {
				step.g2d_next.g2d_previous = step.g2d_previous;
			}
			step.dispose();
		}
		this.g2d_currentStep = null;
		this.g2d_lastStep = null;
		this.g2d_stepCount = 0;
		this.g2d_complete = false;
		this.g2d_running = false;
		this.g2d_timeline = null;
		if(com_genome2d_tween_GTween.enablePooling) {
			this.g2d_poolNext = com_genome2d_tween_GTweenSequence.g2d_poolFirst;
			com_genome2d_tween_GTweenSequence.g2d_poolFirst = this;
		}
	}
	,update: function(p_delta) {
		if(!this.g2d_running) {
			return p_delta;
		}
		var rest = p_delta;
		while(rest > 0 && this.g2d_currentStep != null) rest = this.g2d_currentStep.update(rest);
		if(this.g2d_currentStep == null) {
			this.g2d_timeline.g2d_dirty = true;
			this.g2d_complete = true;
		}
		return rest;
	}
	,finish: function() {
		this.g2d_timeline.g2d_dirty = true;
		this.g2d_complete = true;
	}
	,addStep: function(p_tween) {
		p_tween.g2d_sequence = this;
		if(this.g2d_currentStep == null) {
			this.g2d_firstStep = this.g2d_lastStep = this.g2d_currentStep = p_tween;
		} else {
			this.g2d_lastStep.g2d_next = p_tween;
			p_tween.g2d_previous = this.g2d_lastStep;
			this.g2d_lastStep = p_tween;
		}
		this.g2d_stepCount++;
		return p_tween;
	}
	,nextStep: function() {
		this.g2d_currentStep = this.g2d_currentStep.g2d_next;
	}
	,removeStep: function(p_tween) {
		this.g2d_stepCount--;
		if(this.g2d_firstStep == p_tween) {
			this.g2d_firstStep = this.g2d_firstStep.g2d_next;
		}
		if(this.g2d_currentStep == p_tween) {
			this.g2d_currentStep = p_tween.g2d_next;
		}
		if(this.g2d_lastStep == p_tween) {
			this.g2d_lastStep = p_tween.g2d_previous;
		}
		if(p_tween.g2d_previous != null) {
			p_tween.g2d_previous.g2d_next = p_tween.g2d_next;
		}
		if(p_tween.g2d_next != null) {
			p_tween.g2d_next.g2d_previous = p_tween.g2d_previous;
		}
	}
	,skipCurrent: function() {
		if(this.g2d_currentStep != null) {
			this.g2d_currentStep.skip();
		}
	}
	,abort: function() {
		if(this.g2d_timeline != null) {
			this.g2d_timeline.removeSequence(this);
		}
	}
	,bind: function(p_target,p_autoRun) {
		if(p_autoRun == null) {
			p_autoRun = false;
		}
		var step = this.g2d_firstStep;
		while(step != null) {
			if(step.targetId != null) {
				step.g2d_target = p_target.getChildByName(step.targetId,true);
			}
			step = step.g2d_next;
		}
		if(p_autoRun) {
			this.run();
		}
	}
	,run: function() {
		this.g2d_running = true;
	}
	,repeat: function() {
		this.g2d_currentStep = this.g2d_firstStep;
	}
	,getStepById: function(p_stepId) {
		var step = this.g2d_firstStep;
		if(p_stepId != "") {
			while(step != null) if(step.g2d_stepId == p_stepId) {
				break;
			} else {
				step = step.g2d_next;
			}
		}
		return step;
	}
	,goto: function(p_step) {
		if(p_step == null) {
			var p_arg1 = "Cannot go to null step.";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/tween/GTweenSequence.hx", lineNumber : 166, className : "com.genome2d.tween.GTweenSequence", methodName : "goto"};
			if(com_genome2d_debug_GDebug.showPriority <= 4) {
				var args = [];
				if(p_arg1 != null) {
					args.push(p_arg1);
				}
				if(p_arg2 != null) {
					args.push(p_arg2);
				}
				if(p_arg3 != null) {
					args.push(p_arg3);
				}
				if(p_arg4 != null) {
					args.push(p_arg4);
				}
				if(p_arg5 != null) {
					args.push(p_arg5);
				}
				if(p_arg6 != null) {
					args.push(p_arg6);
				}
				if(p_arg7 != null) {
					args.push(p_arg7);
				}
				if(p_arg8 != null) {
					args.push(p_arg8);
				}
				if(p_arg9 != null) {
					args.push(p_arg9);
				}
				if(p_arg10 != null) {
					args.push(p_arg10);
				}
				if(p_arg11 != null) {
					args.push(p_arg11);
				}
				if(p_arg12 != null) {
					args.push(p_arg12);
				}
				if(p_arg13 != null) {
					args.push(p_arg13);
				}
				if(p_arg14 != null) {
					args.push(p_arg14);
				}
				if(p_arg15 != null) {
					args.push(p_arg15);
				}
				if(p_arg16 != null) {
					args.push(p_arg16);
				}
				if(p_arg17 != null) {
					args.push(p_arg17);
				}
				if(p_arg18 != null) {
					args.push(p_arg18);
				}
				if(p_arg19 != null) {
					args.push(p_arg19);
				}
				if(p_arg20 != null) {
					args.push(p_arg20);
				}
				if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
					com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
				}
				var msg = "WARNING: ";
				if(pos != null) {
					msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
				}
				if(args.length > 0) {
					msg += args.toString();
				}
				com_genome2d_debug_GDebug.g2d_log += msg;
				if(com_genome2d_debug_GDebug.useNativeTrace) {
					window.console.log(msg);
				}
			}
		}
		this.g2d_currentStep = p_step;
	}
	,reset: function() {
		var step = this.g2d_firstStep;
		while(step != null) {
			step.reset();
			step.g2d_currentGotoRepeatCount = 0;
			step = step.g2d_next;
		}
		this.g2d_currentStep = this.g2d_firstStep;
	}
	,retarget: function(p_target) {
		var step = this.g2d_firstStep;
		while(step != null) {
			step.g2d_target = p_target;
			step = step.g2d_next;
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		var step = this.g2d_firstStep;
		while(step != null) {
			p_prototype.addChild(step.getPrototype(),"tweenSteps");
			step = step.g2d_next;
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		var stepPrototypes = p_prototype.getGroup("tweenSteps");
		if(stepPrototypes != null) {
			var _g = 0;
			while(_g < stepPrototypes.length) {
				var stepPrototype = stepPrototypes[_g];
				++_g;
				var step = com_genome2d_proto_GPrototypeFactory.createInstance(stepPrototype);
				step.g2d_sequence = this;
				if(this.g2d_currentStep == null) {
					this.g2d_firstStep = this.g2d_lastStep = this.g2d_currentStep = step;
				} else {
					this.g2d_lastStep.g2d_next = step;
					step.g2d_previous = this.g2d_lastStep;
					this.g2d_lastStep = step;
				}
				this.g2d_stepCount++;
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"tweenSequence");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"tweenSequence");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_tween_GTweenSequence
};
var com_genome2d_tween_GTweenStep = function() {
	this.g2d_currentState = "default";
	this.g2d_currentGotoRepeatCount = 0;
	this.g2d_gotoRepeatCount = 0;
	this.g2d_gotoStepId = "";
	this.g2d_stepId = "";
	this.g2d_time = this.g2d_duration = 0.0;
	this.g2d_empty = true;
};
$hxClasses["com.genome2d.tween.GTweenStep"] = com_genome2d_tween_GTweenStep;
com_genome2d_tween_GTweenStep.__name__ = "com.genome2d.tween.GTweenStep";
com_genome2d_tween_GTweenStep.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_tween_GTweenStep.g2d_poolFirst = null;
com_genome2d_tween_GTweenStep.getPoolInstance = function() {
	var tween = null;
	if(com_genome2d_tween_GTweenStep.g2d_poolFirst == null) {
		tween = new com_genome2d_tween_GTweenStep();
	} else {
		tween = com_genome2d_tween_GTweenStep.g2d_poolFirst;
		com_genome2d_tween_GTweenStep.g2d_poolFirst = com_genome2d_tween_GTweenStep.g2d_poolFirst.g2d_poolNext;
		tween.g2d_poolNext = null;
	}
	return tween;
};
com_genome2d_tween_GTweenStep.prototype = {
	g2d_poolNext: null
	,g2d_sequence: null
	,g2d_previous: null
	,g2d_next: null
	,g2d_interps: null
	,g2d_time: null
	,g2d_stepId: null
	,get_stepId: function() {
		return this.g2d_stepId;
	}
	,set_stepId: function(p_value) {
		return this.g2d_stepId = p_value;
	}
	,g2d_duration: null
	,get_duration: function() {
		return this.g2d_duration;
	}
	,set_duration: function(p_value) {
		return this.g2d_duration = p_value;
	}
	,g2d_gotoStepId: null
	,get_gotoStepId: function() {
		return this.g2d_gotoStepId;
	}
	,set_gotoStepId: function(p_value) {
		return this.g2d_gotoStepId = p_value;
	}
	,g2d_gotoRepeatCount: null
	,get_gotoRepeatCount: function() {
		return this.g2d_gotoRepeatCount;
	}
	,set_gotoRepeatCount: function(p_value) {
		return this.g2d_gotoRepeatCount = p_value;
	}
	,g2d_currentGotoRepeatCount: null
	,g2d_lastInterp: null
	,g2d_target: null
	,targetId: null
	,g2d_onComplete: null
	,g2d_onCompleteArgs: null
	,g2d_onUpdate: null
	,g2d_onUpdateArgs: null
	,g2d_empty: null
	,getTarget: function() {
		return this.g2d_target;
	}
	,getSequence: function() {
		return this.g2d_sequence;
	}
	,addInterp: function(p_interp) {
		if(this.g2d_interps == null) {
			this.g2d_interps = [];
		}
		this.g2d_duration = Math.max(this.g2d_duration,p_interp.duration);
		this.g2d_lastInterp = p_interp;
		this.g2d_interps.push(p_interp);
		this.g2d_empty = false;
		return this;
	}
	,onUpdate: function(p_callback,p_args) {
		this.g2d_onUpdateArgs = p_args == null ? [] : p_args;
		this.g2d_onUpdate = p_callback;
		return this;
	}
	,onComplete: function(p_callback,p_args) {
		this.g2d_onCompleteArgs = p_args == null ? [] : p_args;
		this.g2d_onComplete = p_callback;
		return this;
	}
	,ease: function(p_ease,p_all) {
		if(p_all == null) {
			p_all = true;
		}
		if(p_all) {
			if(this.g2d_interps != null) {
				var _g = 0;
				var _g1 = this.g2d_interps;
				while(_g < _g1.length) {
					var interp = _g1[_g];
					++_g;
					interp.ease = p_ease;
				}
			}
		} else if(this.g2d_lastInterp != null) {
			this.g2d_lastInterp.ease = p_ease;
		}
		return this;
	}
	,skip: function() {
		if(this.g2d_interps != null) {
			var _g = 0;
			var _g1 = this.g2d_interps;
			while(_g < _g1.length) {
				var interp = _g1[_g];
				++_g;
				interp.setValue(interp.getFinalValue());
			}
		}
		this.reset();
		if(this.g2d_sequence != null) {
			if(this.g2d_currentGotoRepeatCount < this.g2d_gotoRepeatCount) {
				this.g2d_currentGotoRepeatCount++;
				this.g2d_sequence.goto(this.g2d_sequence.getStepById(this.g2d_gotoStepId));
			} else {
				if(this.g2d_onComplete != null) {
					this.g2d_onComplete.apply(this.g2d_onComplete,this.g2d_onCompleteArgs);
				}
				this.g2d_currentGotoRepeatCount = 0;
				if(this.g2d_sequence != null) {
					var _this = this.g2d_sequence;
					_this.g2d_currentStep = _this.g2d_currentStep.g2d_next;
				}
			}
		}
	}
	,finish: function() {
		this.reset();
		if(this.g2d_sequence != null) {
			if(this.g2d_currentGotoRepeatCount < this.g2d_gotoRepeatCount) {
				this.g2d_currentGotoRepeatCount++;
				this.g2d_sequence.goto(this.g2d_sequence.getStepById(this.g2d_gotoStepId));
			} else {
				if(this.g2d_onComplete != null) {
					this.g2d_onComplete.apply(this.g2d_onComplete,this.g2d_onCompleteArgs);
				}
				this.g2d_currentGotoRepeatCount = 0;
				if(this.g2d_sequence != null) {
					var _this = this.g2d_sequence;
					_this.g2d_currentStep = _this.g2d_currentStep.g2d_next;
				}
			}
		}
	}
	,dispose: function() {
		this.g2d_sequence = null;
		this.g2d_previous = null;
		this.g2d_next = null;
		this.g2d_interps = null;
		this.g2d_lastInterp = null;
		this.g2d_time = this.g2d_duration = 0;
		this.g2d_empty = true;
		this.g2d_time = this.g2d_duration = 0;
		this.g2d_onComplete = null;
		this.g2d_onCompleteArgs = null;
		this.g2d_onUpdate = null;
		this.g2d_onUpdateArgs = null;
		this.targetId = "";
		this.g2d_target = null;
		this.g2d_gotoStepId = "";
		this.g2d_gotoRepeatCount = 0;
		this.g2d_currentGotoRepeatCount = 0;
		if(com_genome2d_tween_GTween.enablePooling) {
			this.g2d_poolNext = com_genome2d_tween_GTweenStep.g2d_poolFirst;
			com_genome2d_tween_GTweenStep.g2d_poolFirst = this;
		}
	}
	,update: function(p_delta) {
		var rest = 0;
		if(this.g2d_interps != null) {
			var _g = 0;
			var _g1 = this.g2d_interps;
			while(_g < _g1.length) {
				var interp = _g1[_g];
				++_g;
				interp.update(p_delta);
			}
		}
		this.g2d_time += p_delta;
		if(this.g2d_time >= this.g2d_duration) {
			rest = this.g2d_time - this.g2d_duration;
			this.g2d_time = this.g2d_duration;
		}
		if(this.g2d_onUpdate != null) {
			this.g2d_onUpdate.apply(this.g2d_onUpdate,this.g2d_onUpdateArgs);
		}
		if(this.g2d_time >= this.g2d_duration) {
			this.reset();
			if(this.g2d_sequence != null) {
				if(this.g2d_currentGotoRepeatCount < this.g2d_gotoRepeatCount) {
					this.g2d_currentGotoRepeatCount++;
					this.g2d_sequence.goto(this.g2d_sequence.getStepById(this.g2d_gotoStepId));
				} else {
					if(this.g2d_onComplete != null) {
						this.g2d_onComplete.apply(this.g2d_onComplete,this.g2d_onCompleteArgs);
					}
					this.g2d_currentGotoRepeatCount = 0;
					if(this.g2d_sequence != null) {
						var _this = this.g2d_sequence;
						_this.g2d_currentStep = _this.g2d_currentStep.g2d_next;
					}
				}
			}
		}
		return rest;
	}
	,delay: function(p_duration) {
		var step;
		if(this.g2d_empty) {
			step = this;
		} else {
			var _this = this.g2d_sequence;
			var p_tween = com_genome2d_tween_GTweenStep.getPoolInstance();
			p_tween.g2d_sequence = _this;
			if(_this.g2d_currentStep == null) {
				_this.g2d_firstStep = _this.g2d_lastStep = _this.g2d_currentStep = p_tween;
			} else {
				_this.g2d_lastStep.g2d_next = p_tween;
				p_tween.g2d_previous = _this.g2d_lastStep;
				_this.g2d_lastStep = p_tween;
			}
			_this.g2d_stepCount++;
			step = p_tween;
		}
		step.g2d_duration = p_duration;
		this.g2d_empty = false;
		var _this1 = this.g2d_sequence;
		var p_tween1 = com_genome2d_tween_GTweenStep.getPoolInstance();
		p_tween1.g2d_sequence = _this1;
		if(_this1.g2d_currentStep == null) {
			_this1.g2d_firstStep = _this1.g2d_lastStep = _this1.g2d_currentStep = p_tween1;
		} else {
			_this1.g2d_lastStep.g2d_next = p_tween1;
			p_tween1.g2d_previous = _this1.g2d_lastStep;
			_this1.g2d_lastStep = p_tween1;
		}
		_this1.g2d_stepCount++;
		step = p_tween1;
		step.g2d_target = this.g2d_target;
		step.targetId = this.targetId;
		return step;
	}
	,id: function(p_id) {
		this.g2d_stepId = p_id;
		return this;
	}
	,propF: function(p_property,p_to,p_duration,p_relative) {
		var interp = new com_genome2d_tween_interp_GFloatInterp(this);
		interp.relative = p_relative;
		interp.property = p_property;
		interp.duration = p_duration;
		interp.to = p_to;
		return this.addInterp(interp);
	}
	,propC: function(p_property,p_to,p_duration,p_relative) {
		var interp = new com_genome2d_tween_interp_GCurveInterp(this);
		interp.relative = p_relative;
		interp.property = p_property;
		interp.duration = p_duration;
		interp.to = p_to;
		return this.addInterp(interp);
	}
	,create: function(p_target) {
		var _this = this.g2d_sequence;
		var p_tween = com_genome2d_tween_GTweenStep.getPoolInstance();
		p_tween.g2d_sequence = _this;
		if(_this.g2d_currentStep == null) {
			_this.g2d_firstStep = _this.g2d_lastStep = _this.g2d_currentStep = p_tween;
		} else {
			_this.g2d_lastStep.g2d_next = p_tween;
			p_tween.g2d_previous = _this.g2d_lastStep;
			_this.g2d_lastStep = p_tween;
		}
		_this.g2d_stepCount++;
		var step = p_tween;
		if(typeof(p_target) == "string") {
			step.targetId = p_target;
		} else {
			step.g2d_target = p_target;
		}
		return step;
	}
	,extend: function() {
		var _this = this.g2d_sequence;
		var p_tween = com_genome2d_tween_GTweenStep.getPoolInstance();
		p_tween.g2d_sequence = _this;
		if(_this.g2d_currentStep == null) {
			_this.g2d_firstStep = _this.g2d_lastStep = _this.g2d_currentStep = p_tween;
		} else {
			_this.g2d_lastStep.g2d_next = p_tween;
			p_tween.g2d_previous = _this.g2d_lastStep;
			_this.g2d_lastStep = p_tween;
		}
		_this.g2d_stepCount++;
		var step = p_tween;
		step.g2d_target = this.g2d_target;
		step.targetId = this.targetId;
		return step;
	}
	,goto: function(p_stepId,p_repeatCount) {
		this.g2d_gotoRepeatCount = p_repeatCount;
		this.g2d_gotoStepId = p_stepId;
		return this;
	}
	,reset: function() {
		this.g2d_time = 0;
		if(this.g2d_interps != null) {
			var _g = 0;
			var _g1 = this.g2d_interps;
			while(_g < _g1.length) {
				var interp = _g1[_g];
				++_g;
				interp.reset();
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		if(this.g2d_interps != null) {
			var _g = 0;
			var _g1 = this.g2d_interps;
			while(_g < _g1.length) {
				var interp = _g1[_g];
				++_g;
				if(js_Boot.__implements(interp,com_genome2d_proto_IGPrototypable)) {
					p_prototype.addChild((js_Boot.__cast(interp , com_genome2d_proto_IGPrototypable)).getPrototype(),"tweenProps");
				}
			}
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		var interpPrototypes = p_prototype.getGroup("tweenProps");
		if(interpPrototypes != null) {
			var _g = 0;
			while(_g < interpPrototypes.length) {
				var interpPrototype = interpPrototypes[_g];
				++_g;
				var interp = com_genome2d_proto_GPrototypeFactory.createInstance(interpPrototype,[this]);
				this.addInterp(interp);
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"tweenStep");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"tweenStep");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_tween_GTweenStep
	,__properties__: {set_gotoRepeatCount:"set_gotoRepeatCount",get_gotoRepeatCount:"get_gotoRepeatCount",set_gotoStepId:"set_gotoStepId",get_gotoStepId:"get_gotoStepId",set_duration:"set_duration",get_duration:"get_duration",set_stepId:"set_stepId",get_stepId:"get_stepId"}
};
var com_genome2d_tween_GTweenTimeline = function() {
	this.g2d_sequences = [];
	this.g2d_dirty = false;
	this.g2d_sequences = [];
};
$hxClasses["com.genome2d.tween.GTweenTimeline"] = com_genome2d_tween_GTweenTimeline;
com_genome2d_tween_GTweenTimeline.__name__ = "com.genome2d.tween.GTweenTimeline";
com_genome2d_tween_GTweenTimeline.prototype = {
	g2d_dirty: null
	,g2d_sequences: null
	,addSequence: function(p_sequence) {
		p_sequence.g2d_timeline = this;
		this.g2d_sequences.push(p_sequence);
	}
	,removeSequence: function(p_sequence) {
		HxOverrides.remove(this.g2d_sequences,p_sequence);
		p_sequence.dispose();
	}
	,abortAllSequences: function() {
		while(this.g2d_sequences.length > 0) {
			var sequence = this.g2d_sequences.shift();
			sequence.dispose();
		}
	}
	,update: function(p_delta) {
		var index = 0;
		var length = this.g2d_sequences.length;
		while(index < length) {
			if(this.g2d_sequences[index] != null) {
				this.g2d_sequences[index].update(p_delta);
			}
			++index;
		}
		if(this.g2d_dirty) {
			index = this.g2d_sequences.length;
			while(index-- > 0) {
				var sequence = this.g2d_sequences[index];
				if(sequence.g2d_complete) {
					this.removeSequence(sequence);
				}
			}
			this.g2d_dirty = false;
		}
	}
	,__class__: com_genome2d_tween_GTweenTimeline
};
var com_genome2d_tween_IGInterp = function() { };
$hxClasses["com.genome2d.tween.IGInterp"] = com_genome2d_tween_IGInterp;
com_genome2d_tween_IGInterp.__name__ = "com.genome2d.tween.IGInterp";
com_genome2d_tween_IGInterp.__isInterface__ = true;
com_genome2d_tween_IGInterp.prototype = {
	duration: null
	,complete: null
	,property: null
	,ease: null
	,from: null
	,update: null
	,setValue: null
	,getFinalValue: null
	,reset: null
	,__class__: com_genome2d_tween_IGInterp
};
var com_genome2d_tween_easing_GBack = function() { };
$hxClasses["com.genome2d.tween.easing.GBack"] = com_genome2d_tween_easing_GBack;
com_genome2d_tween_easing_GBack.__name__ = "com.genome2d.tween.easing.GBack";
com_genome2d_tween_easing_GBack.easeIn = function(p_t) {
	return p_t * p_t * ((com_genome2d_tween_easing_GBack.DRIVE + 1) * p_t - com_genome2d_tween_easing_GBack.DRIVE);
};
com_genome2d_tween_easing_GBack.easeOut = function(p_t) {
	return --p_t * p_t * ((com_genome2d_tween_easing_GBack.DRIVE + 1) * p_t + com_genome2d_tween_easing_GBack.DRIVE) + 1;
};
com_genome2d_tween_easing_GBack.easeInOut = function(p_t) {
	var s = com_genome2d_tween_easing_GBack.DRIVE * 1.525;
	if((p_t *= 2) < 1) {
		return 0.5 * (p_t * p_t * ((s + 1) * p_t - s));
	}
	return 0.5 * ((p_t -= 2) * p_t * ((s + 1) * p_t + s) + 2);
};
var com_genome2d_tween_easing_GBounce = function() { };
$hxClasses["com.genome2d.tween.easing.GBounce"] = com_genome2d_tween_easing_GBounce;
com_genome2d_tween_easing_GBounce.__name__ = "com.genome2d.tween.easing.GBounce";
com_genome2d_tween_easing_GBounce.easeIn = function(p_t) {
	var p_t1 = 1 - p_t;
	return -(p_t1 < 0.36363636363636365 ? 7.5625 * p_t1 * p_t1 : p_t1 < 0.72727272727272729 ? 7.5625 * (p_t1 -= 0.54545454545454541) * p_t1 + .75 : p_t1 < 0.90909090909090906 ? 7.5625 * (p_t1 -= 0.81818181818181823) * p_t1 + .9375 : 7.5625 * (p_t1 -= 0.95454545454545459) * p_t1 + .984375);
};
com_genome2d_tween_easing_GBounce.easeOut = function(p_t) {
	if(p_t < 0.36363636363636365) {
		return 7.5625 * p_t * p_t;
	} else if(p_t < 0.72727272727272729) {
		return 7.5625 * (p_t -= 0.54545454545454541) * p_t + .75;
	} else if(p_t < 0.90909090909090906) {
		return 7.5625 * (p_t -= 0.81818181818181823) * p_t + .9375;
	} else {
		return 7.5625 * (p_t -= 0.95454545454545459) * p_t + .984375;
	}
};
com_genome2d_tween_easing_GBounce.easeInOut = function(p_t) {
	if(p_t < 0.5) {
		var p_t1 = 1 - p_t * 2;
		return -(p_t1 < 0.36363636363636365 ? 7.5625 * p_t1 * p_t1 : p_t1 < 0.72727272727272729 ? 7.5625 * (p_t1 -= 0.54545454545454541) * p_t1 + .75 : p_t1 < 0.90909090909090906 ? 7.5625 * (p_t1 -= 0.81818181818181823) * p_t1 + .9375 : 7.5625 * (p_t1 -= 0.95454545454545459) * p_t1 + .984375) * .5;
	} else {
		var p_t2 = p_t * 2 - 1;
		return (p_t2 < 0.36363636363636365 ? 7.5625 * p_t2 * p_t2 : p_t2 < 0.72727272727272729 ? 7.5625 * (p_t2 -= 0.54545454545454541) * p_t2 + .75 : p_t2 < 0.90909090909090906 ? 7.5625 * (p_t2 -= 0.81818181818181823) * p_t2 + .9375 : 7.5625 * (p_t2 -= 0.95454545454545459) * p_t2 + .984375) * .5 + .5;
	}
};
var com_genome2d_tween_easing_GCubic = function() { };
$hxClasses["com.genome2d.tween.easing.GCubic"] = com_genome2d_tween_easing_GCubic;
com_genome2d_tween_easing_GCubic.__name__ = "com.genome2d.tween.easing.GCubic";
com_genome2d_tween_easing_GCubic.easeIn = function(p_t) {
	return p_t * p_t * p_t;
};
com_genome2d_tween_easing_GCubic.easeOut = function(p_t) {
	return --p_t * p_t * p_t + 1;
};
com_genome2d_tween_easing_GCubic.easeInOut = function(p_t) {
	if((p_t *= 2) < 1) {
		return 0.5 * p_t * p_t * p_t;
	} else {
		return 0.5 * ((p_t -= 2) * p_t * p_t + 2);
	}
};
var com_genome2d_tween_easing_GEaseEnum = $hxEnums["com.genome2d.tween.easing.GEaseEnum"] = { __ename__ : "com.genome2d.tween.easing.GEaseEnum", __constructs__ : ["LINEAR","BACK_IN","BACK_OUT","BACK_IN_OUT","BOUNCE_IN","BOUNCE_OUT","BOUNCE_IN_OUT","CUBIC_IN","CUBIC_OUT","CUBIC_IN_OUT","EXPO_IN","EXPO_OUT","EXPO_IN_OUT","QUART_IN","QUART_OUT","QUART_IN_OUT","QUINT_IN","QUINT_OUT","QUINT_IN_OUT","SINE_IN","SINE_OUT","SINE_IN_OUT","QUAD_IN","QUAD_OUT","QUAD_IN_OUT"]
	,LINEAR: {_hx_index:0,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BACK_IN: {_hx_index:1,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BACK_OUT: {_hx_index:2,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BACK_IN_OUT: {_hx_index:3,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BOUNCE_IN: {_hx_index:4,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BOUNCE_OUT: {_hx_index:5,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,BOUNCE_IN_OUT: {_hx_index:6,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,CUBIC_IN: {_hx_index:7,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,CUBIC_OUT: {_hx_index:8,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,CUBIC_IN_OUT: {_hx_index:9,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,EXPO_IN: {_hx_index:10,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,EXPO_OUT: {_hx_index:11,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,EXPO_IN_OUT: {_hx_index:12,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUART_IN: {_hx_index:13,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUART_OUT: {_hx_index:14,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUART_IN_OUT: {_hx_index:15,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUINT_IN: {_hx_index:16,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUINT_OUT: {_hx_index:17,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUINT_IN_OUT: {_hx_index:18,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,SINE_IN: {_hx_index:19,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,SINE_OUT: {_hx_index:20,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,SINE_IN_OUT: {_hx_index:21,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUAD_IN: {_hx_index:22,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUAD_OUT: {_hx_index:23,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
	,QUAD_IN_OUT: {_hx_index:24,__enum__:"com.genome2d.tween.easing.GEaseEnum",toString:$estr}
};
com_genome2d_tween_easing_GEaseEnum.__empty_constructs__ = [com_genome2d_tween_easing_GEaseEnum.LINEAR,com_genome2d_tween_easing_GEaseEnum.BACK_IN,com_genome2d_tween_easing_GEaseEnum.BACK_OUT,com_genome2d_tween_easing_GEaseEnum.BACK_IN_OUT,com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN,com_genome2d_tween_easing_GEaseEnum.BOUNCE_OUT,com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN_OUT,com_genome2d_tween_easing_GEaseEnum.CUBIC_IN,com_genome2d_tween_easing_GEaseEnum.CUBIC_OUT,com_genome2d_tween_easing_GEaseEnum.CUBIC_IN_OUT,com_genome2d_tween_easing_GEaseEnum.EXPO_IN,com_genome2d_tween_easing_GEaseEnum.EXPO_OUT,com_genome2d_tween_easing_GEaseEnum.EXPO_IN_OUT,com_genome2d_tween_easing_GEaseEnum.QUART_IN,com_genome2d_tween_easing_GEaseEnum.QUART_OUT,com_genome2d_tween_easing_GEaseEnum.QUART_IN_OUT,com_genome2d_tween_easing_GEaseEnum.QUINT_IN,com_genome2d_tween_easing_GEaseEnum.QUINT_OUT,com_genome2d_tween_easing_GEaseEnum.QUINT_IN_OUT,com_genome2d_tween_easing_GEaseEnum.SINE_IN,com_genome2d_tween_easing_GEaseEnum.SINE_OUT,com_genome2d_tween_easing_GEaseEnum.SINE_IN_OUT,com_genome2d_tween_easing_GEaseEnum.QUAD_IN,com_genome2d_tween_easing_GEaseEnum.QUAD_OUT,com_genome2d_tween_easing_GEaseEnum.QUAD_IN_OUT];
var com_genome2d_tween_easing_GElastic = function() { };
$hxClasses["com.genome2d.tween.easing.GElastic"] = com_genome2d_tween_easing_GElastic;
com_genome2d_tween_easing_GElastic.__name__ = "com.genome2d.tween.easing.GElastic";
com_genome2d_tween_easing_GElastic.easeIn = function(p_t) {
	if(p_t == 0) {
		return 0;
	}
	if(p_t == 1) {
		return 1;
	}
	var s;
	var a = 1;
	var p = 0.4;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	return -(a * Math.pow(2,10 * --p_t) * Math.sin((p_t - s) * (2 * Math.PI) / p));
};
com_genome2d_tween_easing_GElastic.easeOut = function(p_t) {
	if(p_t == 0) {
		return 0;
	}
	if(p_t == 1) {
		return 1;
	}
	var s;
	var a = 1;
	var p = 0.4;
	if(a < 1) {
		a = 1;
		s = p / 4;
	} else {
		s = p / (2 * Math.PI) * Math.asin(1 / a);
	}
	return a * Math.pow(2,-10 * p_t) * Math.sin((p_t - s) * (2 * Math.PI) / p) + 1;
};
com_genome2d_tween_easing_GElastic.easeInOut = function(p_t) {
	if(p_t == 0) {
		return 0;
	}
	if((p_t /= 0.5) == 2) {
		return 1;
	}
	var p = 0.44999999999999996;
	var s = p / 4;
	if(p_t < 1) {
		return -0.5 * (Math.pow(2,10 * --p_t) * Math.sin((p_t - s) * (2 * Math.PI) / p));
	}
	return Math.pow(2,-10 * --p_t) * Math.sin((p_t - s) * (2 * Math.PI) / p) * 0.5 + 1;
};
var com_genome2d_tween_easing_GExpo = function() { };
$hxClasses["com.genome2d.tween.easing.GExpo"] = com_genome2d_tween_easing_GExpo;
com_genome2d_tween_easing_GExpo.__name__ = "com.genome2d.tween.easing.GExpo";
com_genome2d_tween_easing_GExpo.easeIn = function(p_t) {
	if(p_t == 0) {
		return 0;
	} else {
		return Math.pow(2,10 * (p_t - 1));
	}
};
com_genome2d_tween_easing_GExpo.easeOut = function(p_t) {
	if(p_t == 1) {
		return 1;
	} else {
		return 1 - Math.pow(2,-10 * p_t);
	}
};
com_genome2d_tween_easing_GExpo.easeInOut = function(p_t) {
	if(p_t == 0 || p_t == 1) {
		return p_t;
	}
	if((p_t *= 2.0) < 1.0) {
		return 0.5 * Math.pow(2,10 * (p_t - 1));
	}
	return 0.5 * (2 - Math.pow(2,-10 * --p_t));
};
var com_genome2d_tween_easing_GQuad = function() { };
$hxClasses["com.genome2d.tween.easing.GQuad"] = com_genome2d_tween_easing_GQuad;
com_genome2d_tween_easing_GQuad.__name__ = "com.genome2d.tween.easing.GQuad";
com_genome2d_tween_easing_GQuad.easeIn = function(p_t) {
	return p_t * p_t;
};
com_genome2d_tween_easing_GQuad.easeOut = function(p_t) {
	return -p_t * (p_t - 2);
};
com_genome2d_tween_easing_GQuad.easeInOut = function(p_t) {
	p_t *= 2;
	if(p_t < 1) {
		return .5 * p_t * p_t;
	}
	return -.5 * ((p_t - 1) * (p_t - 3) - 1);
};
var com_genome2d_tween_easing_GQuart = function() { };
$hxClasses["com.genome2d.tween.easing.GQuart"] = com_genome2d_tween_easing_GQuart;
com_genome2d_tween_easing_GQuart.__name__ = "com.genome2d.tween.easing.GQuart";
com_genome2d_tween_easing_GQuart.easeIn = function(p_t) {
	return p_t * p_t * p_t * p_t;
};
com_genome2d_tween_easing_GQuart.easeOut = function(p_t) {
	return -(--p_t * p_t * p_t * p_t - 1);
};
com_genome2d_tween_easing_GQuart.easeInOut = function(p_t) {
	p_t *= 2;
	if(p_t < 1) {
		return .5 * p_t * p_t * p_t * p_t;
	}
	return -.5 * ((p_t -= 2) * p_t * p_t * p_t - 2);
};
var com_genome2d_tween_easing_GQuint = function() { };
$hxClasses["com.genome2d.tween.easing.GQuint"] = com_genome2d_tween_easing_GQuint;
com_genome2d_tween_easing_GQuint.__name__ = "com.genome2d.tween.easing.GQuint";
com_genome2d_tween_easing_GQuint.easeIn = function(p_t) {
	return p_t * p_t * p_t * p_t * p_t;
};
com_genome2d_tween_easing_GQuint.easeOut = function(p_t) {
	return --p_t * p_t * p_t * p_t * p_t + 1;
};
com_genome2d_tween_easing_GQuint.easeInOut = function(p_t) {
	p_t *= 2;
	if(p_t < 1) {
		return .5 * p_t * p_t * p_t * p_t * p_t;
	}
	return .5 * ((p_t -= 2) * p_t * p_t * p_t * p_t + 2);
};
var com_genome2d_tween_easing_GSine = function() { };
$hxClasses["com.genome2d.tween.easing.GSine"] = com_genome2d_tween_easing_GSine;
com_genome2d_tween_easing_GSine.__name__ = "com.genome2d.tween.easing.GSine";
com_genome2d_tween_easing_GSine.easeIn = function(p_t) {
	return -Math.cos(p_t * (Math.PI / 2));
};
com_genome2d_tween_easing_GSine.easeOut = function(p_t) {
	return Math.sin(p_t * (Math.PI / 2));
};
com_genome2d_tween_easing_GSine.easeInOut = function(p_t) {
	return -0.5 * (Math.cos(Math.PI * p_t) - 1);
};
var com_genome2d_tween_interp_GCurveInterp = function(p_tween) {
	this.g2d_currentState = "default";
	this.hasInitialized = false;
	this.relative = false;
	this.ease = com_genome2d_tween_GTween.defaultEase;
	this.tween = p_tween;
	this.g2d_time = 0.0;
};
$hxClasses["com.genome2d.tween.interp.GCurveInterp"] = com_genome2d_tween_interp_GCurveInterp;
com_genome2d_tween_interp_GCurveInterp.__name__ = "com.genome2d.tween.interp.GCurveInterp";
com_genome2d_tween_interp_GCurveInterp.__interfaces__ = [com_genome2d_proto_IGPrototypable,com_genome2d_tween_IGInterp];
com_genome2d_tween_interp_GCurveInterp.prototype = {
	tween: null
	,relative: null
	,duration: null
	,g2d_time: null
	,from: null
	,to: null
	,current: null
	,ease: null
	,complete: null
	,property: null
	,hasInitialized: null
	,getFinalValue: function() {
		return this.from + this.to.calculate(1);
	}
	,init: function() {
		if(this.relative) {
			this.from = Reflect.getProperty(this.tween.g2d_target,this.property);
		} else {
			this.from = 0;
		}
		this.hasInitialized = true;
	}
	,reset: function() {
		this.g2d_time = 0;
		this.hasInitialized = false;
	}
	,update: function(p_delta) {
		if(!this.hasInitialized) {
			if(this.relative) {
				this.from = Reflect.getProperty(this.tween.g2d_target,this.property);
			} else {
				this.from = 0;
			}
			this.hasInitialized = true;
		}
		this.g2d_time += p_delta;
		var c = this.current;
		if(this.g2d_time > this.duration) {
			this.g2d_time = this.duration;
			c = this.from + this.to.calculate(1);
			this.complete = true;
		} else {
			c = this.from + this.to.calculate(this.ease(this.g2d_time / this.duration));
		}
		if(c != this.current) {
			Reflect.setProperty(this.tween.g2d_target,this.property,this.current = c);
		}
	}
	,setValue: function(p_value) {
		if(p_value != this.current) {
			Reflect.setProperty(this.tween.g2d_target,this.property,this.current = p_value);
		}
	}
	,apply: function(val) {
		Reflect.setProperty(this.tween.g2d_target,this.property,val);
	}
	,get_easeEnum: function() {
		if(this.ease == com_genome2d_tween_easing_GQuad.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuad.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuad.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_IN;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_IN;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_IN;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_IN;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_IN_OUT;
		}
		return com_genome2d_tween_easing_GEaseEnum.LINEAR;
	}
	,set_easeEnum: function(p_value) {
		switch(p_value._hx_index) {
		case 1:
			this.ease = com_genome2d_tween_easing_GBack.easeIn;
			break;
		case 2:
			this.ease = com_genome2d_tween_easing_GBack.easeOut;
			break;
		case 3:
			this.ease = com_genome2d_tween_easing_GBack.easeInOut;
			break;
		case 4:
			this.ease = com_genome2d_tween_easing_GBounce.easeIn;
			break;
		case 5:
			this.ease = com_genome2d_tween_easing_GBounce.easeIn;
			break;
		case 6:
			this.ease = com_genome2d_tween_easing_GBounce.easeInOut;
			break;
		case 7:
			this.ease = com_genome2d_tween_easing_GCubic.easeIn;
			break;
		case 8:
			this.ease = com_genome2d_tween_easing_GCubic.easeOut;
			break;
		case 9:
			this.ease = com_genome2d_tween_easing_GCubic.easeInOut;
			break;
		case 10:
			this.ease = com_genome2d_tween_easing_GExpo.easeIn;
			break;
		case 11:
			this.ease = com_genome2d_tween_easing_GExpo.easeOut;
			break;
		case 12:
			this.ease = com_genome2d_tween_easing_GExpo.easeInOut;
			break;
		case 13:
			this.ease = com_genome2d_tween_easing_GQuart.easeIn;
			break;
		case 14:
			this.ease = com_genome2d_tween_easing_GQuart.easeOut;
			break;
		case 15:
			this.ease = com_genome2d_tween_easing_GQuart.easeInOut;
			break;
		case 16:
			this.ease = com_genome2d_tween_easing_GQuint.easeIn;
			break;
		case 17:
			this.ease = com_genome2d_tween_easing_GQuint.easeOut;
			break;
		case 18:
			this.ease = com_genome2d_tween_easing_GQuint.easeInOut;
			break;
		case 19:
			this.ease = com_genome2d_tween_easing_GSine.easeIn;
			break;
		case 20:
			this.ease = com_genome2d_tween_easing_GSine.easeOut;
			break;
		case 21:
			this.ease = com_genome2d_tween_easing_GSine.easeInOut;
			break;
		case 22:
			this.ease = com_genome2d_tween_easing_GQuad.easeIn;
			break;
		case 23:
			this.ease = com_genome2d_tween_easing_GQuad.easeOut;
			break;
		case 24:
			this.ease = com_genome2d_tween_easing_GQuad.easeInOut;
			break;
		default:
			this.ease = com_genome2d_tween_easing_GLinear.none;
		}
		return p_value;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GCurveInterp");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GCurveInterp");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_tween_interp_GCurveInterp
	,__properties__: {set_easeEnum:"set_easeEnum",get_easeEnum:"get_easeEnum"}
};
var com_genome2d_tween_interp_GFloatInterp = function(p_tween) {
	this.g2d_currentState = "default";
	this.relative = false;
	this.g2d_tween = p_tween;
	this.ease = com_genome2d_tween_GTween.defaultEase;
	this.g2d_time = 0;
};
$hxClasses["com.genome2d.tween.interp.GFloatInterp"] = com_genome2d_tween_interp_GFloatInterp;
com_genome2d_tween_interp_GFloatInterp.__name__ = "com.genome2d.tween.interp.GFloatInterp";
com_genome2d_tween_interp_GFloatInterp.__interfaces__ = [com_genome2d_proto_IGPrototypable,com_genome2d_tween_IGInterp];
com_genome2d_tween_interp_GFloatInterp.prototype = {
	g2d_tween: null
	,duration: null
	,to: null
	,relative: null
	,g2d_time: null
	,from: null
	,difference: null
	,current: null
	,ease: null
	,complete: null
	,get_easeEnum: function() {
		if(this.ease == com_genome2d_tween_easing_GQuad.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuad.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuad.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUAD_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_IN;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBack.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.BACK_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GBounce.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.BOUNCE_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_IN;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GCubic.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.CUBIC_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_IN;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GExpo.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.EXPO_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuart.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUART_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_IN;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GQuint.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.QUINT_IN_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeIn) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_IN;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeOut) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_OUT;
		} else if(this.ease == com_genome2d_tween_easing_GSine.easeInOut) {
			return com_genome2d_tween_easing_GEaseEnum.SINE_IN_OUT;
		}
		return com_genome2d_tween_easing_GEaseEnum.LINEAR;
	}
	,set_easeEnum: function(p_value) {
		switch(p_value._hx_index) {
		case 1:
			this.ease = com_genome2d_tween_easing_GBack.easeIn;
			break;
		case 2:
			this.ease = com_genome2d_tween_easing_GBack.easeOut;
			break;
		case 3:
			this.ease = com_genome2d_tween_easing_GBack.easeInOut;
			break;
		case 4:
			this.ease = com_genome2d_tween_easing_GBounce.easeIn;
			break;
		case 5:
			this.ease = com_genome2d_tween_easing_GBounce.easeIn;
			break;
		case 6:
			this.ease = com_genome2d_tween_easing_GBounce.easeInOut;
			break;
		case 7:
			this.ease = com_genome2d_tween_easing_GCubic.easeIn;
			break;
		case 8:
			this.ease = com_genome2d_tween_easing_GCubic.easeOut;
			break;
		case 9:
			this.ease = com_genome2d_tween_easing_GCubic.easeInOut;
			break;
		case 10:
			this.ease = com_genome2d_tween_easing_GExpo.easeIn;
			break;
		case 11:
			this.ease = com_genome2d_tween_easing_GExpo.easeOut;
			break;
		case 12:
			this.ease = com_genome2d_tween_easing_GExpo.easeInOut;
			break;
		case 13:
			this.ease = com_genome2d_tween_easing_GQuart.easeIn;
			break;
		case 14:
			this.ease = com_genome2d_tween_easing_GQuart.easeOut;
			break;
		case 15:
			this.ease = com_genome2d_tween_easing_GQuart.easeInOut;
			break;
		case 16:
			this.ease = com_genome2d_tween_easing_GQuint.easeIn;
			break;
		case 17:
			this.ease = com_genome2d_tween_easing_GQuint.easeOut;
			break;
		case 18:
			this.ease = com_genome2d_tween_easing_GQuint.easeInOut;
			break;
		case 19:
			this.ease = com_genome2d_tween_easing_GSine.easeIn;
			break;
		case 20:
			this.ease = com_genome2d_tween_easing_GSine.easeOut;
			break;
		case 21:
			this.ease = com_genome2d_tween_easing_GSine.easeInOut;
			break;
		case 22:
			this.ease = com_genome2d_tween_easing_GQuad.easeIn;
			break;
		case 23:
			this.ease = com_genome2d_tween_easing_GQuad.easeOut;
			break;
		case 24:
			this.ease = com_genome2d_tween_easing_GQuad.easeInOut;
			break;
		default:
			this.ease = com_genome2d_tween_easing_GLinear.none;
		}
		return p_value;
	}
	,property: null
	,propertyGetter: null
	,propertySetter: null
	,hasInitialized: null
	,getFinalValue: function() {
		return this.from + this.difference;
	}
	,init: function() {
		this.current = this.from = Reflect.getProperty(this.g2d_tween.g2d_target,this.property);
		this.difference = this.relative ? this.to : this.to - this.from;
		this.hasInitialized = true;
	}
	,getTargetValue: function() {
		return Reflect.getProperty(this.g2d_tween.g2d_target,this.property);
	}
	,setTargetValue: function(p_value) {
		this.current = p_value;
		Reflect.setProperty(this.g2d_tween.g2d_target,this.property,p_value);
		return;
	}
	,reset: function() {
		this.g2d_time = 0;
		this.hasInitialized = false;
	}
	,update: function(p_delta) {
		if(!this.hasInitialized) {
			this.current = this.from = Reflect.getProperty(this.g2d_tween.g2d_target,this.property);
			this.difference = this.relative ? this.to : this.to - this.from;
			this.hasInitialized = true;
		}
		this.g2d_time += p_delta;
		var c;
		if(this.g2d_time > this.duration) {
			this.g2d_time = this.duration;
			c = this.from + this.difference;
			this.complete = true;
		} else {
			c = this.from + this.ease(this.g2d_time / this.duration) * this.difference;
		}
		if(c != this.current) {
			this.current = c;
			Reflect.setProperty(this.g2d_tween.g2d_target,this.property,c);
		}
	}
	,setValue: function(p_value) {
		if(p_value != this.current) {
			this.current = p_value;
			Reflect.setProperty(this.g2d_tween.g2d_target,this.property,p_value);
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"tweenFloat");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"tweenFloat");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_tween_interp_GFloatInterp
	,__properties__: {set_easeEnum:"set_easeEnum",get_easeEnum:"get_easeEnum"}
};
var com_genome2d_ui_GUIAlignType = $hxEnums["com.genome2d.ui.GUIAlignType"] = { __ename__ : "com.genome2d.ui.GUIAlignType", __constructs__ : ["NONE","TOP_LEFT","TOP_CENTER","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_CENTER","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT"]
	,NONE: {_hx_index:0,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,TOP_LEFT: {_hx_index:1,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,TOP_CENTER: {_hx_index:2,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,TOP_RIGHT: {_hx_index:3,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,MIDDLE_LEFT: {_hx_index:4,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,MIDDLE_CENTER: {_hx_index:5,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,MIDDLE_RIGHT: {_hx_index:6,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,BOTTOM_LEFT: {_hx_index:7,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,BOTTOM_CENTER: {_hx_index:8,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
	,BOTTOM_RIGHT: {_hx_index:9,__enum__:"com.genome2d.ui.GUIAlignType",toString:$estr}
};
com_genome2d_ui_GUIAlignType.__empty_constructs__ = [com_genome2d_ui_GUIAlignType.NONE,com_genome2d_ui_GUIAlignType.TOP_LEFT,com_genome2d_ui_GUIAlignType.TOP_CENTER,com_genome2d_ui_GUIAlignType.TOP_RIGHT,com_genome2d_ui_GUIAlignType.MIDDLE_LEFT,com_genome2d_ui_GUIAlignType.MIDDLE_CENTER,com_genome2d_ui_GUIAlignType.MIDDLE_RIGHT,com_genome2d_ui_GUIAlignType.BOTTOM_LEFT,com_genome2d_ui_GUIAlignType.BOTTOM_CENTER,com_genome2d_ui_GUIAlignType.BOTTOM_RIGHT];
var com_genome2d_ui_element_GUIElement = function(p_skin) {
	this.g2d_currentState = "default";
	this.g2d_useCustomChildPrototypeBinding = false;
	this.g2d_lastClickTime = -1;
	this.g2d_rightMouseUpFound = false;
	this.g2d_rightMouseDownFound = false;
	this.g2d_mouseUpFound = false;
	this.g2d_mouseDownFound = false;
	this.g2d_mouseOverFound = false;
	this.g2d_numChildren = 0;
	this.g2d_dirty = true;
	this.g2d_dragging = false;
	this.g2d_mouseMove = "";
	this.g2d_mouseOut = "";
	this.g2d_mouseOver = "";
	this.g2d_rightMouseClick = "";
	this.g2d_mouseClick = "";
	this.g2d_mouseWheel = "";
	this.g2d_rightMouseUp = "";
	this.g2d_mouseUp = "";
	this.g2d_rightMouseDown = "";
	this.g2d_mouseDown = "";
	this.g2d_preferredHeight = 0;
	this.g2d_finalHeight = 0;
	this.g2d_minHeight = 0;
	this.g2d_preferredWidth = 0;
	this.g2d_finalWidth = 0;
	this.g2d_minWidth = 0;
	this.expand = true;
	this.g2d_pivotY = 0;
	this.g2d_pivotX = 0;
	this.g2d_bottom = 0;
	this.g2d_right = 0;
	this.g2d_top = 0;
	this.g2d_left = 0;
	this.g2d_anchorBottom = 0;
	this.g2d_anchorRight = 0;
	this.g2d_anchorTop = 0;
	this.g2d_anchorLeft = 0;
	this.g2d_anchorY = 0;
	this.g2d_anchorX = 0;
	this.g2d_skinListenerAdded = false;
	this.g2d_model = "";
	this.g2d_pivotAlign = com_genome2d_ui_GUIAlignType.NONE;
	this.g2d_anchorAlign = com_genome2d_ui_GUIAlignType.NONE;
	this.name = "";
	this.flushBatch = false;
	this.g2d_visible = true;
	this.mouseChildren = true;
	this.mousePaddingRight = 0;
	this.mousePaddingLeft = 0;
	this.mousePaddingBottom = 0;
	this.mousePaddingTop = 0;
	this.mouseEnabled = true;
	this.useWorldAlpha = true;
	this.useWorldColor = true;
	this.useMask = false;
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.g2d_onModelChanged = new com_genome2d_callbacks_GCallback1();
	if(p_skin != null) {
		if(p_skin == null || this.g2d_skin == null || p_skin != this.g2d_skin) {
			if(this.g2d_skin != null) {
				this.g2d_skin.remove();
			}
			this.g2d_skin = p_skin != null ? p_skin.attach(this) : p_skin;
			this.g2d_activeSkin = this.g2d_skin;
			this.setDirty();
			if(this.g2d_skin != null && !this.g2d_skinListenerAdded) {
				this.g2d_skinListenerAdded = true;
				com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged.addUnsafe($bind(this,this.skinChanged_handler));
			}
		}
	}
};
$hxClasses["com.genome2d.ui.element.GUIElement"] = com_genome2d_ui_element_GUIElement;
com_genome2d_ui_element_GUIElement.__name__ = "com.genome2d.ui.element.GUIElement";
com_genome2d_ui_element_GUIElement.__interfaces__ = [com_genome2d_input_IGFocusable,com_genome2d_proto_IGPrototypable];
com_genome2d_ui_element_GUIElement.setModelHook = null;
com_genome2d_ui_element_GUIElement.g2d_lastMouseEnabled = null;
com_genome2d_ui_element_GUIElement.prototype = {
	red: null
	,green: null
	,blue: null
	,alpha: null
	,useMask: null
	,get_color: function() {
		var color = 0;
		color += (this.red * 255 | 0) << 16;
		color += (this.green * 255 | 0) << 8;
		color += this.blue * 255 | 0;
		return color;
	}
	,set_color: function(p_value) {
		this.red = (p_value >> 16 & 255 | 0) / 255;
		this.green = (p_value >> 8 & 255 | 0) / 255;
		this.blue = (p_value & 255 | 0) / 255;
		return p_value;
	}
	,useWorldColor: null
	,useWorldAlpha: null
	,mouseEnabled: null
	,mousePaddingTop: null
	,mousePaddingBottom: null
	,mousePaddingLeft: null
	,mousePaddingRight: null
	,mouseChildren: null
	,g2d_onStateChanged: null
	,get_onStateChanged: function() {
		if(this.g2d_onStateChanged == null) {
			this.g2d_onStateChanged = new com_genome2d_callbacks_GCallback1(String);
		}
		return this.g2d_onStateChanged;
	}
	,g2d_visible: null
	,get_visible: function() {
		return this.g2d_visible;
	}
	,set_visible: function(p_value) {
		this.g2d_visible = p_value;
		return this.g2d_visible;
	}
	,flushBatch: null
	,batchPriority: null
	,name: null
	,g2d_anchorAlign: null
	,get_anchorAlign: function() {
		return this.g2d_anchorAlign;
	}
	,set_anchorAlign: function(p_value) {
		if(p_value != this.g2d_anchorAlign) {
			this.g2d_anchorAlign = p_value;
			if(this.g2d_anchorAlign != com_genome2d_ui_GUIAlignType.NONE) {
				this.g2d_anchorLeft = this.g2d_anchorRight = (this.g2d_anchorAlign._hx_index - 1) % 3 * 0.5;
				this.g2d_anchorTop = this.g2d_anchorBottom = ((this.g2d_anchorAlign._hx_index - 1) / 3 | 0) * 0.5;
			}
			this.setDirty();
		}
		return this.g2d_anchorAlign;
	}
	,g2d_pivotAlign: null
	,get_pivotAlign: function() {
		return this.g2d_pivotAlign;
	}
	,set_pivotAlign: function(p_value) {
		if(p_value != this.g2d_pivotAlign) {
			this.g2d_pivotAlign = p_value;
			if(this.g2d_pivotAlign != com_genome2d_ui_GUIAlignType.NONE) {
				this.g2d_pivotX = (this.g2d_pivotAlign._hx_index - 1) % 3 * 0.5;
				this.g2d_pivotY = ((this.g2d_pivotAlign._hx_index - 1) / 3 | 0) * 0.5;
			}
			this.setDirty();
		}
		return this.g2d_anchorAlign;
	}
	,g2d_model: null
	,get_model: function() {
		return this.g2d_model;
	}
	,set_model: function(p_value) {
		if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
			p_value = com_genome2d_ui_element_GUIElement.setModelHook(p_value);
		}
		this.g2d_model = p_value == null ? "null" : "" + p_value;
		this.g2d_onModelChanged.dispatch(this);
		return this.g2d_model;
	}
	,g2d_layout: null
	,get_layout: function() {
		return this.g2d_layout;
	}
	,set_layout: function(p_value) {
		this.g2d_layout = p_value;
		this.setDirty();
		return this.g2d_layout;
	}
	,g2d_activeSkin: null
	,g2d_skinListenerAdded: null
	,g2d_skin: null
	,get_skin: function() {
		return this.g2d_skin;
	}
	,set_skin: function(p_value) {
		if(p_value == null || this.g2d_skin == null || p_value != this.g2d_skin) {
			if(this.g2d_skin != null) {
				this.g2d_skin.remove();
			}
			this.g2d_skin = p_value != null ? p_value.attach(this) : p_value;
			this.g2d_activeSkin = this.g2d_skin;
			this.setDirty();
			if(this.g2d_skin != null && !this.g2d_skinListenerAdded) {
				this.g2d_skinListenerAdded = true;
				com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged.addUnsafe($bind(this,this.skinChanged_handler));
			}
		}
		return this.g2d_skin;
	}
	,g2d_anchorX: null
	,get_anchorX: function() {
		return this.g2d_anchorX;
	}
	,set_anchorX: function(p_value) {
		this.g2d_anchorX = p_value;
		this.setDirty();
		return this.g2d_anchorX;
	}
	,g2d_anchorY: null
	,get_anchorY: function() {
		return this.g2d_anchorY;
	}
	,set_anchorY: function(p_value) {
		this.g2d_anchorY = p_value;
		this.setDirty();
		return this.g2d_anchorY;
	}
	,g2d_anchorLeft: null
	,get_anchorLeft: function() {
		return this.g2d_anchorLeft;
	}
	,set_anchorLeft: function(p_value) {
		if(this.g2d_anchorAlign == com_genome2d_ui_GUIAlignType.NONE) {
			this.g2d_anchorLeft = p_value;
			if(this.g2d_anchorLeft > this.g2d_anchorRight) {
				this.g2d_anchorRight = this.g2d_anchorLeft;
			}
			this.setDirty();
		}
		return this.g2d_anchorLeft;
	}
	,g2d_anchorTop: null
	,get_anchorTop: function() {
		return this.g2d_anchorTop;
	}
	,set_anchorTop: function(p_value) {
		if(this.g2d_anchorAlign == com_genome2d_ui_GUIAlignType.NONE) {
			this.g2d_anchorTop = p_value;
			if(this.g2d_anchorTop > this.g2d_anchorBottom) {
				this.g2d_anchorBottom = this.g2d_anchorTop;
			}
			this.setDirty();
		}
		return this.g2d_anchorTop;
	}
	,g2d_anchorRight: null
	,get_anchorRight: function() {
		return this.g2d_anchorRight;
	}
	,set_anchorRight: function(p_value) {
		if(this.g2d_anchorAlign == com_genome2d_ui_GUIAlignType.NONE) {
			this.g2d_anchorRight = p_value;
			if(this.g2d_anchorRight < this.g2d_anchorLeft) {
				this.g2d_anchorLeft = this.g2d_anchorRight;
			}
			this.setDirty();
		}
		return this.g2d_anchorRight;
	}
	,g2d_anchorBottom: null
	,get_anchorBottom: function() {
		return this.g2d_anchorBottom;
	}
	,set_anchorBottom: function(p_value) {
		if(this.g2d_anchorAlign == com_genome2d_ui_GUIAlignType.NONE) {
			this.g2d_anchorBottom = p_value;
			if(this.g2d_anchorBottom < this.g2d_anchorTop) {
				this.g2d_anchorTop = this.g2d_anchorBottom;
			}
			this.setDirty();
		}
		return this.g2d_anchorBottom;
	}
	,g2d_left: null
	,get_left: function() {
		return this.g2d_left;
	}
	,set_left: function(p_value) {
		this.g2d_left = p_value;
		this.setDirty();
		return this.g2d_left;
	}
	,g2d_top: null
	,get_top: function() {
		return this.g2d_top;
	}
	,set_top: function(p_value) {
		this.g2d_top = p_value;
		this.setDirty();
		return this.g2d_top;
	}
	,g2d_right: null
	,get_right: function() {
		return this.g2d_right;
	}
	,set_right: function(p_value) {
		this.g2d_right = p_value;
		this.setDirty();
		return this.g2d_right;
	}
	,g2d_bottom: null
	,get_bottom: function() {
		return this.g2d_bottom;
	}
	,set_bottom: function(p_value) {
		this.g2d_bottom = p_value;
		this.setDirty();
		return this.g2d_bottom;
	}
	,g2d_pivotX: null
	,get_pivotX: function() {
		return this.g2d_pivotX;
	}
	,set_pivotX: function(p_value) {
		this.g2d_pivotX = p_value;
		this.setDirty();
		return this.g2d_pivotX;
	}
	,g2d_pivotY: null
	,get_pivotY: function() {
		return this.g2d_pivotY;
	}
	,set_pivotY: function(p_value) {
		this.g2d_pivotY = p_value;
		this.setDirty();
		return this.g2d_pivotY;
	}
	,expand: null
	,g2d_minWidth: null
	,getMinWidth: function() {
		return this.g2d_minWidth;
	}
	,g2d_finalWidth: null
	,g2d_preferredWidth: null
	,get_preferredWidth: function() {
		return this.g2d_preferredWidth;
	}
	,set_preferredWidth: function(p_value) {
		this.g2d_preferredWidth = p_value;
		this.setDirty();
		return this.g2d_preferredWidth;
	}
	,g2d_minHeight: null
	,getMinHeight: function() {
		return this.g2d_minHeight;
	}
	,g2d_finalHeight: null
	,g2d_preferredHeight: null
	,get_preferredHeight: function() {
		return this.g2d_preferredHeight;
	}
	,set_preferredHeight: function(p_value) {
		this.g2d_preferredHeight = p_value;
		this.setDirty();
		return this.g2d_preferredHeight;
	}
	,g2d_mouseDown: null
	,get_mouseDown: function() {
		return this.g2d_mouseDown;
	}
	,set_mouseDown: function(p_value) {
		if(this.g2d_mouseDown != p_value) {
			if(this.g2d_mouseDown != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseDown);
				if(mdf != null) {
					if(this.g2d_onMouseDown == null) {
						this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseDown.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseDown = p_value;
			if(this.g2d_mouseDown != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseDown);
				if(mdf1 != null) {
					if(this.g2d_onMouseDown == null) {
						this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseDown.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseDown;
	}
	,g2d_rightMouseDown: null
	,get_rightMouseDown: function() {
		return this.g2d_rightMouseDown;
	}
	,set_rightMouseDown: function(p_value) {
		if(this.g2d_rightMouseDown != p_value) {
			if(this.g2d_rightMouseDown != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_rightMouseDown);
				if(mdf != null) {
					if(this.g2d_onRightMouseDown == null) {
						this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseDown.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_rightMouseDown = p_value;
			if(this.g2d_rightMouseDown != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseDown);
				if(mdf1 != null) {
					if(this.g2d_onRightMouseDown == null) {
						this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseDown.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_rightMouseDown;
	}
	,g2d_mouseUp: null
	,get_mouseUp: function() {
		return this.g2d_mouseUp;
	}
	,set_mouseUp: function(p_value) {
		if(this.g2d_mouseUp != p_value) {
			if(this.g2d_mouseUp != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseUp);
				if(mdf != null) {
					if(this.g2d_onMouseUp == null) {
						this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseUp.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseUp = p_value;
			if(this.g2d_mouseUp != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseUp);
				if(mdf1 != null) {
					if(this.g2d_onMouseUp == null) {
						this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseUp.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseUp;
	}
	,g2d_rightMouseUp: null
	,get_rightMouseUp: function() {
		return this.g2d_rightMouseUp;
	}
	,set_rightMouseUp: function(p_value) {
		if(this.g2d_rightMouseUp != p_value) {
			if(this.g2d_rightMouseUp != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_rightMouseUp);
				if(mdf != null) {
					if(this.g2d_onRightMouseUp == null) {
						this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseUp.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_rightMouseUp = p_value;
			if(this.g2d_rightMouseUp != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseUp);
				if(mdf1 != null) {
					if(this.g2d_onRightMouseUp == null) {
						this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseUp.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_rightMouseUp;
	}
	,g2d_mouseWheel: null
	,get_mouseWheel: function() {
		return this.g2d_mouseWheel;
	}
	,set_mouseWheel: function(p_value) {
		if(this.g2d_mouseWheel != p_value) {
			if(this.g2d_mouseWheel != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseWheel);
				if(mdf != null) {
					if(this.g2d_onMouseWheel == null) {
						this.g2d_onMouseWheel = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseWheel.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseWheel = p_value;
			if(this.g2d_mouseWheel != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseWheel);
				if(mdf1 != null) {
					if(this.g2d_onMouseWheel == null) {
						this.g2d_onMouseWheel = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseWheel.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseWheel;
	}
	,g2d_mouseClick: null
	,get_mouseClick: function() {
		return this.g2d_mouseClick;
	}
	,set_mouseClick: function(p_value) {
		if(this.g2d_mouseClick != p_value) {
			if(this.g2d_mouseClick != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseClick);
				if(mdf != null) {
					if(this.g2d_onMouseClick == null) {
						this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseClick.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseClick = p_value;
			if(this.g2d_mouseClick != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseClick);
				if(mdf1 != null) {
					if(this.g2d_onMouseClick == null) {
						this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseClick.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseClick;
	}
	,g2d_rightMouseClick: null
	,get_rightMouseClick: function() {
		return this.g2d_rightMouseClick;
	}
	,set_rightMouseClick: function(p_value) {
		if(this.g2d_rightMouseClick != p_value) {
			if(this.g2d_rightMouseClick != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_rightMouseClick);
				if(mdf != null) {
					if(this.g2d_onRightMouseClick == null) {
						this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseClick.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_rightMouseClick = p_value;
			if(this.g2d_rightMouseClick != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseClick);
				if(mdf1 != null) {
					if(this.g2d_onRightMouseClick == null) {
						this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseClick.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_rightMouseClick;
	}
	,g2d_mouseOver: null
	,get_mouseOver: function() {
		return this.g2d_mouseOver;
	}
	,set_mouseOver: function(p_value) {
		if(this.g2d_mouseOver != p_value) {
			if(this.g2d_mouseOver != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseOver);
				if(mdf != null) {
					if(this.g2d_onMouseOver == null) {
						this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOver.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseOver = p_value;
			if(this.g2d_mouseOver != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseOver);
				if(mdf1 != null) {
					if(this.g2d_onMouseOver == null) {
						this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOver.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseOver;
	}
	,g2d_mouseOut: null
	,get_mouseOut: function() {
		return this.g2d_mouseOut;
	}
	,set_mouseOut: function(p_value) {
		if(this.g2d_mouseOut != p_value) {
			if(this.g2d_mouseOut != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseOut);
				if(mdf != null) {
					if(this.g2d_onMouseOut == null) {
						this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOut.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseOut = p_value;
			if(this.g2d_mouseOut != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseOut);
				if(mdf1 != null) {
					if(this.g2d_onMouseOut == null) {
						this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOut.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseOut;
	}
	,g2d_mouseMove: null
	,get_mouseMove: function() {
		return this.g2d_mouseMove;
	}
	,set_mouseMove: function(p_value) {
		if(this.g2d_mouseMove != p_value) {
			if(this.g2d_mouseMove != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseMove);
				if(mdf != null) {
					if(this.g2d_onMouseMove == null) {
						this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseMove.remove($bind(this.g2d_currentController,mdf));
				}
			}
			this.g2d_mouseMove = p_value;
			if(this.g2d_mouseMove != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_mouseMove);
				if(mdf1 != null) {
					if(this.g2d_onMouseMove == null) {
						this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseMove.add($bind(this.g2d_currentController,mdf1));
				}
			}
		}
		return this.g2d_mouseMove;
	}
	,g2d_gui: null
	,get_gui: function() {
		return this.g2d_root.g2d_gui;
	}
	,g2d_root: null
	,get_root: function() {
		return this.g2d_root;
	}
	,isRoot: function() {
		return this.g2d_root == this;
	}
	,isInHierarchy: function() {
		if(this.g2d_parent != null) {
			return this.g2d_parent.isInHierarchy();
		}
		return this.g2d_root == this;
	}
	,isVisible: function() {
		if(this.g2d_parent != null) {
			if(this.g2d_visible) {
				return this.g2d_parent.isVisible();
			} else {
				return false;
			}
		}
		if(this.g2d_root == this) {
			return this.g2d_visible;
		} else {
			return false;
		}
	}
	,userData: null
	,g2d_dragging: null
	,g2d_previousMouseX: null
	,g2d_previousMouseY: null
	,g2d_movedMouseX: null
	,g2d_movedMouseY: null
	,g2d_currentController: null
	,g2d_controller: null
	,getController: function() {
		if(this.g2d_controller != null) {
			return this.g2d_controller;
		} else if(this.g2d_parent != null) {
			return this.g2d_parent.getController();
		} else {
			return null;
		}
	}
	,setController: function(p_value) {
		this.g2d_controller = p_value;
		this.invalidateController();
	}
	,invalidateController: function() {
		var newController = this.getController();
		if(newController != this.g2d_currentController) {
			if(this.g2d_mouseDown != "" && this.g2d_currentController != null) {
				var mdf = Reflect.field(this.g2d_currentController,this.g2d_mouseDown);
				if(mdf != null) {
					if(this.g2d_onMouseDown == null) {
						this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseDown.remove($bind(this.g2d_currentController,mdf));
				}
			}
			if(this.g2d_rightMouseDown != "" && this.g2d_currentController != null) {
				var mdf1 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseDown);
				if(mdf1 != null) {
					if(this.g2d_onRightMouseDown == null) {
						this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseDown.remove($bind(this.g2d_currentController,mdf1));
				}
			}
			if(this.g2d_mouseUp != "" && this.g2d_currentController != null) {
				var mdf2 = Reflect.field(this.g2d_currentController,this.g2d_mouseUp);
				if(mdf2 != null) {
					if(this.g2d_onMouseUp == null) {
						this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseUp.remove($bind(this.g2d_currentController,mdf2));
				}
			}
			if(this.g2d_rightMouseUp != "" && this.g2d_currentController != null) {
				var mdf3 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseUp);
				if(mdf3 != null) {
					if(this.g2d_onRightMouseUp == null) {
						this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseUp.remove($bind(this.g2d_currentController,mdf3));
				}
			}
			if(this.g2d_mouseOver != "" && this.g2d_currentController != null) {
				var mdf4 = Reflect.field(this.g2d_currentController,this.g2d_mouseOver);
				if(mdf4 != null) {
					if(this.g2d_onMouseOver == null) {
						this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOver.remove($bind(this.g2d_currentController,mdf4));
				}
			}
			if(this.g2d_mouseOut != "" && this.g2d_currentController != null) {
				var mdf5 = Reflect.field(this.g2d_currentController,this.g2d_mouseOut);
				if(mdf5 != null) {
					if(this.g2d_onMouseOut == null) {
						this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOut.remove($bind(this.g2d_currentController,mdf5));
				}
			}
			if(this.g2d_mouseClick != "" && this.g2d_currentController != null) {
				var mdf6 = Reflect.field(this.g2d_currentController,this.g2d_mouseClick);
				if(mdf6 != null) {
					if(this.g2d_onMouseClick == null) {
						this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseClick.remove($bind(this.g2d_currentController,mdf6));
				}
			}
			if(this.g2d_rightMouseClick != "" && this.g2d_currentController != null) {
				var mdf7 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseClick);
				if(mdf7 != null) {
					if(this.g2d_onRightMouseClick == null) {
						this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseClick.remove($bind(this.g2d_currentController,mdf7));
				}
			}
			if(this.g2d_mouseMove != "" && this.g2d_currentController != null) {
				var mdf8 = Reflect.field(this.g2d_currentController,this.g2d_mouseMove);
				if(mdf8 != null) {
					if(this.g2d_onMouseMove == null) {
						this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseMove.remove($bind(this.g2d_currentController,mdf8));
				}
			}
			this.g2d_currentController = newController;
			if(this.g2d_mouseDown != "" && this.g2d_currentController != null) {
				var mdf9 = Reflect.field(this.g2d_currentController,this.g2d_mouseDown);
				if(mdf9 != null) {
					if(this.g2d_onMouseDown == null) {
						this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseDown.add($bind(this.g2d_currentController,mdf9));
				}
			}
			if(this.g2d_rightMouseDown != "" && this.g2d_currentController != null) {
				var mdf10 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseDown);
				if(mdf10 != null) {
					if(this.g2d_onRightMouseDown == null) {
						this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseDown.add($bind(this.g2d_currentController,mdf10));
				}
			}
			if(this.g2d_mouseUp != "" && this.g2d_currentController != null) {
				var mdf11 = Reflect.field(this.g2d_currentController,this.g2d_mouseUp);
				if(mdf11 != null) {
					if(this.g2d_onMouseUp == null) {
						this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseUp.add($bind(this.g2d_currentController,mdf11));
				}
			}
			if(this.g2d_rightMouseUp != "" && this.g2d_currentController != null) {
				var mdf12 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseUp);
				if(mdf12 != null) {
					if(this.g2d_onRightMouseUp == null) {
						this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseUp.add($bind(this.g2d_currentController,mdf12));
				}
			}
			if(this.g2d_mouseOver != "" && this.g2d_currentController != null) {
				var mdf13 = Reflect.field(this.g2d_currentController,this.g2d_mouseOver);
				if(mdf13 != null) {
					if(this.g2d_onMouseOver == null) {
						this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOver.add($bind(this.g2d_currentController,mdf13));
				}
			}
			if(this.g2d_mouseOut != "" && this.g2d_currentController != null) {
				var mdf14 = Reflect.field(this.g2d_currentController,this.g2d_mouseOut);
				if(mdf14 != null) {
					if(this.g2d_onMouseOut == null) {
						this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseOut.add($bind(this.g2d_currentController,mdf14));
				}
			}
			if(this.g2d_mouseClick != "" && this.g2d_currentController != null) {
				var mdf15 = Reflect.field(this.g2d_currentController,this.g2d_mouseClick);
				if(mdf15 != null) {
					if(this.g2d_onMouseClick == null) {
						this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseClick.add($bind(this.g2d_currentController,mdf15));
				}
			}
			if(this.g2d_rightMouseClick != "" && this.g2d_currentController != null) {
				var mdf16 = Reflect.field(this.g2d_currentController,this.g2d_rightMouseClick);
				if(mdf16 != null) {
					if(this.g2d_onRightMouseClick == null) {
						this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onRightMouseClick.add($bind(this.g2d_currentController,mdf16));
				}
			}
			if(this.g2d_mouseMove != "" && this.g2d_currentController != null) {
				var mdf17 = Reflect.field(this.g2d_currentController,this.g2d_mouseMove);
				if(mdf17 != null) {
					if(this.g2d_onMouseMove == null) {
						this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
					}
					this.g2d_onMouseMove.add($bind(this.g2d_currentController,mdf17));
				}
			}
			var _g = 0;
			var _g1 = this.g2d_numChildren;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_children[i].invalidateController();
			}
		}
	}
	,g2d_onModelChanged: null
	,get_onModelChanged: function() {
		return this.g2d_onModelChanged;
	}
	,g2d_dirty: null
	,setDirty: function() {
		this.g2d_dirty = true;
		if(this.g2d_parent != null) {
			this.g2d_parent.setDirty();
		}
	}
	,g2d_worldLeft: null
	,g2d_worldTop: null
	,g2d_worldRight: null
	,g2d_worldBottom: null
	,g2d_parent: null
	,get_parent: function() {
		return this.g2d_parent;
	}
	,g2d_numChildren: null
	,get_numChildren: function() {
		return this.g2d_numChildren;
	}
	,g2d_children: null
	,get_children: function() {
		return this.g2d_children;
	}
	,isParent: function(p_element) {
		if(p_element == this.g2d_parent) {
			return true;
		}
		if(this.g2d_parent == null) {
			return false;
		}
		return this.g2d_parent.isParent(p_element);
	}
	,addChild: function(p_child) {
		if(p_child.g2d_parent == this) {
			return;
		}
		if(this.g2d_children == null) {
			this.g2d_children = [];
		}
		if(p_child.g2d_parent != null) {
			p_child.g2d_parent.removeChild(p_child);
		}
		this.g2d_children.push(p_child);
		this.g2d_numChildren++;
		p_child.setRoot(this.g2d_root);
		p_child.g2d_parent = this;
		p_child.invalidateController();
		this.setDirty();
	}
	,addChildAt: function(p_child,p_index) {
		if(this.g2d_children == null) {
			this.g2d_children = [];
		}
		if(p_child.g2d_parent != null) {
			p_child.g2d_parent.removeChild(p_child);
		}
		this.g2d_children.splice(p_index,0,p_child);
		this.g2d_numChildren++;
		p_child.setRoot(this.g2d_root);
		p_child.g2d_parent = this;
		p_child.invalidateController();
		this.setDirty();
	}
	,setRoot: function(p_rootElement) {
		this.g2d_root = p_rootElement;
		var _g = 0;
		var _g1 = this.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			this.g2d_children[i].setRoot(p_rootElement);
		}
	}
	,removeChild: function(p_child) {
		if(p_child.g2d_parent != this) {
			return;
		}
		HxOverrides.remove(this.g2d_children,p_child);
		this.g2d_numChildren--;
		p_child.setRoot(null);
		p_child.g2d_parent = null;
		p_child.invalidateController();
		this.setDirty();
	}
	,getChildAt: function(p_index) {
		if(p_index >= 0 && p_index < this.g2d_numChildren) {
			return this.g2d_children[p_index];
		} else {
			return null;
		}
	}
	,getChildByName: function(p_name,p_recursive) {
		if(p_recursive == null) {
			p_recursive = false;
		}
		var split = null;
		if(p_name.indexOf("->") != -1) {
			split = p_name.split("->");
		}
		var _g = 0;
		var _g1 = this.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			if(this.g2d_children[i].name == (split == null ? p_name : split[0])) {
				if(split == null) {
					return this.g2d_children[i];
				} else {
					split.shift();
					return this.g2d_children[i].getChildByName(split.join("->"),p_recursive);
				}
			}
			if(p_recursive) {
				var childByName = this.g2d_children[i].getChildByName(p_name,true);
				if(childByName != null) {
					if(split == null) {
						return childByName;
					} else {
						split.shift();
						return childByName.getChildByName(split.join("->"),true);
					}
				}
			}
		}
		return null;
	}
	,getChildIndex: function(p_child) {
		return this.g2d_children.indexOf(p_child);
	}
	,setChildIndex: function(p_child,p_index) {
		if(p_child.g2d_parent == this) {
			HxOverrides.remove(this.g2d_children,p_child);
			this.g2d_children.splice(p_index,0,p_child);
		}
	}
	,calculateWidth: function() {
		if(this.g2d_dirty) {
			if(this.g2d_layout != null && this.g2d_layout.isCalculatingWidth()) {
				this.g2d_layout.calculateWidth(this);
			} else {
				this.g2d_minWidth = this.g2d_activeSkin != null ? this.g2d_activeSkin.getMinWidth() : 0;
				var _g = 0;
				var _g1 = this.g2d_numChildren;
				while(_g < _g1) {
					var i = _g++;
					this.g2d_children[i].calculateWidth();
				}
			}
		}
	}
	,invalidateWidth: function() {
		if(this.g2d_dirty) {
			if(this.g2d_parent != null) {
				if(this.g2d_parent.g2d_layout == null) {
					var worldAnchorLeft = this.g2d_parent.g2d_worldLeft + this.g2d_parent.g2d_finalWidth * this.g2d_anchorLeft;
					var worldAnchorRight = this.g2d_parent.g2d_worldLeft + this.g2d_parent.g2d_finalWidth * this.g2d_anchorRight;
					var w = this.g2d_preferredWidth > this.g2d_minWidth || !this.expand ? this.g2d_preferredWidth : this.g2d_minWidth;
					if(this.g2d_anchorLeft != this.g2d_anchorRight) {
						this.g2d_worldLeft = worldAnchorLeft + this.g2d_left;
						this.g2d_worldRight = worldAnchorRight - this.g2d_right;
					} else {
						this.g2d_worldLeft = worldAnchorLeft + this.g2d_anchorX - w * this.g2d_pivotX;
						this.g2d_worldRight = worldAnchorLeft + this.g2d_anchorX + w * (1 - this.g2d_pivotX);
					}
					this.g2d_finalWidth = this.g2d_worldRight - this.g2d_worldLeft;
				}
				if(this.g2d_layout != null) {
					this.g2d_layout.invalidateWidth(this);
				} else {
					var _g = 0;
					var _g1 = this.g2d_numChildren;
					while(_g < _g1) {
						var i = _g++;
						this.g2d_children[i].invalidateWidth();
					}
				}
			} else {
				this.g2d_finalWidth = this.g2d_worldRight - this.g2d_worldLeft;
				var _g2 = 0;
				var _g11 = this.g2d_numChildren;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.g2d_children[i1].invalidateWidth();
				}
			}
		}
	}
	,calculateHeight: function() {
		if(this.g2d_dirty) {
			if(this.g2d_layout != null) {
				this.g2d_layout.calculateHeight(this);
			} else {
				this.g2d_minHeight = this.g2d_activeSkin != null ? this.g2d_activeSkin.getMinHeight() : 0;
				var _g = 0;
				var _g1 = this.g2d_numChildren;
				while(_g < _g1) {
					var i = _g++;
					this.g2d_children[i].calculateHeight();
				}
			}
		}
	}
	,invalidateHeight: function() {
		if(this.g2d_dirty) {
			if(this.g2d_parent != null) {
				if(this.g2d_parent.g2d_layout == null || !this.g2d_parent.g2d_layout.isVerticalLayout()) {
					var worldAnchorTop = this.g2d_parent.g2d_worldTop + this.g2d_parent.g2d_finalHeight * this.g2d_anchorTop;
					var worldAnchorBottom = this.g2d_parent.g2d_worldTop + this.g2d_parent.g2d_finalHeight * this.g2d_anchorBottom;
					var h = this.g2d_preferredHeight > this.g2d_minHeight || !this.expand ? this.g2d_preferredHeight : this.g2d_minHeight;
					if(this.g2d_anchorTop != this.g2d_anchorBottom) {
						this.g2d_worldTop = worldAnchorTop + this.g2d_top;
						this.g2d_worldBottom = worldAnchorBottom - this.g2d_bottom;
					} else {
						this.g2d_worldTop = worldAnchorTop + this.g2d_anchorY - h * this.g2d_pivotY;
						this.g2d_worldBottom = worldAnchorTop + this.g2d_anchorY + h * (1 - this.g2d_pivotY);
					}
					this.g2d_finalHeight = this.g2d_worldBottom - this.g2d_worldTop;
				}
				if(this.g2d_layout != null) {
					this.g2d_layout.invalidateHeight(this);
				} else {
					var _g = 0;
					var _g1 = this.g2d_numChildren;
					while(_g < _g1) {
						var i = _g++;
						this.g2d_children[i].invalidateHeight();
					}
				}
			} else {
				var _g2 = 0;
				var _g11 = this.g2d_numChildren;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.g2d_children[i1].invalidateHeight();
				}
			}
		}
		if(this.g2d_onInvalidate != null) {
			this.g2d_onInvalidate.dispatch();
		}
	}
	,render: function(p_red,p_green,p_blue,p_alpha) {
		if(this.g2d_visible) {
			var worldRed = this.useWorldColor ? p_red * this.red : this.red;
			var worldGreen = this.useWorldColor ? p_green * this.green : this.green;
			var worldBlue = this.useWorldColor ? p_blue * this.blue : this.blue;
			var worldAlpha = this.useWorldAlpha ? p_alpha * this.alpha : this.alpha;
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
			var previousMask = context.getMaskRect();
			var camera = context.getActiveCamera();
			if(this.flushBatch || this.useMask) {
				com_genome2d_ui_skin_GUISkin.flushBatch();
				if(this.batchPriority != null) {
					com_genome2d_ui_skin_GUISkin.setBatchTexturePriority(this.batchPriority);
				}
			}
			if(this.useMask) {
				var w = (this.g2d_worldRight - this.g2d_worldLeft) * camera.scaleX;
				var h = (this.g2d_worldBottom - this.g2d_worldTop) * camera.scaleY;
				var maskRect = new com_genome2d_geom_GRectangle(this.g2d_worldLeft * camera.scaleX,this.g2d_worldTop * camera.scaleY,w,h);
				var intersection = previousMask == null ? maskRect : previousMask.intersection(maskRect);
				if(intersection.width < 1 || intersection.height < 1) {
					return;
				}
				context.setMaskRect(intersection);
			}
			if(this.g2d_activeSkin != null) {
				if(this.g2d_root.g2d_gui.enableBoundsCulling) {
					if(this.g2d_worldRight > this.g2d_root.g2d_gui.g2d_bounds.get_left() && this.g2d_worldBottom > this.g2d_root.g2d_gui.g2d_bounds.get_top() && this.g2d_worldLeft < this.g2d_root.g2d_gui.g2d_bounds.get_right() && this.g2d_worldTop < this.g2d_root.g2d_gui.g2d_bounds.get_bottom()) {
						this.g2d_activeSkin.render(this.g2d_worldLeft,this.g2d_worldTop,this.g2d_worldRight,this.g2d_worldBottom,worldRed,worldGreen,worldBlue,worldAlpha);
					}
				} else {
					this.g2d_activeSkin.render(this.g2d_worldLeft,this.g2d_worldTop,this.g2d_worldRight,this.g2d_worldBottom,worldRed,worldGreen,worldBlue,worldAlpha);
				}
			}
			var _g = 0;
			var _g1 = this.g2d_numChildren;
			while(_g < _g1) {
				var i = _g++;
				this.g2d_children[i].render(worldRed,worldGreen,worldBlue,worldAlpha);
			}
			if(this.useMask) {
				com_genome2d_ui_skin_GUISkin.flushBatch();
				context.setMaskRect(previousMask);
			}
		}
	}
	,disposeChildren: function() {
		while(this.g2d_numChildren > 0) this.g2d_children[this.g2d_numChildren - 1].dispose();
	}
	,dispose: function() {
		this.g2d_visible = this.mouseEnabled = this.mouseChildren = false;
		if(this.g2d_skinListenerAdded) {
			com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged.remove($bind(this,this.skinChanged_handler));
		}
		if(this.g2d_skin != null) {
			this.g2d_skin.remove();
		}
		this.g2d_skin = null;
		this.g2d_activeSkin = null;
		this.setDirty();
		if(this.g2d_parent != null) {
			this.g2d_parent.removeChild(this);
		}
	}
	,g2d_onInvalidate: null
	,get_onInvalidate: function() {
		if(this.g2d_onInvalidate == null) {
			this.g2d_onInvalidate = new com_genome2d_callbacks_GCallback0();
		}
		return this.g2d_onInvalidate;
	}
	,getNearestMouseEnabled: function() {
		if(!this.mouseEnabled && this.g2d_parent != null) {
			return this.g2d_parent.getNearestMouseEnabled();
		}
		return this;
	}
	,g2d_mouseOverFound: null
	,g2d_mouseOverElement: null
	,g2d_previousOverElement: null
	,isMouseOverElement: function(p_element) {
		return this.g2d_root.g2d_mouseOverElement == p_element;
	}
	,setMouseOverElement: function(p_element,p_input) {
		if(p_element != null) {
			p_element = p_element.getNearestMouseEnabled();
		}
		if(!this.g2d_root.g2d_mouseOverFound || this.g2d_root.g2d_mouseOverElement == null || !this.g2d_root.g2d_mouseOverElement.isParent(p_element)) {
			this.g2d_root.g2d_mouseOverElement = p_element;
		}
		this.g2d_root.g2d_mouseOverFound = true;
	}
	,g2d_mouseDownFound: null
	,g2d_mouseDownElement: null
	,isMouseDownElement: function(p_element) {
		return this.g2d_root.g2d_mouseDownElement == p_element;
	}
	,setMouseDownElement: function(p_element,p_input) {
		if(p_element != null) {
			p_element = p_element.getNearestMouseEnabled();
		}
		if(!this.g2d_root.g2d_mouseDownFound || this.g2d_root.g2d_mouseDownElement == null || !this.g2d_root.g2d_mouseDownElement.isParent(p_element)) {
			if(this.g2d_root.g2d_mouseDownElement != p_element) {
				this.g2d_root.g2d_mouseDownElement = p_element;
			}
		}
		this.g2d_root.g2d_mouseDownFound = true;
	}
	,g2d_mouseUpFound: null
	,g2d_mouseUpElement: null
	,setMouseUpElement: function(p_element,p_input) {
		if(p_element != null) {
			p_element = p_element.getNearestMouseEnabled();
		}
		if(!this.g2d_root.g2d_mouseUpFound || this.g2d_root.g2d_mouseUpElement == null || !this.g2d_root.g2d_mouseUpElement.isParent(p_element)) {
			this.g2d_root.g2d_mouseUpElement = p_element;
		}
		this.g2d_root.g2d_mouseUpFound = true;
	}
	,g2d_rightMouseDownFound: null
	,g2d_rightMouseDownElement: null
	,isRightMouseDownElement: function(p_element) {
		return this.g2d_root.g2d_rightMouseDownElement == p_element;
	}
	,setRightMouseDownElement: function(p_element,p_input) {
		if(p_element != null) {
			p_element = p_element.getNearestMouseEnabled();
		}
		if(!this.g2d_root.g2d_rightMouseDownFound || this.g2d_root.g2d_rightMouseDownElement == null || !this.g2d_root.g2d_rightMouseDownElement.isParent(p_element)) {
			if(this.g2d_root.g2d_rightMouseDownElement != p_element) {
				this.g2d_root.g2d_rightMouseDownElement = p_element;
			}
		}
		this.g2d_root.g2d_rightMouseDownFound = true;
	}
	,g2d_rightMouseUpFound: null
	,g2d_rightMouseUpElement: null
	,setRightMouseUpElement: function(p_element,p_input) {
		if(p_element != null) {
			p_element = p_element.getNearestMouseEnabled();
		}
		if(!this.g2d_root.g2d_rightMouseUpFound || this.g2d_root.g2d_rightMouseUpElement == null || !this.g2d_root.g2d_rightMouseUpElement.isParent(p_element)) {
			this.g2d_root.g2d_rightMouseUpElement = p_element;
		}
		this.g2d_root.g2d_rightMouseUpFound = true;
	}
	,captureMouseInput: function(p_input) {
		var captured = false;
		if(this.g2d_root == this) {
			switch(p_input.type) {
			case "mouseDown":
				this.g2d_mouseDownFound = false;
				break;
			case "mouseMove":case "mouseStill":
				this.g2d_mouseOverFound = false;
				break;
			case "mouseUp":
				this.g2d_mouseUpFound = false;
				break;
			case "rightMouseDown":
				this.g2d_rightMouseDownFound = false;
				break;
			case "rightMouseUp":
				this.g2d_rightMouseUpFound = false;
				break;
			}
		}
		if(this.g2d_visible) {
			if(this.mouseChildren) {
				if(!this.useMask || p_input.worldX > this.g2d_worldLeft && p_input.worldX < this.g2d_worldRight && p_input.worldY > this.g2d_worldTop && p_input.worldY < this.g2d_worldBottom) {
					var i = this.g2d_numChildren;
					while(i > 0) {
						--i;
						if(i < this.g2d_numChildren) {
							captured = captured || this.g2d_children[i].captureMouseInput(p_input);
						}
						if(this.mouseEnabled && captured) {
							p_input.captured = captured;
						}
					}
				}
			}
			if(!p_input.captured && p_input.worldX > this.g2d_worldLeft - this.mousePaddingLeft && p_input.worldX < this.g2d_worldRight + this.mousePaddingRight && p_input.worldY > this.g2d_worldTop - this.mousePaddingTop && p_input.worldY < this.g2d_worldBottom + this.mousePaddingBottom) {
				if(this.g2d_activeSkin != null) {
					p_input.localX = p_input.worldX - this.g2d_worldLeft;
					p_input.localY = p_input.worldY - this.g2d_worldTop;
					this.g2d_activeSkin.captureMouseInput(p_input);
					p_input.captured = this.mouseEnabled;
					captured = this.mouseEnabled;
					if(p_input.type == "mouseMove" || p_input.type == "mouseStill") {
						this.setMouseOverElement(this,p_input);
					} else if(p_input.type == "mouseDown") {
						this.setMouseDownElement(this,p_input);
					} else if(p_input.type == "mouseUp") {
						this.setMouseUpElement(this,p_input);
					} else if(p_input.type == "rightMouseDown") {
						this.setRightMouseDownElement(this,p_input);
					} else if(p_input.type == "rightMouseUp") {
						this.setRightMouseUpElement(this,p_input);
					} else {
						this.g2d_dispatchMouseCallback(p_input.type,this,this,p_input,false);
					}
				}
			}
		}
		if(this.g2d_root == this) {
			if(p_input.mouseOut) {
				this.g2d_root.g2d_mouseOverElement = null;
			}
			switch(p_input.type) {
			case "mouseDown":
				if(this.g2d_root.g2d_mouseDownElement != null) {
					this.g2d_root.g2d_mouseDownElement.g2d_dispatchMouseCallback("mouseDown",this.g2d_root.g2d_mouseDownElement,this.g2d_root.g2d_mouseDownElement,p_input,false);
				}
				break;
			case "mouseMove":case "mouseStill":
				if(this.g2d_root.g2d_mouseOverElement != null) {
					this.g2d_root.g2d_mouseOverElement.g2d_dispatchMouseCallback("mouseMove",this.g2d_root.g2d_mouseOverElement,this.g2d_root.g2d_mouseOverElement,p_input,false);
				}
				if(this.g2d_root.g2d_mouseOverElement != this.g2d_root.g2d_previousOverElement) {
					if(this.g2d_root.g2d_previousOverElement != null) {
						this.g2d_root.g2d_previousOverElement.g2d_dispatchMouseCallback("mouseOut",this.g2d_root.g2d_previousOverElement,this.g2d_root.g2d_previousOverElement,p_input,false);
					}
					this.g2d_root.g2d_previousOverElement = this.g2d_root.g2d_mouseOverElement;
					if(this.g2d_root.g2d_mouseOverElement != null) {
						this.g2d_root.g2d_mouseOverElement.g2d_dispatchMouseCallback("mouseOver",this.g2d_root.g2d_mouseOverElement,this.g2d_root.g2d_mouseOverElement,p_input,false);
					}
				} else if(this.g2d_root.g2d_previousOverElement != null && this.g2d_mouseOverFound == false) {
					this.g2d_root.g2d_mouseOverElement = null;
					this.g2d_root.g2d_previousOverElement.g2d_dispatchMouseCallback("mouseOut",this.g2d_root.g2d_previousOverElement,this.g2d_root.g2d_previousOverElement,p_input,false);
					this.g2d_root.g2d_previousOverElement = null;
				}
				break;
			case "mouseUp":
				if(this.g2d_root.g2d_mouseUpElement == null && this.g2d_root.g2d_mouseDownElement != null) {
					this.g2d_root.g2d_mouseDownElement.g2d_dispatchMouseCallback("mouseUp",this.g2d_root.g2d_mouseDownElement,this.g2d_root.g2d_mouseDownElement,p_input,false);
				} else if(this.g2d_root.g2d_mouseUpElement != null && this.g2d_root.g2d_mouseDownElement == this.g2d_root.g2d_mouseUpElement) {
					this.g2d_root.g2d_mouseDownElement.g2d_dispatchMouseCallback("mouseUp",this.g2d_root.g2d_mouseDownElement,this.g2d_root.g2d_mouseDownElement,p_input,false);
					this.g2d_root.g2d_mouseDownElement.g2d_dispatchMouseCallback("click",this.g2d_root.g2d_mouseDownElement,this.g2d_root.g2d_mouseDownElement,p_input,false);
				} else if(this.g2d_root.g2d_mouseUpElement != null) {
					this.g2d_root.g2d_mouseUpElement.g2d_dispatchMouseCallback("mouseUp",this.g2d_root.g2d_mouseUpElement,this.g2d_root.g2d_mouseUpElement,p_input,false);
				}
				this.g2d_root.g2d_mouseUpElement = this.g2d_root.g2d_mouseDownElement = null;
				break;
			case "rightMouseDown":
				if(this.g2d_root.g2d_rightMouseDownElement != null) {
					this.g2d_root.g2d_rightMouseDownElement.g2d_dispatchMouseCallback("rightMouseDown",this.g2d_root.g2d_rightMouseDownElement,this.g2d_root.g2d_rightMouseDownElement,p_input,false);
				}
				break;
			case "rightMouseUp":
				if(this.g2d_root.g2d_rightMouseUpElement == null && this.g2d_root.g2d_rightMouseDownElement != null) {
					this.g2d_root.g2d_rightMouseDownElement.g2d_dispatchMouseCallback("rightMouseUp",this.g2d_root.g2d_rightMouseDownElement,this.g2d_root.g2d_rightMouseDownElement,p_input,false);
				} else if(this.g2d_root.g2d_rightMouseUpElement != null && this.g2d_root.g2d_rightMouseDownElement == this.g2d_root.g2d_rightMouseUpElement) {
					this.g2d_root.g2d_rightMouseDownElement.g2d_dispatchMouseCallback("rightMouseUp",this.g2d_root.g2d_rightMouseDownElement,this.g2d_root.g2d_rightMouseDownElement,p_input,false);
					this.g2d_root.g2d_rightMouseDownElement.g2d_dispatchMouseCallback("rightClick",this.g2d_root.g2d_rightMouseDownElement,this.g2d_root.g2d_rightMouseDownElement,p_input,false);
				} else if(this.g2d_root.g2d_mouseUpElement != null) {
					this.g2d_root.g2d_rightMouseUpElement.g2d_dispatchMouseCallback("rightMouseUp",this.g2d_root.g2d_rightMouseUpElement,this.g2d_root.g2d_rightMouseUpElement,p_input,false);
				}
				this.g2d_root.g2d_rightMouseUpElement = this.g2d_root.g2d_rightMouseDownElement = null;
				break;
			}
		}
		return captured;
	}
	,g2d_lastClickTime: null
	,g2d_dispatchMouseCallback: function(p_type,p_target,p_dispatcher,p_input,p_bubbling) {
		if(this.isVisible() || p_type == "mouseOut") {
			var mouseInput = p_input.clone(this,p_target,p_type);
			switch(p_type) {
			case "click":
				if(this.mouseEnabled && (this.g2d_onMouseClick != null || this.g2d_onDoubleMouseClick != null)) {
					if(this.g2d_onMouseClick != null) {
						this.g2d_onMouseClick.dispatch(mouseInput);
					}
					if(this.g2d_lastClickTime > 0 && p_input.time - this.g2d_lastClickTime < com_genome2d_input_GMouseInput.DOUBLE_CLICK_TIME) {
						if(this.g2d_onDoubleMouseClick != null) {
							this.g2d_onDoubleMouseClick.dispatch(mouseInput);
						}
						this.g2d_lastClickTime = -1;
					} else {
						this.g2d_lastClickTime = p_input.time;
					}
				}
				break;
			case "mouseDown":
				if(this.mouseEnabled && this.g2d_onMouseDown != null) {
					this.g2d_onMouseDown.dispatch(mouseInput);
				}
				break;
			case "mouseMove":
				if(this.mouseEnabled && this.g2d_onMouseMove != null) {
					this.g2d_onMouseMove.dispatch(mouseInput);
				}
				break;
			case "mouseOut":
				if(this.mouseEnabled) {
					if(this.hasState("mouseOut")) {
						this.setState("mouseOut");
					}
					if(this.g2d_onMouseOut != null) {
						this.g2d_onMouseOut.dispatch(mouseInput);
					}
				}
				break;
			case "mouseOver":
				if(this.mouseEnabled) {
					if(this.hasState("mouseOver")) {
						this.setState("mouseOver");
					}
					if(this.g2d_onMouseOver != null) {
						this.g2d_onMouseOver.dispatch(mouseInput);
					}
				}
				break;
			case "mouseUp":
				if(this.mouseEnabled && this.g2d_onMouseUp != null) {
					this.g2d_onMouseUp.dispatch(mouseInput);
				}
				break;
			case "mouseWheel":
				if(this.mouseEnabled && this.g2d_onMouseWheel != null) {
					this.g2d_onMouseWheel.dispatch(mouseInput);
				}
				break;
			case "rightClick":
				if(this.mouseEnabled && this.g2d_onRightMouseClick != null) {
					if(this.g2d_onRightMouseClick != null) {
						this.g2d_onRightMouseClick.dispatch(mouseInput);
					}
				}
				break;
			case "rightMouseDown":
				if(this.mouseEnabled && this.g2d_onRightMouseDown != null) {
					this.g2d_onRightMouseDown.dispatch(mouseInput);
				}
				break;
			case "rightMouseUp":
				if(this.mouseEnabled && this.g2d_onRightMouseUp != null) {
					this.g2d_onRightMouseUp.dispatch(mouseInput);
				}
				break;
			}
		}
		if(this.g2d_parent != null) {
			this.g2d_parent.g2d_dispatchMouseCallback(p_type,this.mouseEnabled || p_target != this ? p_target : this.g2d_parent,p_dispatcher,p_input,true);
		}
	}
	,setState: function(p_stateName) {
		this.setPrototypeState(p_stateName);
		if(this.g2d_children != null) {
			var _g = 0;
			var _g1 = this.g2d_children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.setState(p_stateName);
			}
		}
		if(this.g2d_onStateChanged != null) {
			this.g2d_onStateChanged.dispatch(p_stateName);
		}
	}
	,getState: function() {
		return this.g2d_currentState;
	}
	,hasState: function(p_stateName) {
		if(this.g2d_prototypeStates == null) {
			return false;
		}
		var _this = this.g2d_prototypeStates.g2d_states;
		if(__map_reserved[p_stateName] != null) {
			return _this.existsReserved(p_stateName);
		} else {
			return _this.h.hasOwnProperty(p_stateName);
		}
	}
	,gotFocus: function() {
	}
	,lostFocus: function() {
	}
	,skinChanged_handler: function(p_skinId) {
		var tmp;
		if(this.g2d_skin != null) {
			var _this = this.g2d_skin;
			tmp = (_this.g2d_origin == null ? _this.g2d_id : _this.g2d_origin.g2d_id) == p_skinId;
		} else {
			tmp = false;
		}
		if(tmp) {
			var p_value = com_genome2d_ui_skin_GUISkinManager.getSkin(p_skinId);
			if(p_value == null || this.g2d_skin == null || p_value != this.g2d_skin) {
				if(this.g2d_skin != null) {
					this.g2d_skin.remove();
				}
				this.g2d_skin = p_value != null ? p_value.attach(this) : p_value;
				this.g2d_activeSkin = this.g2d_skin;
				this.setDirty();
				if(this.g2d_skin != null && !this.g2d_skinListenerAdded) {
					this.g2d_skinListenerAdded = true;
					com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged.addUnsafe($bind(this,this.skinChanged_handler));
				}
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		if(this.batchPriority != null && this.batchPriority.length > 0) {
			var textureIds = "@" + this.batchPriority[0].g2d_id;
			var _g = 1;
			var _g1 = this.batchPriority.length;
			while(_g < _g1) {
				var i = _g++;
				textureIds += ",@" + this.batchPriority[i].g2d_id;
			}
			p_prototype.createPrototypeProperty("batchPriority","String",4,null,textureIds);
		} else {
			p_prototype.createPrototypeProperty("batchPriority","String",4,null,"");
		}
		var _g2 = 0;
		var _g11 = this.g2d_numChildren;
		while(_g2 < _g11) {
			var i1 = _g2++;
			p_prototype.addChild(this.g2d_children[i1].getPrototype(),com_genome2d_ui_element_GUIElement.PROTOTYPE_DEFAULT_CHILD_GROUP);
		}
		return p_prototype;
	}
	,g2d_useCustomChildPrototypeBinding: null
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,com_genome2d_ui_element_GUIElement.PROTOTYPE_NAME);
		if(p_prototype.hasProperty("batchPriority")) {
			var textureString = p_prototype.getProperty("batchPriority").value;
			if(textureString != "") {
				var textureIds = textureString.split(",");
				this.flushBatch = true;
				this.batchPriority = [];
				var _g = 0;
				while(_g < textureIds.length) {
					var textureId = textureIds[_g];
					++_g;
					var texture = com_genome2d_textures_GTextureManager.getTexture(HxOverrides.substr(textureId,1,null));
					if(texture != null) {
						this.batchPriority.push(texture);
					}
				}
			} else {
				this.batchPriority = null;
			}
		}
		if(!this.g2d_useCustomChildPrototypeBinding) {
			var group = p_prototype.getGroup(com_genome2d_ui_element_GUIElement.PROTOTYPE_DEFAULT_CHILD_GROUP);
			if(group != null) {
				var _g1 = 0;
				while(_g1 < group.length) {
					var prototype = group[_g1];
					++_g1;
					var prototype1 = com_genome2d_proto_GPrototypeFactory.createInstance(prototype);
					if(((prototype1) instanceof com_genome2d_ui_element_GUIElement)) {
						this.addChild(prototype1);
					}
				}
			}
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"element");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"element");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,g2d_onMouseWheel: null
	,get_onMouseWheel: function() {
		if(this.g2d_onMouseWheel == null) {
			this.g2d_onMouseWheel = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseWheel;
	}
	,g2d_onDoubleMouseClick: null
	,get_onDoubleMouseClick: function() {
		if(this.g2d_onDoubleMouseClick == null) {
			this.g2d_onDoubleMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onDoubleMouseClick;
	}
	,g2d_onMouseDown: null
	,get_onMouseDown: function() {
		if(this.g2d_onMouseDown == null) {
			this.g2d_onMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseDown;
	}
	,g2d_onMouseUp: null
	,get_onMouseUp: function() {
		if(this.g2d_onMouseUp == null) {
			this.g2d_onMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseUp;
	}
	,g2d_onMouseMove: null
	,get_onMouseMove: function() {
		if(this.g2d_onMouseMove == null) {
			this.g2d_onMouseMove = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseMove;
	}
	,g2d_onMouseOver: null
	,get_onMouseOver: function() {
		if(this.g2d_onMouseOver == null) {
			this.g2d_onMouseOver = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseOver;
	}
	,g2d_onMouseOut: null
	,get_onMouseOut: function() {
		if(this.g2d_onMouseOut == null) {
			this.g2d_onMouseOut = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseOut;
	}
	,g2d_onRightMouseDown: null
	,get_onRightMouseDown: function() {
		if(this.g2d_onRightMouseDown == null) {
			this.g2d_onRightMouseDown = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseDown;
	}
	,g2d_onRightMouseUp: null
	,get_onRightMouseUp: function() {
		if(this.g2d_onRightMouseUp == null) {
			this.g2d_onRightMouseUp = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseUp;
	}
	,g2d_onMouseClick: null
	,get_onMouseClick: function() {
		if(this.g2d_onMouseClick == null) {
			this.g2d_onMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onMouseClick;
	}
	,g2d_onRightMouseClick: null
	,get_onRightMouseClick: function() {
		if(this.g2d_onRightMouseClick == null) {
			this.g2d_onRightMouseClick = new com_genome2d_callbacks_GCallback1(com_genome2d_input_GMouseInput);
		}
		return this.g2d_onRightMouseClick;
	}
	,__class__: com_genome2d_ui_element_GUIElement
	,__properties__: {get_onRightMouseClick:"get_onRightMouseClick",get_onMouseClick:"get_onMouseClick",get_onRightMouseUp:"get_onRightMouseUp",get_onRightMouseDown:"get_onRightMouseDown",get_onMouseOut:"get_onMouseOut",get_onMouseOver:"get_onMouseOver",get_onMouseMove:"get_onMouseMove",get_onMouseUp:"get_onMouseUp",get_onMouseDown:"get_onMouseDown",get_onDoubleMouseClick:"get_onDoubleMouseClick",get_onMouseWheel:"get_onMouseWheel",get_onInvalidate:"get_onInvalidate",get_children:"get_children",get_numChildren:"get_numChildren",get_parent:"get_parent",get_onModelChanged:"get_onModelChanged",get_root:"get_root",get_gui:"get_gui",set_mouseMove:"set_mouseMove",get_mouseMove:"get_mouseMove",set_mouseOut:"set_mouseOut",get_mouseOut:"get_mouseOut",set_mouseOver:"set_mouseOver",get_mouseOver:"get_mouseOver",set_rightMouseClick:"set_rightMouseClick",get_rightMouseClick:"get_rightMouseClick",set_mouseClick:"set_mouseClick",get_mouseClick:"get_mouseClick",set_mouseWheel:"set_mouseWheel",get_mouseWheel:"get_mouseWheel",set_rightMouseUp:"set_rightMouseUp",get_rightMouseUp:"get_rightMouseUp",set_mouseUp:"set_mouseUp",get_mouseUp:"get_mouseUp",set_rightMouseDown:"set_rightMouseDown",get_rightMouseDown:"get_rightMouseDown",set_mouseDown:"set_mouseDown",get_mouseDown:"get_mouseDown",set_preferredHeight:"set_preferredHeight",get_preferredHeight:"get_preferredHeight",set_preferredWidth:"set_preferredWidth",get_preferredWidth:"get_preferredWidth",set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_bottom:"set_bottom",get_bottom:"get_bottom",set_right:"set_right",get_right:"get_right",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left",set_anchorBottom:"set_anchorBottom",get_anchorBottom:"get_anchorBottom",set_anchorRight:"set_anchorRight",get_anchorRight:"get_anchorRight",set_anchorTop:"set_anchorTop",get_anchorTop:"get_anchorTop",set_anchorLeft:"set_anchorLeft",get_anchorLeft:"get_anchorLeft",set_anchorY:"set_anchorY",get_anchorY:"get_anchorY",set_anchorX:"set_anchorX",get_anchorX:"get_anchorX",set_skin:"set_skin",get_skin:"get_skin",set_layout:"set_layout",get_layout:"get_layout",set_model:"set_model",get_model:"get_model",set_pivotAlign:"set_pivotAlign",get_pivotAlign:"get_pivotAlign",set_anchorAlign:"set_anchorAlign",get_anchorAlign:"get_anchorAlign",set_visible:"set_visible",get_visible:"get_visible",get_onStateChanged:"get_onStateChanged",set_color:"set_color",get_color:"get_color"}
};
var com_genome2d_ui_element_GUIInputField = function(p_skin) {
	com_genome2d_ui_element_GUIElement.call(this,p_skin);
	(js_Boot.__cast(this.g2d_activeSkin , com_genome2d_ui_skin_GUIFontSkin)).g2d_textRenderer.enableCursor = true;
	if(com_genome2d_Genome2D.g2d_instance == null) {
		com_genome2d_Genome2D.g2d_instantiable = true;
		new com_genome2d_Genome2D();
		com_genome2d_Genome2D.g2d_instantiable = false;
	}
	com_genome2d_Genome2D.g2d_instance.g2d_onKeyboardInput.add($bind(this,this.keyboardInput_handler));
};
$hxClasses["com.genome2d.ui.element.GUIInputField"] = com_genome2d_ui_element_GUIInputField;
com_genome2d_ui_element_GUIInputField.__name__ = "com.genome2d.ui.element.GUIInputField";
com_genome2d_ui_element_GUIInputField.__super__ = com_genome2d_ui_element_GUIElement;
com_genome2d_ui_element_GUIInputField.prototype = $extend(com_genome2d_ui_element_GUIElement.prototype,{
	keyboardInput_handler: function(input) {
		if(com_genome2d_input_GFocusManager.hasFocus(this) && input.type == "keyDown" && this.g2d_activeSkin != null) {
			var skin = this.g2d_activeSkin;
			switch(input.keyCode) {
			case 8:
				if(skin.g2d_textRenderer.cursorStartIndex != skin.g2d_textRenderer.cursorEndIndex) {
					var newValue = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex);
					newValue += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex,this.g2d_model.length);
					var p_value = newValue;
					if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
						p_value = com_genome2d_ui_element_GUIElement.setModelHook(p_value);
					}
					this.g2d_model = Std.string(p_value);
					this.g2d_onModelChanged.dispatch(this);
					var p_value1 = skin.g2d_textRenderer.cursorStartIndex;
					skin.g2d_textRenderer.cursorEndIndex = p_value1;
					var p_value2 = p_value1;
					skin.g2d_textRenderer.cursorStartIndex = p_value2;
				} else {
					var newValue1 = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex - 1);
					newValue1 += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex,this.g2d_model.length);
					var p_value3 = newValue1;
					if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
						p_value3 = com_genome2d_ui_element_GUIElement.setModelHook(p_value3);
					}
					this.g2d_model = Std.string(p_value3);
					this.g2d_onModelChanged.dispatch(this);
					var p_value4 = skin.g2d_textRenderer.cursorStartIndex > 0 ? skin.g2d_textRenderer.cursorStartIndex - 1 : 0;
					skin.g2d_textRenderer.cursorEndIndex = p_value4;
					var p_value5 = p_value4;
					skin.g2d_textRenderer.cursorStartIndex = p_value5;
				}
				break;
			case 16:
				break;
			case 37:
				if(skin.g2d_textRenderer.cursorStartIndex == skin.g2d_textRenderer.cursorEndIndex) {
					var p_value6 = skin.g2d_textRenderer.cursorStartIndex - 1;
					skin.g2d_textRenderer.cursorEndIndex = p_value6;
					var p_value7 = p_value6;
					skin.g2d_textRenderer.cursorStartIndex = p_value7;
				} else {
					var p_value8 = skin.g2d_textRenderer.cursorStartIndex;
					skin.g2d_textRenderer.cursorEndIndex = p_value8;
				}
				break;
			case 39:
				if(skin.g2d_textRenderer.cursorStartIndex == skin.g2d_textRenderer.cursorEndIndex) {
					var p_value9 = skin.g2d_textRenderer.cursorStartIndex + 1;
					skin.g2d_textRenderer.cursorEndIndex = p_value9;
					var p_value10 = p_value9;
					skin.g2d_textRenderer.cursorStartIndex = p_value10;
				} else {
					var p_value11 = skin.g2d_textRenderer.cursorEndIndex;
					skin.g2d_textRenderer.cursorStartIndex = p_value11;
				}
				break;
			case 46:
				if(skin.g2d_textRenderer.cursorStartIndex != skin.g2d_textRenderer.cursorEndIndex) {
					var newValue2 = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex);
					newValue2 += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex,this.g2d_model.length);
					var p_value12 = newValue2;
					if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
						p_value12 = com_genome2d_ui_element_GUIElement.setModelHook(p_value12);
					}
					this.g2d_model = Std.string(p_value12);
					this.g2d_onModelChanged.dispatch(this);
					var p_value13 = skin.g2d_textRenderer.cursorStartIndex;
					skin.g2d_textRenderer.cursorEndIndex = p_value13;
					var p_value14 = p_value13;
					skin.g2d_textRenderer.cursorStartIndex = p_value14;
				} else {
					var newValue3 = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex);
					newValue3 += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex + 1,this.g2d_model.length);
					var p_value15 = newValue3;
					if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
						p_value15 = com_genome2d_ui_element_GUIElement.setModelHook(p_value15);
					}
					this.g2d_model = Std.string(p_value15);
					this.g2d_onModelChanged.dispatch(this);
				}
				break;
			case 1315251:
				var newValue4 = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex);
				var code = input.charCode;
				newValue4 += String.fromCodePoint(code);
				newValue4 += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex,this.g2d_model.length);
				var p_value16 = newValue4;
				if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
					p_value16 = com_genome2d_ui_element_GUIElement.setModelHook(p_value16);
				}
				this.g2d_model = Std.string(p_value16);
				this.g2d_onModelChanged.dispatch(this);
				break;
			default:
				if(input.charCode != 0) {
					var newValue5 = this.g2d_model.substring(0,skin.g2d_textRenderer.cursorStartIndex);
					var code1 = input.charCode;
					newValue5 += String.fromCodePoint(code1);
					newValue5 += this.g2d_model.substring(skin.g2d_textRenderer.cursorEndIndex,this.g2d_model.length);
					var p_value17 = newValue5;
					if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
						p_value17 = com_genome2d_ui_element_GUIElement.setModelHook(p_value17);
					}
					this.g2d_model = Std.string(p_value17);
					this.g2d_onModelChanged.dispatch(this);
					var p_value18 = skin.g2d_textRenderer.cursorStartIndex + 1;
					skin.g2d_textRenderer.cursorEndIndex = p_value18;
					var p_value19 = p_value18;
					skin.g2d_textRenderer.cursorStartIndex = p_value19;
				}
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GUIInputField");
		return com_genome2d_ui_element_GUIElement.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_ui_element_GUIElement.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GUIInputField");
	}
	,__class__: com_genome2d_ui_element_GUIInputField
});
var com_genome2d_ui_layout_GUILayoutType = $hxEnums["com.genome2d.ui.layout.GUILayoutType"] = { __ename__ : "com.genome2d.ui.layout.GUILayoutType", __constructs__ : ["VERTICAL","HORIZONTAL","GRID_VERTICAL","GRID_HORIZONTAL"]
	,VERTICAL: {_hx_index:0,__enum__:"com.genome2d.ui.layout.GUILayoutType",toString:$estr}
	,HORIZONTAL: {_hx_index:1,__enum__:"com.genome2d.ui.layout.GUILayoutType",toString:$estr}
	,GRID_VERTICAL: {_hx_index:2,__enum__:"com.genome2d.ui.layout.GUILayoutType",toString:$estr}
	,GRID_HORIZONTAL: {_hx_index:3,__enum__:"com.genome2d.ui.layout.GUILayoutType",toString:$estr}
};
com_genome2d_ui_layout_GUILayoutType.__empty_constructs__ = [com_genome2d_ui_layout_GUILayoutType.VERTICAL,com_genome2d_ui_layout_GUILayoutType.HORIZONTAL,com_genome2d_ui_layout_GUILayoutType.GRID_VERTICAL,com_genome2d_ui_layout_GUILayoutType.GRID_HORIZONTAL];
var com_genome2d_ui_layout_GUILayout = function() {
	this.g2d_currentState = "default";
	this.type = com_genome2d_ui_layout_GUILayoutType.HORIZONTAL;
};
$hxClasses["com.genome2d.ui.layout.GUILayout"] = com_genome2d_ui_layout_GUILayout;
com_genome2d_ui_layout_GUILayout.__name__ = "com.genome2d.ui.layout.GUILayout";
com_genome2d_ui_layout_GUILayout.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_ui_layout_GUILayout.prototype = {
	type: null
	,isCalculatingWidth: function() {
		return true;
	}
	,calculateWidth: function(p_element) {
	}
	,invalidateWidth: function(p_element) {
	}
	,isCalculatingHeight: function() {
		return true;
	}
	,calculateHeight: function(p_element) {
	}
	,invalidateHeight: function(p_element) {
	}
	,isHorizontalLayout: function() {
		return this.type == com_genome2d_ui_layout_GUILayoutType.HORIZONTAL;
	}
	,isVerticalLayout: function() {
		return this.type == com_genome2d_ui_layout_GUILayoutType.VERTICAL;
	}
	,toReference: function() {
		return null;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"layout");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"layout");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_ui_layout_GUILayout
};
var com_genome2d_ui_layout_GUIHorizontalLayout = function() {
	this.skipLastGap = false;
	this.useChildrenHeight = false;
	this.gap = 0;
	com_genome2d_ui_layout_GUILayout.call(this);
	this.type = com_genome2d_ui_layout_GUILayoutType.HORIZONTAL;
};
$hxClasses["com.genome2d.ui.layout.GUIHorizontalLayout"] = com_genome2d_ui_layout_GUIHorizontalLayout;
com_genome2d_ui_layout_GUIHorizontalLayout.__name__ = "com.genome2d.ui.layout.GUIHorizontalLayout";
com_genome2d_ui_layout_GUIHorizontalLayout.__super__ = com_genome2d_ui_layout_GUILayout;
com_genome2d_ui_layout_GUIHorizontalLayout.prototype = $extend(com_genome2d_ui_layout_GUILayout.prototype,{
	gap: null
	,useChildrenHeight: null
	,skipLastGap: null
	,calculateWidth: function(p_element) {
		p_element.g2d_preferredWidth = p_element.g2d_minWidth = 0;
		var layoutGap = this.gap;
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.calculateWidth();
			if(this.skipLastGap == true && i >= p_element.g2d_numChildren - 1) {
				layoutGap = 0;
			}
			p_element.g2d_minWidth += child.g2d_minWidth + layoutGap;
			p_element.g2d_preferredWidth += (child.g2d_preferredWidth > child.g2d_minWidth ? child.g2d_preferredWidth : child.g2d_minWidth) + layoutGap;
		}
	}
	,invalidateWidth: function(p_element) {
		var offsetX = 0;
		var rest = p_element.g2d_finalWidth - p_element.g2d_minWidth;
		if(rest < 0) {
			rest = 0;
		}
		var layoutGap = this.gap;
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.g2d_worldLeft = p_element.g2d_worldLeft + offsetX;
			var childDif = child.g2d_preferredWidth > child.g2d_minWidth ? child.g2d_preferredWidth - child.g2d_minWidth : 0;
			childDif = rest < childDif ? rest : childDif;
			rest -= childDif;
			child.g2d_worldRight = child.g2d_worldLeft + child.g2d_minWidth + childDif;
			child.g2d_finalWidth = child.g2d_worldRight - child.g2d_worldLeft;
			if(this.skipLastGap == true && i >= p_element.g2d_numChildren - 1) {
				layoutGap = 0;
			}
			offsetX += child.g2d_finalWidth + layoutGap;
			child.invalidateWidth();
		}
	}
	,calculateHeight: function(p_element) {
		p_element.g2d_preferredHeight = p_element.g2d_minHeight = 0;
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.calculateHeight();
			p_element.g2d_minHeight = p_element.g2d_minHeight < child.g2d_minHeight ? child.g2d_minHeight : p_element.g2d_minHeight;
			if(this.useChildrenHeight == true) {
				p_element.g2d_preferredHeight = p_element.g2d_preferredHeight < child.g2d_preferredHeight ? child.g2d_preferredHeight : p_element.g2d_preferredHeight;
			}
		}
	}
	,invalidateHeight: function(p_element) {
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.invalidateHeight();
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"horizontal");
		return com_genome2d_ui_layout_GUILayout.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_ui_layout_GUILayout.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"horizontal");
	}
	,__class__: com_genome2d_ui_layout_GUIHorizontalLayout
});
var com_genome2d_ui_layout_GUIVerticalLayout = function() {
	this.gap = 0;
	com_genome2d_ui_layout_GUILayout.call(this);
	this.type = com_genome2d_ui_layout_GUILayoutType.VERTICAL;
};
$hxClasses["com.genome2d.ui.layout.GUIVerticalLayout"] = com_genome2d_ui_layout_GUIVerticalLayout;
com_genome2d_ui_layout_GUIVerticalLayout.__name__ = "com.genome2d.ui.layout.GUIVerticalLayout";
com_genome2d_ui_layout_GUIVerticalLayout.__super__ = com_genome2d_ui_layout_GUILayout;
com_genome2d_ui_layout_GUIVerticalLayout.prototype = $extend(com_genome2d_ui_layout_GUILayout.prototype,{
	gap: null
	,calculateWidth: function(p_element) {
		p_element.g2d_preferredWidth = p_element.g2d_minWidth = 0;
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.calculateWidth();
			p_element.g2d_minWidth = p_element.g2d_minWidth < child.g2d_minWidth ? child.g2d_minWidth : p_element.g2d_minWidth;
			p_element.g2d_preferredWidth = p_element.g2d_preferredWidth < child.g2d_preferredWidth ? child.g2d_preferredWidth : p_element.g2d_preferredWidth;
		}
	}
	,invalidateWidth: function(p_element) {
		var rest = p_element.g2d_finalWidth - p_element.g2d_minWidth;
		if(rest < 0) {
			rest = 0;
		}
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.g2d_worldLeft = p_element.g2d_worldLeft;
			child.g2d_worldRight = child.g2d_worldLeft + p_element.g2d_finalWidth;
			child.g2d_finalWidth = p_element.g2d_finalWidth;
			child.invalidateWidth();
		}
	}
	,calculateHeight: function(p_element) {
		p_element.g2d_preferredHeight = p_element.g2d_minHeight = 0;
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.calculateHeight();
			p_element.g2d_minHeight += child.g2d_minHeight + this.gap;
			p_element.g2d_preferredHeight += child.g2d_preferredHeight + this.gap;
		}
	}
	,invalidateHeight: function(p_element) {
		var offsetY = 0;
		var rest = p_element.g2d_finalHeight - p_element.g2d_minHeight;
		if(rest < 0) {
			rest = 0;
		}
		var _g = 0;
		var _g1 = p_element.g2d_numChildren;
		while(_g < _g1) {
			var i = _g++;
			var child = p_element.g2d_children[i];
			child.g2d_worldTop = p_element.g2d_worldTop + offsetY;
			var childDif = child.g2d_preferredHeight > child.g2d_minHeight ? child.g2d_preferredHeight - child.g2d_minHeight : 0;
			childDif = rest < childDif ? rest : childDif;
			rest -= childDif;
			child.g2d_worldBottom = child.g2d_worldTop + child.g2d_minHeight + childDif;
			child.g2d_finalHeight = child.g2d_worldBottom - child.g2d_worldTop;
			offsetY += child.g2d_finalHeight + this.gap;
			child.invalidateHeight();
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"vertical");
		return com_genome2d_ui_layout_GUILayout.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_ui_layout_GUILayout.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"vertical");
	}
	,__class__: com_genome2d_ui_layout_GUIVerticalLayout
});
var com_genome2d_ui_skin_GUISkin = function(p_id,p_origin) {
	if(p_id == null) {
		p_id = "";
	}
	this.g2d_currentState = "default";
	this.alpha = 1;
	this.blue = 1;
	this.green = 1;
	this.red = 1;
	this.forcePixelAccuracy = true;
	this.blendMode = com_genome2d_context_GBlendMode.NORMAL;
	this.g2d_origin = p_origin;
	if(this.g2d_origin == null) {
		this.g2d_clones = [];
		if(p_id != "") {
			this.g2d_id = p_id;
			com_genome2d_ui_skin_GUISkinManager.g2d_addSkin(this.g2d_id,this);
		}
	}
};
$hxClasses["com.genome2d.ui.skin.GUISkin"] = com_genome2d_ui_skin_GUISkin;
com_genome2d_ui_skin_GUISkin.__name__ = "com.genome2d.ui.skin.GUISkin";
com_genome2d_ui_skin_GUISkin.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_ui_skin_GUISkin.g2d_batchQueue = null;
com_genome2d_ui_skin_GUISkin.g2d_texturePriorities = null;
com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex = null;
com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = null;
com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture = null;
com_genome2d_ui_skin_GUISkin.g2d_currentBatchFilter = null;
com_genome2d_ui_skin_GUISkin.g2d_currentBlendMode = null;
com_genome2d_ui_skin_GUISkin.batchRender = function(p_skin) {
	var batched = false;
	if(p_skin.getTexture() != null) {
		if(com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture != null && p_skin.getTexture().g2d_nativeTexture != com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture.g2d_nativeTexture || com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture != null && !p_skin.getTexture().hasSameGPUTexture(com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture) && p_skin.getFilter() == com_genome2d_ui_skin_GUISkin.g2d_currentBatchFilter && p_skin.blendMode == com_genome2d_ui_skin_GUISkin.g2d_currentBlendMode) {
			com_genome2d_ui_skin_GUISkin.g2d_batchQueue.push(p_skin);
			batched = true;
		} else if(com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture == null && p_skin.getTexture() != null) {
			com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture = p_skin.getTexture();
			com_genome2d_ui_skin_GUISkin.g2d_currentBatchFilter = p_skin.getFilter();
			com_genome2d_ui_skin_GUISkin.g2d_currentBlendMode = p_skin.blendMode;
		}
	}
	return batched;
};
com_genome2d_ui_skin_GUISkin.flushBatch = function() {
	if(com_genome2d_ui_skin_GUISkin.useBatch) {
		com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture = null;
		com_genome2d_ui_skin_GUISkin.g2d_currentBatchFilter = null;
		var queueLength = com_genome2d_ui_skin_GUISkin.g2d_batchQueue.length;
		var _g = 0;
		var _g1 = queueLength;
		while(_g < _g1) {
			var i = _g++;
			var _this = com_genome2d_ui_skin_GUISkin.g2d_batchQueue.shift();
			_this.render(_this.g2d_renderLeft,_this.g2d_renderTop,_this.g2d_renderRight,_this.g2d_renderBottom,_this.g2d_renderRed,_this.g2d_renderGreen,_this.g2d_renderBlue,_this.g2d_renderAlpha);
		}
		if(com_genome2d_ui_skin_GUISkin.g2d_batchQueue.length > 0) {
			if(com_genome2d_ui_skin_GUISkin.g2d_texturePriorities != null && com_genome2d_ui_skin_GUISkin.g2d_texturePriorities.length > ++com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex) {
				com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = com_genome2d_ui_skin_GUISkin.g2d_texturePriorities[com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex];
			} else {
				com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = null;
			}
			com_genome2d_ui_skin_GUISkin.flushBatch();
		} else {
			com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex = 0;
			if(com_genome2d_ui_skin_GUISkin.g2d_texturePriorities != null && com_genome2d_ui_skin_GUISkin.g2d_texturePriorities.length > 0) {
				com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = com_genome2d_ui_skin_GUISkin.g2d_texturePriorities[com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex];
			} else {
				com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = null;
			}
		}
		com_genome2d_ui_skin_GUISkin.g2d_currentBatchTexture = null;
		com_genome2d_ui_skin_GUISkin.g2d_currentBatchFilter = null;
	}
};
com_genome2d_ui_skin_GUISkin.setBatchTexturePriority = function(p_flushPriority) {
	com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex = 0;
	com_genome2d_ui_skin_GUISkin.g2d_texturePriorities = p_flushPriority.slice();
	if(com_genome2d_ui_skin_GUISkin.g2d_texturePriorities != null && com_genome2d_ui_skin_GUISkin.g2d_texturePriorities.length > 0) {
		com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = com_genome2d_ui_skin_GUISkin.g2d_texturePriorities[com_genome2d_ui_skin_GUISkin.g2d_currentPriorityIndex];
	} else {
		com_genome2d_ui_skin_GUISkin.g2d_currentPriorityTexture = null;
	}
};
com_genome2d_ui_skin_GUISkin.fromReference = function(p_reference) {
	var skin = com_genome2d_ui_skin_GUISkinManager.getSkin(HxOverrides.substr(p_reference,1,null));
	if(skin == null) {
		var p_arg1 = "Invalid skin reference";
		var p_arg2 = p_reference;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/ui/skin/GUISkin.hx", lineNumber : 246, className : "com.genome2d.ui.skin.GUISkin", methodName : "fromReference"};
		if(com_genome2d_debug_GDebug.showPriority <= 4) {
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(4,pos,args);
			}
			var msg = "WARNING: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
		}
	}
	return skin;
};
com_genome2d_ui_skin_GUISkin.prototype = {
	g2d_id: null
	,get_id: function() {
		if(this.g2d_origin == null) {
			return this.g2d_id;
		} else {
			return this.g2d_origin.g2d_id;
		}
	}
	,g2d_clones: null
	,g2d_origin: null
	,g2d_element: null
	,forcePixelAccuracy: null
	,red: null
	,green: null
	,blue: null
	,blendMode: null
	,get_color: function() {
		var color = 0;
		color += (this.red * 255 | 0) << 16;
		color += (this.green * 255 | 0) << 8;
		color += this.blue * 255 | 0;
		return color;
	}
	,set_color: function(p_value) {
		this.red = (p_value >> 16 & 255 | 0) / 255;
		this.green = (p_value >> 8 & 255 | 0) / 255;
		this.blue = (p_value & 255 | 0) / 255;
		return p_value;
	}
	,alpha: null
	,getMinWidth: function() {
		return 0;
	}
	,getMinHeight: function() {
		return 0;
	}
	,g2d_renderLeft: null
	,g2d_renderTop: null
	,g2d_renderRight: null
	,g2d_renderBottom: null
	,g2d_renderRed: null
	,g2d_renderGreen: null
	,g2d_renderBlue: null
	,g2d_renderAlpha: null
	,render: function(p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha) {
		this.g2d_renderLeft = p_left;
		this.g2d_renderTop = p_top;
		this.g2d_renderRight = p_right;
		this.g2d_renderBottom = p_bottom;
		this.g2d_renderRed = p_red;
		this.g2d_renderGreen = p_green;
		this.g2d_renderBlue = p_blue;
		this.g2d_renderAlpha = p_alpha;
		if(com_genome2d_ui_skin_GUISkin.useBatch) {
			return !com_genome2d_ui_skin_GUISkin.batchRender(this);
		} else {
			return true;
		}
	}
	,flushRender: function() {
		this.render(this.g2d_renderLeft,this.g2d_renderTop,this.g2d_renderRight,this.g2d_renderBottom,this.g2d_renderRed,this.g2d_renderGreen,this.g2d_renderBlue,this.g2d_renderAlpha);
	}
	,getTexture: function() {
		return null;
	}
	,getFilter: function() {
		return null;
	}
	,attach: function(p_element) {
		var origin = this.g2d_origin == null ? this : this.g2d_origin;
		var clone = origin.clone();
		clone.g2d_element = p_element;
		clone.elementModelChanged_handler(p_element);
		p_element.g2d_onModelChanged.add($bind(clone,clone.elementModelChanged_handler));
		origin.g2d_clones.push(clone);
		return clone;
	}
	,remove: function() {
		if(this.g2d_origin != null) {
			HxOverrides.remove(this.g2d_origin.g2d_clones,this);
			if(this.g2d_element != null) {
				this.g2d_element.g2d_onModelChanged.remove($bind(this,this.elementModelChanged_handler));
				this.g2d_element = null;
			}
		}
	}
	,invalidateClones: function() {
	}
	,captureMouseInput: function(p_input) {
	}
	,elementModelChanged_handler: function(p_element) {
	}
	,clone: function() {
		return null;
	}
	,g2d_internalDispose: function() {
		if(this.g2d_origin == null) {
			while(this.g2d_clones.length > 0) this.g2d_clones[0].remove();
		} else {
			this.g2d_origin.dispose();
		}
	}
	,dispose: function() {
		this.g2d_internalDispose();
		if(this.g2d_origin == null && com_genome2d_ui_skin_GUISkinManager.getSkin(this.g2d_origin == null ? this.g2d_id : this.g2d_origin.g2d_id) != null) {
			com_genome2d_ui_skin_GUISkinManager.g2d_removeSkin(this.g2d_origin == null ? this.g2d_id : this.g2d_origin.g2d_id);
		}
	}
	,toReference: function() {
		return "@" + (this.g2d_origin == null ? this.g2d_id : this.g2d_origin.g2d_id);
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GUISkin");
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GUISkin");
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_ui_skin_GUISkin
	,__properties__: {set_color:"set_color",get_color:"get_color",get_id:"get_id"}
};
var com_genome2d_ui_skin_GUIFontSkin = function(p_id,p_font,p_fontScale,p_autoSize,p_origin) {
	if(p_autoSize == null) {
		p_autoSize = true;
	}
	if(p_fontScale == null) {
		p_fontScale = 1;
	}
	if(p_id == null) {
		p_id = "";
	}
	this.restrictedChars = ["0","1","2","3","4","5","6","7","8","9",".","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];
	this.inputEnabled = false;
	this.rotation = 0;
	com_genome2d_ui_skin_GUISkin.call(this,p_id,p_origin);
	this.g2d_textRenderer = new com_genome2d_text_GTextureTextRenderer();
	var _this = this.g2d_textRenderer;
	_this.g2d_autoSize = p_autoSize;
	_this.g2d_dirty = true;
	if(p_font != null) {
		var _this1 = this.g2d_textRenderer;
		_this1.g2d_textureFont = p_font;
		_this1.g2d_dirty = true;
	}
	var _this2 = this.g2d_textRenderer;
	_this2.g2d_fontScale = p_fontScale;
	_this2.g2d_dirty = true;
	var _this3 = this.g2d_textRenderer;
	_this3.g2d_autoSize = p_autoSize;
	_this3.g2d_dirty = true;
};
$hxClasses["com.genome2d.ui.skin.GUIFontSkin"] = com_genome2d_ui_skin_GUIFontSkin;
com_genome2d_ui_skin_GUIFontSkin.__name__ = "com.genome2d.ui.skin.GUIFontSkin";
com_genome2d_ui_skin_GUIFontSkin.__interfaces__ = [com_genome2d_input_IGFocusable];
com_genome2d_ui_skin_GUIFontSkin.__super__ = com_genome2d_ui_skin_GUISkin;
com_genome2d_ui_skin_GUIFontSkin.prototype = $extend(com_genome2d_ui_skin_GUISkin.prototype,{
	rotation: null
	,g2d_onEnter: null
	,onEnter: null
	,get_onEnter: function() {
		if(this.g2d_onEnter == null) {
			this.g2d_onEnter = new com_genome2d_callbacks_GCallback0();
		}
		return this.g2d_onEnter;
	}
	,get_wordWrap: function() {
		return this.g2d_textRenderer.g2d_wordWrap;
	}
	,set_wordWrap: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_wordWrap = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_vAlign: function() {
		return this.g2d_textRenderer.g2d_vAlign;
	}
	,set_vAlign: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_vAlign = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_hAlign: function() {
		return this.g2d_textRenderer.g2d_hAlign;
	}
	,set_hAlign: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_hAlign = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,format: null
	,get_text: function() {
		return this.g2d_textRenderer.g2d_text;
	}
	,set_text: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_text = p_value;
		_this.g2d_textLength = _this.g2d_text.length;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_autoSize: function() {
		return this.g2d_textRenderer.g2d_autoSize;
	}
	,set_autoSize: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_autoSize = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,g2d_textRenderer: null
	,get_textRenderer: function() {
		return this.g2d_textRenderer;
	}
	,get_fontScale: function() {
		return this.g2d_textRenderer.g2d_fontScale;
	}
	,set_fontScale: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_fontScale = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_lineSpace: function() {
		return this.g2d_textRenderer.g2d_lineSpace;
	}
	,set_lineSpace: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_lineSpace = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_font: function() {
		return this.g2d_textRenderer.g2d_textureFont;
	}
	,set_font: function(p_value) {
		var _this = this.g2d_textRenderer;
		_this.g2d_textureFont = p_value;
		_this.g2d_dirty = true;
		return p_value;
	}
	,get_cursorStartIndex: function() {
		return this.g2d_textRenderer.cursorStartIndex;
	}
	,set_cursorStartIndex: function(p_value) {
		this.g2d_textRenderer.cursorStartIndex = p_value;
		return p_value;
	}
	,get_cursorEndIndex: function() {
		return this.g2d_textRenderer.cursorEndIndex;
	}
	,set_cursorEndIndex: function(p_value) {
		this.g2d_textRenderer.cursorEndIndex = p_value;
		return p_value;
	}
	,get_pivotX: function() {
		return this.g2d_textRenderer.g2d_pivotX;
	}
	,set_pivotX: function(p_value) {
		this.g2d_textRenderer.g2d_pivotX = p_value;
		return p_value;
	}
	,get_pivotY: function() {
		return this.g2d_textRenderer.g2d_pivotY;
	}
	,set_pivotY: function(p_value) {
		this.g2d_textRenderer.g2d_pivotY = p_value;
		return p_value;
	}
	,inputEnabled: null
	,getTexture: function() {
		if(this.g2d_textRenderer != null && this.g2d_textRenderer.g2d_textureFont != null) {
			return this.g2d_textRenderer.g2d_textureFont.texture;
		} else {
			return null;
		}
	}
	,getMinWidth: function() {
		if(this.g2d_textRenderer.g2d_autoSize) {
			var _this = this.g2d_textRenderer;
			if(_this.g2d_autoSize && _this.g2d_dirty) {
				_this.invalidate();
			}
			return _this.g2d_width;
		} else {
			return 0;
		}
	}
	,getMinHeight: function() {
		if(this.g2d_textRenderer.g2d_autoSize) {
			var _this = this.g2d_textRenderer;
			if(_this.g2d_autoSize && _this.g2d_dirty) {
				_this.invalidate();
			}
			return _this.g2d_height;
		} else {
			return 0;
		}
	}
	,render: function(p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha) {
		this.g2d_textRenderer.format = this.format;
		this.g2d_textRenderer.blendMode = this.blendMode;
		if(this.forcePixelAccuracy) {
			p_left = Math.round(p_left);
			p_top = Math.round(p_top);
			p_right = Math.round(p_right);
			p_bottom = Math.round(p_bottom);
		}
		var rendered = false;
		if(com_genome2d_ui_skin_GUISkin.prototype.render.call(this,p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha)) {
			this.g2d_textRenderer.red = this.red * p_red;
			this.g2d_textRenderer.green = this.green * p_green;
			this.g2d_textRenderer.blue = this.blue * p_blue;
			this.g2d_textRenderer.alpha = this.alpha * p_alpha;
			var _this = this.g2d_textRenderer;
			var p_value = p_right - p_left;
			if(p_value != _this.g2d_width) {
				_this.g2d_width = p_value;
				_this.g2d_dirty = true;
			}
			var _this1 = this.g2d_textRenderer;
			var p_value1 = p_bottom - p_top;
			if(p_value1 != _this1.g2d_height) {
				_this1.g2d_height = p_value1;
				_this1.g2d_dirty = true;
			}
			this.g2d_textRenderer.render(p_left,p_top,1,1,this.rotation,1,1,1,1);
			rendered = true;
		}
		return rendered;
	}
	,elementModelChanged_handler: function(p_element) {
		var p_value = p_element.g2d_model != null ? p_element.g2d_model : "";
		var _this = this.g2d_textRenderer;
		_this.g2d_text = p_value;
		_this.g2d_textLength = _this.g2d_text.length;
		_this.g2d_dirty = true;
	}
	,clone: function() {
		var clone = new com_genome2d_ui_skin_GUIFontSkin("",this.g2d_textRenderer.g2d_textureFont,this.g2d_textRenderer.g2d_fontScale,this.g2d_textRenderer.g2d_autoSize,this.g2d_origin == null ? this : this.g2d_origin);
		clone.red = this.red;
		clone.green = this.green;
		clone.blue = this.blue;
		clone.alpha = this.alpha;
		var color = 0;
		color += (this.red * 255 | 0) << 16;
		color += (this.green * 255 | 0) << 8;
		var p_value = color += this.blue * 255 | 0;
		clone.red = (p_value >> 16 & 255 | 0) / 255;
		clone.green = (p_value >> 8 & 255 | 0) / 255;
		clone.blue = (p_value & 255 | 0) / 255;
		var p_value1 = this.g2d_textRenderer.g2d_vAlign;
		var _this = clone.g2d_textRenderer;
		_this.g2d_vAlign = p_value1;
		_this.g2d_dirty = true;
		var p_value2 = this.g2d_textRenderer.g2d_hAlign;
		var _this1 = clone.g2d_textRenderer;
		_this1.g2d_hAlign = p_value2;
		_this1.g2d_dirty = true;
		clone.rotation = this.rotation;
		var p_value3 = this.g2d_textRenderer.g2d_pivotX;
		clone.g2d_textRenderer.g2d_pivotX = p_value3;
		var p_value4 = this.g2d_textRenderer.g2d_pivotY;
		clone.g2d_textRenderer.g2d_pivotY = p_value4;
		clone.inputEnabled = this.inputEnabled;
		var p_value5 = this.g2d_textRenderer.g2d_wordWrap;
		var _this2 = clone.g2d_textRenderer;
		_this2.g2d_wordWrap = p_value5;
		_this2.g2d_dirty = true;
		clone.blendMode = this.blendMode;
		return clone;
	}
	,captureMouseInput: function(p_input) {
		if(this.inputEnabled && p_input.type == "mouseUp") {
			com_genome2d_input_GFocusManager.setFocus(this);
		}
		this.g2d_textRenderer.captureMouseInput(p_input);
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		if(this.g2d_origin == null) {
			if(p_prototype.getProperty("id").value != "") {
				this.g2d_id = p_prototype.getProperty("id").value;
				com_genome2d_ui_skin_GUISkinManager.g2d_addSkin(this.g2d_id,this);
			}
		}
	}
	,dispose: function() {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_onKeyboardInput.remove($bind(this,this.keyboard_handler));
		com_genome2d_ui_skin_GUISkin.prototype.dispose.call(this);
	}
	,restrictedChars: null
	,keyboard_handler: function(input) {
		if(!com_genome2d_input_GFocusManager.hasFocus(this) || input.type != "keyDown") {
			return;
		}
		switch(input.keyCode) {
		case 8:
			if(this.g2d_textRenderer.cursorStartIndex > 0) {
				var p_value = HxOverrides.substr(this.g2d_textRenderer.g2d_text,0,this.g2d_textRenderer.cursorStartIndex - 1) + HxOverrides.substr(this.g2d_textRenderer.g2d_text,this.g2d_textRenderer.cursorStartIndex,null);
				var _this = this.g2d_textRenderer;
				_this.g2d_text = p_value;
				_this.g2d_textLength = _this.g2d_text.length;
				_this.g2d_dirty = true;
				var p_value1 = this.g2d_textRenderer.cursorEndIndex - 1;
				this.g2d_textRenderer.cursorEndIndex = p_value1;
				var p_value2 = p_value1;
				this.g2d_textRenderer.cursorStartIndex = p_value2;
			}
			break;
		case 13:
			if(this.g2d_onEnter != null) {
				this.g2d_onEnter.dispatch();
			}
			break;
		case 37:
			var p_value3 = this.g2d_textRenderer.cursorEndIndex - 1;
			this.g2d_textRenderer.cursorEndIndex = p_value3;
			var p_value4 = p_value3;
			this.g2d_textRenderer.cursorStartIndex = p_value4;
			if(this.g2d_textRenderer.cursorStartIndex < 0) {
				this.g2d_textRenderer.cursorEndIndex = 0;
				var p_value5 = 0;
				this.g2d_textRenderer.cursorStartIndex = p_value5;
			}
			break;
		case 39:
			var p_value6 = this.g2d_textRenderer.cursorEndIndex + 1;
			this.g2d_textRenderer.cursorEndIndex = p_value6;
			var p_value7 = p_value6;
			this.g2d_textRenderer.cursorStartIndex = p_value7;
			if(this.g2d_textRenderer.cursorStartIndex > this.g2d_textRenderer.g2d_text.length) {
				var p_value8 = this.g2d_textRenderer.g2d_text.length;
				this.g2d_textRenderer.cursorEndIndex = p_value8;
				var p_value9 = p_value8;
				this.g2d_textRenderer.cursorStartIndex = p_value9;
			}
			break;
		case 46:
			if(this.g2d_textRenderer.cursorStartIndex < this.g2d_textRenderer.g2d_text.length) {
				var p_value10 = HxOverrides.substr(this.g2d_textRenderer.g2d_text,0,this.g2d_textRenderer.cursorStartIndex) + HxOverrides.substr(this.g2d_textRenderer.g2d_text,this.g2d_textRenderer.cursorStartIndex + 1,null);
				var _this1 = this.g2d_textRenderer;
				_this1.g2d_text = p_value10;
				_this1.g2d_textLength = _this1.g2d_text.length;
				_this1.g2d_dirty = true;
			}
			break;
		default:
			var code = input.charCode;
			var char = String.fromCodePoint(code);
			if(this.restrictedChars.indexOf(char) != -1) {
				var p_value11 = HxOverrides.substr(this.g2d_textRenderer.g2d_text,0,this.g2d_textRenderer.cursorStartIndex) + char + HxOverrides.substr(this.g2d_textRenderer.g2d_text,this.g2d_textRenderer.cursorStartIndex,null);
				var _this2 = this.g2d_textRenderer;
				_this2.g2d_text = p_value11;
				_this2.g2d_textLength = _this2.g2d_text.length;
				_this2.g2d_dirty = true;
				var p_value12 = this.g2d_textRenderer.cursorEndIndex + 1;
				this.g2d_textRenderer.cursorEndIndex = p_value12;
				var p_value13 = p_value12;
				this.g2d_textRenderer.cursorStartIndex = p_value13;
			}
		}
		var _this3 = this.g2d_element;
		var p_value14 = this.g2d_textRenderer.g2d_text;
		if(com_genome2d_ui_element_GUIElement.setModelHook != null) {
			p_value14 = com_genome2d_ui_element_GUIElement.setModelHook(p_value14);
		}
		_this3.g2d_model = Std.string(p_value14);
		_this3.g2d_onModelChanged.dispatch(_this3);
	}
	,gotFocus: function() {
		this.g2d_textRenderer.enableCursor = true;
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_onKeyboardInput.add($bind(this,this.keyboard_handler));
	}
	,lostFocus: function() {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_onKeyboardInput.remove($bind(this,this.keyboard_handler));
		this.g2d_textRenderer.enableCursor = false;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"fontSkin");
		return com_genome2d_ui_skin_GUISkin.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_ui_skin_GUISkin.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"fontSkin");
	}
	,__class__: com_genome2d_ui_skin_GUIFontSkin
	,__properties__: $extend(com_genome2d_ui_skin_GUISkin.prototype.__properties__,{set_pivotY:"set_pivotY",get_pivotY:"get_pivotY",set_pivotX:"set_pivotX",get_pivotX:"get_pivotX",set_cursorEndIndex:"set_cursorEndIndex",get_cursorEndIndex:"get_cursorEndIndex",set_cursorStartIndex:"set_cursorStartIndex",get_cursorStartIndex:"get_cursorStartIndex",set_font:"set_font",get_font:"get_font",set_lineSpace:"set_lineSpace",get_lineSpace:"get_lineSpace",set_fontScale:"set_fontScale",get_fontScale:"get_fontScale",get_textRenderer:"get_textRenderer",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_text:"set_text",get_text:"get_text",set_hAlign:"set_hAlign",get_hAlign:"get_hAlign",set_vAlign:"set_vAlign",get_vAlign:"get_vAlign",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",get_onEnter:"get_onEnter"})
});
var com_genome2d_ui_skin_GUIParticleSkin = function(p_id,p_particleSystem,p_origin) {
	if(p_id == null) {
		p_id = "";
	}
	com_genome2d_ui_skin_GUISkin.call(this,p_id,p_origin);
	this.particleSystem = p_particleSystem;
	if(this.g2d_origin == null) {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_onUpdate.add($bind(this,this.update_handler));
	}
};
$hxClasses["com.genome2d.ui.skin.GUIParticleSkin"] = com_genome2d_ui_skin_GUIParticleSkin;
com_genome2d_ui_skin_GUIParticleSkin.__name__ = "com.genome2d.ui.skin.GUIParticleSkin";
com_genome2d_ui_skin_GUIParticleSkin.__super__ = com_genome2d_ui_skin_GUISkin;
com_genome2d_ui_skin_GUIParticleSkin.prototype = $extend(com_genome2d_ui_skin_GUISkin.prototype,{
	particleSystem: null
	,getMinWidth: function() {
		return 0;
	}
	,getMinHeight: function() {
		return 0;
	}
	,render: function(p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha) {
		this.particleSystem.x = p_left + (p_right - p_left) / 2;
		this.particleSystem.y = p_top + (p_bottom - p_top) / 2;
		var rendered = false;
		if(com_genome2d_ui_skin_GUISkin.prototype.render.call(this,p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha)) {
			var tmp = this.particleSystem;
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			tmp.render(com_genome2d_Genome2D.g2d_instance.g2d_context);
			rendered = true;
		}
		return rendered;
	}
	,update_handler: function(p_deltaTime) {
		this.particleSystem.update(p_deltaTime);
	}
	,clone: function() {
		var clone = new com_genome2d_ui_skin_GUIParticleSkin("",this.particleSystem,this.g2d_origin == null ? this : this.g2d_origin);
		clone.red = this.red;
		clone.green = this.green;
		clone.blue = this.blue;
		clone.alpha = this.alpha;
		return clone;
	}
	,dispose: function() {
		if(this.g2d_origin == null) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			com_genome2d_Genome2D.g2d_instance.g2d_onUpdate.remove($bind(this,this.update_handler));
		}
		com_genome2d_ui_skin_GUISkin.prototype.dispose.call(this);
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GUIParticleSkin");
		return com_genome2d_ui_skin_GUISkin.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_ui_skin_GUISkin.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GUIParticleSkin");
	}
	,__class__: com_genome2d_ui_skin_GUIParticleSkin
});
var com_genome2d_ui_skin_GUIShapeSkin = function(p_id,p_texture,p_vertices,p_uvs,p_origin) {
	if(p_id == null) {
		p_id = "";
	}
	this.rotation = 0;
	com_genome2d_ui_skin_GUISkin.call(this,p_id,p_origin);
	this.texture = p_texture;
	this.g2d_vertices = p_vertices;
	this.g2d_uvs = p_uvs;
};
$hxClasses["com.genome2d.ui.skin.GUIShapeSkin"] = com_genome2d_ui_skin_GUIShapeSkin;
com_genome2d_ui_skin_GUIShapeSkin.__name__ = "com.genome2d.ui.skin.GUIShapeSkin";
com_genome2d_ui_skin_GUIShapeSkin.__super__ = com_genome2d_ui_skin_GUISkin;
com_genome2d_ui_skin_GUIShapeSkin.prototype = $extend(com_genome2d_ui_skin_GUISkin.prototype,{
	texture: null
	,rotation: null
	,g2d_vertices: null
	,g2d_uvs: null
	,getMinWidth: function() {
		return 0;
	}
	,getMinHeight: function() {
		return 0;
	}
	,render: function(p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha) {
		if(com_genome2d_Genome2D.g2d_instance == null) {
			com_genome2d_Genome2D.g2d_instantiable = true;
			new com_genome2d_Genome2D();
			com_genome2d_Genome2D.g2d_instantiable = false;
		}
		com_genome2d_Genome2D.g2d_instance.g2d_context.drawPoly(this.texture,this.blendMode,this.g2d_vertices,this.g2d_uvs,p_left,p_top,1,1,this.rotation,this.red,this.green,this.blue,this.alpha,null);
		return true;
	}
	,clone: function() {
		var clone = new com_genome2d_ui_skin_GUIShapeSkin("",this.texture,this.g2d_vertices,this.g2d_uvs,this.g2d_origin == null ? this : this.g2d_origin);
		clone.red = this.red;
		clone.green = this.green;
		clone.blue = this.blue;
		clone.alpha = this.alpha;
		clone.blendMode = this.blendMode;
		clone.rotation = this.rotation;
		return clone;
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GUIShapeSkin");
		return com_genome2d_ui_skin_GUISkin.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_ui_skin_GUISkin.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GUIShapeSkin");
	}
	,__class__: com_genome2d_ui_skin_GUIShapeSkin
});
var com_genome2d_ui_skin_GUISkinManager = function() { };
$hxClasses["com.genome2d.ui.skin.GUISkinManager"] = com_genome2d_ui_skin_GUISkinManager;
com_genome2d_ui_skin_GUISkinManager.__name__ = "com.genome2d.ui.skin.GUISkinManager";
com_genome2d_ui_skin_GUISkinManager.__properties__ = {get_onSkinChanged:"get_onSkinChanged"};
com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged = null;
com_genome2d_ui_skin_GUISkinManager.get_onSkinChanged = function() {
	return com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged;
};
com_genome2d_ui_skin_GUISkinManager.init = function() {
	com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged = new com_genome2d_callbacks_GCallback1(String);
	com_genome2d_ui_skin_GUISkin.g2d_batchQueue = [];
	com_genome2d_ui_skin_GUISkinManager.g2d_skins = new haxe_ds_StringMap();
};
com_genome2d_ui_skin_GUISkinManager.g2d_skins = null;
com_genome2d_ui_skin_GUISkinManager.getSkin = function(p_id) {
	var _this = com_genome2d_ui_skin_GUISkinManager.g2d_skins;
	return __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
};
com_genome2d_ui_skin_GUISkinManager.g2d_addSkin = function(p_id,p_value) {
	var _this = com_genome2d_ui_skin_GUISkinManager.g2d_skins;
	var oldSkin = __map_reserved[p_id] != null ? _this.getReserved(p_id) : _this.h[p_id];
	var _this1 = com_genome2d_ui_skin_GUISkinManager.g2d_skins;
	if(__map_reserved[p_id] != null) {
		_this1.setReserved(p_id,p_value);
	} else {
		_this1.h[p_id] = p_value;
	}
	if(oldSkin != null) {
		com_genome2d_ui_skin_GUISkinManager.g2d_onSkinChanged.dispatch(p_id);
		oldSkin.g2d_internalDispose();
	}
};
com_genome2d_ui_skin_GUISkinManager.g2d_removeSkin = function(p_id) {
	com_genome2d_ui_skin_GUISkinManager.g2d_skins.remove(p_id);
};
com_genome2d_ui_skin_GUISkinManager.getAllSkins = function() {
	return com_genome2d_ui_skin_GUISkinManager.g2d_skins;
};
com_genome2d_ui_skin_GUISkinManager.disposeAll = function() {
	var _this = com_genome2d_ui_skin_GUISkinManager.g2d_skins;
	var skin = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(skin.hasNext()) {
		var skin1 = skin.next();
		if((skin1.g2d_origin == null ? skin1.g2d_id : skin1.g2d_origin.g2d_id).indexOf("g2d_") != 0) {
			skin1.dispose();
		}
	}
};
var com_genome2d_ui_skin_GUISkinSheet = function() {
	this.g2d_currentState = "default";
	this.g2d_skins = [];
};
$hxClasses["com.genome2d.ui.skin.GUISkinSheet"] = com_genome2d_ui_skin_GUISkinSheet;
com_genome2d_ui_skin_GUISkinSheet.__name__ = "com.genome2d.ui.skin.GUISkinSheet";
com_genome2d_ui_skin_GUISkinSheet.__interfaces__ = [com_genome2d_proto_IGPrototypable];
com_genome2d_ui_skin_GUISkinSheet.prototype = {
	g2d_skins: null
	,getPrototype: function(p_prototype) {
		p_prototype = this.getPrototypeDefault(p_prototype);
		var _g = 0;
		var _g1 = this.g2d_skins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			p_prototype.addChild(skin.getPrototype(),"*");
		}
		return p_prototype;
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		var skinPrototypes = p_prototype.getGroup("*");
		var _g = 0;
		while(_g < skinPrototypes.length) {
			var skinPrototype = skinPrototypes[_g];
			++_g;
			var skin = com_genome2d_proto_GPrototypeFactory.createInstance(skinPrototype);
			this.g2d_skins.push(skin);
		}
	}
	,getPrototypeDefault: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"skinSheet");
		return p_prototype;
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"skinSheet");
	}
	,toReference: function() {
		return "";
	}
	,g2d_currentState: null
	,g2d_prototypeStates: null
	,setPrototypeState: function(p_stateName) {
		if(this.g2d_currentState != p_stateName) {
			var p_stateName1 = p_stateName;
			if(p_stateName1 == null) {
				p_stateName1 = "default";
			}
			var _this = this.g2d_prototypeStates.g2d_states;
			var state = __map_reserved[p_stateName1] != null ? _this.getReserved(p_stateName1) : _this.h[p_stateName1];
			if(state != null) {
				this.g2d_currentState = p_stateName;
				var propertyName = state.keys();
				while(propertyName.hasNext()) {
					var propertyName1 = propertyName.next();
					(__map_reserved[propertyName1] != null ? state.getReserved(propertyName1) : state.h[propertyName1]).bind(this);
				}
			} else {
				var p_stateName2 = "na";
				if(p_stateName2 == null) {
					p_stateName2 = "default";
				}
				var _this1 = this.g2d_prototypeStates.g2d_states;
				state = __map_reserved[p_stateName2] != null ? _this1.getReserved(p_stateName2) : _this1.h[p_stateName2];
				if(state != null) {
					this.g2d_currentState = p_stateName;
					var propertyName2 = state.keys();
					while(propertyName2.hasNext()) {
						var propertyName3 = propertyName2.next();
						(__map_reserved[propertyName3] != null ? state.getReserved(propertyName3) : state.h[propertyName3]).bind(this);
					}
				}
			}
		}
	}
	,__class__: com_genome2d_ui_skin_GUISkinSheet
};
var com_genome2d_ui_skin_GUISkinType = $hxEnums["com.genome2d.ui.skin.GUISkinType"] = { __ename__ : "com.genome2d.ui.skin.GUISkinType", __constructs__ : ["TEXTURE","TEXT"]
	,TEXTURE: {_hx_index:0,__enum__:"com.genome2d.ui.skin.GUISkinType",toString:$estr}
	,TEXT: {_hx_index:1,__enum__:"com.genome2d.ui.skin.GUISkinType",toString:$estr}
};
com_genome2d_ui_skin_GUISkinType.__empty_constructs__ = [com_genome2d_ui_skin_GUISkinType.TEXTURE,com_genome2d_ui_skin_GUISkinType.TEXT];
var com_genome2d_ui_skin_GUITextureSkin = function(p_id,p_texture,p_autoSize,p_origin) {
	if(p_autoSize == null) {
		p_autoSize = true;
	}
	if(p_id == null) {
		p_id = "";
	}
	this.bindTextureToModel = false;
	this.usePivot = false;
	this.tiledWidth = false;
	this.tiledHeight = false;
	this.tiled = false;
	this.renderScaleY = 1;
	this.renderScaleX = 1;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.autoSize = true;
	this.sliceBottom = 0;
	this.sliceRight = 0;
	this.sliceTop = 0;
	this.sliceLeft = 0;
	this.g2d_textureOverride = false;
	com_genome2d_ui_skin_GUISkin.call(this,p_id,p_origin);
	this.g2d_texture = p_texture;
	this.autoSize = p_autoSize;
};
$hxClasses["com.genome2d.ui.skin.GUITextureSkin"] = com_genome2d_ui_skin_GUITextureSkin;
com_genome2d_ui_skin_GUITextureSkin.__name__ = "com.genome2d.ui.skin.GUITextureSkin";
com_genome2d_ui_skin_GUITextureSkin.__super__ = com_genome2d_ui_skin_GUISkin;
com_genome2d_ui_skin_GUITextureSkin.prototype = $extend(com_genome2d_ui_skin_GUISkin.prototype,{
	g2d_textureOverride: null
	,g2d_texture: null
	,get_texture: function() {
		return this.g2d_texture;
	}
	,set_texture: function(p_value) {
		this.g2d_texture = p_value;
		if(this.g2d_origin == null) {
			this.invalidateClones();
		} else {
			this.g2d_textureOverride = this.g2d_texture != (js_Boot.__cast(this.g2d_origin , com_genome2d_ui_skin_GUITextureSkin)).g2d_texture;
		}
		return this.g2d_texture;
	}
	,sliceLeft: null
	,sliceTop: null
	,sliceRight: null
	,sliceBottom: null
	,autoSize: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,renderScaleX: null
	,renderScaleY: null
	,tiled: null
	,tiledHeight: null
	,tiledWidth: null
	,usePivot: null
	,bindTextureToModel: null
	,filter: null
	,getMinWidth: function() {
		if(this.g2d_texture != null && this.autoSize) {
			var _this = this.g2d_texture;
			return _this.g2d_nativeWidth * _this.g2d_scaleFactor * this.scaleX;
		} else {
			return 0;
		}
	}
	,getMinHeight: function() {
		if(this.g2d_texture != null && this.autoSize) {
			var _this = this.g2d_texture;
			return _this.g2d_nativeHeight * _this.g2d_scaleFactor * this.scaleY;
		} else {
			return 0;
		}
	}
	,render: function(p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha) {
		var rendered = false;
		if(this.forcePixelAccuracy) {
			p_left = Math.round(p_left);
			p_top = Math.round(p_top);
			p_right = Math.round(p_right);
			p_bottom = Math.round(p_bottom);
		}
		if(this.g2d_texture != null && com_genome2d_ui_skin_GUISkin.prototype.render.call(this,p_left,p_top,p_right,p_bottom,p_red,p_green,p_blue,p_alpha)) {
			if(com_genome2d_Genome2D.g2d_instance == null) {
				com_genome2d_Genome2D.g2d_instantiable = true;
				new com_genome2d_Genome2D();
				com_genome2d_Genome2D.g2d_instantiable = false;
			}
			var context = com_genome2d_Genome2D.g2d_instance.g2d_context;
			var width = p_right - p_left;
			var height = p_bottom - p_top;
			var _this = this.g2d_texture;
			var finalScaleX = width / (_this.g2d_nativeWidth * _this.g2d_scaleFactor);
			var _this1 = this.g2d_texture;
			var finalScaleY = height / (_this1.g2d_nativeHeight * _this1.g2d_scaleFactor);
			var sl = this.sliceLeft > this.g2d_texture.g2d_nativeWidth ? this.g2d_texture.g2d_nativeWidth : this.sliceLeft < 0 ? 0 : this.sliceLeft;
			var st = this.sliceTop > this.g2d_texture.g2d_nativeHeight ? this.g2d_texture.g2d_nativeHeight : this.sliceTop < 0 ? 0 : this.sliceTop;
			var sr = this.sliceRight > this.g2d_texture.g2d_nativeWidth ? this.g2d_texture.g2d_nativeWidth : this.sliceRight < this.sliceLeft ? this.sliceRight >= 0 ? this.sliceLeft : this.g2d_texture.g2d_nativeWidth + this.sliceRight : this.sliceRight;
			var sb = this.sliceBottom > this.g2d_texture.g2d_nativeHeight ? this.g2d_texture.g2d_nativeHeight : this.sliceBottom < this.sliceTop ? this.sliceBottom >= 0 ? this.sliceTop : this.g2d_texture.g2d_nativeHeight + this.sliceBottom : this.sliceBottom;
			var sw = sr - sl;
			var sh = sb - st;
			if(sw == 0 && sh != 0) {
				sw = this.g2d_texture.g2d_nativeWidth;
				sr = sw;
			}
			if(sh == 0 && sw != 0) {
				sh = this.g2d_texture.g2d_nativeHeight;
				sb = sh;
			}
			if(sw == 0 || sh == 0) {
				if(this.tiled) {
					if(this.g2d_texture.g2d_repeatable) {
						this.g2d_texture.g2d_uScale = finalScaleX;
						this.g2d_texture.g2d_vScale = finalScaleY;
						var _this2 = this.g2d_texture;
						var x;
						if(this.usePivot) {
							x = 0;
						} else {
							var _this3 = this.g2d_texture;
							x = _this3.g2d_pivotX * _this3.g2d_scaleFactor;
						}
						var x1 = p_left + (.5 * (_this2.g2d_nativeWidth * _this2.g2d_scaleFactor) + x) * finalScaleX;
						var _this4 = this.g2d_texture;
						var y;
						if(this.usePivot) {
							y = 0;
						} else {
							var _this5 = this.g2d_texture;
							y = _this5.g2d_pivotY * _this5.g2d_scaleFactor;
						}
						var y1 = p_top + (.5 * (_this4.g2d_nativeHeight * _this4.g2d_scaleFactor) + y) * finalScaleY;
						context.draw(this.g2d_texture,this.blendMode,x1,y1,finalScaleX,finalScaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
					} else {
						var rx = this.g2d_texture.g2d_u * this.g2d_texture.g2d_gpuWidth;
						var ry = this.g2d_texture.g2d_v * this.g2d_texture.g2d_gpuHeight;
						var _this6 = this.g2d_texture;
						var _this7 = this.g2d_texture;
						var x2 = p_left + (.5 * (_this6.g2d_nativeWidth * _this6.g2d_scaleFactor) + _this7.g2d_pivotX * _this7.g2d_scaleFactor);
						var _this8 = this.g2d_texture;
						var _this9 = this.g2d_texture;
						var y2 = p_top + (.5 * (_this8.g2d_nativeHeight * _this8.g2d_scaleFactor) + _this9.g2d_pivotY * _this9.g2d_scaleFactor);
						if(this.tiledHeight == true) {
							finalScaleX = finalScaleX;
						} else {
							finalScaleX /= this.scaleX;
						}
						if(this.tiledWidth == true) {
							finalScaleY = finalScaleY;
						} else {
							finalScaleY /= this.scaleY;
						}
						var columnsToDraw = this.tiledHeight == true ? Math.ceil(finalScaleX) - 1 : 0;
						var rowsToDraw = this.tiledWidth == true ? Math.ceil(finalScaleY) - 1 : 0;
						var _g = columnsToDraw;
						var _g1 = Math.ceil(finalScaleX);
						while(_g < _g1) {
							var i = _g++;
							var _g2 = rowsToDraw;
							var _g11 = Math.ceil(finalScaleY);
							while(_g2 < _g11) {
								var j = _g2++;
								var sx = this.tiledHeight == true ? 1 : finalScaleX - i > 1 ? 1 : finalScaleX - i;
								var sy = this.tiledWidth == true ? 1 : finalScaleY - j > 1 ? 1 : finalScaleY - j;
								var _this10 = this.g2d_texture;
								var px = this.g2d_texture.g2d_nativeWidth / 2 + _this10.g2d_pivotX * _this10.g2d_scaleFactor - sx * this.scaleX * this.g2d_texture.g2d_nativeWidth / 2;
								var _this11 = this.g2d_texture;
								var py = this.g2d_texture.g2d_nativeHeight / 2 + _this11.g2d_pivotY * _this11.g2d_scaleFactor - sy * this.scaleY * this.g2d_texture.g2d_nativeHeight / 2;
								var _this12 = this.g2d_texture;
								var _this13 = this.g2d_texture;
								context.drawSource(this.g2d_texture,this.blendMode,rx,ry,sx * this.g2d_texture.g2d_nativeWidth,sy * this.g2d_texture.g2d_nativeHeight,0,0,x2 + i * (_this12.g2d_nativeWidth * _this12.g2d_scaleFactor) * this.scaleX - px,y2 + j * (_this13.g2d_nativeHeight * _this13.g2d_scaleFactor) * this.scaleY - py,this.tiledHeight == true ? finalScaleX : this.scaleX,this.tiledWidth == true ? finalScaleY : this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
							}
						}
					}
				} else {
					var _this14 = this.g2d_texture;
					var x3;
					if(this.usePivot) {
						x3 = 0;
					} else {
						var _this15 = this.g2d_texture;
						x3 = _this15.g2d_pivotX * _this15.g2d_scaleFactor;
					}
					var x4 = p_left + (.5 * (_this14.g2d_nativeWidth * _this14.g2d_scaleFactor) + x3) * finalScaleX;
					var _this16 = this.g2d_texture;
					var y3;
					if(this.usePivot) {
						y3 = 0;
					} else {
						var _this17 = this.g2d_texture;
						y3 = _this17.g2d_pivotY * _this17.g2d_scaleFactor;
					}
					var y4 = p_top + (.5 * (_this16.g2d_nativeHeight * _this16.g2d_scaleFactor) + y3) * finalScaleY;
					context.draw(this.g2d_texture,this.blendMode,x4,y4,finalScaleX * this.renderScaleX,finalScaleY * this.renderScaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
			} else {
				var sin = 0;
				var cos = 1;
				if(this.rotation != 0) {
					sin = Math.sin(this.rotation);
					cos = Math.cos(this.rotation);
				}
				var rx1 = this.g2d_texture.g2d_u * this.g2d_texture.g2d_gpuWidth;
				var ry1 = this.g2d_texture.g2d_v * this.g2d_texture.g2d_gpuHeight;
				var _this18 = this.g2d_texture;
				var finalScaleX1 = (width - _this18.g2d_nativeWidth * _this18.g2d_scaleFactor * this.scaleX) / (sw * this.g2d_texture.g2d_scaleFactor) + this.scaleX;
				var _this19 = this.g2d_texture;
				var finalScaleY1 = (height - _this19.g2d_nativeHeight * _this19.g2d_scaleFactor * this.scaleY) / (sh * this.g2d_texture.g2d_scaleFactor) + this.scaleY;
				var tx = 0;
				var ty = 0;
				var tw = sl;
				var th = st;
				var ox = 0;
				var oy = 0;
				if(tw != 0 && th != 0) {
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left,p_top,this.scaleX,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					ox = sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * cos;
					oy = sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,finalScaleX1,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sr;
				var _this20 = this.g2d_texture;
				tw = _this20.g2d_nativeWidth * _this20.g2d_scaleFactor / this.g2d_texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					ox = (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * cos;
					oy = (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,this.scaleX,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = 0;
				ty = st;
				tw = sl;
				th = sh;
				if(tw != 0 && th != 0) {
					ox = -(st * this.g2d_texture.g2d_scaleFactor * this.scaleY) * sin;
					oy = st * this.g2d_texture.g2d_scaleFactor * this.scaleY * cos;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,this.scaleX,finalScaleY1,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					ox = sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * cos - st * this.g2d_texture.g2d_scaleFactor * this.scaleY * sin;
					oy = st * this.g2d_texture.g2d_scaleFactor * this.scaleY * cos + sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,finalScaleX1,finalScaleY1,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sr;
				var _this21 = this.g2d_texture;
				tw = _this21.g2d_nativeWidth * _this21.g2d_scaleFactor / this.g2d_texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					ox = (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * cos - st * this.g2d_texture.g2d_scaleFactor * this.scaleY * sin;
					oy = st * this.g2d_texture.g2d_scaleFactor * this.scaleY * cos + (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,this.scaleX,finalScaleY1,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = 0;
				ty = sb;
				tw = sl;
				th = this.g2d_texture.g2d_nativeHeight - sb;
				if(tw != 0 && th != 0) {
					ox = -(st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * sin;
					oy = (st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * cos;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,this.scaleX,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sl;
				tw = sw;
				if(tw != 0 && th != 0) {
					ox = sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * cos - (st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * sin;
					oy = (st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * cos + sl * this.g2d_texture.g2d_scaleFactor * this.scaleX * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,finalScaleX1,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
				tx = sr;
				var _this22 = this.g2d_texture;
				tw = _this22.g2d_nativeWidth * _this22.g2d_scaleFactor / this.g2d_texture.g2d_scaleFactor - sr;
				if(tw != 0 && th != 0) {
					ox = (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * cos - (st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * sin;
					oy = (st * this.scaleY + sh * finalScaleY1) * this.g2d_texture.g2d_scaleFactor * cos + (sl * this.scaleX + sw * finalScaleX1) * this.g2d_texture.g2d_scaleFactor * sin;
					context.drawSource(this.g2d_texture,this.blendMode,rx1 + tx,ry1 + ty,tw,th,-tw * .5,-th * .5,p_left + ox,p_top + oy,this.scaleX,this.scaleY,this.rotation,this.red * p_red,this.green * p_green,this.blue * p_blue,this.alpha * p_alpha,this.filter);
				}
			}
			rendered = true;
		}
		return rendered;
	}
	,getTexture: function() {
		return this.g2d_texture;
	}
	,getFilter: function() {
		return this.filter;
	}
	,invalidateClones: function() {
		var _g = 0;
		var _g1 = this.g2d_clones;
		while(_g < _g1.length) {
			var clone = _g1[_g];
			++_g;
			var textureSkinClone = clone;
			if(!textureSkinClone.g2d_textureOverride) {
				textureSkinClone.g2d_texture = this.g2d_texture;
			}
		}
	}
	,clone: function() {
		var clone = new com_genome2d_ui_skin_GUITextureSkin("",this.g2d_texture,this.autoSize,this.g2d_origin == null ? this : this.g2d_origin);
		clone.sliceLeft = this.sliceLeft;
		clone.sliceTop = this.sliceTop;
		clone.sliceRight = this.sliceRight;
		clone.sliceBottom = this.sliceBottom;
		clone.bindTextureToModel = this.bindTextureToModel;
		clone.red = this.red;
		clone.green = this.green;
		clone.blue = this.blue;
		clone.alpha = this.alpha;
		clone.scaleX = this.scaleX;
		clone.scaleY = this.scaleY;
		clone.rotation = this.rotation;
		clone.tiled = this.tiled;
		clone.tiledWidth = this.tiledWidth;
		clone.tiledHeight = this.tiledHeight;
		clone.usePivot = this.usePivot;
		clone.filter = this.filter;
		clone.renderScaleX = this.renderScaleX;
		clone.renderScaleY = this.renderScaleY;
		clone.blendMode = this.blendMode;
		return clone;
	}
	,elementModelChanged_handler: function(p_element) {
		if(this.bindTextureToModel) {
			this.g2d_texture = p_element.g2d_model != null ? com_genome2d_textures_GTextureManager.getTexture(p_element.g2d_model) : null;
			if(this.g2d_origin == null) {
				this.invalidateClones();
			} else {
				this.g2d_textureOverride = this.g2d_texture != (js_Boot.__cast(this.g2d_origin , com_genome2d_ui_skin_GUITextureSkin)).g2d_texture;
			}
		}
	}
	,bindPrototype: function(p_prototype) {
		this.bindPrototypeDefault(p_prototype);
		if(this.g2d_origin == null) {
			if(p_prototype.getProperty("id").value != "") {
				this.g2d_id = p_prototype.getProperty("id").value;
				com_genome2d_ui_skin_GUISkinManager.g2d_addSkin(this.g2d_id,this);
			}
		}
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"textureSkin");
		return com_genome2d_ui_skin_GUISkin.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototypeDefault: function(p_prototype) {
		com_genome2d_ui_skin_GUISkin.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"textureSkin");
	}
	,__class__: com_genome2d_ui_skin_GUITextureSkin
	,__properties__: $extend(com_genome2d_ui_skin_GUISkin.prototype.__properties__,{set_texture:"set_texture",get_texture:"get_texture"})
});
var com_genome2d_utils_GBytes = function(p_bytes) {
	this.position = 0;
	this.g2d_data = p_bytes;
	this.g2d_length = p_bytes.length;
};
$hxClasses["com.genome2d.utils.GBytes"] = com_genome2d_utils_GBytes;
com_genome2d_utils_GBytes.__name__ = "com.genome2d.utils.GBytes";
com_genome2d_utils_GBytes.prototype = {
	position: null
	,g2d_length: null
	,g2d_data: null
	,getBytesAvailable: function() {
		return this.g2d_length - this.position;
	}
	,readBoolean: function() {
		if(this.position < this.g2d_length) {
			return this.g2d_data.b[this.position++] != 0;
		} else {
			var p_arg1 = "EOF";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/utils/GBytes.hx", lineNumber : 32, className : "com.genome2d.utils.GBytes", methodName : "readBoolean"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readMultiByte: function(p_length) {
		return this.readUTFBytes(p_length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value = ch1 << 8 | ch2;
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.g2d_length) {
			return this.g2d_data.b[this.position++];
		} else {
			var p_arg1 = "EOF";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/utils/GBytes.hx", lineNumber : 110, className : "com.genome2d.utils.GBytes", methodName : "readUnsignedByte"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		return ch1 << 8 | ch2;
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(p_length) {
		if(this.position + p_length > this.g2d_data.length) {
			var p_arg1 = "EOF";
			var p_arg2 = null;
			var p_arg3 = null;
			var p_arg4 = null;
			var p_arg5 = null;
			var p_arg6 = null;
			var p_arg7 = null;
			var p_arg8 = null;
			var p_arg9 = null;
			var p_arg10 = null;
			var p_arg11 = null;
			var p_arg12 = null;
			var p_arg13 = null;
			var p_arg14 = null;
			var p_arg15 = null;
			var p_arg16 = null;
			var p_arg17 = null;
			var p_arg18 = null;
			var p_arg19 = null;
			var p_arg20 = null;
			var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/utils/GBytes.hx", lineNumber : 151, className : "com.genome2d.utils.GBytes", methodName : "readUTFBytes"};
			var args = [];
			if(p_arg1 != null) {
				args.push(p_arg1);
			}
			if(p_arg2 != null) {
				args.push(p_arg2);
			}
			if(p_arg3 != null) {
				args.push(p_arg3);
			}
			if(p_arg4 != null) {
				args.push(p_arg4);
			}
			if(p_arg5 != null) {
				args.push(p_arg5);
			}
			if(p_arg6 != null) {
				args.push(p_arg6);
			}
			if(p_arg7 != null) {
				args.push(p_arg7);
			}
			if(p_arg8 != null) {
				args.push(p_arg8);
			}
			if(p_arg9 != null) {
				args.push(p_arg9);
			}
			if(p_arg10 != null) {
				args.push(p_arg10);
			}
			if(p_arg11 != null) {
				args.push(p_arg11);
			}
			if(p_arg12 != null) {
				args.push(p_arg12);
			}
			if(p_arg13 != null) {
				args.push(p_arg13);
			}
			if(p_arg14 != null) {
				args.push(p_arg14);
			}
			if(p_arg15 != null) {
				args.push(p_arg15);
			}
			if(p_arg16 != null) {
				args.push(p_arg16);
			}
			if(p_arg17 != null) {
				args.push(p_arg17);
			}
			if(p_arg18 != null) {
				args.push(p_arg18);
			}
			if(p_arg19 != null) {
				args.push(p_arg19);
			}
			if(p_arg20 != null) {
				args.push(p_arg20);
			}
			if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
				com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
			}
			var msg = "ERROR: ";
			if(pos != null) {
				msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
			}
			if(args.length > 0) {
				msg += args.toString();
			}
			com_genome2d_debug_GDebug.g2d_log += msg;
			if(com_genome2d_debug_GDebug.useNativeTrace) {
				window.console.log(msg);
			}
			throw new js__$Boot_HaxeError(msg);
		}
		this.position += p_length;
		return this.g2d_data.getString(this.position - p_length,p_length);
	}
	,g2d_setData: function(p_bytes) {
		this.g2d_data.b = p_bytes.b;
		this.g2d_data.length = p_bytes.length;
		this.g2d_length = p_bytes.length;
	}
	,g2d_resize: function(p_size) {
		if(p_size > this.g2d_length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((p_size + 1) * 3 >> 1));
			var cacheLength = this.g2d_length;
			bytes.blit(0,this.g2d_data,0,this.g2d_length);
			this.g2d_length = bytes.length;
			this.g2d_data.b = bytes.b;
			this.g2d_data.length = bytes.length;
			this.g2d_length = bytes.length;
		}
	}
	,writeBoolean: function(p_value) {
		this.writeByte(p_value ? 1 : 0);
	}
	,writeByte: function(p_value) {
		this.g2d_resize(this.position + 1);
		this.g2d_data.b[this.position++] = p_value & 255;
	}
	,writeBytes: function(p_bytes,p_offset,p_length) {
		if(p_length == null) {
			p_length = 0;
		}
		if(p_offset == null) {
			p_offset = 0;
		}
		if(p_bytes.length == 0) {
			return;
		}
		if(p_length == 0) {
			p_length = p_bytes.length - p_offset;
		}
		this.g2d_resize(this.position + p_length);
		this.g2d_data.blit(this.position,p_bytes,p_offset,p_length);
		this.position = this.position + p_length;
	}
	,writeDouble: function(p_value) {
		var int64 = haxe_io_FPHelper.doubleToI64(p_value);
		this.writeInt(int64.high);
		this.writeInt(int64.low);
	}
	,writeFloat: function(p_value) {
		var int = haxe_io_FPHelper.floatToI32(p_value);
		this.writeInt(int);
	}
	,writeInt: function(p_value) {
		this.g2d_resize(this.position + 4);
		this.g2d_data.b[this.position++] = p_value >> 24 & 255;
		this.g2d_data.b[this.position++] = p_value >> 16 & 255;
		this.g2d_data.b[this.position++] = p_value >> 8 & 255;
		this.g2d_data.b[this.position++] = p_value & 255;
	}
	,writeMultiByte: function(p_value) {
		this.writeUTFBytes(p_value);
	}
	,writeShort: function(p_value) {
		this.g2d_resize(this.position + 2);
		this.g2d_data.b[this.position++] = p_value >> 8;
		this.g2d_data.b[this.position++] = p_value;
	}
	,writeUnsignedInt: function(p_value) {
		this.writeInt(p_value);
	}
	,writeUTF: function(p_value) {
		var bytes = haxe_io_Bytes.ofString(p_value);
		this.writeShort(bytes.length);
		this.writeBytes(bytes);
	}
	,writeUTFBytes: function(p_value) {
		var bytes = haxe_io_Bytes.ofString(p_value);
		this.writeBytes(haxe_io_Bytes.ofString(p_value));
	}
	,__class__: com_genome2d_utils_GBytes
};
var com_genome2d_utils_GHAlignType = $hxEnums["com.genome2d.utils.GHAlignType"] = { __ename__ : "com.genome2d.utils.GHAlignType", __constructs__ : ["LEFT","CENTER","RIGHT"]
	,LEFT: {_hx_index:0,__enum__:"com.genome2d.utils.GHAlignType",toString:$estr}
	,CENTER: {_hx_index:1,__enum__:"com.genome2d.utils.GHAlignType",toString:$estr}
	,RIGHT: {_hx_index:2,__enum__:"com.genome2d.utils.GHAlignType",toString:$estr}
};
com_genome2d_utils_GHAlignType.__empty_constructs__ = [com_genome2d_utils_GHAlignType.LEFT,com_genome2d_utils_GHAlignType.CENTER,com_genome2d_utils_GHAlignType.RIGHT];
var com_genome2d_utils_GMaxRectPacker = function(p_width,p_height,p_maxWidth,p_maxHeight,p_autoExpand,p_heuristics) {
	if(p_heuristics == null) {
		p_heuristics = 0;
	}
	if(p_autoExpand == null) {
		p_autoExpand = false;
	}
	if(p_maxHeight == null) {
		p_maxHeight = 2048;
	}
	if(p_maxWidth == null) {
		p_maxWidth = 2048;
	}
	if(p_height == null) {
		p_height = 1;
	}
	if(p_width == null) {
		p_width = 1;
	}
	this.g2d_forceValidTextureSizeOnExpand = true;
	this.g2d_sortOnExpand = 2;
	this.g2d_autoExpand = false;
	this.g2d_heuristics = 0;
	if(p_width <= 0 || p_height <= 0) {
		var p_arg1 = "Invalid packer size.";
		var p_arg2 = null;
		var p_arg3 = null;
		var p_arg4 = null;
		var p_arg5 = null;
		var p_arg6 = null;
		var p_arg7 = null;
		var p_arg8 = null;
		var p_arg9 = null;
		var p_arg10 = null;
		var p_arg11 = null;
		var p_arg12 = null;
		var p_arg13 = null;
		var p_arg14 = null;
		var p_arg15 = null;
		var p_arg16 = null;
		var p_arg17 = null;
		var p_arg18 = null;
		var p_arg19 = null;
		var p_arg20 = null;
		var pos = { fileName : "../Genome2D/Genome2D-ContextCommon/src/com/genome2d/utils/GMaxRectPacker.hx", lineNumber : 63, className : "com.genome2d.utils.GMaxRectPacker", methodName : "new"};
		var args = [];
		if(p_arg1 != null) {
			args.push(p_arg1);
		}
		if(p_arg2 != null) {
			args.push(p_arg2);
		}
		if(p_arg3 != null) {
			args.push(p_arg3);
		}
		if(p_arg4 != null) {
			args.push(p_arg4);
		}
		if(p_arg5 != null) {
			args.push(p_arg5);
		}
		if(p_arg6 != null) {
			args.push(p_arg6);
		}
		if(p_arg7 != null) {
			args.push(p_arg7);
		}
		if(p_arg8 != null) {
			args.push(p_arg8);
		}
		if(p_arg9 != null) {
			args.push(p_arg9);
		}
		if(p_arg10 != null) {
			args.push(p_arg10);
		}
		if(p_arg11 != null) {
			args.push(p_arg11);
		}
		if(p_arg12 != null) {
			args.push(p_arg12);
		}
		if(p_arg13 != null) {
			args.push(p_arg13);
		}
		if(p_arg14 != null) {
			args.push(p_arg14);
		}
		if(p_arg15 != null) {
			args.push(p_arg15);
		}
		if(p_arg16 != null) {
			args.push(p_arg16);
		}
		if(p_arg17 != null) {
			args.push(p_arg17);
		}
		if(p_arg18 != null) {
			args.push(p_arg18);
		}
		if(p_arg19 != null) {
			args.push(p_arg19);
		}
		if(p_arg20 != null) {
			args.push(p_arg20);
		}
		if(com_genome2d_debug_GDebug.g2d_onDebug != null) {
			com_genome2d_debug_GDebug.g2d_onDebug.dispatch(5,pos,args);
		}
		var msg = "ERROR: ";
		if(pos != null) {
			msg += pos.fileName + ":" + pos.lineNumber + " : " + pos.methodName + " : ";
		}
		if(args.length > 0) {
			msg += args.toString();
		}
		com_genome2d_debug_GDebug.g2d_log += msg;
		if(com_genome2d_debug_GDebug.useNativeTrace) {
			window.console.log(msg);
		}
		throw new js__$Boot_HaxeError(msg);
	}
	this.g2d_width = p_width;
	this.g2d_height = p_height;
	this.g2d_maxWidth = p_maxWidth;
	this.g2d_maxHeight = p_maxHeight;
	this.g2d_autoExpand = p_autoExpand;
	this.clear();
	this.g2d_newBoundingArea = com_genome2d_utils_GPackerRectangle.get(0,0,0,0);
	this.g2d_heuristics = p_heuristics;
};
$hxClasses["com.genome2d.utils.GMaxRectPacker"] = com_genome2d_utils_GMaxRectPacker;
com_genome2d_utils_GMaxRectPacker.__name__ = "com.genome2d.utils.GMaxRectPacker";
com_genome2d_utils_GMaxRectPacker.prototype = {
	g2d_heuristics: null
	,g2d_firstAvailableArea: null
	,g2d_lastAvailableArea: null
	,g2d_firstNewArea: null
	,g2d_lastNewArea: null
	,g2d_newBoundingArea: null
	,g2d_negativeArea: null
	,g2d_maxWidth: null
	,g2d_maxHeight: null
	,g2d_autoExpand: null
	,g2d_sortOnExpand: null
	,g2d_forceValidTextureSizeOnExpand: null
	,g2d_width: null
	,getWidth: function() {
		return this.g2d_width;
	}
	,g2d_height: null
	,getHeight: function() {
		return this.g2d_height;
	}
	,g2d_rectangles: null
	,getRectangles: function() {
		return this.g2d_rectangles.slice(0);
	}
	,packRectangleFixed: function(p_rect) {
		var sx = p_rect.x;
		var sy = p_rect.y;
		var sright = p_rect.right;
		var sbottom = p_rect.bottom;
		var area = this.g2d_firstAvailableArea;
		while(area != null) {
			var next = area.g2d_next;
			if(!(sx >= area.right || sright <= area.x || sy >= area.bottom || sbottom <= area.y)) {
				if(sx > area.x) {
					var p_x = area.x;
					var p_y = area.y;
					var p_width = sx - area.x;
					var p_height = area.height;
					var valid = true;
					var area1 = this.g2d_firstNewArea;
					while(area1 != null) {
						var next1 = area1.g2d_next;
						if(!(area1.x > p_x || area1.y > p_y || area1.right < p_x + p_width || area1.bottom < p_y + p_height)) {
							valid = false;
							break;
						} else if(!(area1.x < p_x || area1.y < p_y || area1.right > p_x + p_width || area1.bottom > p_y + p_height)) {
							if(area1.g2d_next != null) {
								area1.g2d_next.g2d_previous = area1.g2d_previous;
							} else {
								this.g2d_lastNewArea = area1.g2d_previous;
							}
							if(area1.g2d_previous != null) {
								area1.g2d_previous.g2d_next = area1.g2d_next;
							} else {
								this.g2d_firstNewArea = area1.g2d_next;
							}
							area1.dispose();
						}
						area1 = next1;
					}
					if(valid) {
						area1 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width,p_height);
						if(this.g2d_newBoundingArea.x < p_x) {
							this.g2d_newBoundingArea.x = p_x;
						}
						if(this.g2d_newBoundingArea.right > area1.right) {
							this.g2d_newBoundingArea.right = area1.right;
						}
						if(this.g2d_newBoundingArea.y < p_y) {
							this.g2d_newBoundingArea.y = p_y;
						}
						if(this.g2d_newBoundingArea.bottom < area1.bottom) {
							this.g2d_newBoundingArea.bottom = area1.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area1.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area1;
							this.g2d_lastNewArea = area1;
						} else {
							this.g2d_lastNewArea = area1;
							this.g2d_firstNewArea = area1;
						}
					} else {
						area1 = null;
					}
				}
				if(sright < area.right) {
					var p_y1 = area.y;
					var p_width1 = area.right - sright;
					var p_height1 = area.height;
					var valid1 = true;
					var area2 = this.g2d_firstNewArea;
					while(area2 != null) {
						var next2 = area2.g2d_next;
						if(!(area2.x > sright || area2.y > p_y1 || area2.right < sright + p_width1 || area2.bottom < p_y1 + p_height1)) {
							valid1 = false;
							break;
						} else if(!(area2.x < sright || area2.y < p_y1 || area2.right > sright + p_width1 || area2.bottom > p_y1 + p_height1)) {
							if(area2.g2d_next != null) {
								area2.g2d_next.g2d_previous = area2.g2d_previous;
							} else {
								this.g2d_lastNewArea = area2.g2d_previous;
							}
							if(area2.g2d_previous != null) {
								area2.g2d_previous.g2d_next = area2.g2d_next;
							} else {
								this.g2d_firstNewArea = area2.g2d_next;
							}
							area2.dispose();
						}
						area2 = next2;
					}
					if(valid1) {
						area2 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width1,p_height1);
						if(this.g2d_newBoundingArea.x < sright) {
							this.g2d_newBoundingArea.x = sright;
						}
						if(this.g2d_newBoundingArea.right > area2.right) {
							this.g2d_newBoundingArea.right = area2.right;
						}
						if(this.g2d_newBoundingArea.y < p_y1) {
							this.g2d_newBoundingArea.y = p_y1;
						}
						if(this.g2d_newBoundingArea.bottom < area2.bottom) {
							this.g2d_newBoundingArea.bottom = area2.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area2.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area2;
							this.g2d_lastNewArea = area2;
						} else {
							this.g2d_lastNewArea = area2;
							this.g2d_firstNewArea = area2;
						}
					} else {
						area2 = null;
					}
				}
				if(sy > area.y) {
					var p_x1 = area.x;
					var p_y2 = area.y;
					var p_width2 = area.width;
					var p_height2 = sy - area.y;
					var valid2 = true;
					var area3 = this.g2d_firstNewArea;
					while(area3 != null) {
						var next3 = area3.g2d_next;
						if(!(area3.x > p_x1 || area3.y > p_y2 || area3.right < p_x1 + p_width2 || area3.bottom < p_y2 + p_height2)) {
							valid2 = false;
							break;
						} else if(!(area3.x < p_x1 || area3.y < p_y2 || area3.right > p_x1 + p_width2 || area3.bottom > p_y2 + p_height2)) {
							if(area3.g2d_next != null) {
								area3.g2d_next.g2d_previous = area3.g2d_previous;
							} else {
								this.g2d_lastNewArea = area3.g2d_previous;
							}
							if(area3.g2d_previous != null) {
								area3.g2d_previous.g2d_next = area3.g2d_next;
							} else {
								this.g2d_firstNewArea = area3.g2d_next;
							}
							area3.dispose();
						}
						area3 = next3;
					}
					if(valid2) {
						area3 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width2,p_height2);
						if(this.g2d_newBoundingArea.x < p_x1) {
							this.g2d_newBoundingArea.x = p_x1;
						}
						if(this.g2d_newBoundingArea.right > area3.right) {
							this.g2d_newBoundingArea.right = area3.right;
						}
						if(this.g2d_newBoundingArea.y < p_y2) {
							this.g2d_newBoundingArea.y = p_y2;
						}
						if(this.g2d_newBoundingArea.bottom < area3.bottom) {
							this.g2d_newBoundingArea.bottom = area3.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area3.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area3;
							this.g2d_lastNewArea = area3;
						} else {
							this.g2d_lastNewArea = area3;
							this.g2d_firstNewArea = area3;
						}
					} else {
						area3 = null;
					}
				}
				if(sbottom < area.bottom) {
					var p_x2 = area.x;
					var p_width3 = area.width;
					var p_height3 = area.bottom - sbottom;
					var valid3 = true;
					var area4 = this.g2d_firstNewArea;
					while(area4 != null) {
						var next4 = area4.g2d_next;
						if(!(area4.x > p_x2 || area4.y > sbottom || area4.right < p_x2 + p_width3 || area4.bottom < sbottom + p_height3)) {
							valid3 = false;
							break;
						} else if(!(area4.x < p_x2 || area4.y < sbottom || area4.right > p_x2 + p_width3 || area4.bottom > sbottom + p_height3)) {
							if(area4.g2d_next != null) {
								area4.g2d_next.g2d_previous = area4.g2d_previous;
							} else {
								this.g2d_lastNewArea = area4.g2d_previous;
							}
							if(area4.g2d_previous != null) {
								area4.g2d_previous.g2d_next = area4.g2d_next;
							} else {
								this.g2d_firstNewArea = area4.g2d_next;
							}
							area4.dispose();
						}
						area4 = next4;
					}
					if(valid3) {
						area4 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width3,p_height3);
						if(this.g2d_newBoundingArea.x < p_x2) {
							this.g2d_newBoundingArea.x = p_x2;
						}
						if(this.g2d_newBoundingArea.right > area4.right) {
							this.g2d_newBoundingArea.right = area4.right;
						}
						if(this.g2d_newBoundingArea.y < sbottom) {
							this.g2d_newBoundingArea.y = sbottom;
						}
						if(this.g2d_newBoundingArea.bottom < area4.bottom) {
							this.g2d_newBoundingArea.bottom = area4.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area4.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area4;
							this.g2d_lastNewArea = area4;
						} else {
							this.g2d_lastNewArea = area4;
							this.g2d_firstNewArea = area4;
						}
					} else {
						area4 = null;
					}
				}
				if(area.g2d_next != null) {
					area.g2d_next.g2d_previous = area.g2d_previous;
				} else {
					this.g2d_lastAvailableArea = area.g2d_previous;
				}
				if(area.g2d_previous != null) {
					area.g2d_previous.g2d_next = area.g2d_next;
				} else {
					this.g2d_firstAvailableArea = area.g2d_next;
				}
				area.dispose();
			}
			area = next;
		}
		while(this.g2d_firstNewArea != null) {
			var area5 = this.g2d_firstNewArea;
			if(area5.g2d_next != null) {
				this.g2d_firstNewArea = area5.g2d_next;
				this.g2d_firstNewArea.g2d_previous = null;
			} else {
				this.g2d_firstNewArea = null;
			}
			area5.g2d_previous = null;
			area5.g2d_next = null;
			if(this.g2d_lastAvailableArea != null) {
				area5.g2d_previous = this.g2d_lastAvailableArea;
				this.g2d_lastAvailableArea.g2d_next = area5;
				this.g2d_lastAvailableArea = area5;
			} else {
				this.g2d_lastAvailableArea = area5;
				this.g2d_firstAvailableArea = area5;
			}
		}
		this.g2d_lastNewArea = null;
		this.g2d_newBoundingArea.set(0,0,0,0);
		this.g2d_rectangles.push(p_rect);
	}
	,packRectangle: function(p_rect,p_padding,p_forceValidTextureSize) {
		if(p_forceValidTextureSize == null) {
			p_forceValidTextureSize = true;
		}
		if(p_padding == null) {
			p_padding = 0;
		}
		var p_width = p_rect.width + (p_padding - p_rect.padding) * 2;
		var p_height = p_rect.height + (p_padding - p_rect.padding) * 2;
		var available = this.g2d_negativeArea;
		var area;
		var w;
		var h;
		var m1;
		var m2;
		if(this.g2d_heuristics == 0) {
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					if(area.y < available.y || area.y == available.y && area.x < available.x) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 1) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w < h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w < h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 2) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w > h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w > h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 3) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					var a1 = area.width * area.height;
					var a2 = available.width * available.height;
					if(a1 < a2 || a1 == a2 && area.width < available.width) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		}
		var area1 = available != this.g2d_negativeArea ? available : null;
		if(area1 != null) {
			p_rect.set(area1.x,area1.y,p_rect.width + (p_padding - p_rect.padding) * 2,p_rect.height + (p_padding - p_rect.padding) * 2);
			p_rect.padding = p_padding;
			var sx = p_rect.x;
			var sy = p_rect.y;
			var sright = p_rect.right;
			var sbottom = p_rect.bottom;
			var area2 = this.g2d_firstAvailableArea;
			while(area2 != null) {
				var next = area2.g2d_next;
				if(!(sx >= area2.right || sright <= area2.x || sy >= area2.bottom || sbottom <= area2.y)) {
					if(sx > area2.x) {
						var p_x = area2.x;
						var p_y = area2.y;
						var p_width1 = sx - area2.x;
						var p_height1 = area2.height;
						var valid = true;
						var area3 = this.g2d_firstNewArea;
						while(area3 != null) {
							var next1 = area3.g2d_next;
							if(!(area3.x > p_x || area3.y > p_y || area3.right < p_x + p_width1 || area3.bottom < p_y + p_height1)) {
								valid = false;
								break;
							} else if(!(area3.x < p_x || area3.y < p_y || area3.right > p_x + p_width1 || area3.bottom > p_y + p_height1)) {
								if(area3.g2d_next != null) {
									area3.g2d_next.g2d_previous = area3.g2d_previous;
								} else {
									this.g2d_lastNewArea = area3.g2d_previous;
								}
								if(area3.g2d_previous != null) {
									area3.g2d_previous.g2d_next = area3.g2d_next;
								} else {
									this.g2d_firstNewArea = area3.g2d_next;
								}
								area3.dispose();
							}
							area3 = next1;
						}
						if(valid) {
							area3 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width1,p_height1);
							if(this.g2d_newBoundingArea.x < p_x) {
								this.g2d_newBoundingArea.x = p_x;
							}
							if(this.g2d_newBoundingArea.right > area3.right) {
								this.g2d_newBoundingArea.right = area3.right;
							}
							if(this.g2d_newBoundingArea.y < p_y) {
								this.g2d_newBoundingArea.y = p_y;
							}
							if(this.g2d_newBoundingArea.bottom < area3.bottom) {
								this.g2d_newBoundingArea.bottom = area3.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area3.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area3;
								this.g2d_lastNewArea = area3;
							} else {
								this.g2d_lastNewArea = area3;
								this.g2d_firstNewArea = area3;
							}
						} else {
							area3 = null;
						}
					}
					if(sright < area2.right) {
						var p_y1 = area2.y;
						var p_width2 = area2.right - sright;
						var p_height2 = area2.height;
						var valid1 = true;
						var area4 = this.g2d_firstNewArea;
						while(area4 != null) {
							var next2 = area4.g2d_next;
							if(!(area4.x > sright || area4.y > p_y1 || area4.right < sright + p_width2 || area4.bottom < p_y1 + p_height2)) {
								valid1 = false;
								break;
							} else if(!(area4.x < sright || area4.y < p_y1 || area4.right > sright + p_width2 || area4.bottom > p_y1 + p_height2)) {
								if(area4.g2d_next != null) {
									area4.g2d_next.g2d_previous = area4.g2d_previous;
								} else {
									this.g2d_lastNewArea = area4.g2d_previous;
								}
								if(area4.g2d_previous != null) {
									area4.g2d_previous.g2d_next = area4.g2d_next;
								} else {
									this.g2d_firstNewArea = area4.g2d_next;
								}
								area4.dispose();
							}
							area4 = next2;
						}
						if(valid1) {
							area4 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width2,p_height2);
							if(this.g2d_newBoundingArea.x < sright) {
								this.g2d_newBoundingArea.x = sright;
							}
							if(this.g2d_newBoundingArea.right > area4.right) {
								this.g2d_newBoundingArea.right = area4.right;
							}
							if(this.g2d_newBoundingArea.y < p_y1) {
								this.g2d_newBoundingArea.y = p_y1;
							}
							if(this.g2d_newBoundingArea.bottom < area4.bottom) {
								this.g2d_newBoundingArea.bottom = area4.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area4.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area4;
								this.g2d_lastNewArea = area4;
							} else {
								this.g2d_lastNewArea = area4;
								this.g2d_firstNewArea = area4;
							}
						} else {
							area4 = null;
						}
					}
					if(sy > area2.y) {
						var p_x1 = area2.x;
						var p_y2 = area2.y;
						var p_width3 = area2.width;
						var p_height3 = sy - area2.y;
						var valid2 = true;
						var area5 = this.g2d_firstNewArea;
						while(area5 != null) {
							var next3 = area5.g2d_next;
							if(!(area5.x > p_x1 || area5.y > p_y2 || area5.right < p_x1 + p_width3 || area5.bottom < p_y2 + p_height3)) {
								valid2 = false;
								break;
							} else if(!(area5.x < p_x1 || area5.y < p_y2 || area5.right > p_x1 + p_width3 || area5.bottom > p_y2 + p_height3)) {
								if(area5.g2d_next != null) {
									area5.g2d_next.g2d_previous = area5.g2d_previous;
								} else {
									this.g2d_lastNewArea = area5.g2d_previous;
								}
								if(area5.g2d_previous != null) {
									area5.g2d_previous.g2d_next = area5.g2d_next;
								} else {
									this.g2d_firstNewArea = area5.g2d_next;
								}
								area5.dispose();
							}
							area5 = next3;
						}
						if(valid2) {
							area5 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width3,p_height3);
							if(this.g2d_newBoundingArea.x < p_x1) {
								this.g2d_newBoundingArea.x = p_x1;
							}
							if(this.g2d_newBoundingArea.right > area5.right) {
								this.g2d_newBoundingArea.right = area5.right;
							}
							if(this.g2d_newBoundingArea.y < p_y2) {
								this.g2d_newBoundingArea.y = p_y2;
							}
							if(this.g2d_newBoundingArea.bottom < area5.bottom) {
								this.g2d_newBoundingArea.bottom = area5.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area5.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area5;
								this.g2d_lastNewArea = area5;
							} else {
								this.g2d_lastNewArea = area5;
								this.g2d_firstNewArea = area5;
							}
						} else {
							area5 = null;
						}
					}
					if(sbottom < area2.bottom) {
						var p_x2 = area2.x;
						var p_width4 = area2.width;
						var p_height4 = area2.bottom - sbottom;
						var valid3 = true;
						var area6 = this.g2d_firstNewArea;
						while(area6 != null) {
							var next4 = area6.g2d_next;
							if(!(area6.x > p_x2 || area6.y > sbottom || area6.right < p_x2 + p_width4 || area6.bottom < sbottom + p_height4)) {
								valid3 = false;
								break;
							} else if(!(area6.x < p_x2 || area6.y < sbottom || area6.right > p_x2 + p_width4 || area6.bottom > sbottom + p_height4)) {
								if(area6.g2d_next != null) {
									area6.g2d_next.g2d_previous = area6.g2d_previous;
								} else {
									this.g2d_lastNewArea = area6.g2d_previous;
								}
								if(area6.g2d_previous != null) {
									area6.g2d_previous.g2d_next = area6.g2d_next;
								} else {
									this.g2d_firstNewArea = area6.g2d_next;
								}
								area6.dispose();
							}
							area6 = next4;
						}
						if(valid3) {
							area6 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width4,p_height4);
							if(this.g2d_newBoundingArea.x < p_x2) {
								this.g2d_newBoundingArea.x = p_x2;
							}
							if(this.g2d_newBoundingArea.right > area6.right) {
								this.g2d_newBoundingArea.right = area6.right;
							}
							if(this.g2d_newBoundingArea.y < sbottom) {
								this.g2d_newBoundingArea.y = sbottom;
							}
							if(this.g2d_newBoundingArea.bottom < area6.bottom) {
								this.g2d_newBoundingArea.bottom = area6.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area6.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area6;
								this.g2d_lastNewArea = area6;
							} else {
								this.g2d_lastNewArea = area6;
								this.g2d_firstNewArea = area6;
							}
						} else {
							area6 = null;
						}
					}
					if(area2.g2d_next != null) {
						area2.g2d_next.g2d_previous = area2.g2d_previous;
					} else {
						this.g2d_lastAvailableArea = area2.g2d_previous;
					}
					if(area2.g2d_previous != null) {
						area2.g2d_previous.g2d_next = area2.g2d_next;
					} else {
						this.g2d_firstAvailableArea = area2.g2d_next;
					}
					area2.dispose();
				}
				area2 = next;
			}
			while(this.g2d_firstNewArea != null) {
				var area7 = this.g2d_firstNewArea;
				if(area7.g2d_next != null) {
					this.g2d_firstNewArea = area7.g2d_next;
					this.g2d_firstNewArea.g2d_previous = null;
				} else {
					this.g2d_firstNewArea = null;
				}
				area7.g2d_previous = null;
				area7.g2d_next = null;
				if(this.g2d_lastAvailableArea != null) {
					area7.g2d_previous = this.g2d_lastAvailableArea;
					this.g2d_lastAvailableArea.g2d_next = area7;
					this.g2d_lastAvailableArea = area7;
				} else {
					this.g2d_lastAvailableArea = area7;
					this.g2d_firstAvailableArea = area7;
				}
			}
			this.g2d_lastNewArea = null;
			this.g2d_newBoundingArea.set(0,0,0,0);
			if(p_padding != 0) {
				p_rect.setPadding(0);
			}
			this.g2d_rectangles.push(p_rect);
		}
		var success = area1 != null;
		if(!success && this.g2d_autoExpand) {
			var storedRectangles = this.getRectangles();
			storedRectangles.push(p_rect);
			this.clear();
			this.packRectangles(storedRectangles,p_padding,this.g2d_sortOnExpand);
			success = true;
		}
		return success;
	}
	,packRectangles: function(p_rectangles,p_padding,p_sort) {
		if(p_sort == null) {
			p_sort = 2;
		}
		if(p_padding == null) {
			p_padding = 0;
		}
		if(p_sort != 0) {
			p_rectangles.sort(p_sort == 1 ? $bind(this,this.g2d_sortOnHeightAscending) : $bind(this,this.g2d_sortOnHeightDescending));
		}
		var count = p_rectangles.length;
		var success = true;
		var failedRectangles = this.g2d_autoExpand ? [] : null;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var rect = p_rectangles[i];
			var p_width = rect.width + (p_padding - rect.padding) * 2;
			var p_height = rect.height + (p_padding - rect.padding) * 2;
			var available = this.g2d_negativeArea;
			var area;
			var w;
			var h;
			var m1;
			var m2;
			if(this.g2d_heuristics == 0) {
				area = this.g2d_firstAvailableArea;
				while(area != null) {
					if(area.width >= p_width && area.height >= p_height) {
						if(area.y < available.y || area.y == available.y && area.x < available.x) {
							available = area;
						}
					}
					area = area.g2d_next;
				}
			} else if(this.g2d_heuristics == 1) {
				available.width = this.g2d_width + 1;
				area = this.g2d_firstAvailableArea;
				while(area != null) {
					if(area.width >= p_width && area.height >= p_height) {
						w = area.width - p_width;
						h = area.height - p_height;
						m1 = w < h ? w : h;
						w = available.width - p_width;
						h = available.height - p_height;
						m2 = w < h ? w : h;
						if(m1 < m2) {
							available = area;
						}
					}
					area = area.g2d_next;
				}
			} else if(this.g2d_heuristics == 2) {
				available.width = this.g2d_width + 1;
				area = this.g2d_firstAvailableArea;
				while(area != null) {
					if(area.width >= p_width && area.height >= p_height) {
						w = area.width - p_width;
						h = area.height - p_height;
						m1 = w > h ? w : h;
						w = available.width - p_width;
						h = available.height - p_height;
						m2 = w > h ? w : h;
						if(m1 < m2) {
							available = area;
						}
					}
					area = area.g2d_next;
				}
			} else if(this.g2d_heuristics == 3) {
				available.width = this.g2d_width + 1;
				area = this.g2d_firstAvailableArea;
				while(area != null) {
					if(area.width >= p_width && area.height >= p_height) {
						var a1 = area.width * area.height;
						var a2 = available.width * available.height;
						if(a1 < a2 || a1 == a2 && area.width < available.width) {
							available = area;
						}
					}
					area = area.g2d_next;
				}
			}
			var area1 = available != this.g2d_negativeArea ? available : null;
			if(area1 != null) {
				rect.set(area1.x,area1.y,rect.width + (p_padding - rect.padding) * 2,rect.height + (p_padding - rect.padding) * 2);
				rect.padding = p_padding;
				var sx = rect.x;
				var sy = rect.y;
				var sright = rect.right;
				var sbottom = rect.bottom;
				var area2 = this.g2d_firstAvailableArea;
				while(area2 != null) {
					var next = area2.g2d_next;
					if(!(sx >= area2.right || sright <= area2.x || sy >= area2.bottom || sbottom <= area2.y)) {
						if(sx > area2.x) {
							var p_x = area2.x;
							var p_y = area2.y;
							var p_width1 = sx - area2.x;
							var p_height1 = area2.height;
							var valid = true;
							var area3 = this.g2d_firstNewArea;
							while(area3 != null) {
								var next1 = area3.g2d_next;
								if(!(area3.x > p_x || area3.y > p_y || area3.right < p_x + p_width1 || area3.bottom < p_y + p_height1)) {
									valid = false;
									break;
								} else if(!(area3.x < p_x || area3.y < p_y || area3.right > p_x + p_width1 || area3.bottom > p_y + p_height1)) {
									if(area3.g2d_next != null) {
										area3.g2d_next.g2d_previous = area3.g2d_previous;
									} else {
										this.g2d_lastNewArea = area3.g2d_previous;
									}
									if(area3.g2d_previous != null) {
										area3.g2d_previous.g2d_next = area3.g2d_next;
									} else {
										this.g2d_firstNewArea = area3.g2d_next;
									}
									area3.dispose();
								}
								area3 = next1;
							}
							if(valid) {
								area3 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width1,p_height1);
								if(this.g2d_newBoundingArea.x < p_x) {
									this.g2d_newBoundingArea.x = p_x;
								}
								if(this.g2d_newBoundingArea.right > area3.right) {
									this.g2d_newBoundingArea.right = area3.right;
								}
								if(this.g2d_newBoundingArea.y < p_y) {
									this.g2d_newBoundingArea.y = p_y;
								}
								if(this.g2d_newBoundingArea.bottom < area3.bottom) {
									this.g2d_newBoundingArea.bottom = area3.bottom;
								}
								if(this.g2d_lastNewArea != null) {
									area3.g2d_previous = this.g2d_lastNewArea;
									this.g2d_lastNewArea.g2d_next = area3;
									this.g2d_lastNewArea = area3;
								} else {
									this.g2d_lastNewArea = area3;
									this.g2d_firstNewArea = area3;
								}
							} else {
								area3 = null;
							}
						}
						if(sright < area2.right) {
							var p_y1 = area2.y;
							var p_width2 = area2.right - sright;
							var p_height2 = area2.height;
							var valid1 = true;
							var area4 = this.g2d_firstNewArea;
							while(area4 != null) {
								var next2 = area4.g2d_next;
								if(!(area4.x > sright || area4.y > p_y1 || area4.right < sright + p_width2 || area4.bottom < p_y1 + p_height2)) {
									valid1 = false;
									break;
								} else if(!(area4.x < sright || area4.y < p_y1 || area4.right > sright + p_width2 || area4.bottom > p_y1 + p_height2)) {
									if(area4.g2d_next != null) {
										area4.g2d_next.g2d_previous = area4.g2d_previous;
									} else {
										this.g2d_lastNewArea = area4.g2d_previous;
									}
									if(area4.g2d_previous != null) {
										area4.g2d_previous.g2d_next = area4.g2d_next;
									} else {
										this.g2d_firstNewArea = area4.g2d_next;
									}
									area4.dispose();
								}
								area4 = next2;
							}
							if(valid1) {
								area4 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width2,p_height2);
								if(this.g2d_newBoundingArea.x < sright) {
									this.g2d_newBoundingArea.x = sright;
								}
								if(this.g2d_newBoundingArea.right > area4.right) {
									this.g2d_newBoundingArea.right = area4.right;
								}
								if(this.g2d_newBoundingArea.y < p_y1) {
									this.g2d_newBoundingArea.y = p_y1;
								}
								if(this.g2d_newBoundingArea.bottom < area4.bottom) {
									this.g2d_newBoundingArea.bottom = area4.bottom;
								}
								if(this.g2d_lastNewArea != null) {
									area4.g2d_previous = this.g2d_lastNewArea;
									this.g2d_lastNewArea.g2d_next = area4;
									this.g2d_lastNewArea = area4;
								} else {
									this.g2d_lastNewArea = area4;
									this.g2d_firstNewArea = area4;
								}
							} else {
								area4 = null;
							}
						}
						if(sy > area2.y) {
							var p_x1 = area2.x;
							var p_y2 = area2.y;
							var p_width3 = area2.width;
							var p_height3 = sy - area2.y;
							var valid2 = true;
							var area5 = this.g2d_firstNewArea;
							while(area5 != null) {
								var next3 = area5.g2d_next;
								if(!(area5.x > p_x1 || area5.y > p_y2 || area5.right < p_x1 + p_width3 || area5.bottom < p_y2 + p_height3)) {
									valid2 = false;
									break;
								} else if(!(area5.x < p_x1 || area5.y < p_y2 || area5.right > p_x1 + p_width3 || area5.bottom > p_y2 + p_height3)) {
									if(area5.g2d_next != null) {
										area5.g2d_next.g2d_previous = area5.g2d_previous;
									} else {
										this.g2d_lastNewArea = area5.g2d_previous;
									}
									if(area5.g2d_previous != null) {
										area5.g2d_previous.g2d_next = area5.g2d_next;
									} else {
										this.g2d_firstNewArea = area5.g2d_next;
									}
									area5.dispose();
								}
								area5 = next3;
							}
							if(valid2) {
								area5 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width3,p_height3);
								if(this.g2d_newBoundingArea.x < p_x1) {
									this.g2d_newBoundingArea.x = p_x1;
								}
								if(this.g2d_newBoundingArea.right > area5.right) {
									this.g2d_newBoundingArea.right = area5.right;
								}
								if(this.g2d_newBoundingArea.y < p_y2) {
									this.g2d_newBoundingArea.y = p_y2;
								}
								if(this.g2d_newBoundingArea.bottom < area5.bottom) {
									this.g2d_newBoundingArea.bottom = area5.bottom;
								}
								if(this.g2d_lastNewArea != null) {
									area5.g2d_previous = this.g2d_lastNewArea;
									this.g2d_lastNewArea.g2d_next = area5;
									this.g2d_lastNewArea = area5;
								} else {
									this.g2d_lastNewArea = area5;
									this.g2d_firstNewArea = area5;
								}
							} else {
								area5 = null;
							}
						}
						if(sbottom < area2.bottom) {
							var p_x2 = area2.x;
							var p_width4 = area2.width;
							var p_height4 = area2.bottom - sbottom;
							var valid3 = true;
							var area6 = this.g2d_firstNewArea;
							while(area6 != null) {
								var next4 = area6.g2d_next;
								if(!(area6.x > p_x2 || area6.y > sbottom || area6.right < p_x2 + p_width4 || area6.bottom < sbottom + p_height4)) {
									valid3 = false;
									break;
								} else if(!(area6.x < p_x2 || area6.y < sbottom || area6.right > p_x2 + p_width4 || area6.bottom > sbottom + p_height4)) {
									if(area6.g2d_next != null) {
										area6.g2d_next.g2d_previous = area6.g2d_previous;
									} else {
										this.g2d_lastNewArea = area6.g2d_previous;
									}
									if(area6.g2d_previous != null) {
										area6.g2d_previous.g2d_next = area6.g2d_next;
									} else {
										this.g2d_firstNewArea = area6.g2d_next;
									}
									area6.dispose();
								}
								area6 = next4;
							}
							if(valid3) {
								area6 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width4,p_height4);
								if(this.g2d_newBoundingArea.x < p_x2) {
									this.g2d_newBoundingArea.x = p_x2;
								}
								if(this.g2d_newBoundingArea.right > area6.right) {
									this.g2d_newBoundingArea.right = area6.right;
								}
								if(this.g2d_newBoundingArea.y < sbottom) {
									this.g2d_newBoundingArea.y = sbottom;
								}
								if(this.g2d_newBoundingArea.bottom < area6.bottom) {
									this.g2d_newBoundingArea.bottom = area6.bottom;
								}
								if(this.g2d_lastNewArea != null) {
									area6.g2d_previous = this.g2d_lastNewArea;
									this.g2d_lastNewArea.g2d_next = area6;
									this.g2d_lastNewArea = area6;
								} else {
									this.g2d_lastNewArea = area6;
									this.g2d_firstNewArea = area6;
								}
							} else {
								area6 = null;
							}
						}
						if(area2.g2d_next != null) {
							area2.g2d_next.g2d_previous = area2.g2d_previous;
						} else {
							this.g2d_lastAvailableArea = area2.g2d_previous;
						}
						if(area2.g2d_previous != null) {
							area2.g2d_previous.g2d_next = area2.g2d_next;
						} else {
							this.g2d_firstAvailableArea = area2.g2d_next;
						}
						area2.dispose();
					}
					area2 = next;
				}
				while(this.g2d_firstNewArea != null) {
					var area7 = this.g2d_firstNewArea;
					if(area7.g2d_next != null) {
						this.g2d_firstNewArea = area7.g2d_next;
						this.g2d_firstNewArea.g2d_previous = null;
					} else {
						this.g2d_firstNewArea = null;
					}
					area7.g2d_previous = null;
					area7.g2d_next = null;
					if(this.g2d_lastAvailableArea != null) {
						area7.g2d_previous = this.g2d_lastAvailableArea;
						this.g2d_lastAvailableArea.g2d_next = area7;
						this.g2d_lastAvailableArea = area7;
					} else {
						this.g2d_lastAvailableArea = area7;
						this.g2d_firstAvailableArea = area7;
					}
				}
				this.g2d_lastNewArea = null;
				this.g2d_newBoundingArea.set(0,0,0,0);
				if(p_padding != 0) {
					rect.setPadding(0);
				}
				this.g2d_rectangles.push(rect);
			}
			var s = area1 != null;
			if(!s && this.g2d_autoExpand) {
				failedRectangles.push(p_rectangles[i]);
			}
			success = success && s;
		}
		if(!success && this.g2d_autoExpand) {
			var storedRectangles = this.getRectangles();
			storedRectangles = storedRectangles.concat(failedRectangles);
			if(this.g2d_sortOnExpand != 0) {
				storedRectangles.sort(this.g2d_sortOnExpand == 1 ? $bind(this,this.g2d_sortOnHeightAscending) : $bind(this,this.g2d_sortOnHeightDescending));
			}
			var minimalArea = this.g2d_getRectanglesArea(storedRectangles);
			while(true) {
				if((this.g2d_width <= this.g2d_height || this.g2d_height == this.g2d_maxHeight) && this.g2d_width < this.g2d_maxWidth) {
					this.g2d_width = this.g2d_forceValidTextureSizeOnExpand ? this.g2d_width * 2 : this.g2d_width + 1;
				} else {
					this.g2d_height = this.g2d_forceValidTextureSizeOnExpand ? this.g2d_height * 2 : this.g2d_height + 1;
				}
				if(!(this.g2d_width * this.g2d_height < minimalArea && (this.g2d_width < this.g2d_maxWidth || this.g2d_height < this.g2d_maxHeight))) {
					break;
				}
			}
			this.clear();
			success = this.g2d_addRectangles(storedRectangles,p_padding);
			while(!success && (this.g2d_width < this.g2d_maxWidth || this.g2d_height < this.g2d_maxHeight)) {
				if((this.g2d_width <= this.g2d_height || this.g2d_height == this.g2d_maxHeight) && this.g2d_width < this.g2d_maxWidth) {
					this.g2d_width = this.g2d_forceValidTextureSizeOnExpand ? this.g2d_width * 2 : this.g2d_width + com_genome2d_utils_GMaxRectPacker.nonValidTextureSizePrecision;
				} else {
					this.g2d_height = this.g2d_forceValidTextureSizeOnExpand ? this.g2d_height * 2 : this.g2d_height + com_genome2d_utils_GMaxRectPacker.nonValidTextureSizePrecision;
				}
				this.clear();
				success = this.g2d_addRectangles(storedRectangles,p_padding);
			}
			success = this.g2d_width <= this.g2d_maxWidth && this.g2d_height <= this.g2d_maxHeight;
		}
		return success;
	}
	,g2d_getRectanglesArea: function(p_rectangles) {
		var area = 0;
		var i = p_rectangles.length - 1;
		while(i >= 0) {
			area += p_rectangles[i].width * p_rectangles[i].height;
			--i;
		}
		return area;
	}
	,g2d_addRectangles: function(p_rectangles,p_padding,p_force) {
		if(p_force == null) {
			p_force = true;
		}
		if(p_padding == null) {
			p_padding = 0;
		}
		var count = p_rectangles.length;
		var success = true;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var rect = p_rectangles[i];
			if(success) {
				var p_width = rect.width + (p_padding - rect.padding) * 2;
				var p_height = rect.height + (p_padding - rect.padding) * 2;
				var available = this.g2d_negativeArea;
				var area;
				var w;
				var h;
				var m1;
				var m2;
				if(this.g2d_heuristics == 0) {
					area = this.g2d_firstAvailableArea;
					while(area != null) {
						if(area.width >= p_width && area.height >= p_height) {
							if(area.y < available.y || area.y == available.y && area.x < available.x) {
								available = area;
							}
						}
						area = area.g2d_next;
					}
				} else if(this.g2d_heuristics == 1) {
					available.width = this.g2d_width + 1;
					area = this.g2d_firstAvailableArea;
					while(area != null) {
						if(area.width >= p_width && area.height >= p_height) {
							w = area.width - p_width;
							h = area.height - p_height;
							m1 = w < h ? w : h;
							w = available.width - p_width;
							h = available.height - p_height;
							m2 = w < h ? w : h;
							if(m1 < m2) {
								available = area;
							}
						}
						area = area.g2d_next;
					}
				} else if(this.g2d_heuristics == 2) {
					available.width = this.g2d_width + 1;
					area = this.g2d_firstAvailableArea;
					while(area != null) {
						if(area.width >= p_width && area.height >= p_height) {
							w = area.width - p_width;
							h = area.height - p_height;
							m1 = w > h ? w : h;
							w = available.width - p_width;
							h = available.height - p_height;
							m2 = w > h ? w : h;
							if(m1 < m2) {
								available = area;
							}
						}
						area = area.g2d_next;
					}
				} else if(this.g2d_heuristics == 3) {
					available.width = this.g2d_width + 1;
					area = this.g2d_firstAvailableArea;
					while(area != null) {
						if(area.width >= p_width && area.height >= p_height) {
							var a1 = area.width * area.height;
							var a2 = available.width * available.height;
							if(a1 < a2 || a1 == a2 && area.width < available.width) {
								available = area;
							}
						}
						area = area.g2d_next;
					}
				}
				var area1 = available != this.g2d_negativeArea ? available : null;
				if(area1 != null) {
					rect.set(area1.x,area1.y,rect.width + (p_padding - rect.padding) * 2,rect.height + (p_padding - rect.padding) * 2);
					rect.padding = p_padding;
					var sx = rect.x;
					var sy = rect.y;
					var sright = rect.right;
					var sbottom = rect.bottom;
					var area2 = this.g2d_firstAvailableArea;
					while(area2 != null) {
						var next = area2.g2d_next;
						if(!(sx >= area2.right || sright <= area2.x || sy >= area2.bottom || sbottom <= area2.y)) {
							if(sx > area2.x) {
								var p_x = area2.x;
								var p_y = area2.y;
								var p_width1 = sx - area2.x;
								var p_height1 = area2.height;
								var valid = true;
								var area3 = this.g2d_firstNewArea;
								while(area3 != null) {
									var next1 = area3.g2d_next;
									if(!(area3.x > p_x || area3.y > p_y || area3.right < p_x + p_width1 || area3.bottom < p_y + p_height1)) {
										valid = false;
										break;
									} else if(!(area3.x < p_x || area3.y < p_y || area3.right > p_x + p_width1 || area3.bottom > p_y + p_height1)) {
										if(area3.g2d_next != null) {
											area3.g2d_next.g2d_previous = area3.g2d_previous;
										} else {
											this.g2d_lastNewArea = area3.g2d_previous;
										}
										if(area3.g2d_previous != null) {
											area3.g2d_previous.g2d_next = area3.g2d_next;
										} else {
											this.g2d_firstNewArea = area3.g2d_next;
										}
										area3.dispose();
									}
									area3 = next1;
								}
								if(valid) {
									area3 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width1,p_height1);
									if(this.g2d_newBoundingArea.x < p_x) {
										this.g2d_newBoundingArea.x = p_x;
									}
									if(this.g2d_newBoundingArea.right > area3.right) {
										this.g2d_newBoundingArea.right = area3.right;
									}
									if(this.g2d_newBoundingArea.y < p_y) {
										this.g2d_newBoundingArea.y = p_y;
									}
									if(this.g2d_newBoundingArea.bottom < area3.bottom) {
										this.g2d_newBoundingArea.bottom = area3.bottom;
									}
									if(this.g2d_lastNewArea != null) {
										area3.g2d_previous = this.g2d_lastNewArea;
										this.g2d_lastNewArea.g2d_next = area3;
										this.g2d_lastNewArea = area3;
									} else {
										this.g2d_lastNewArea = area3;
										this.g2d_firstNewArea = area3;
									}
								} else {
									area3 = null;
								}
							}
							if(sright < area2.right) {
								var p_y1 = area2.y;
								var p_width2 = area2.right - sright;
								var p_height2 = area2.height;
								var valid1 = true;
								var area4 = this.g2d_firstNewArea;
								while(area4 != null) {
									var next2 = area4.g2d_next;
									if(!(area4.x > sright || area4.y > p_y1 || area4.right < sright + p_width2 || area4.bottom < p_y1 + p_height2)) {
										valid1 = false;
										break;
									} else if(!(area4.x < sright || area4.y < p_y1 || area4.right > sright + p_width2 || area4.bottom > p_y1 + p_height2)) {
										if(area4.g2d_next != null) {
											area4.g2d_next.g2d_previous = area4.g2d_previous;
										} else {
											this.g2d_lastNewArea = area4.g2d_previous;
										}
										if(area4.g2d_previous != null) {
											area4.g2d_previous.g2d_next = area4.g2d_next;
										} else {
											this.g2d_firstNewArea = area4.g2d_next;
										}
										area4.dispose();
									}
									area4 = next2;
								}
								if(valid1) {
									area4 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width2,p_height2);
									if(this.g2d_newBoundingArea.x < sright) {
										this.g2d_newBoundingArea.x = sright;
									}
									if(this.g2d_newBoundingArea.right > area4.right) {
										this.g2d_newBoundingArea.right = area4.right;
									}
									if(this.g2d_newBoundingArea.y < p_y1) {
										this.g2d_newBoundingArea.y = p_y1;
									}
									if(this.g2d_newBoundingArea.bottom < area4.bottom) {
										this.g2d_newBoundingArea.bottom = area4.bottom;
									}
									if(this.g2d_lastNewArea != null) {
										area4.g2d_previous = this.g2d_lastNewArea;
										this.g2d_lastNewArea.g2d_next = area4;
										this.g2d_lastNewArea = area4;
									} else {
										this.g2d_lastNewArea = area4;
										this.g2d_firstNewArea = area4;
									}
								} else {
									area4 = null;
								}
							}
							if(sy > area2.y) {
								var p_x1 = area2.x;
								var p_y2 = area2.y;
								var p_width3 = area2.width;
								var p_height3 = sy - area2.y;
								var valid2 = true;
								var area5 = this.g2d_firstNewArea;
								while(area5 != null) {
									var next3 = area5.g2d_next;
									if(!(area5.x > p_x1 || area5.y > p_y2 || area5.right < p_x1 + p_width3 || area5.bottom < p_y2 + p_height3)) {
										valid2 = false;
										break;
									} else if(!(area5.x < p_x1 || area5.y < p_y2 || area5.right > p_x1 + p_width3 || area5.bottom > p_y2 + p_height3)) {
										if(area5.g2d_next != null) {
											area5.g2d_next.g2d_previous = area5.g2d_previous;
										} else {
											this.g2d_lastNewArea = area5.g2d_previous;
										}
										if(area5.g2d_previous != null) {
											area5.g2d_previous.g2d_next = area5.g2d_next;
										} else {
											this.g2d_firstNewArea = area5.g2d_next;
										}
										area5.dispose();
									}
									area5 = next3;
								}
								if(valid2) {
									area5 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width3,p_height3);
									if(this.g2d_newBoundingArea.x < p_x1) {
										this.g2d_newBoundingArea.x = p_x1;
									}
									if(this.g2d_newBoundingArea.right > area5.right) {
										this.g2d_newBoundingArea.right = area5.right;
									}
									if(this.g2d_newBoundingArea.y < p_y2) {
										this.g2d_newBoundingArea.y = p_y2;
									}
									if(this.g2d_newBoundingArea.bottom < area5.bottom) {
										this.g2d_newBoundingArea.bottom = area5.bottom;
									}
									if(this.g2d_lastNewArea != null) {
										area5.g2d_previous = this.g2d_lastNewArea;
										this.g2d_lastNewArea.g2d_next = area5;
										this.g2d_lastNewArea = area5;
									} else {
										this.g2d_lastNewArea = area5;
										this.g2d_firstNewArea = area5;
									}
								} else {
									area5 = null;
								}
							}
							if(sbottom < area2.bottom) {
								var p_x2 = area2.x;
								var p_width4 = area2.width;
								var p_height4 = area2.bottom - sbottom;
								var valid3 = true;
								var area6 = this.g2d_firstNewArea;
								while(area6 != null) {
									var next4 = area6.g2d_next;
									if(!(area6.x > p_x2 || area6.y > sbottom || area6.right < p_x2 + p_width4 || area6.bottom < sbottom + p_height4)) {
										valid3 = false;
										break;
									} else if(!(area6.x < p_x2 || area6.y < sbottom || area6.right > p_x2 + p_width4 || area6.bottom > sbottom + p_height4)) {
										if(area6.g2d_next != null) {
											area6.g2d_next.g2d_previous = area6.g2d_previous;
										} else {
											this.g2d_lastNewArea = area6.g2d_previous;
										}
										if(area6.g2d_previous != null) {
											area6.g2d_previous.g2d_next = area6.g2d_next;
										} else {
											this.g2d_firstNewArea = area6.g2d_next;
										}
										area6.dispose();
									}
									area6 = next4;
								}
								if(valid3) {
									area6 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width4,p_height4);
									if(this.g2d_newBoundingArea.x < p_x2) {
										this.g2d_newBoundingArea.x = p_x2;
									}
									if(this.g2d_newBoundingArea.right > area6.right) {
										this.g2d_newBoundingArea.right = area6.right;
									}
									if(this.g2d_newBoundingArea.y < sbottom) {
										this.g2d_newBoundingArea.y = sbottom;
									}
									if(this.g2d_newBoundingArea.bottom < area6.bottom) {
										this.g2d_newBoundingArea.bottom = area6.bottom;
									}
									if(this.g2d_lastNewArea != null) {
										area6.g2d_previous = this.g2d_lastNewArea;
										this.g2d_lastNewArea.g2d_next = area6;
										this.g2d_lastNewArea = area6;
									} else {
										this.g2d_lastNewArea = area6;
										this.g2d_firstNewArea = area6;
									}
								} else {
									area6 = null;
								}
							}
							if(area2.g2d_next != null) {
								area2.g2d_next.g2d_previous = area2.g2d_previous;
							} else {
								this.g2d_lastAvailableArea = area2.g2d_previous;
							}
							if(area2.g2d_previous != null) {
								area2.g2d_previous.g2d_next = area2.g2d_next;
							} else {
								this.g2d_firstAvailableArea = area2.g2d_next;
							}
							area2.dispose();
						}
						area2 = next;
					}
					while(this.g2d_firstNewArea != null) {
						var area7 = this.g2d_firstNewArea;
						if(area7.g2d_next != null) {
							this.g2d_firstNewArea = area7.g2d_next;
							this.g2d_firstNewArea.g2d_previous = null;
						} else {
							this.g2d_firstNewArea = null;
						}
						area7.g2d_previous = null;
						area7.g2d_next = null;
						if(this.g2d_lastAvailableArea != null) {
							area7.g2d_previous = this.g2d_lastAvailableArea;
							this.g2d_lastAvailableArea.g2d_next = area7;
							this.g2d_lastAvailableArea = area7;
						} else {
							this.g2d_lastAvailableArea = area7;
							this.g2d_firstAvailableArea = area7;
						}
					}
					this.g2d_lastNewArea = null;
					this.g2d_newBoundingArea.set(0,0,0,0);
					if(p_padding != 0) {
						rect.setPadding(0);
					}
					this.g2d_rectangles.push(rect);
				}
				success = area1 != null;
			} else {
				success = false;
			}
			if(!success && !p_force) {
				return false;
			}
		}
		return success;
	}
	,g2d_addRectangle: function(p_rect,p_padding) {
		var p_width = p_rect.width + (p_padding - p_rect.padding) * 2;
		var p_height = p_rect.height + (p_padding - p_rect.padding) * 2;
		var available = this.g2d_negativeArea;
		var area;
		var w;
		var h;
		var m1;
		var m2;
		if(this.g2d_heuristics == 0) {
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					if(area.y < available.y || area.y == available.y && area.x < available.x) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 1) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w < h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w < h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 2) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w > h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w > h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 3) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					var a1 = area.width * area.height;
					var a2 = available.width * available.height;
					if(a1 < a2 || a1 == a2 && area.width < available.width) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		}
		var area1 = available != this.g2d_negativeArea ? available : null;
		if(area1 != null) {
			p_rect.set(area1.x,area1.y,p_rect.width + (p_padding - p_rect.padding) * 2,p_rect.height + (p_padding - p_rect.padding) * 2);
			p_rect.padding = p_padding;
			var sx = p_rect.x;
			var sy = p_rect.y;
			var sright = p_rect.right;
			var sbottom = p_rect.bottom;
			var area2 = this.g2d_firstAvailableArea;
			while(area2 != null) {
				var next = area2.g2d_next;
				if(!(sx >= area2.right || sright <= area2.x || sy >= area2.bottom || sbottom <= area2.y)) {
					if(sx > area2.x) {
						var p_x = area2.x;
						var p_y = area2.y;
						var p_width1 = sx - area2.x;
						var p_height1 = area2.height;
						var valid = true;
						var area3 = this.g2d_firstNewArea;
						while(area3 != null) {
							var next1 = area3.g2d_next;
							if(!(area3.x > p_x || area3.y > p_y || area3.right < p_x + p_width1 || area3.bottom < p_y + p_height1)) {
								valid = false;
								break;
							} else if(!(area3.x < p_x || area3.y < p_y || area3.right > p_x + p_width1 || area3.bottom > p_y + p_height1)) {
								if(area3.g2d_next != null) {
									area3.g2d_next.g2d_previous = area3.g2d_previous;
								} else {
									this.g2d_lastNewArea = area3.g2d_previous;
								}
								if(area3.g2d_previous != null) {
									area3.g2d_previous.g2d_next = area3.g2d_next;
								} else {
									this.g2d_firstNewArea = area3.g2d_next;
								}
								area3.dispose();
							}
							area3 = next1;
						}
						if(valid) {
							area3 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width1,p_height1);
							if(this.g2d_newBoundingArea.x < p_x) {
								this.g2d_newBoundingArea.x = p_x;
							}
							if(this.g2d_newBoundingArea.right > area3.right) {
								this.g2d_newBoundingArea.right = area3.right;
							}
							if(this.g2d_newBoundingArea.y < p_y) {
								this.g2d_newBoundingArea.y = p_y;
							}
							if(this.g2d_newBoundingArea.bottom < area3.bottom) {
								this.g2d_newBoundingArea.bottom = area3.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area3.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area3;
								this.g2d_lastNewArea = area3;
							} else {
								this.g2d_lastNewArea = area3;
								this.g2d_firstNewArea = area3;
							}
						} else {
							area3 = null;
						}
					}
					if(sright < area2.right) {
						var p_y1 = area2.y;
						var p_width2 = area2.right - sright;
						var p_height2 = area2.height;
						var valid1 = true;
						var area4 = this.g2d_firstNewArea;
						while(area4 != null) {
							var next2 = area4.g2d_next;
							if(!(area4.x > sright || area4.y > p_y1 || area4.right < sright + p_width2 || area4.bottom < p_y1 + p_height2)) {
								valid1 = false;
								break;
							} else if(!(area4.x < sright || area4.y < p_y1 || area4.right > sright + p_width2 || area4.bottom > p_y1 + p_height2)) {
								if(area4.g2d_next != null) {
									area4.g2d_next.g2d_previous = area4.g2d_previous;
								} else {
									this.g2d_lastNewArea = area4.g2d_previous;
								}
								if(area4.g2d_previous != null) {
									area4.g2d_previous.g2d_next = area4.g2d_next;
								} else {
									this.g2d_firstNewArea = area4.g2d_next;
								}
								area4.dispose();
							}
							area4 = next2;
						}
						if(valid1) {
							area4 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width2,p_height2);
							if(this.g2d_newBoundingArea.x < sright) {
								this.g2d_newBoundingArea.x = sright;
							}
							if(this.g2d_newBoundingArea.right > area4.right) {
								this.g2d_newBoundingArea.right = area4.right;
							}
							if(this.g2d_newBoundingArea.y < p_y1) {
								this.g2d_newBoundingArea.y = p_y1;
							}
							if(this.g2d_newBoundingArea.bottom < area4.bottom) {
								this.g2d_newBoundingArea.bottom = area4.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area4.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area4;
								this.g2d_lastNewArea = area4;
							} else {
								this.g2d_lastNewArea = area4;
								this.g2d_firstNewArea = area4;
							}
						} else {
							area4 = null;
						}
					}
					if(sy > area2.y) {
						var p_x1 = area2.x;
						var p_y2 = area2.y;
						var p_width3 = area2.width;
						var p_height3 = sy - area2.y;
						var valid2 = true;
						var area5 = this.g2d_firstNewArea;
						while(area5 != null) {
							var next3 = area5.g2d_next;
							if(!(area5.x > p_x1 || area5.y > p_y2 || area5.right < p_x1 + p_width3 || area5.bottom < p_y2 + p_height3)) {
								valid2 = false;
								break;
							} else if(!(area5.x < p_x1 || area5.y < p_y2 || area5.right > p_x1 + p_width3 || area5.bottom > p_y2 + p_height3)) {
								if(area5.g2d_next != null) {
									area5.g2d_next.g2d_previous = area5.g2d_previous;
								} else {
									this.g2d_lastNewArea = area5.g2d_previous;
								}
								if(area5.g2d_previous != null) {
									area5.g2d_previous.g2d_next = area5.g2d_next;
								} else {
									this.g2d_firstNewArea = area5.g2d_next;
								}
								area5.dispose();
							}
							area5 = next3;
						}
						if(valid2) {
							area5 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width3,p_height3);
							if(this.g2d_newBoundingArea.x < p_x1) {
								this.g2d_newBoundingArea.x = p_x1;
							}
							if(this.g2d_newBoundingArea.right > area5.right) {
								this.g2d_newBoundingArea.right = area5.right;
							}
							if(this.g2d_newBoundingArea.y < p_y2) {
								this.g2d_newBoundingArea.y = p_y2;
							}
							if(this.g2d_newBoundingArea.bottom < area5.bottom) {
								this.g2d_newBoundingArea.bottom = area5.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area5.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area5;
								this.g2d_lastNewArea = area5;
							} else {
								this.g2d_lastNewArea = area5;
								this.g2d_firstNewArea = area5;
							}
						} else {
							area5 = null;
						}
					}
					if(sbottom < area2.bottom) {
						var p_x2 = area2.x;
						var p_width4 = area2.width;
						var p_height4 = area2.bottom - sbottom;
						var valid3 = true;
						var area6 = this.g2d_firstNewArea;
						while(area6 != null) {
							var next4 = area6.g2d_next;
							if(!(area6.x > p_x2 || area6.y > sbottom || area6.right < p_x2 + p_width4 || area6.bottom < sbottom + p_height4)) {
								valid3 = false;
								break;
							} else if(!(area6.x < p_x2 || area6.y < sbottom || area6.right > p_x2 + p_width4 || area6.bottom > sbottom + p_height4)) {
								if(area6.g2d_next != null) {
									area6.g2d_next.g2d_previous = area6.g2d_previous;
								} else {
									this.g2d_lastNewArea = area6.g2d_previous;
								}
								if(area6.g2d_previous != null) {
									area6.g2d_previous.g2d_next = area6.g2d_next;
								} else {
									this.g2d_firstNewArea = area6.g2d_next;
								}
								area6.dispose();
							}
							area6 = next4;
						}
						if(valid3) {
							area6 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width4,p_height4);
							if(this.g2d_newBoundingArea.x < p_x2) {
								this.g2d_newBoundingArea.x = p_x2;
							}
							if(this.g2d_newBoundingArea.right > area6.right) {
								this.g2d_newBoundingArea.right = area6.right;
							}
							if(this.g2d_newBoundingArea.y < sbottom) {
								this.g2d_newBoundingArea.y = sbottom;
							}
							if(this.g2d_newBoundingArea.bottom < area6.bottom) {
								this.g2d_newBoundingArea.bottom = area6.bottom;
							}
							if(this.g2d_lastNewArea != null) {
								area6.g2d_previous = this.g2d_lastNewArea;
								this.g2d_lastNewArea.g2d_next = area6;
								this.g2d_lastNewArea = area6;
							} else {
								this.g2d_lastNewArea = area6;
								this.g2d_firstNewArea = area6;
							}
						} else {
							area6 = null;
						}
					}
					if(area2.g2d_next != null) {
						area2.g2d_next.g2d_previous = area2.g2d_previous;
					} else {
						this.g2d_lastAvailableArea = area2.g2d_previous;
					}
					if(area2.g2d_previous != null) {
						area2.g2d_previous.g2d_next = area2.g2d_next;
					} else {
						this.g2d_firstAvailableArea = area2.g2d_next;
					}
					area2.dispose();
				}
				area2 = next;
			}
			while(this.g2d_firstNewArea != null) {
				var area7 = this.g2d_firstNewArea;
				if(area7.g2d_next != null) {
					this.g2d_firstNewArea = area7.g2d_next;
					this.g2d_firstNewArea.g2d_previous = null;
				} else {
					this.g2d_firstNewArea = null;
				}
				area7.g2d_previous = null;
				area7.g2d_next = null;
				if(this.g2d_lastAvailableArea != null) {
					area7.g2d_previous = this.g2d_lastAvailableArea;
					this.g2d_lastAvailableArea.g2d_next = area7;
					this.g2d_lastAvailableArea = area7;
				} else {
					this.g2d_lastAvailableArea = area7;
					this.g2d_firstAvailableArea = area7;
				}
			}
			this.g2d_lastNewArea = null;
			this.g2d_newBoundingArea.set(0,0,0,0);
			if(p_padding != 0) {
				p_rect.setPadding(0);
			}
			this.g2d_rectangles.push(p_rect);
		}
		return area1 != null;
	}
	,g2d_addRectangleFixed: function(p_rect) {
		var sx = p_rect.x;
		var sy = p_rect.y;
		var sright = p_rect.right;
		var sbottom = p_rect.bottom;
		var area = this.g2d_firstAvailableArea;
		while(area != null) {
			var next = area.g2d_next;
			if(!(sx >= area.right || sright <= area.x || sy >= area.bottom || sbottom <= area.y)) {
				if(sx > area.x) {
					var p_x = area.x;
					var p_y = area.y;
					var p_width = sx - area.x;
					var p_height = area.height;
					var valid = true;
					var area1 = this.g2d_firstNewArea;
					while(area1 != null) {
						var next1 = area1.g2d_next;
						if(!(area1.x > p_x || area1.y > p_y || area1.right < p_x + p_width || area1.bottom < p_y + p_height)) {
							valid = false;
							break;
						} else if(!(area1.x < p_x || area1.y < p_y || area1.right > p_x + p_width || area1.bottom > p_y + p_height)) {
							if(area1.g2d_next != null) {
								area1.g2d_next.g2d_previous = area1.g2d_previous;
							} else {
								this.g2d_lastNewArea = area1.g2d_previous;
							}
							if(area1.g2d_previous != null) {
								area1.g2d_previous.g2d_next = area1.g2d_next;
							} else {
								this.g2d_firstNewArea = area1.g2d_next;
							}
							area1.dispose();
						}
						area1 = next1;
					}
					if(valid) {
						area1 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width,p_height);
						if(this.g2d_newBoundingArea.x < p_x) {
							this.g2d_newBoundingArea.x = p_x;
						}
						if(this.g2d_newBoundingArea.right > area1.right) {
							this.g2d_newBoundingArea.right = area1.right;
						}
						if(this.g2d_newBoundingArea.y < p_y) {
							this.g2d_newBoundingArea.y = p_y;
						}
						if(this.g2d_newBoundingArea.bottom < area1.bottom) {
							this.g2d_newBoundingArea.bottom = area1.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area1.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area1;
							this.g2d_lastNewArea = area1;
						} else {
							this.g2d_lastNewArea = area1;
							this.g2d_firstNewArea = area1;
						}
					} else {
						area1 = null;
					}
				}
				if(sright < area.right) {
					var p_y1 = area.y;
					var p_width1 = area.right - sright;
					var p_height1 = area.height;
					var valid1 = true;
					var area2 = this.g2d_firstNewArea;
					while(area2 != null) {
						var next2 = area2.g2d_next;
						if(!(area2.x > sright || area2.y > p_y1 || area2.right < sright + p_width1 || area2.bottom < p_y1 + p_height1)) {
							valid1 = false;
							break;
						} else if(!(area2.x < sright || area2.y < p_y1 || area2.right > sright + p_width1 || area2.bottom > p_y1 + p_height1)) {
							if(area2.g2d_next != null) {
								area2.g2d_next.g2d_previous = area2.g2d_previous;
							} else {
								this.g2d_lastNewArea = area2.g2d_previous;
							}
							if(area2.g2d_previous != null) {
								area2.g2d_previous.g2d_next = area2.g2d_next;
							} else {
								this.g2d_firstNewArea = area2.g2d_next;
							}
							area2.dispose();
						}
						area2 = next2;
					}
					if(valid1) {
						area2 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width1,p_height1);
						if(this.g2d_newBoundingArea.x < sright) {
							this.g2d_newBoundingArea.x = sright;
						}
						if(this.g2d_newBoundingArea.right > area2.right) {
							this.g2d_newBoundingArea.right = area2.right;
						}
						if(this.g2d_newBoundingArea.y < p_y1) {
							this.g2d_newBoundingArea.y = p_y1;
						}
						if(this.g2d_newBoundingArea.bottom < area2.bottom) {
							this.g2d_newBoundingArea.bottom = area2.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area2.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area2;
							this.g2d_lastNewArea = area2;
						} else {
							this.g2d_lastNewArea = area2;
							this.g2d_firstNewArea = area2;
						}
					} else {
						area2 = null;
					}
				}
				if(sy > area.y) {
					var p_x1 = area.x;
					var p_y2 = area.y;
					var p_width2 = area.width;
					var p_height2 = sy - area.y;
					var valid2 = true;
					var area3 = this.g2d_firstNewArea;
					while(area3 != null) {
						var next3 = area3.g2d_next;
						if(!(area3.x > p_x1 || area3.y > p_y2 || area3.right < p_x1 + p_width2 || area3.bottom < p_y2 + p_height2)) {
							valid2 = false;
							break;
						} else if(!(area3.x < p_x1 || area3.y < p_y2 || area3.right > p_x1 + p_width2 || area3.bottom > p_y2 + p_height2)) {
							if(area3.g2d_next != null) {
								area3.g2d_next.g2d_previous = area3.g2d_previous;
							} else {
								this.g2d_lastNewArea = area3.g2d_previous;
							}
							if(area3.g2d_previous != null) {
								area3.g2d_previous.g2d_next = area3.g2d_next;
							} else {
								this.g2d_firstNewArea = area3.g2d_next;
							}
							area3.dispose();
						}
						area3 = next3;
					}
					if(valid2) {
						area3 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width2,p_height2);
						if(this.g2d_newBoundingArea.x < p_x1) {
							this.g2d_newBoundingArea.x = p_x1;
						}
						if(this.g2d_newBoundingArea.right > area3.right) {
							this.g2d_newBoundingArea.right = area3.right;
						}
						if(this.g2d_newBoundingArea.y < p_y2) {
							this.g2d_newBoundingArea.y = p_y2;
						}
						if(this.g2d_newBoundingArea.bottom < area3.bottom) {
							this.g2d_newBoundingArea.bottom = area3.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area3.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area3;
							this.g2d_lastNewArea = area3;
						} else {
							this.g2d_lastNewArea = area3;
							this.g2d_firstNewArea = area3;
						}
					} else {
						area3 = null;
					}
				}
				if(sbottom < area.bottom) {
					var p_x2 = area.x;
					var p_width3 = area.width;
					var p_height3 = area.bottom - sbottom;
					var valid3 = true;
					var area4 = this.g2d_firstNewArea;
					while(area4 != null) {
						var next4 = area4.g2d_next;
						if(!(area4.x > p_x2 || area4.y > sbottom || area4.right < p_x2 + p_width3 || area4.bottom < sbottom + p_height3)) {
							valid3 = false;
							break;
						} else if(!(area4.x < p_x2 || area4.y < sbottom || area4.right > p_x2 + p_width3 || area4.bottom > sbottom + p_height3)) {
							if(area4.g2d_next != null) {
								area4.g2d_next.g2d_previous = area4.g2d_previous;
							} else {
								this.g2d_lastNewArea = area4.g2d_previous;
							}
							if(area4.g2d_previous != null) {
								area4.g2d_previous.g2d_next = area4.g2d_next;
							} else {
								this.g2d_firstNewArea = area4.g2d_next;
							}
							area4.dispose();
						}
						area4 = next4;
					}
					if(valid3) {
						area4 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width3,p_height3);
						if(this.g2d_newBoundingArea.x < p_x2) {
							this.g2d_newBoundingArea.x = p_x2;
						}
						if(this.g2d_newBoundingArea.right > area4.right) {
							this.g2d_newBoundingArea.right = area4.right;
						}
						if(this.g2d_newBoundingArea.y < sbottom) {
							this.g2d_newBoundingArea.y = sbottom;
						}
						if(this.g2d_newBoundingArea.bottom < area4.bottom) {
							this.g2d_newBoundingArea.bottom = area4.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area4.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area4;
							this.g2d_lastNewArea = area4;
						} else {
							this.g2d_lastNewArea = area4;
							this.g2d_firstNewArea = area4;
						}
					} else {
						area4 = null;
					}
				}
				if(area.g2d_next != null) {
					area.g2d_next.g2d_previous = area.g2d_previous;
				} else {
					this.g2d_lastAvailableArea = area.g2d_previous;
				}
				if(area.g2d_previous != null) {
					area.g2d_previous.g2d_next = area.g2d_next;
				} else {
					this.g2d_firstAvailableArea = area.g2d_next;
				}
				area.dispose();
			}
			area = next;
		}
		while(this.g2d_firstNewArea != null) {
			var area5 = this.g2d_firstNewArea;
			if(area5.g2d_next != null) {
				this.g2d_firstNewArea = area5.g2d_next;
				this.g2d_firstNewArea.g2d_previous = null;
			} else {
				this.g2d_firstNewArea = null;
			}
			area5.g2d_previous = null;
			area5.g2d_next = null;
			if(this.g2d_lastAvailableArea != null) {
				area5.g2d_previous = this.g2d_lastAvailableArea;
				this.g2d_lastAvailableArea.g2d_next = area5;
				this.g2d_lastAvailableArea = area5;
			} else {
				this.g2d_lastAvailableArea = area5;
				this.g2d_firstAvailableArea = area5;
			}
		}
		this.g2d_lastNewArea = null;
		this.g2d_newBoundingArea.set(0,0,0,0);
		this.g2d_rectangles.push(p_rect);
	}
	,g2d_createNewArea: function(p_x,p_y,p_width,p_height) {
		var valid = true;
		var area = this.g2d_firstNewArea;
		while(area != null) {
			var next = area.g2d_next;
			if(!(area.x > p_x || area.y > p_y || area.right < p_x + p_width || area.bottom < p_y + p_height)) {
				valid = false;
				break;
			} else if(!(area.x < p_x || area.y < p_y || area.right > p_x + p_width || area.bottom > p_y + p_height)) {
				if(area.g2d_next != null) {
					area.g2d_next.g2d_previous = area.g2d_previous;
				} else {
					this.g2d_lastNewArea = area.g2d_previous;
				}
				if(area.g2d_previous != null) {
					area.g2d_previous.g2d_next = area.g2d_next;
				} else {
					this.g2d_firstNewArea = area.g2d_next;
				}
				area.dispose();
			}
			area = next;
		}
		if(valid) {
			area = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width,p_height);
			if(this.g2d_newBoundingArea.x < p_x) {
				this.g2d_newBoundingArea.x = p_x;
			}
			if(this.g2d_newBoundingArea.right > area.right) {
				this.g2d_newBoundingArea.right = area.right;
			}
			if(this.g2d_newBoundingArea.y < p_y) {
				this.g2d_newBoundingArea.y = p_y;
			}
			if(this.g2d_newBoundingArea.bottom < area.bottom) {
				this.g2d_newBoundingArea.bottom = area.bottom;
			}
			if(this.g2d_lastNewArea != null) {
				area.g2d_previous = this.g2d_lastNewArea;
				this.g2d_lastNewArea.g2d_next = area;
				this.g2d_lastNewArea = area;
			} else {
				this.g2d_lastNewArea = area;
				this.g2d_firstNewArea = area;
			}
		} else {
			area = null;
		}
		return area;
	}
	,g2d_splitAvailableAreas: function(p_splitter) {
		var sx = p_splitter.x;
		var sy = p_splitter.y;
		var sright = p_splitter.right;
		var sbottom = p_splitter.bottom;
		var area = this.g2d_firstAvailableArea;
		while(area != null) {
			var next = area.g2d_next;
			if(!(sx >= area.right || sright <= area.x || sy >= area.bottom || sbottom <= area.y)) {
				if(sx > area.x) {
					var p_x = area.x;
					var p_y = area.y;
					var p_width = sx - area.x;
					var p_height = area.height;
					var valid = true;
					var area1 = this.g2d_firstNewArea;
					while(area1 != null) {
						var next1 = area1.g2d_next;
						if(!(area1.x > p_x || area1.y > p_y || area1.right < p_x + p_width || area1.bottom < p_y + p_height)) {
							valid = false;
							break;
						} else if(!(area1.x < p_x || area1.y < p_y || area1.right > p_x + p_width || area1.bottom > p_y + p_height)) {
							if(area1.g2d_next != null) {
								area1.g2d_next.g2d_previous = area1.g2d_previous;
							} else {
								this.g2d_lastNewArea = area1.g2d_previous;
							}
							if(area1.g2d_previous != null) {
								area1.g2d_previous.g2d_next = area1.g2d_next;
							} else {
								this.g2d_firstNewArea = area1.g2d_next;
							}
							area1.dispose();
						}
						area1 = next1;
					}
					if(valid) {
						area1 = com_genome2d_utils_GPackerRectangle.get(p_x,p_y,p_width,p_height);
						if(this.g2d_newBoundingArea.x < p_x) {
							this.g2d_newBoundingArea.x = p_x;
						}
						if(this.g2d_newBoundingArea.right > area1.right) {
							this.g2d_newBoundingArea.right = area1.right;
						}
						if(this.g2d_newBoundingArea.y < p_y) {
							this.g2d_newBoundingArea.y = p_y;
						}
						if(this.g2d_newBoundingArea.bottom < area1.bottom) {
							this.g2d_newBoundingArea.bottom = area1.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area1.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area1;
							this.g2d_lastNewArea = area1;
						} else {
							this.g2d_lastNewArea = area1;
							this.g2d_firstNewArea = area1;
						}
					} else {
						area1 = null;
					}
				}
				if(sright < area.right) {
					var p_y1 = area.y;
					var p_width1 = area.right - sright;
					var p_height1 = area.height;
					var valid1 = true;
					var area2 = this.g2d_firstNewArea;
					while(area2 != null) {
						var next2 = area2.g2d_next;
						if(!(area2.x > sright || area2.y > p_y1 || area2.right < sright + p_width1 || area2.bottom < p_y1 + p_height1)) {
							valid1 = false;
							break;
						} else if(!(area2.x < sright || area2.y < p_y1 || area2.right > sright + p_width1 || area2.bottom > p_y1 + p_height1)) {
							if(area2.g2d_next != null) {
								area2.g2d_next.g2d_previous = area2.g2d_previous;
							} else {
								this.g2d_lastNewArea = area2.g2d_previous;
							}
							if(area2.g2d_previous != null) {
								area2.g2d_previous.g2d_next = area2.g2d_next;
							} else {
								this.g2d_firstNewArea = area2.g2d_next;
							}
							area2.dispose();
						}
						area2 = next2;
					}
					if(valid1) {
						area2 = com_genome2d_utils_GPackerRectangle.get(sright,p_y1,p_width1,p_height1);
						if(this.g2d_newBoundingArea.x < sright) {
							this.g2d_newBoundingArea.x = sright;
						}
						if(this.g2d_newBoundingArea.right > area2.right) {
							this.g2d_newBoundingArea.right = area2.right;
						}
						if(this.g2d_newBoundingArea.y < p_y1) {
							this.g2d_newBoundingArea.y = p_y1;
						}
						if(this.g2d_newBoundingArea.bottom < area2.bottom) {
							this.g2d_newBoundingArea.bottom = area2.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area2.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area2;
							this.g2d_lastNewArea = area2;
						} else {
							this.g2d_lastNewArea = area2;
							this.g2d_firstNewArea = area2;
						}
					} else {
						area2 = null;
					}
				}
				if(sy > area.y) {
					var p_x1 = area.x;
					var p_y2 = area.y;
					var p_width2 = area.width;
					var p_height2 = sy - area.y;
					var valid2 = true;
					var area3 = this.g2d_firstNewArea;
					while(area3 != null) {
						var next3 = area3.g2d_next;
						if(!(area3.x > p_x1 || area3.y > p_y2 || area3.right < p_x1 + p_width2 || area3.bottom < p_y2 + p_height2)) {
							valid2 = false;
							break;
						} else if(!(area3.x < p_x1 || area3.y < p_y2 || area3.right > p_x1 + p_width2 || area3.bottom > p_y2 + p_height2)) {
							if(area3.g2d_next != null) {
								area3.g2d_next.g2d_previous = area3.g2d_previous;
							} else {
								this.g2d_lastNewArea = area3.g2d_previous;
							}
							if(area3.g2d_previous != null) {
								area3.g2d_previous.g2d_next = area3.g2d_next;
							} else {
								this.g2d_firstNewArea = area3.g2d_next;
							}
							area3.dispose();
						}
						area3 = next3;
					}
					if(valid2) {
						area3 = com_genome2d_utils_GPackerRectangle.get(p_x1,p_y2,p_width2,p_height2);
						if(this.g2d_newBoundingArea.x < p_x1) {
							this.g2d_newBoundingArea.x = p_x1;
						}
						if(this.g2d_newBoundingArea.right > area3.right) {
							this.g2d_newBoundingArea.right = area3.right;
						}
						if(this.g2d_newBoundingArea.y < p_y2) {
							this.g2d_newBoundingArea.y = p_y2;
						}
						if(this.g2d_newBoundingArea.bottom < area3.bottom) {
							this.g2d_newBoundingArea.bottom = area3.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area3.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area3;
							this.g2d_lastNewArea = area3;
						} else {
							this.g2d_lastNewArea = area3;
							this.g2d_firstNewArea = area3;
						}
					} else {
						area3 = null;
					}
				}
				if(sbottom < area.bottom) {
					var p_x2 = area.x;
					var p_width3 = area.width;
					var p_height3 = area.bottom - sbottom;
					var valid3 = true;
					var area4 = this.g2d_firstNewArea;
					while(area4 != null) {
						var next4 = area4.g2d_next;
						if(!(area4.x > p_x2 || area4.y > sbottom || area4.right < p_x2 + p_width3 || area4.bottom < sbottom + p_height3)) {
							valid3 = false;
							break;
						} else if(!(area4.x < p_x2 || area4.y < sbottom || area4.right > p_x2 + p_width3 || area4.bottom > sbottom + p_height3)) {
							if(area4.g2d_next != null) {
								area4.g2d_next.g2d_previous = area4.g2d_previous;
							} else {
								this.g2d_lastNewArea = area4.g2d_previous;
							}
							if(area4.g2d_previous != null) {
								area4.g2d_previous.g2d_next = area4.g2d_next;
							} else {
								this.g2d_firstNewArea = area4.g2d_next;
							}
							area4.dispose();
						}
						area4 = next4;
					}
					if(valid3) {
						area4 = com_genome2d_utils_GPackerRectangle.get(p_x2,sbottom,p_width3,p_height3);
						if(this.g2d_newBoundingArea.x < p_x2) {
							this.g2d_newBoundingArea.x = p_x2;
						}
						if(this.g2d_newBoundingArea.right > area4.right) {
							this.g2d_newBoundingArea.right = area4.right;
						}
						if(this.g2d_newBoundingArea.y < sbottom) {
							this.g2d_newBoundingArea.y = sbottom;
						}
						if(this.g2d_newBoundingArea.bottom < area4.bottom) {
							this.g2d_newBoundingArea.bottom = area4.bottom;
						}
						if(this.g2d_lastNewArea != null) {
							area4.g2d_previous = this.g2d_lastNewArea;
							this.g2d_lastNewArea.g2d_next = area4;
							this.g2d_lastNewArea = area4;
						} else {
							this.g2d_lastNewArea = area4;
							this.g2d_firstNewArea = area4;
						}
					} else {
						area4 = null;
					}
				}
				if(area.g2d_next != null) {
					area.g2d_next.g2d_previous = area.g2d_previous;
				} else {
					this.g2d_lastAvailableArea = area.g2d_previous;
				}
				if(area.g2d_previous != null) {
					area.g2d_previous.g2d_next = area.g2d_next;
				} else {
					this.g2d_firstAvailableArea = area.g2d_next;
				}
				area.dispose();
			}
			area = next;
		}
	}
	,g2d_pushNewAreas: function() {
		while(this.g2d_firstNewArea != null) {
			var area = this.g2d_firstNewArea;
			if(area.g2d_next != null) {
				this.g2d_firstNewArea = area.g2d_next;
				this.g2d_firstNewArea.g2d_previous = null;
			} else {
				this.g2d_firstNewArea = null;
			}
			area.g2d_previous = null;
			area.g2d_next = null;
			if(this.g2d_lastAvailableArea != null) {
				area.g2d_previous = this.g2d_lastAvailableArea;
				this.g2d_lastAvailableArea.g2d_next = area;
				this.g2d_lastAvailableArea = area;
			} else {
				this.g2d_lastAvailableArea = area;
				this.g2d_firstAvailableArea = area;
			}
		}
		this.g2d_lastNewArea = null;
		this.g2d_newBoundingArea.set(0,0,0,0);
	}
	,g2d_getAvailableArea: function(p_width,p_height) {
		var available = this.g2d_negativeArea;
		var area;
		var w;
		var h;
		var m1;
		var m2;
		if(this.g2d_heuristics == 0) {
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					if(area.y < available.y || area.y == available.y && area.x < available.x) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 1) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w < h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w < h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 2) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					w = area.width - p_width;
					h = area.height - p_height;
					m1 = w > h ? w : h;
					w = available.width - p_width;
					h = available.height - p_height;
					m2 = w > h ? w : h;
					if(m1 < m2) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		} else if(this.g2d_heuristics == 3) {
			available.width = this.g2d_width + 1;
			area = this.g2d_firstAvailableArea;
			while(area != null) {
				if(area.width >= p_width && area.height >= p_height) {
					var a1 = area.width * area.height;
					var a2 = available.width * available.height;
					if(a1 < a2 || a1 == a2 && area.width < available.width) {
						available = area;
					}
				}
				area = area.g2d_next;
			}
		}
		if(available != this.g2d_negativeArea) {
			return available;
		} else {
			return null;
		}
	}
	,clear: function() {
		this.g2d_rectangles = [];
		while(this.g2d_firstAvailableArea != null) {
			var area = this.g2d_firstAvailableArea;
			this.g2d_firstAvailableArea = area.g2d_next;
			area.dispose();
		}
		this.g2d_firstAvailableArea = this.g2d_lastAvailableArea = com_genome2d_utils_GPackerRectangle.get(0,0,this.g2d_width,this.g2d_height);
		this.g2d_negativeArea = com_genome2d_utils_GPackerRectangle.get(this.g2d_width + 1,this.g2d_height + 1,this.g2d_width + 1,this.g2d_height + 1);
	}
	,g2d_sortOnAreaAscending: function(a,b) {
		var aa = a.width * a.height;
		var ba = b.width * b.height;
		if(aa < ba) {
			return -1;
		} else if(aa > ba) {
			return 1;
		}
		return 0;
	}
	,g2d_sortOnAreaDescending: function(a,b) {
		var aa = a.width * a.height;
		var ba = b.width * b.height;
		if(aa > ba) {
			return -1;
		} else if(aa < ba) {
			return 1;
		}
		return 0;
	}
	,g2d_sortOnHeightAscending: function(a,b) {
		if(a.height < b.height) {
			return -1;
		} else if(a.height > b.height) {
			return 1;
		}
		return 0;
	}
	,g2d_sortOnHeightDescending: function(a,b) {
		if(a.height > b.height) {
			return -1;
		} else if(a.height < b.height) {
			return 1;
		}
		return 0;
	}
	,__class__: com_genome2d_utils_GMaxRectPacker
};
var com_genome2d_utils_GPackerRectangle = function() {
	this.extrude = 0;
	this.padding = 0;
	this.bottom = 0;
	this.right = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["com.genome2d.utils.GPackerRectangle"] = com_genome2d_utils_GPackerRectangle;
com_genome2d_utils_GPackerRectangle.__name__ = "com.genome2d.utils.GPackerRectangle";
com_genome2d_utils_GPackerRectangle.g2d_availableInstance = null;
com_genome2d_utils_GPackerRectangle.get = function(p_x,p_y,p_width,p_height,p_id,p_source,p_pivotX,p_pivotY) {
	if(p_pivotY == null) {
		p_pivotY = 0;
	}
	if(p_pivotX == null) {
		p_pivotX = 0;
	}
	var instance = com_genome2d_utils_GPackerRectangle.g2d_availableInstance;
	if(instance != null) {
		com_genome2d_utils_GPackerRectangle.g2d_availableInstance = instance.g2d_nextInstance;
		instance.g2d_nextInstance = null;
	} else {
		instance = new com_genome2d_utils_GPackerRectangle();
	}
	instance.x = p_x;
	instance.y = p_y;
	instance.width = p_width;
	instance.height = p_height;
	instance.right = p_x + p_width;
	instance.bottom = p_y + p_height;
	instance.id = p_id;
	instance.source = p_source;
	instance.pivotX = p_pivotX;
	instance.pivotY = p_pivotY;
	return instance;
};
com_genome2d_utils_GPackerRectangle.prototype = {
	g2d_next: null
	,g2d_previous: null
	,g2d_nextInstance: null
	,x: null
	,y: null
	,width: null
	,height: null
	,right: null
	,bottom: null
	,id: null
	,source: null
	,pivotX: null
	,pivotY: null
	,padding: null
	,extrude: null
	,userData: null
	,set: function(p_x,p_y,p_width,p_height) {
		this.x = p_x;
		this.y = p_y;
		this.width = p_width;
		this.height = p_height;
		this.right = p_x + p_width;
		this.bottom = p_y + p_height;
	}
	,dispose: function() {
		this.g2d_next = null;
		this.g2d_previous = null;
		this.g2d_nextInstance = com_genome2d_utils_GPackerRectangle.g2d_availableInstance;
		com_genome2d_utils_GPackerRectangle.g2d_availableInstance = this;
		this.source = null;
	}
	,setPadding: function(p_value) {
		this.x -= p_value - this.padding;
		this.y -= p_value - this.padding;
		this.width += (p_value - this.padding) * 2;
		this.height += (p_value - this.padding) * 2;
		this.right += p_value - this.padding;
		this.bottom += p_value - this.padding;
		this.padding = p_value;
	}
	,getRect: function() {
		return new com_genome2d_geom_GRectangle(this.x,this.y,this.width,this.height);
	}
	,toString: function() {
		return "[" + this.id + "] x: " + this.x + " y: " + this.y + " w: " + this.width + " h: " + this.height + " p: " + this.padding;
	}
	,__class__: com_genome2d_utils_GPackerRectangle
};
var com_genome2d_utils_GQuadTree = function(p_x,p_y,p_width,p_height) {
	this.g2d_left = p_x;
	this.g2d_top = p_y;
	this.g2d_right = p_x + p_width;
	this.g2d_bottom = p_y + p_height;
	this.g2d_root = new com_genome2d_utils_GQuadTreeNode(this.g2d_left,this.g2d_top,this.g2d_right,this.g2d_bottom);
	this.g2d_map = new haxe_ds_StringMap();
};
$hxClasses["com.genome2d.utils.GQuadTree"] = com_genome2d_utils_GQuadTree;
com_genome2d_utils_GQuadTree.__name__ = "com.genome2d.utils.GQuadTree";
com_genome2d_utils_GQuadTree.prototype = {
	g2d_root: null
	,g2d_left: null
	,g2d_top: null
	,g2d_right: null
	,g2d_bottom: null
	,g2d_map: null
	,add: function(p_object,p_left,p_top,p_right,p_bottom) {
		var node = this.g2d_root.add(p_object,p_left,p_top,p_right,p_bottom);
		if(node != null) {
			this.g2d_map.set(p_object,node);
		}
		return node != null;
	}
	,remove: function(p_object) {
		var node = this.g2d_map.get(p_object.name);
		if(node == null) {
			return false;
		}
		node.remove(p_object);
		this.g2d_map.remove(p_object.name);
		return true;
	}
	,getObjectsInBounds: function(p_bounds,p_result) {
		this.g2d_root.getObjectsInBounds(p_bounds.x,p_bounds.y,p_bounds.get_right(),p_bounds.get_bottom(),p_result);
	}
	,__class__: com_genome2d_utils_GQuadTree
};
var com_genome2d_utils_GQuadTreeNode = function(p_left,p_top,p_right,p_bottom) {
	this.g2d_left = p_left;
	this.g2d_top = p_top;
	this.g2d_right = p_right;
	this.g2d_bottom = p_bottom;
	this.g2d_width = p_right - p_left;
	this.g2d_height = p_bottom - p_top;
	this.g2d_objects = [];
};
$hxClasses["com.genome2d.utils.GQuadTreeNode"] = com_genome2d_utils_GQuadTreeNode;
com_genome2d_utils_GQuadTreeNode.__name__ = "com.genome2d.utils.GQuadTreeNode";
com_genome2d_utils_GQuadTreeNode.prototype = {
	g2d_left: null
	,g2d_right: null
	,g2d_top: null
	,g2d_bottom: null
	,g2d_width: null
	,g2d_height: null
	,g2d_node1: null
	,g2d_node2: null
	,g2d_node3: null
	,g2d_node4: null
	,g2d_objects: null
	,add: function(p_object,p_left,p_top,p_right,p_bottom) {
		var p_firstLeft = this.g2d_left;
		var p_firstTop = this.g2d_top;
		var p_firstRight = this.g2d_right;
		var p_firstBottom = this.g2d_bottom;
		var x0 = p_firstLeft < p_left ? p_left : p_firstLeft;
		var x1 = p_firstRight > p_right ? p_right : p_firstRight;
		var tmp;
		if(x1 <= x0) {
			tmp = false;
		} else {
			var y0 = p_firstTop < p_top ? p_top : p_firstTop;
			var y1 = p_firstBottom > p_bottom ? p_bottom : p_firstBottom;
			tmp = y1 > y0;
		}
		if(tmp) {
			return null;
		}
		var hw = this.g2d_width * .5;
		var hh = this.g2d_height * .5;
		if(hw < com_genome2d_utils_GQuadTreeNode.MIN_WIDTH || hh < com_genome2d_utils_GQuadTreeNode.MIN_HEIGHT) {
			this.g2d_objects.push(p_object);
			return this;
		}
		var p_firstLeft1 = this.g2d_left;
		var p_firstTop1 = this.g2d_top;
		var p_firstRight1 = this.g2d_left + hw;
		var p_firstBottom1 = this.g2d_top + hh;
		if(p_right - p_left <= 0 || p_bottom - p_top <= 0 ? p_left > p_firstLeft1 && p_top > p_firstTop1 && p_right < p_firstRight1 && p_bottom < p_firstBottom1 : p_left >= p_firstLeft1 && p_top >= p_firstTop1 && p_right <= p_firstRight1 && p_bottom <= p_firstBottom1) {
			if(this.g2d_node1 == null) {
				this.g2d_node1 = new com_genome2d_utils_GQuadTreeNode(this.g2d_left,this.g2d_top,this.g2d_left + hw,this.g2d_top + hh);
			}
			this.g2d_node1.add(p_object,p_left,p_top,p_right,p_bottom);
		} else {
			var p_firstLeft2 = this.g2d_left + hw;
			var p_firstTop2 = this.g2d_top;
			var p_firstRight2 = this.g2d_left + hw;
			var p_firstBottom2 = this.g2d_top + hh;
			if(p_right - p_left <= 0 || p_bottom - p_top <= 0 ? p_left > p_firstLeft2 && p_top > p_firstTop2 && p_right < p_firstRight2 && p_bottom < p_firstBottom2 : p_left >= p_firstLeft2 && p_top >= p_firstTop2 && p_right <= p_firstRight2 && p_bottom <= p_firstBottom2) {
				if(this.g2d_node2 == null) {
					this.g2d_node2 = new com_genome2d_utils_GQuadTreeNode(this.g2d_left + hw,this.g2d_top,this.g2d_left + hw,this.g2d_top + hh);
				}
				this.g2d_node2.add(p_object,p_left,p_top,p_right,p_bottom);
			} else {
				var p_firstLeft3 = this.g2d_left;
				var p_firstTop3 = this.g2d_top + hh;
				var p_firstRight3 = this.g2d_left + hw;
				var p_firstBottom3 = this.g2d_top + hh;
				if(p_right - p_left <= 0 || p_bottom - p_top <= 0 ? p_left > p_firstLeft3 && p_top > p_firstTop3 && p_right < p_firstRight3 && p_bottom < p_firstBottom3 : p_left >= p_firstLeft3 && p_top >= p_firstTop3 && p_right <= p_firstRight3 && p_bottom <= p_firstBottom3) {
					if(this.g2d_node3 == null) {
						this.g2d_node3 = new com_genome2d_utils_GQuadTreeNode(this.g2d_left + hw,this.g2d_top,this.g2d_left + hw,this.g2d_top + hh);
					}
					this.g2d_node3.add(p_object,p_left,p_top,p_right,p_bottom);
				} else {
					var p_firstLeft4 = this.g2d_left + hw;
					var p_firstTop4 = this.g2d_top + hh;
					var p_firstRight4 = this.g2d_left + hw;
					var p_firstBottom4 = this.g2d_top + hh;
					if(p_right - p_left <= 0 || p_bottom - p_top <= 0 ? p_left > p_firstLeft4 && p_top > p_firstTop4 && p_right < p_firstRight4 && p_bottom < p_firstBottom4 : p_left >= p_firstLeft4 && p_top >= p_firstTop4 && p_right <= p_firstRight4 && p_bottom <= p_firstBottom4) {
						if(this.g2d_node4 == null) {
							this.g2d_node4 = new com_genome2d_utils_GQuadTreeNode(this.g2d_left + hw,this.g2d_top + hh,this.g2d_left + hw,this.g2d_top + hh);
						}
						this.g2d_node4.add(p_object,p_left,p_top,p_right,p_bottom);
					} else {
						this.g2d_objects.push(new com_genome2d_utils_Container(p_object,p_left,p_top,p_right,p_bottom));
						return this;
					}
				}
			}
		}
		return null;
	}
	,remove: function(p_object) {
		var count = this.g2d_objects.length;
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var container = this.g2d_objects[i];
			if(container.object == p_object) {
				HxOverrides.remove(this.g2d_objects,container);
				return;
			}
		}
	}
	,getObjectsInBounds: function(p_left,p_top,p_right,p_bottom,p_result) {
		var p_firstLeft = this.g2d_left;
		var p_firstTop = this.g2d_top;
		var p_firstRight = this.g2d_right;
		var p_firstBottom = this.g2d_bottom;
		var x0 = p_firstLeft < p_left ? p_left : p_firstLeft;
		var x1 = p_firstRight > p_right ? p_right : p_firstRight;
		var tmp;
		if(x1 <= x0) {
			tmp = false;
		} else {
			var y0 = p_firstTop < p_top ? p_top : p_firstTop;
			var y1 = p_firstBottom > p_bottom ? p_bottom : p_firstBottom;
			tmp = y1 > y0;
		}
		if(!tmp) {
			return;
		}
		var _g = 0;
		var _g1 = this.g2d_objects;
		while(_g < _g1.length) {
			var container = _g1[_g];
			++_g;
			var p_firstLeft1 = this.g2d_left;
			var p_firstTop1 = this.g2d_top;
			var p_firstRight1 = this.g2d_right;
			var p_firstBottom1 = this.g2d_bottom;
			var p_secondLeft = container.left;
			var p_secondTop = container.top;
			var p_secondRight = container.right;
			var p_secondBottom = container.bottom;
			var x01 = p_firstLeft1 < p_secondLeft ? p_secondLeft : p_firstLeft1;
			var x11 = p_firstRight1 > p_secondRight ? p_secondRight : p_firstRight1;
			var tmp1;
			if(x11 <= x01) {
				tmp1 = false;
			} else {
				var y01 = p_firstTop1 < p_secondTop ? p_secondTop : p_firstTop1;
				var y11 = p_firstBottom1 > p_secondBottom ? p_secondBottom : p_firstBottom1;
				tmp1 = y11 > y01;
			}
			if(tmp1) {
				p_result.push(container.object);
			}
		}
		if(this.g2d_node1 != null) {
			this.g2d_node1.getObjectsInBounds(p_left,p_top,p_right,p_bottom,p_result);
		}
		if(this.g2d_node2 != null) {
			this.g2d_node2.getObjectsInBounds(p_left,p_top,p_right,p_bottom,p_result);
		}
		if(this.g2d_node3 != null) {
			this.g2d_node3.getObjectsInBounds(p_left,p_top,p_right,p_bottom,p_result);
		}
		if(this.g2d_node4 != null) {
			this.g2d_node4.getObjectsInBounds(p_left,p_top,p_right,p_bottom,p_result);
		}
	}
	,intersects: function(p_firstLeft,p_firstTop,p_firstRight,p_firstBottom,p_secondLeft,p_secondTop,p_secondRight,p_secondBottom) {
		var x0 = p_firstLeft < p_secondLeft ? p_secondLeft : p_firstLeft;
		var x1 = p_firstRight > p_secondRight ? p_secondRight : p_firstRight;
		if(x1 <= x0) {
			return false;
		}
		var y0 = p_firstTop < p_secondTop ? p_secondTop : p_firstTop;
		var y1 = p_firstBottom > p_secondBottom ? p_secondBottom : p_firstBottom;
		return y1 > y0;
	}
	,contains: function(p_firstLeft,p_firstTop,p_firstRight,p_firstBottom,p_secondLeft,p_secondTop,p_secondRight,p_secondBottom) {
		if(p_secondRight - p_secondLeft <= 0 || p_secondBottom - p_secondTop <= 0) {
			if(p_secondLeft > p_firstLeft && p_secondTop > p_firstTop && p_secondRight < p_firstRight) {
				return p_secondBottom < p_firstBottom;
			} else {
				return false;
			}
		} else if(p_secondLeft >= p_firstLeft && p_secondTop >= p_firstTop && p_secondRight <= p_firstRight) {
			return p_secondBottom <= p_firstBottom;
		} else {
			return false;
		}
	}
	,__class__: com_genome2d_utils_GQuadTreeNode
};
var com_genome2d_utils_Container = function(p_object,p_left,p_top,p_right,p_bottom) {
	this.object = p_object;
	this.left = p_left;
	this.top = p_top;
	this.right = p_right;
	this.bottom = p_bottom;
};
$hxClasses["com.genome2d.utils.Container"] = com_genome2d_utils_Container;
com_genome2d_utils_Container.__name__ = "com.genome2d.utils.Container";
com_genome2d_utils_Container.prototype = {
	object: null
	,left: null
	,right: null
	,top: null
	,bottom: null
	,__class__: com_genome2d_utils_Container
};
var com_genome2d_utils_GRenderTargetStack = function() { };
$hxClasses["com.genome2d.utils.GRenderTargetStack"] = com_genome2d_utils_GRenderTargetStack;
com_genome2d_utils_GRenderTargetStack.__name__ = "com.genome2d.utils.GRenderTargetStack";
com_genome2d_utils_GRenderTargetStack.g2d_stack = null;
com_genome2d_utils_GRenderTargetStack.g2d_transforms = null;
com_genome2d_utils_GRenderTargetStack.pushRenderTarget = function(p_target,p_transform) {
	if(com_genome2d_utils_GRenderTargetStack.g2d_stack == null) {
		com_genome2d_utils_GRenderTargetStack.g2d_stack = [];
		com_genome2d_utils_GRenderTargetStack.g2d_transforms = [];
	}
	com_genome2d_utils_GRenderTargetStack.g2d_stack.push(p_target);
	com_genome2d_utils_GRenderTargetStack.g2d_transforms.push(p_transform);
};
com_genome2d_utils_GRenderTargetStack.popRenderTarget = function(p_context) {
	if(com_genome2d_utils_GRenderTargetStack.g2d_stack != null) {
		p_context.setRenderTarget(com_genome2d_utils_GRenderTargetStack.g2d_stack.pop(),com_genome2d_utils_GRenderTargetStack.g2d_transforms.pop(),false);
	}
};
var com_genome2d_utils_GVAlignType = $hxEnums["com.genome2d.utils.GVAlignType"] = { __ename__ : "com.genome2d.utils.GVAlignType", __constructs__ : ["TOP","MIDDLE","BOTTOM"]
	,TOP: {_hx_index:0,__enum__:"com.genome2d.utils.GVAlignType",toString:$estr}
	,MIDDLE: {_hx_index:1,__enum__:"com.genome2d.utils.GVAlignType",toString:$estr}
	,BOTTOM: {_hx_index:2,__enum__:"com.genome2d.utils.GVAlignType",toString:$estr}
};
com_genome2d_utils_GVAlignType.__empty_constructs__ = [com_genome2d_utils_GVAlignType.TOP,com_genome2d_utils_GVAlignType.MIDDLE,com_genome2d_utils_GVAlignType.BOTTOM];
var com_genome2d_utils_astar_GAStar = function(p_map,p_walker) {
	this.g2d_map = p_map;
	this.g2d_walker = p_walker;
	this.g2d_width = this.g2d_map.sizeY;
	this.g2d_height = this.g2d_map.sizeX;
	this.g2d_nodeArray = [];
	var _g = 0;
	var _g1 = this.g2d_width;
	while(_g < _g1) {
		var j = _g++;
		var line = this.g2d_nodeArray[j] = [];
		var _g2 = 0;
		var _g11 = this.g2d_height;
		while(_g2 < _g11) {
			var i = _g2++;
			var node = line[i] = new com_genome2d_utils_astar_GAStarNode();
			node.x = j;
			node.y = i;
			node.walkable = this.g2d_map.isWalkable(j,i,this.g2d_walker);
		}
	}
};
$hxClasses["com.genome2d.utils.astar.GAStar"] = com_genome2d_utils_astar_GAStar;
com_genome2d_utils_astar_GAStar.__name__ = "com.genome2d.utils.astar.GAStar";
com_genome2d_utils_astar_GAStar.prototype = {
	g2d_map: null
	,g2d_width: null
	,g2d_height: null
	,g2d_startNode: null
	,g2d_destNode: null
	,g2d_openList: null
	,g2d_closedList: null
	,g2d_heuristic: null
	,g2d_nodeArray: null
	,g2d_walker: null
	,findPath: function(p_start,p_dest) {
		if(!this.g2d_map.isWalkable(p_start.x,p_start.y,this.g2d_walker) || !this.g2d_map.isWalkable(p_dest.x,p_dest.y,this.g2d_walker) || p_start.equals(p_dest)) {
			return null;
		}
		this.g2d_heuristic = new com_genome2d_utils_astar_heuristics_GAStarManhattan();
		this.g2d_openList = [];
		this.g2d_closedList = [];
		this.g2d_startNode = this.g2d_nodeArray[p_start.x][p_start.y];
		this.g2d_destNode = this.g2d_nodeArray[p_dest.x][p_dest.y];
		this.g2d_startNode.g = 0;
		this.g2d_startNode.f = this.g2d_heuristic.getCost(this.g2d_startNode,this.g2d_destNode);
		this.g2d_startNode.inOpen = true;
		this.g2d_openList.push(this.g2d_startNode);
		return this.searchPath();
	}
	,getPath: function() {
		var path = [];
		var node = this.g2d_destNode;
		path[0] = new com_genome2d_geom_GIntPoint(node.x,node.y);
		var completed = false;
		while(!completed) {
			node = node.parent;
			path.unshift(new com_genome2d_geom_GIntPoint(node.x,node.y));
			if(node == this.g2d_startNode) {
				completed = true;
			}
		}
		return path;
	}
	,searchPath: function() {
		var minX;
		var maxX;
		var minY;
		var maxY;
		var g;
		var f;
		var cost;
		var nextNode = null;
		var currentNode = this.g2d_startNode;
		var completed = false;
		while(!completed) {
			minX = currentNode.x - 1 < 0 ? 0 : currentNode.x - 1;
			maxX = currentNode.x + 1 >= this.g2d_width ? this.g2d_width - 1 : currentNode.x + 1;
			minY = currentNode.y - 1 < 0 ? 0 : currentNode.y - 1;
			maxY = currentNode.y + 1 >= this.g2d_height ? this.g2d_height - 1 : currentNode.y + 1;
			var _g = minY;
			var _g1 = maxY + 1;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = minX;
				var _g11 = maxX + 1;
				while(_g2 < _g11) {
					var x = _g2++;
					nextNode = this.g2d_nodeArray[x][y];
					if(nextNode == currentNode || !nextNode.walkable) {
						continue;
					}
					if(!(currentNode.x == nextNode.x || currentNode.y == nextNode.y)) {
						continue;
					} else {
						cost = 10;
					}
					g = currentNode.g + cost;
					f = g + this.g2d_heuristic.getCost(nextNode,this.g2d_destNode);
					if(nextNode.inOpen || nextNode.inClosed) {
						if(nextNode.f > f) {
							nextNode.f = f;
							nextNode.g = g;
							nextNode.parent = currentNode;
						}
					} else {
						nextNode.f = f;
						nextNode.g = g;
						nextNode.parent = currentNode;
						nextNode.inOpen = true;
						this.g2d_openList.push(nextNode);
					}
				}
			}
			currentNode.inClosed = true;
			this.g2d_closedList.push(currentNode);
			if(this.g2d_openList.length == 0) {
				return null;
			}
			var min = this.g2d_openList[0];
			var _g3 = 1;
			var _g12 = this.g2d_openList.length;
			while(_g3 < _g12) {
				var i = _g3++;
				if(min.f > this.g2d_openList[i].f) {
					min = this.g2d_openList[i];
					haxe_Log.trace(i,{ fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/utils/astar/GAStar.hx", lineNumber : 163, className : "com.genome2d.utils.astar.GAStar", methodName : "getWithLeastCost"});
				}
			}
			HxOverrides.remove(this.g2d_openList,min);
			currentNode = min;
			currentNode.inOpen = false;
			if(currentNode == this.g2d_destNode) {
				completed = true;
			}
		}
		var path = [];
		var node = this.g2d_destNode;
		path[0] = new com_genome2d_geom_GIntPoint(node.x,node.y);
		var completed1 = false;
		while(!completed1) {
			node = node.parent;
			path.unshift(new com_genome2d_geom_GIntPoint(node.x,node.y));
			if(node == this.g2d_startNode) {
				completed1 = true;
			}
		}
		return path;
	}
	,getWithLeastCost: function() {
		var min = this.g2d_openList[0];
		var _g = 1;
		var _g1 = this.g2d_openList.length;
		while(_g < _g1) {
			var i = _g++;
			if(min.f > this.g2d_openList[i].f) {
				min = this.g2d_openList[i];
				haxe_Log.trace(i,{ fileName : "../Genome2D/Genome2D-Core/src/com/genome2d/utils/astar/GAStar.hx", lineNumber : 163, className : "com.genome2d.utils.astar.GAStar", methodName : "getWithLeastCost"});
			}
		}
		HxOverrides.remove(this.g2d_openList,min);
		return min;
	}
	,sort: function(x,y) {
		return x.f - y.f | 0;
	}
	,__class__: com_genome2d_utils_astar_GAStar
};
var com_genome2d_utils_astar_GAStarNode = function(p_x,p_y) {
	this.inOpen = false;
	this.inClosed = false;
	com_genome2d_geom_GIntPoint.call(this,p_x,p_y);
};
$hxClasses["com.genome2d.utils.astar.GAStarNode"] = com_genome2d_utils_astar_GAStarNode;
com_genome2d_utils_astar_GAStarNode.__name__ = "com.genome2d.utils.astar.GAStarNode";
com_genome2d_utils_astar_GAStarNode.__super__ = com_genome2d_geom_GIntPoint;
com_genome2d_utils_astar_GAStarNode.prototype = $extend(com_genome2d_geom_GIntPoint.prototype,{
	parent: null
	,walkable: null
	,inClosed: null
	,inOpen: null
	,f: null
	,g: null
	,toPoint: function() {
		return new com_genome2d_geom_GIntPoint(this.x,this.y);
	}
	,getPrototype: function(p_prototype) {
		p_prototype = com_genome2d_proto_GPrototypeFactory.g2d_getPrototype(p_prototype,this,"GAStarNode");
		return com_genome2d_geom_GIntPoint.prototype.getPrototype.call(this,p_prototype);
	}
	,bindPrototype: function(p_prototype) {
		com_genome2d_geom_GIntPoint.prototype.bindPrototype.call(this,p_prototype);
		com_genome2d_proto_GPrototypeFactory.g2d_bindPrototype(this,p_prototype,"GAStarNode");
	}
	,__class__: com_genome2d_utils_astar_GAStarNode
});
var com_genome2d_utils_astar_IGAStarClient = function() { };
$hxClasses["com.genome2d.utils.astar.IGAStarClient"] = com_genome2d_utils_astar_IGAStarClient;
com_genome2d_utils_astar_IGAStarClient.__name__ = "com.genome2d.utils.astar.IGAStarClient";
com_genome2d_utils_astar_IGAStarClient.__isInterface__ = true;
com_genome2d_utils_astar_IGAStarClient.prototype = {
	sizeX: null
	,sizeY: null
	,isWalkable: null
	,getCost: null
	,__class__: com_genome2d_utils_astar_IGAStarClient
};
var com_genome2d_utils_astar_heuristics_IGAStarHeuristic = function() { };
$hxClasses["com.genome2d.utils.astar.heuristics.IGAStarHeuristic"] = com_genome2d_utils_astar_heuristics_IGAStarHeuristic;
com_genome2d_utils_astar_heuristics_IGAStarHeuristic.__name__ = "com.genome2d.utils.astar.heuristics.IGAStarHeuristic";
com_genome2d_utils_astar_heuristics_IGAStarHeuristic.__isInterface__ = true;
com_genome2d_utils_astar_heuristics_IGAStarHeuristic.prototype = {
	getCost: null
	,__class__: com_genome2d_utils_astar_heuristics_IGAStarHeuristic
};
var com_genome2d_utils_astar_heuristics_GAStarDiagonal = function() {
};
$hxClasses["com.genome2d.utils.astar.heuristics.GAStarDiagonal"] = com_genome2d_utils_astar_heuristics_GAStarDiagonal;
com_genome2d_utils_astar_heuristics_GAStarDiagonal.__name__ = "com.genome2d.utils.astar.heuristics.GAStarDiagonal";
com_genome2d_utils_astar_heuristics_GAStarDiagonal.__interfaces__ = [com_genome2d_utils_astar_heuristics_IGAStarHeuristic];
com_genome2d_utils_astar_heuristics_GAStarDiagonal.prototype = {
	getCost: function(p_node1,p_node2) {
		var dx = Math.abs(p_node1.x - p_node2.x);
		var dy = Math.abs(p_node1.y - p_node2.y);
		var diag = Math.min(dx,dy);
		var straight = dx + dy;
		return 10 * (straight - 2 * diag) + 14 * diag;
	}
	,__class__: com_genome2d_utils_astar_heuristics_GAStarDiagonal
};
var com_genome2d_utils_astar_heuristics_GAStarManhattan = function() {
};
$hxClasses["com.genome2d.utils.astar.heuristics.GAStarManhattan"] = com_genome2d_utils_astar_heuristics_GAStarManhattan;
com_genome2d_utils_astar_heuristics_GAStarManhattan.__name__ = "com.genome2d.utils.astar.heuristics.GAStarManhattan";
com_genome2d_utils_astar_heuristics_GAStarManhattan.__interfaces__ = [com_genome2d_utils_astar_heuristics_IGAStarHeuristic];
com_genome2d_utils_astar_heuristics_GAStarManhattan.prototype = {
	getCost: function(p_node1,p_node2) {
		var dx = p_node1.x - p_node2.x;
		var dy = p_node1.y - p_node2.y;
		return (dx > 0 ? dx : -dx) + (dy > 0 ? dy : -dy);
	}
	,__class__: com_genome2d_utils_astar_heuristics_GAStarManhattan
};
var haxe__$DynamicAccess_DynamicAccess_$Impl_$ = {};
$hxClasses["haxe._DynamicAccess.DynamicAccess_Impl_"] = haxe__$DynamicAccess_DynamicAccess_$Impl_$;
haxe__$DynamicAccess_DynamicAccess_$Impl_$.__name__ = "haxe._DynamicAccess.DynamicAccess_Impl_";
haxe__$DynamicAccess_DynamicAccess_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.get = function(this1,key) {
	return this1[key];
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.set = function(this1,key,value) {
	return this1[key] = value;
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.exists = function(this1,key) {
	return Object.prototype.hasOwnProperty.call(this1,key);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.remove = function(this1,key) {
	return Reflect.deleteField(this1,key);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.keys = function(this1) {
	return Reflect.fields(this1);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.copy = function(this1) {
	return Reflect.copy(this1);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.iterator = function(this1) {
	return new haxe_iterators_DynamicAccessIterator(this1);
};
haxe__$DynamicAccess_DynamicAccess_$Impl_$.keyValueIterator = function(this1) {
	return new haxe_iterators_DynamicAccessKeyValueIterator(this1);
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = "haxe._Int32.Int32_Impl_";
haxe__$Int32_Int32_$Impl_$.negate = function(this1) {
	return ~this1 + 1 | 0;
};
haxe__$Int32_Int32_$Impl_$.preIncrement = function(this1) {
	this1 = ++this1 | 0;
	return this1;
};
haxe__$Int32_Int32_$Impl_$.postIncrement = function(this1) {
	var ret = this1++;
	this1 |= 0;
	return ret;
};
haxe__$Int32_Int32_$Impl_$.preDecrement = function(this1) {
	this1 = --this1 | 0;
	return this1;
};
haxe__$Int32_Int32_$Impl_$.postDecrement = function(this1) {
	var ret = this1--;
	this1 |= 0;
	return ret;
};
haxe__$Int32_Int32_$Impl_$.add = function(a,b) {
	return a + b | 0;
};
haxe__$Int32_Int32_$Impl_$.addInt = function(a,b) {
	return a + b | 0;
};
haxe__$Int32_Int32_$Impl_$.sub = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.subInt = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.intSub = function(a,b) {
	return a - b | 0;
};
haxe__$Int32_Int32_$Impl_$.mul = function(a,b) {
	return haxe__$Int32_Int32_$Impl_$._mul(a,b);
};
haxe__$Int32_Int32_$Impl_$.mulInt = function(a,b) {
	return haxe__$Int32_Int32_$Impl_$._mul(a,b);
};
haxe__$Int32_Int32_$Impl_$.toFloat = function(this1) {
	return this1;
};
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
haxe__$Int32_Int32_$Impl_$.clamp = function(x) {
	return x | 0;
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = "haxe._Int64.Int64_Impl_";
haxe__$Int64_Int64_$Impl_$.__properties__ = {get_low:"get_low",get_high:"get_high"};
haxe__$Int64_Int64_$Impl_$._new = function(x) {
	var this1 = x;
	return this1;
};
haxe__$Int64_Int64_$Impl_$.copy = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.make = function(high,low) {
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.ofInt = function(x) {
	var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.toInt = function(x) {
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	return x.low;
};
haxe__$Int64_Int64_$Impl_$.is = function(val) {
	return ((val) instanceof haxe__$Int64__$_$_$Int64);
};
haxe__$Int64_Int64_$Impl_$.getHigh = function(x) {
	return x.high;
};
haxe__$Int64_Int64_$Impl_$.getLow = function(x) {
	return x.low;
};
haxe__$Int64_Int64_$Impl_$.isNeg = function(x) {
	return x.high < 0;
};
haxe__$Int64_Int64_$Impl_$.isZero = function(x) {
	var b_high = 0;
	var b_low = 0;
	if(x.high == b_high) {
		return x.low == b_low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.compare = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	if(a.high < 0) {
		if(b.high < 0) {
			return v;
		} else {
			return -1;
		}
	} else if(b.high >= 0) {
		return v;
	} else {
		return 1;
	}
};
haxe__$Int64_Int64_$Impl_$.ucompare = function(a,b) {
	var v = haxe__$Int32_Int32_$Impl_$.ucompare(a.high,b.high);
	if(v != 0) {
		return v;
	} else {
		return haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	}
};
haxe__$Int64_Int64_$Impl_$.toStr = function(x) {
	return haxe__$Int64_Int64_$Impl_$.toString(x);
};
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var b_high = 0;
	var b_low = 0;
	if(i.high == b_high && i.low == b_low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var this2 = new haxe__$Int64__$_$_$Int64(0,10);
	var ten = this2;
	while(true) {
		var b_high1 = 0;
		var b_low1 = 0;
		if(!(i.high != b_high1 || i.low != b_low1)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				var ret = high++;
				high = high | 0;
			}
			var this_high = high;
			var this_low = low;
			str = this_low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = ~x1.low + 1 | 0;
			if(low1 == 0) {
				var ret1 = high1++;
				high1 = high1 | 0;
			}
			var this3 = new haxe__$Int64__$_$_$Int64(high1,low1);
			i = this3;
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.parseString = function(sParam) {
	return haxe_Int64Helper.parseString(sParam);
};
haxe__$Int64_Int64_$Impl_$.fromFloat = function(f) {
	return haxe_Int64Helper.fromFloat(f);
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this3;
	} else {
		var this4 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this4;
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = ~divisor.low + 1 | 0;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this5 = new haxe__$Int64__$_$_$Int64(high1,low1);
		divisor = this5;
	} else {
		divisor = divisor;
	}
	var this6 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this6;
	var this7 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this7;
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this8 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this8;
		} else if(b < 32) {
			var this9 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this9;
		} else {
			var this10 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this10;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this11 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this11;
		} else if(b1 < 32) {
			var this12 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this12;
		} else {
			var this13 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this13;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			var this14 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this14;
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				var ret2 = high2--;
				high2 = high2 | 0;
			}
			var this15 = new haxe__$Int64__$_$_$Int64(high2,low2);
			modulus = this15;
		}
		var b2 = 1;
		b2 &= 63;
		if(b2 == 0) {
			var this16 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this16;
		} else if(b2 < 32) {
			var this17 = new haxe__$Int64__$_$_$Int64(mask.high >>> b2,mask.high << 32 - b2 | mask.low >>> b2);
			mask = this17;
		} else {
			var this18 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b2 - 32);
			mask = this18;
		}
		var b3 = 1;
		b3 &= 63;
		if(b3 == 0) {
			var this19 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this19;
		} else if(b3 < 32) {
			var this20 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b3,divisor.high << 32 - b3 | divisor.low >>> b3);
			divisor = this20;
		} else {
			var this21 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b3 - 32);
			divisor = this21;
		}
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = ~quotient.low + 1 | 0;
		if(low3 == 0) {
			var ret3 = high3++;
			high3 = high3 | 0;
		}
		var this22 = new haxe__$Int64__$_$_$Int64(high3,low3);
		quotient = this22;
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = ~modulus.low + 1 | 0;
		if(low4 == 0) {
			var ret4 = high4++;
			high4 = high4 | 0;
		}
		var this23 = new haxe__$Int64__$_$_$Int64(high4,low4);
		modulus = this23;
	}
	return { quotient : quotient, modulus : modulus};
};
haxe__$Int64_Int64_$Impl_$.neg = function(x) {
	var high = ~x.high;
	var low = ~x.low + 1 | 0;
	if(low == 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.preIncrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret1 = this1.high++;
		this1.high = this1.high | 0;
	}
	return this1;
};
haxe__$Int64_Int64_$Impl_$.postIncrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	var ret1 = this1.low++;
	this1.low = this1.low | 0;
	if(this1.low == 0) {
		var ret2 = this1.high++;
		this1.high = this1.high | 0;
	}
	return ret;
};
haxe__$Int64_Int64_$Impl_$.preDecrement = function(this1) {
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret1 = this1.low--;
	this1.low = this1.low | 0;
	return this1;
};
haxe__$Int64_Int64_$Impl_$.postDecrement = function(this1) {
	var ret = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(this1.high,this1.low);
	this1 = this2;
	if(this1.low == 0) {
		var ret1 = this1.high--;
		this1.high = this1.high | 0;
	}
	var ret2 = this1.low--;
	this1.low = this1.low | 0;
	return ret;
};
haxe__$Int64_Int64_$Impl_$.add = function(a,b) {
	var high = a.high + b.high | 0;
	var low = a.low + b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.addInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high + b_high | 0;
	var low = a.low + b_low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.sub = function(a,b) {
	var high = a.high - b.high | 0;
	var low = a.low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.subInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var high = a.high - b_high | 0;
	var low = a.low - b_low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.intSub = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var high = a_high - b.high | 0;
	var low = a_low - b.low | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low) < 0) {
		var ret = high--;
		high = high | 0;
	}
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.mul = function(a,b) {
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b.low & mask;
	var bh = b.low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b.high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b.low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.mulInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
	var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
	var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
	var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 = p01 << 16;
	low = low + p01 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 = p10 << 16;
	low = low + p10 | 0;
	if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
		var ret1 = high++;
		high = high | 0;
	}
	high = high + (haxe__$Int32_Int32_$Impl_$._mul(a.low,b_high) + haxe__$Int32_Int32_$Impl_$._mul(a.high,b_low) | 0) | 0;
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.div = function(a,b) {
	return haxe__$Int64_Int64_$Impl_$.divMod(a,b).quotient;
};
haxe__$Int64_Int64_$Impl_$.divInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	return haxe__$Int64_Int64_$Impl_$.divMod(a,this1).quotient;
};
haxe__$Int64_Int64_$Impl_$.intDiv = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).quotient;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.mod = function(a,b) {
	return haxe__$Int64_Int64_$Impl_$.divMod(a,b).modulus;
};
haxe__$Int64_Int64_$Impl_$.modInt = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(b >> 31,b);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(a,this1).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.intMod = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a >> 31,a);
	var x = haxe__$Int64_Int64_$Impl_$.divMod(this1,b).modulus;
	if(x.high != x.low >> 31) {
		throw new js__$Boot_HaxeError("Overflow");
	}
	var x1 = x.low;
	var this2 = new haxe__$Int64__$_$_$Int64(x1 >> 31,x1);
	return this2;
};
haxe__$Int64_Int64_$Impl_$.eq = function(a,b) {
	if(a.high == b.high) {
		return a.low == b.low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.eqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(a.high == b_high) {
		return a.low == b_low;
	} else {
		return false;
	}
};
haxe__$Int64_Int64_$Impl_$.neq = function(a,b) {
	if(!(a.high != b.high)) {
		return a.low != b.low;
	} else {
		return true;
	}
};
haxe__$Int64_Int64_$Impl_$.neqInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	if(!(a.high != b_high)) {
		return a.low != b_low;
	} else {
		return true;
	}
};
haxe__$Int64_Int64_$Impl_$.lt = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.ltInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.intLt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) < 0;
};
haxe__$Int64_Int64_$Impl_$.lte = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.lteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.intLte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) <= 0;
};
haxe__$Int64_Int64_$Impl_$.gt = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.gtInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.intGt = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) > 0;
};
haxe__$Int64_Int64_$Impl_$.gte = function(a,b) {
	var v = a.high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b.low);
	return (a.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.gteInt = function(a,b) {
	var b_high = b >> 31;
	var b_low = b;
	var v = a.high - b_high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a.low,b_low);
	return (a.high < 0 ? b_high < 0 ? v : -1 : b_high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.intGte = function(a,b) {
	var a_high = a >> 31;
	var a_low = a;
	var v = a_high - b.high | 0;
	v = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(a_low,b.low);
	return (a_high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) >= 0;
};
haxe__$Int64_Int64_$Impl_$.complement = function(a) {
	var this1 = new haxe__$Int64__$_$_$Int64(~a.high,~a.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.and = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high & b.high,a.low & b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.or = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high | b.high,a.low | b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.xor = function(a,b) {
	var this1 = new haxe__$Int64__$_$_$Int64(a.high ^ b.high,a.low ^ b.low);
	return this1;
};
haxe__$Int64_Int64_$Impl_$.shl = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(a.high << b | a.low >>> 32 - b,a.low << b);
		return this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(a.low << b - 32,0);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.shr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(a.high >> b,a.high << 32 - b | a.low >>> b);
		return this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(a.high >> 31,a.high >> b - 32);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.ushr = function(a,b) {
	b &= 63;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
		return this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
		return this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
		return this3;
	}
};
haxe__$Int64_Int64_$Impl_$.get_high = function(this1) {
	return this1.high;
};
haxe__$Int64_Int64_$Impl_$.set_high = function(this1,x) {
	return this1.high = x;
};
haxe__$Int64_Int64_$Impl_$.get_low = function(this1) {
	return this1.low;
};
haxe__$Int64_Int64_$Impl_$.set_low = function(this1,x) {
	return this1.low = x;
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,toString: function() {
		return haxe__$Int64_Int64_$Impl_$.toString(this);
	}
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.parseString = function(sParam) {
	var base_high = 0;
	var base_low = 10;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var current = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,1);
	var multiplier = this2;
	var sIsNegative = false;
	var s = StringTools.trim(sParam);
	if(s.charAt(0) == "-") {
		sIsNegative = true;
		s = s.substring(1,s.length);
	}
	var len = s.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		var digitInt = HxOverrides.cca(s,len - 1 - i) - 48;
		if(digitInt < 0 || digitInt > 9) {
			throw new js__$Boot_HaxeError("NumberFormatError");
		}
		if(digitInt != 0) {
			var digit_high = digitInt >> 31;
			var digit_low = digitInt;
			if(sIsNegative) {
				var mask = 65535;
				var al = multiplier.low & mask;
				var ah = multiplier.low >>> 16;
				var bl = digit_low & mask;
				var bh = digit_low >>> 16;
				var p00 = haxe__$Int32_Int32_$Impl_$._mul(al,bl);
				var p10 = haxe__$Int32_Int32_$Impl_$._mul(ah,bl);
				var p01 = haxe__$Int32_Int32_$Impl_$._mul(al,bh);
				var p11 = haxe__$Int32_Int32_$Impl_$._mul(ah,bh);
				var low = p00;
				var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
				p01 = p01 << 16;
				low = low + p01 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p01) < 0) {
					var ret = high++;
					high = high | 0;
				}
				p10 = p10 << 16;
				low = low + p10 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low,p10) < 0) {
					var ret1 = high++;
					high = high | 0;
				}
				high = high + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high = high;
				var b_low = low;
				var high1 = current.high - b_high | 0;
				var low1 = current.low - b_low | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(current.low,b_low) < 0) {
					var ret2 = high1--;
					high1 = high1 | 0;
				}
				var this3 = new haxe__$Int64__$_$_$Int64(high1,low1);
				current = this3;
				if(!(current.high < 0)) {
					throw new js__$Boot_HaxeError("NumberFormatError: Underflow");
				}
			} else {
				var mask1 = 65535;
				var al1 = multiplier.low & mask1;
				var ah1 = multiplier.low >>> 16;
				var bl1 = digit_low & mask1;
				var bh1 = digit_low >>> 16;
				var p001 = haxe__$Int32_Int32_$Impl_$._mul(al1,bl1);
				var p101 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bl1);
				var p011 = haxe__$Int32_Int32_$Impl_$._mul(al1,bh1);
				var p111 = haxe__$Int32_Int32_$Impl_$._mul(ah1,bh1);
				var low2 = p001;
				var high2 = (p111 + (p011 >>> 16) | 0) + (p101 >>> 16) | 0;
				p011 = p011 << 16;
				low2 = low2 + p011 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p011) < 0) {
					var ret3 = high2++;
					high2 = high2 | 0;
				}
				p101 = p101 << 16;
				low2 = low2 + p101 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low2,p101) < 0) {
					var ret4 = high2++;
					high2 = high2 | 0;
				}
				high2 = high2 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,digit_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,digit_low) | 0) | 0;
				var b_high1 = high2;
				var b_low1 = low2;
				var high3 = current.high + b_high1 | 0;
				var low3 = current.low + b_low1 | 0;
				if(haxe__$Int32_Int32_$Impl_$.ucompare(low3,current.low) < 0) {
					var ret5 = high3++;
					high3 = high3 | 0;
				}
				var this4 = new haxe__$Int64__$_$_$Int64(high3,low3);
				current = this4;
				if(current.high < 0) {
					throw new js__$Boot_HaxeError("NumberFormatError: Overflow");
				}
			}
		}
		var mask2 = 65535;
		var al2 = multiplier.low & mask2;
		var ah2 = multiplier.low >>> 16;
		var bl2 = base_low & mask2;
		var bh2 = base_low >>> 16;
		var p002 = haxe__$Int32_Int32_$Impl_$._mul(al2,bl2);
		var p102 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bl2);
		var p012 = haxe__$Int32_Int32_$Impl_$._mul(al2,bh2);
		var p112 = haxe__$Int32_Int32_$Impl_$._mul(ah2,bh2);
		var low4 = p002;
		var high4 = (p112 + (p012 >>> 16) | 0) + (p102 >>> 16) | 0;
		p012 = p012 << 16;
		low4 = low4 + p012 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p012) < 0) {
			var ret6 = high4++;
			high4 = high4 | 0;
		}
		p102 = p102 << 16;
		low4 = low4 + p102 | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low4,p102) < 0) {
			var ret7 = high4++;
			high4 = high4 | 0;
		}
		high4 = high4 + (haxe__$Int32_Int32_$Impl_$._mul(multiplier.low,base_high) + haxe__$Int32_Int32_$Impl_$._mul(multiplier.high,base_low) | 0) | 0;
		var this5 = new haxe__$Int64__$_$_$Int64(high4,low4);
		multiplier = this5;
	}
	return current;
};
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new js__$Boot_HaxeError("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion underflow");
	}
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	var result = this1;
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1;
			if(b == 0) {
				var this2 = new haxe__$Int64__$_$_$Int64(a_high,a_low);
				b1 = this2;
			} else if(b < 32) {
				var this3 = new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b);
				b1 = this3;
			} else {
				var this4 = new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
				b1 = this4;
			}
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			var this5 = new haxe__$Int64__$_$_$Int64(high,low);
			result = this5;
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = ~result.low + 1 | 0;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this6 = new haxe__$Int64__$_$_$Int64(high1,low1);
		result = this6;
	}
	return result;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = Date.now() / 1000;
	var r = f();
	haxe_Log.trace(Date.now() / 1000 - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return Date.now() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	while(i1 < b.length) {
		blks[i1 >> 2] |= b.b[i1] << (((b.length << 3) + i1 & 3) << 3);
		++i1;
	}
	blks[i1 >> 2] |= 128 << (b.length * 8 + i1) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				var e2 = e1;
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,toString: function() {
		if(this.root == null) {
			return "{}";
		} else {
			return "{" + this.root.toString() + "}";
		}
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,toString: function() {
		return (this.left == null ? "" : this.left.toString() + ", ") + ("" + Std.string(this.key) + "=" + Std.string(this.value)) + (this.right == null ? "" : ", " + this.right.toString());
	}
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = "haxe.ds.GenericCell";
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = "haxe.ds.GenericStack";
haxe_ds_GenericStack.prototype = {
	head: null
	,add: function(item) {
		this.head = new haxe_ds_GenericCell(item,this.head);
	}
	,first: function() {
		if(this.head == null) {
			return null;
		} else {
			return this.head.elt;
		}
	}
	,pop: function() {
		var k = this.head;
		if(k == null) {
			return null;
		} else {
			this.head = k.next;
			return k.elt;
		}
	}
	,isEmpty: function() {
		return this.head == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.head;
		while(l != null) {
			if(l.elt == v) {
				if(prev == null) {
					this.head = l.next;
				} else {
					prev.next = l.next;
				}
				break;
			}
			prev = l;
			l = l.next;
		}
		return l != null;
	}
	,iterator: function() {
		var l = this.head;
		return { hasNext : function() {
			return l != null;
		}, next : function() {
			var k = l;
			l = k.next;
			return k.elt;
		}};
	}
	,toString: function() {
		var a = [];
		var l = this.head;
		while(l != null) {
			a.push(l.elt);
			l = l.next;
		}
		return "{" + a.join(",") + "}";
	}
	,__class__: haxe_ds_GenericStack
};
var haxe_ds__$HashMap_HashMap_$Impl_$ = {};
$hxClasses["haxe.ds._HashMap.HashMap_Impl_"] = haxe_ds__$HashMap_HashMap_$Impl_$;
haxe_ds__$HashMap_HashMap_$Impl_$.__name__ = "haxe.ds._HashMap.HashMap_Impl_";
haxe_ds__$HashMap_HashMap_$Impl_$._new = function() {
	var this1 = new haxe_ds__$HashMap_HashMapData();
	return this1;
};
haxe_ds__$HashMap_HashMap_$Impl_$.set = function(this1,k,v) {
	var _this = this1.keys;
	var key = k.hashCode();
	_this.h[key] = k;
	var _this1 = this1.values;
	var key1 = k.hashCode();
	_this1.h[key1] = v;
};
haxe_ds__$HashMap_HashMap_$Impl_$.get = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h[key];
};
haxe_ds__$HashMap_HashMap_$Impl_$.exists = function(this1,k) {
	var _this = this1.values;
	var key = k.hashCode();
	return _this.h.hasOwnProperty(key);
};
haxe_ds__$HashMap_HashMap_$Impl_$.remove = function(this1,k) {
	this1.values.remove(k.hashCode());
	return this1.keys.remove(k.hashCode());
};
haxe_ds__$HashMap_HashMap_$Impl_$.keys = function(this1) {
	return this1.keys.iterator();
};
haxe_ds__$HashMap_HashMap_$Impl_$.copy = function(this1) {
	var copied = new haxe_ds__$HashMap_HashMapData();
	copied.keys = this1.keys.copy();
	copied.values = this1.values.copy();
	return copied;
};
haxe_ds__$HashMap_HashMap_$Impl_$.iterator = function(this1) {
	return this1.values.iterator();
};
haxe_ds__$HashMap_HashMap_$Impl_$.clear = function(this1) {
	this1.keys.h = { };
	this1.values.h = { };
};
var haxe_ds__$HashMap_HashMapData = function() {
	this.keys = new haxe_ds_IntMap();
	this.values = new haxe_ds_IntMap();
};
$hxClasses["haxe.ds._HashMap.HashMapData"] = haxe_ds__$HashMap_HashMapData;
haxe_ds__$HashMap_HashMapData.__name__ = "haxe.ds._HashMap.HashMapData";
haxe_ds__$HashMap_HashMapData.prototype = {
	keys: null
	,values: null
	,__class__: haxe_ds__$HashMap_HashMapData
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += i1 == null ? "null" : "" + i1;
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,keyValueIterator: function() {
		return new haxe_ds__$List_ListKeyValueIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,join: function(sep) {
		var s_b = "";
		var first = true;
		var l = this.h;
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += sep == null ? "null" : "" + sep;
			}
			s_b += Std.string(l.item);
			l = l.next;
		}
		return s_b;
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds__$List_ListKeyValueIterator = function(head) {
	this.head = head;
	this.idx = 0;
};
$hxClasses["haxe.ds._List.ListKeyValueIterator"] = haxe_ds__$List_ListKeyValueIterator;
haxe_ds__$List_ListKeyValueIterator.__name__ = "haxe.ds._List.ListKeyValueIterator";
haxe_ds__$List_ListKeyValueIterator.prototype = {
	idx: null
	,head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return { value : val, key : this.idx++};
	}
	,__class__: haxe_ds__$List_ListKeyValueIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.assignId = function(obj) {
	return (obj.__id__ = $global.$haxeUID++);
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$ = {};
$hxClasses["haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_"] = haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$;
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.__name__ = "haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_";
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.__properties__ = {get_length:"get_length"};
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
haxe_ds__$ReadOnlyArray_ReadOnlyArray_$Impl_$.get = function(this1,i) {
	return this1[i];
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_WeakMap = function() {
	throw new js__$Boot_HaxeError("Not implemented for this platform");
};
$hxClasses["haxe.ds.WeakMap"] = haxe_ds_WeakMap;
haxe_ds_WeakMap.__name__ = "haxe.ds.WeakMap";
haxe_ds_WeakMap.__interfaces__ = [haxe_IMap];
haxe_ds_WeakMap.prototype = {
	set: function(key,value) {
	}
	,get: function(key) {
		return null;
	}
	,exists: function(key) {
		return false;
	}
	,remove: function(key) {
		return false;
	}
	,keys: function() {
		return null;
	}
	,iterator: function() {
		return null;
	}
	,keyValueIterator: function() {
		return null;
	}
	,copy: function() {
		return null;
	}
	,toString: function() {
		return null;
	}
	,clear: function() {
	}
	,__class__: haxe_ds_WeakMap
};
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
$hxClasses["haxe.http.HttpBase"] = haxe_http_HttpBase;
haxe_http_HttpBase.__name__ = "haxe.http.HttpBase";
haxe_http_HttpBase.prototype = {
	url: null
	,responseBytes: null
	,responseAsString: null
	,postData: null
	,postBytes: null
	,headers: null
	,params: null
	,emptyOnData: null
	,setHeader: function(name,value) {
		var _g = 0;
		var _g1 = this.headers.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.headers[i].name == name) {
				this.headers[i] = { name : name, value : value};
				return;
			}
		}
		this.headers.push({ name : name, value : value});
	}
	,addHeader: function(header,value) {
		this.headers.push({ name : header, value : value});
	}
	,setParameter: function(name,value) {
		var _g = 0;
		var _g1 = this.params.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.params[i].name == name) {
				this.params[i] = { name : name, value : value};
				return;
			}
		}
		this.params.push({ name : name, value : value});
	}
	,addParameter: function(name,value) {
		this.params.push({ name : name, value : value});
	}
	,setPostData: function(data) {
		this.postData = data;
		this.postBytes = null;
	}
	,setPostBytes: function(data) {
		this.postBytes = data;
		this.postData = null;
	}
	,request: function(post) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return !Reflect.compareMethods($bind(this,this.onData),this.emptyOnData);
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
	,__class__: haxe_http_HttpBase
	,__properties__: {get_responseData:"get_responseData"}
};
var haxe_http_HttpJs = function(url) {
	this.async = true;
	this.withCredentials = false;
	haxe_http_HttpBase.call(this,url);
};
$hxClasses["haxe.http.HttpJs"] = haxe_http_HttpJs;
haxe_http_HttpJs.__name__ = "haxe.http.HttpJs";
haxe_http_HttpJs.requestUrl = function(url) {
	var h = new haxe_http_HttpJs(url);
	h.async = false;
	var r = null;
	h.onData = function(d) {
		r = d;
	};
	h.onError = function(e) {
		throw new js__$Boot_HaxeError(e);
	};
	h.request(false);
	return r;
};
haxe_http_HttpJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	async: null
	,withCredentials: null
	,req: null
	,cancel: function() {
		if(this.req == null) {
			return;
		}
		this.req.abort();
		this.req = null;
	}
	,request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		var r = this.req = js_Browser.createXMLHttpRequest();
		var onreadystatechange = function(_) {
			if(r.readyState != 4) {
				return;
			}
			var s;
			try {
				s = r.status;
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				s = null;
			}
			if(s == 0 && typeof(window) != "undefined") {
				var protocol = window.location.protocol.toLowerCase();
				var rlocalProtocol = new EReg("^(?:about|app|app-storage|.+-extension|file|res|widget):$","");
				var isLocal = rlocalProtocol.match(protocol);
				if(isLocal) {
					s = r.response != null ? 200 : 404;
				}
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				_gthis.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				_gthis.req = null;
				var onreadystatechange1 = haxe_io_Bytes.ofData(r.response);
				_gthis.success(onreadystatechange1);
			} else if(s == null) {
				_gthis.req = null;
				_gthis.onError("Failed to connect or resolve host");
			} else if(s == null) {
				_gthis.req = null;
				_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
				_gthis.onError("Http Error #" + r.status);
			} else {
				switch(s) {
				case 12007:
					_gthis.req = null;
					_gthis.onError("Unknown host");
					break;
				case 12029:
					_gthis.req = null;
					_gthis.onError("Failed to connect to host");
					break;
				default:
					_gthis.req = null;
					_gthis.responseBytes = haxe_io_Bytes.ofData(r.response);
					_gthis.onError("Http Error #" + r.status);
				}
			}
		};
		if(this.async) {
			r.onreadystatechange = onreadystatechange;
		}
		var uri;
		var _g = this.postBytes;
		var _g1 = this.postData;
		if(_g1 == null) {
			if(_g == null) {
				uri = null;
			} else {
				var bytes = _g;
				uri = new Blob([bytes.b.bufferValue]);
			}
		} else if(_g == null) {
			var str = _g1;
			uri = str;
		} else {
			uri = null;
		}
		if(uri != null) {
			post = true;
		} else {
			var _g2 = 0;
			var _g3 = this.params;
			while(_g2 < _g3.length) {
				var p = _g3[_g2];
				++_g2;
				if(uri == null) {
					uri = "";
				} else {
					uri = Std.string(uri) + "&";
				}
				var s1 = p.name;
				var value = Std.string(uri) + encodeURIComponent(s1) + "=";
				var s2 = p.value;
				uri = value + encodeURIComponent(s2);
			}
		}
		try {
			if(post) {
				r.open("POST",this.url,this.async);
			} else if(uri != null) {
				var question = this.url.split("?").length <= 1;
				r.open("GET",this.url + (question ? "?" : "&") + Std.string(uri),this.async);
				uri = null;
			} else {
				r.open("GET",this.url,this.async);
			}
			r.responseType = "arraybuffer";
		} catch( e2 ) {
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			this.req = null;
			this.onError(e3.toString());
			return;
		}
		r.withCredentials = this.withCredentials;
		if(!Lambda.exists(this.headers,function(h) {
			return h.name == "Content-Type";
		}) && post && this.postData == null) {
			r.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		}
		var _g21 = 0;
		var _g31 = this.headers;
		while(_g21 < _g31.length) {
			var h1 = _g31[_g21];
			++_g21;
			r.setRequestHeader(h1.name,h1.value);
		}
		r.send(uri);
		if(!this.async) {
			onreadystatechange(null);
		}
	}
	,__class__: haxe_http_HttpJs
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw new js__$Boot_HaxeError("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,compare: function(other) {
		var b1 = this.b;
		var b2 = other.b;
		var len = this.length < other.length ? this.length : other.length;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			if(b1[i] != b2[i]) {
				return b1[i] - b2[i];
			}
		}
		return this.length - other.length;
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getInt64: function(pos) {
		var this1 = new haxe__$Int64__$_$_$Int64(this.getInt32(pos + 4),this.getInt32(pos));
		return this1;
	}
	,setInt64: function(pos,v) {
		this.setInt32(pos,v.low);
		this.setInt32(pos + 4,v.high);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,readString: function(pos,len) {
		return this.getString(pos,len);
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper._i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var e = i >> 23 & 255;
	if(e == 255) {
		if((i & 8388607) == 0) {
			if(sign > 0) {
				return Infinity;
			} else {
				return -Infinity;
			}
		} else {
			return NaN;
		}
	}
	var m = e == 0 ? (i & 8388607) << 1 : i & 8388607 | 8388608;
	return sign * m * Math.pow(2,e - 150);
};
haxe_io_FPHelper._i64ToDouble = function(lo,hi) {
	var sign = 1 - (hi >>> 31 << 1);
	var e = hi >> 20 & 2047;
	if(e == 2047) {
		if(lo == 0 && (hi & 1048575) == 0) {
			if(sign > 0) {
				return Infinity;
			} else {
				return -Infinity;
			}
		} else {
			return NaN;
		}
	}
	var m = 2.220446049250313e-16 * ((hi & 1048575) * 4294967296. + (lo >>> 31) * 2147483648. + (lo & 2147483647));
	if(e == 0) {
		m *= 2.0;
	} else {
		m += 1.0;
	}
	return sign * m * Math.pow(2,e - 1023);
};
haxe_io_FPHelper._floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp > 127) {
		return 2139095040;
	} else {
		if(exp <= -127) {
			exp = -127;
			af *= 7.1362384635298e+44;
		} else {
			af = (af / Math.pow(2,exp) - 1.0) * 8388608;
		}
		return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | Math.round(af);
	}
};
haxe_io_FPHelper._doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		i64.low = 0;
		i64.high = v > 0 ? 2146435072 : -1048576;
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		if(exp > 1023) {
			i64.low = -1;
			i64.high = 2146435071;
		} else {
			if(exp <= -1023) {
				exp = -1023;
				av /= 2.2250738585072014e-308;
			} else {
				av = av / Math.pow(2,exp) - 1.0;
			}
			var sig = Math.round(av * 4503599627370496.);
			var sig_l = sig | 0;
			var sig_h = sig / 4294967296.0 | 0;
			i64.low = sig_l;
			i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
		}
	}
	return i64;
};
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	haxe_io_FPHelper.helper.setFloat64(0,v,true);
	i64.low = haxe_io_FPHelper.helper.getInt32(0,true);
	i64.high = haxe_io_FPHelper.helper.getInt32(4,true);
	return i64;
};
var haxe_iterators_DynamicAccessIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessIterator"] = haxe_iterators_DynamicAccessIterator;
haxe_iterators_DynamicAccessIterator.__name__ = "haxe.iterators.DynamicAccessIterator";
haxe_iterators_DynamicAccessIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		return this.access[this.keys[this.index++]];
	}
	,__class__: haxe_iterators_DynamicAccessIterator
};
var haxe_iterators_DynamicAccessKeyValueIterator = function(access) {
	this.access = access;
	this.keys = Reflect.fields(access);
	this.index = 0;
};
$hxClasses["haxe.iterators.DynamicAccessKeyValueIterator"] = haxe_iterators_DynamicAccessKeyValueIterator;
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = "haxe.iterators.DynamicAccessKeyValueIterator";
haxe_iterators_DynamicAccessKeyValueIterator.prototype = {
	access: null
	,keys: null
	,index: null
	,hasNext: function() {
		return this.index < this.keys.length;
	}
	,next: function() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
	,__class__: haxe_iterators_DynamicAccessKeyValueIterator
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_iterators_StringIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIterator"] = haxe_iterators_StringIterator;
haxe_iterators_StringIterator.__name__ = "haxe.iterators.StringIterator";
haxe_iterators_StringIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return this.s.charCodeAt(this.offset++);
	}
	,__class__: haxe_iterators_StringIterator
};
var haxe_iterators_StringIteratorUnicode = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringIteratorUnicode"] = haxe_iterators_StringIteratorUnicode;
haxe_iterators_StringIteratorUnicode.__name__ = "haxe.iterators.StringIteratorUnicode";
haxe_iterators_StringIteratorUnicode.unicodeIterator = function(s) {
	return new haxe_iterators_StringIteratorUnicode(s);
};
haxe_iterators_StringIteratorUnicode.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		var s = this.s;
		var index = this.offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			this.offset++;
		}
		return c1;
	}
	,__class__: haxe_iterators_StringIteratorUnicode
};
var haxe_iterators_StringKeyValueIterator = function(s) {
	this.offset = 0;
	this.s = s;
};
$hxClasses["haxe.iterators.StringKeyValueIterator"] = haxe_iterators_StringKeyValueIterator;
haxe_iterators_StringKeyValueIterator.__name__ = "haxe.iterators.StringKeyValueIterator";
haxe_iterators_StringKeyValueIterator.prototype = {
	offset: null
	,s: null
	,hasNext: function() {
		return this.offset < this.s.length;
	}
	,next: function() {
		return { key : this.offset, value : this.s.charCodeAt(this.offset++)};
	}
	,__class__: haxe_iterators_StringKeyValueIterator
};
var haxe_macro_Message = $hxEnums["haxe.macro.Message"] = { __ename__ : "haxe.macro.Message", __constructs__ : ["Info","Warning"]
	,Info: ($_=function(msg,pos) { return {_hx_index:0,msg:msg,pos:pos,__enum__:"haxe.macro.Message",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Warning: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"haxe.macro.Message",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
};
haxe_macro_Message.__empty_constructs__ = [];
var haxe_macro_Context = function() { };
$hxClasses["haxe.macro.Context"] = haxe_macro_Context;
haxe_macro_Context.__name__ = "haxe.macro.Context";
var haxe_macro_StringLiteralKind = $hxEnums["haxe.macro.StringLiteralKind"] = { __ename__ : "haxe.macro.StringLiteralKind", __constructs__ : ["DoubleQuotes","SingleQuotes"]
	,DoubleQuotes: {_hx_index:0,__enum__:"haxe.macro.StringLiteralKind",toString:$estr}
	,SingleQuotes: {_hx_index:1,__enum__:"haxe.macro.StringLiteralKind",toString:$estr}
};
haxe_macro_StringLiteralKind.__empty_constructs__ = [haxe_macro_StringLiteralKind.DoubleQuotes,haxe_macro_StringLiteralKind.SingleQuotes];
var haxe_macro_Constant = $hxEnums["haxe.macro.Constant"] = { __ename__ : "haxe.macro.Constant", __constructs__ : ["CInt","CFloat","CString","CIdent","CRegexp"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s,kind) { return {_hx_index:2,s:s,kind:kind,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s","kind"],$_)
	,CIdent: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,CRegexp: ($_=function(r,opt) { return {_hx_index:4,r:r,opt:opt,__enum__:"haxe.macro.Constant",toString:$estr}; },$_.__params__ = ["r","opt"],$_)
};
haxe_macro_Constant.__empty_constructs__ = [];
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : "haxe.macro.Binop", __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : "haxe.macro.Unop", __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_macro_QuoteStatus = $hxEnums["haxe.macro.QuoteStatus"] = { __ename__ : "haxe.macro.QuoteStatus", __constructs__ : ["Unquoted","Quoted"]
	,Unquoted: {_hx_index:0,__enum__:"haxe.macro.QuoteStatus",toString:$estr}
	,Quoted: {_hx_index:1,__enum__:"haxe.macro.QuoteStatus",toString:$estr}
};
haxe_macro_QuoteStatus.__empty_constructs__ = [haxe_macro_QuoteStatus.Unquoted,haxe_macro_QuoteStatus.Quoted];
var haxe_macro_FunctionKind = $hxEnums["haxe.macro.FunctionKind"] = { __ename__ : "haxe.macro.FunctionKind", __constructs__ : ["FAnonymous","FNamed","FArrow"]
	,FAnonymous: {_hx_index:0,__enum__:"haxe.macro.FunctionKind",toString:$estr}
	,FNamed: ($_=function(name,inlined) { return {_hx_index:1,name:name,inlined:inlined,__enum__:"haxe.macro.FunctionKind",toString:$estr}; },$_.__params__ = ["name","inlined"],$_)
	,FArrow: {_hx_index:2,__enum__:"haxe.macro.FunctionKind",toString:$estr}
};
haxe_macro_FunctionKind.__empty_constructs__ = [haxe_macro_FunctionKind.FAnonymous,haxe_macro_FunctionKind.FArrow];
var haxe_macro_ExprDef = $hxEnums["haxe.macro.ExprDef"] = { __ename__ : "haxe.macro.ExprDef", __constructs__ : ["EConst","EArray","EBinop","EField","EParenthesis","EObjectDecl","EArrayDecl","ECall","ENew","EUnop","EVars","EFunction","EBlock","EFor","EIf","EWhile","ESwitch","ETry","EReturn","EBreak","EContinue","EUntyped","EThrow","ECast","EDisplay","EDisplayNew","ETernary","ECheckType","EMeta"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EArray: ($_=function(e1,e2) { return {_hx_index:1,e1:e1,e2:e2,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e1","e2"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:2,op:op,e1:e1,e2:e2,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EField: ($_=function(e,field) { return {_hx_index:3,e:e,field:field,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","field"],$_)
	,EParenthesis: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EObjectDecl: ($_=function(fields) { return {_hx_index:5,fields:fields,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,EArrayDecl: ($_=function(values) { return {_hx_index:6,values:values,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["values"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:7,e:e,params:params,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,ENew: ($_=function(t,params) { return {_hx_index:8,t:t,params:params,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["t","params"],$_)
	,EUnop: ($_=function(op,postFix,e) { return {_hx_index:9,op:op,postFix:postFix,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["op","postFix","e"],$_)
	,EVars: ($_=function(vars) { return {_hx_index:10,vars:vars,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["vars"],$_)
	,EFunction: ($_=function(kind,f) { return {_hx_index:11,kind:kind,f:f,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["kind","f"],$_)
	,EBlock: ($_=function(exprs) { return {_hx_index:12,exprs:exprs,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["exprs"],$_)
	,EFor: ($_=function(it,expr) { return {_hx_index:13,it:it,expr:expr,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["it","expr"],$_)
	,EIf: ($_=function(econd,eif,eelse) { return {_hx_index:14,econd:econd,eif:eif,eelse:eelse,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,EWhile: ($_=function(econd,e,normalWhile) { return {_hx_index:15,econd:econd,e:e,normalWhile:normalWhile,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","e","normalWhile"],$_)
	,ESwitch: ($_=function(e,cases,edef) { return {_hx_index:16,e:e,cases:cases,edef:edef,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","cases","edef"],$_)
	,ETry: ($_=function(e,catches) { return {_hx_index:17,e:e,catches:catches,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","catches"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:18,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBreak: {_hx_index:19,__enum__:"haxe.macro.ExprDef",toString:$estr}
	,EContinue: {_hx_index:20,__enum__:"haxe.macro.ExprDef",toString:$estr}
	,EUntyped: ($_=function(e) { return {_hx_index:21,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:22,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ECast: ($_=function(e,t) { return {_hx_index:23,e:e,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","t"],$_)
	,EDisplay: ($_=function(e,displayKind) { return {_hx_index:24,e:e,displayKind:displayKind,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","displayKind"],$_)
	,EDisplayNew: ($_=function(t) { return {_hx_index:25,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["t"],$_)
	,ETernary: ($_=function(econd,eif,eelse) { return {_hx_index:26,econd:econd,eif:eif,eelse:eelse,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:27,e:e,t:t,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["e","t"],$_)
	,EMeta: ($_=function(s,e) { return {_hx_index:28,s:s,e:e,__enum__:"haxe.macro.ExprDef",toString:$estr}; },$_.__params__ = ["s","e"],$_)
};
haxe_macro_ExprDef.__empty_constructs__ = [haxe_macro_ExprDef.EBreak,haxe_macro_ExprDef.EContinue];
var haxe_macro_DisplayKind = $hxEnums["haxe.macro.DisplayKind"] = { __ename__ : "haxe.macro.DisplayKind", __constructs__ : ["DKCall","DKDot","DKStructure","DKMarked","DKPattern"]
	,DKCall: {_hx_index:0,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKDot: {_hx_index:1,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKStructure: {_hx_index:2,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKMarked: {_hx_index:3,__enum__:"haxe.macro.DisplayKind",toString:$estr}
	,DKPattern: ($_=function(outermost) { return {_hx_index:4,outermost:outermost,__enum__:"haxe.macro.DisplayKind",toString:$estr}; },$_.__params__ = ["outermost"],$_)
};
haxe_macro_DisplayKind.__empty_constructs__ = [haxe_macro_DisplayKind.DKCall,haxe_macro_DisplayKind.DKDot,haxe_macro_DisplayKind.DKStructure,haxe_macro_DisplayKind.DKMarked];
var haxe_macro_ComplexType = $hxEnums["haxe.macro.ComplexType"] = { __ename__ : "haxe.macro.ComplexType", __constructs__ : ["TPath","TFunction","TAnonymous","TParent","TExtend","TOptional","TNamed","TIntersection"]
	,TPath: ($_=function(p) { return {_hx_index:0,p:p,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p"],$_)
	,TFunction: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,TAnonymous: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,TParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TExtend: ($_=function(p,fields) { return {_hx_index:4,p:p,fields:fields,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["p","fields"],$_)
	,TOptional: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TNamed: ($_=function(n,t) { return {_hx_index:6,n:n,t:t,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
	,TIntersection: ($_=function(tl) { return {_hx_index:7,tl:tl,__enum__:"haxe.macro.ComplexType",toString:$estr}; },$_.__params__ = ["tl"],$_)
};
haxe_macro_ComplexType.__empty_constructs__ = [];
var haxe_macro_TypeParam = $hxEnums["haxe.macro.TypeParam"] = { __ename__ : "haxe.macro.TypeParam", __constructs__ : ["TPType","TPExpr"]
	,TPType: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TPExpr: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"haxe.macro.TypeParam",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_macro_TypeParam.__empty_constructs__ = [];
var haxe_macro_Access = $hxEnums["haxe.macro.Access"] = { __ename__ : "haxe.macro.Access", __constructs__ : ["APublic","APrivate","AStatic","AOverride","ADynamic","AInline","AMacro","AFinal","AExtern"]
	,APublic: {_hx_index:0,__enum__:"haxe.macro.Access",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"haxe.macro.Access",toString:$estr}
	,AStatic: {_hx_index:2,__enum__:"haxe.macro.Access",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"haxe.macro.Access",toString:$estr}
	,ADynamic: {_hx_index:4,__enum__:"haxe.macro.Access",toString:$estr}
	,AInline: {_hx_index:5,__enum__:"haxe.macro.Access",toString:$estr}
	,AMacro: {_hx_index:6,__enum__:"haxe.macro.Access",toString:$estr}
	,AFinal: {_hx_index:7,__enum__:"haxe.macro.Access",toString:$estr}
	,AExtern: {_hx_index:8,__enum__:"haxe.macro.Access",toString:$estr}
};
haxe_macro_Access.__empty_constructs__ = [haxe_macro_Access.APublic,haxe_macro_Access.APrivate,haxe_macro_Access.AStatic,haxe_macro_Access.AOverride,haxe_macro_Access.ADynamic,haxe_macro_Access.AInline,haxe_macro_Access.AMacro,haxe_macro_Access.AFinal,haxe_macro_Access.AExtern];
var haxe_macro_FieldType = $hxEnums["haxe.macro.FieldType"] = { __ename__ : "haxe.macro.FieldType", __constructs__ : ["FVar","FFun","FProp"]
	,FVar: ($_=function(t,e) { return {_hx_index:0,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["t","e"],$_)
	,FFun: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["f"],$_)
	,FProp: ($_=function(get,set,t,e) { return {_hx_index:2,get:get,set:set,t:t,e:e,__enum__:"haxe.macro.FieldType",toString:$estr}; },$_.__params__ = ["get","set","t","e"],$_)
};
haxe_macro_FieldType.__empty_constructs__ = [];
var haxe_macro_TypeDefKind = $hxEnums["haxe.macro.TypeDefKind"] = { __ename__ : "haxe.macro.TypeDefKind", __constructs__ : ["TDEnum","TDStructure","TDClass","TDAlias","TDAbstract"]
	,TDEnum: {_hx_index:0,__enum__:"haxe.macro.TypeDefKind",toString:$estr}
	,TDStructure: {_hx_index:1,__enum__:"haxe.macro.TypeDefKind",toString:$estr}
	,TDClass: ($_=function(superClass,interfaces,isInterface,isFinal) { return {_hx_index:2,superClass:superClass,interfaces:interfaces,isInterface:isInterface,isFinal:isFinal,__enum__:"haxe.macro.TypeDefKind",toString:$estr}; },$_.__params__ = ["superClass","interfaces","isInterface","isFinal"],$_)
	,TDAlias: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"haxe.macro.TypeDefKind",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TDAbstract: ($_=function(tthis,from,to) { return {_hx_index:4,tthis:tthis,from:from,to:to,__enum__:"haxe.macro.TypeDefKind",toString:$estr}; },$_.__params__ = ["tthis","from","to"],$_)
};
haxe_macro_TypeDefKind.__empty_constructs__ = [haxe_macro_TypeDefKind.TDEnum,haxe_macro_TypeDefKind.TDStructure];
var haxe_macro_Error = function(m,p) {
	this.message = m;
	this.pos = p;
};
$hxClasses["haxe.macro.Error"] = haxe_macro_Error;
haxe_macro_Error.__name__ = "haxe.macro.Error";
haxe_macro_Error.prototype = {
	message: null
	,pos: null
	,toString: function() {
		return this.message;
	}
	,__class__: haxe_macro_Error
};
var haxe_macro_ImportMode = $hxEnums["haxe.macro.ImportMode"] = { __ename__ : "haxe.macro.ImportMode", __constructs__ : ["INormal","IAsName","IAll"]
	,INormal: {_hx_index:0,__enum__:"haxe.macro.ImportMode",toString:$estr}
	,IAsName: ($_=function(alias) { return {_hx_index:1,alias:alias,__enum__:"haxe.macro.ImportMode",toString:$estr}; },$_.__params__ = ["alias"],$_)
	,IAll: {_hx_index:2,__enum__:"haxe.macro.ImportMode",toString:$estr}
};
haxe_macro_ImportMode.__empty_constructs__ = [haxe_macro_ImportMode.INormal,haxe_macro_ImportMode.IAll];
var haxe_macro_Type = $hxEnums["haxe.macro.Type"] = { __ename__ : "haxe.macro.Type", __constructs__ : ["TMono","TEnum","TInst","TType","TFun","TAnonymous","TDynamic","TLazy","TAbstract"]
	,TMono: ($_=function(t) { return {_hx_index:0,t:t,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TEnum: ($_=function(t,params) { return {_hx_index:1,t:t,params:params,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t","params"],$_)
	,TInst: ($_=function(t,params) { return {_hx_index:2,t:t,params:params,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t","params"],$_)
	,TType: ($_=function(t,params) { return {_hx_index:3,t:t,params:params,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t","params"],$_)
	,TFun: ($_=function(args,ret) { return {_hx_index:4,args:args,ret:ret,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,TAnonymous: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["a"],$_)
	,TDynamic: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TLazy: ($_=function(f) { return {_hx_index:7,f:f,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["f"],$_)
	,TAbstract: ($_=function(t,params) { return {_hx_index:8,t:t,params:params,__enum__:"haxe.macro.Type",toString:$estr}; },$_.__params__ = ["t","params"],$_)
};
haxe_macro_Type.__empty_constructs__ = [];
var haxe_macro_AnonStatus = $hxEnums["haxe.macro.AnonStatus"] = { __ename__ : "haxe.macro.AnonStatus", __constructs__ : ["AClosed","AOpened","AConst","AExtend","AClassStatics","AEnumStatics","AAbstractStatics"]
	,AClosed: {_hx_index:0,__enum__:"haxe.macro.AnonStatus",toString:$estr}
	,AOpened: {_hx_index:1,__enum__:"haxe.macro.AnonStatus",toString:$estr}
	,AConst: {_hx_index:2,__enum__:"haxe.macro.AnonStatus",toString:$estr}
	,AExtend: ($_=function(tl) { return {_hx_index:3,tl:tl,__enum__:"haxe.macro.AnonStatus",toString:$estr}; },$_.__params__ = ["tl"],$_)
	,AClassStatics: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"haxe.macro.AnonStatus",toString:$estr}; },$_.__params__ = ["t"],$_)
	,AEnumStatics: ($_=function(t) { return {_hx_index:5,t:t,__enum__:"haxe.macro.AnonStatus",toString:$estr}; },$_.__params__ = ["t"],$_)
	,AAbstractStatics: ($_=function(t) { return {_hx_index:6,t:t,__enum__:"haxe.macro.AnonStatus",toString:$estr}; },$_.__params__ = ["t"],$_)
};
haxe_macro_AnonStatus.__empty_constructs__ = [haxe_macro_AnonStatus.AClosed,haxe_macro_AnonStatus.AOpened,haxe_macro_AnonStatus.AConst];
var haxe_macro_ClassKind = $hxEnums["haxe.macro.ClassKind"] = { __ename__ : "haxe.macro.ClassKind", __constructs__ : ["KNormal","KTypeParameter","KExtension","KExpr","KGeneric","KGenericInstance","KMacroType","KAbstractImpl","KGenericBuild"]
	,KNormal: {_hx_index:0,__enum__:"haxe.macro.ClassKind",toString:$estr}
	,KTypeParameter: ($_=function(constraints) { return {_hx_index:1,constraints:constraints,__enum__:"haxe.macro.ClassKind",toString:$estr}; },$_.__params__ = ["constraints"],$_)
	,KExtension: ($_=function(cl,params) { return {_hx_index:2,cl:cl,params:params,__enum__:"haxe.macro.ClassKind",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,KExpr: ($_=function(expr) { return {_hx_index:3,expr:expr,__enum__:"haxe.macro.ClassKind",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,KGeneric: {_hx_index:4,__enum__:"haxe.macro.ClassKind",toString:$estr}
	,KGenericInstance: ($_=function(cl,params) { return {_hx_index:5,cl:cl,params:params,__enum__:"haxe.macro.ClassKind",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,KMacroType: {_hx_index:6,__enum__:"haxe.macro.ClassKind",toString:$estr}
	,KAbstractImpl: ($_=function(a) { return {_hx_index:7,a:a,__enum__:"haxe.macro.ClassKind",toString:$estr}; },$_.__params__ = ["a"],$_)
	,KGenericBuild: {_hx_index:8,__enum__:"haxe.macro.ClassKind",toString:$estr}
};
haxe_macro_ClassKind.__empty_constructs__ = [haxe_macro_ClassKind.KNormal,haxe_macro_ClassKind.KGeneric,haxe_macro_ClassKind.KMacroType,haxe_macro_ClassKind.KGenericBuild];
var haxe_macro_FieldKind = $hxEnums["haxe.macro.FieldKind"] = { __ename__ : "haxe.macro.FieldKind", __constructs__ : ["FVar","FMethod"]
	,FVar: ($_=function(read,write) { return {_hx_index:0,read:read,write:write,__enum__:"haxe.macro.FieldKind",toString:$estr}; },$_.__params__ = ["read","write"],$_)
	,FMethod: ($_=function(k) { return {_hx_index:1,k:k,__enum__:"haxe.macro.FieldKind",toString:$estr}; },$_.__params__ = ["k"],$_)
};
haxe_macro_FieldKind.__empty_constructs__ = [];
var haxe_macro_VarAccess = $hxEnums["haxe.macro.VarAccess"] = { __ename__ : "haxe.macro.VarAccess", __constructs__ : ["AccNormal","AccNo","AccNever","AccResolve","AccCall","AccInline","AccRequire","AccCtor"]
	,AccNormal: {_hx_index:0,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccNo: {_hx_index:1,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccNever: {_hx_index:2,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccResolve: {_hx_index:3,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccCall: {_hx_index:4,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccInline: {_hx_index:5,__enum__:"haxe.macro.VarAccess",toString:$estr}
	,AccRequire: ($_=function(r,msg) { return {_hx_index:6,r:r,msg:msg,__enum__:"haxe.macro.VarAccess",toString:$estr}; },$_.__params__ = ["r","msg"],$_)
	,AccCtor: {_hx_index:7,__enum__:"haxe.macro.VarAccess",toString:$estr}
};
haxe_macro_VarAccess.__empty_constructs__ = [haxe_macro_VarAccess.AccNormal,haxe_macro_VarAccess.AccNo,haxe_macro_VarAccess.AccNever,haxe_macro_VarAccess.AccResolve,haxe_macro_VarAccess.AccCall,haxe_macro_VarAccess.AccInline,haxe_macro_VarAccess.AccCtor];
var haxe_macro_MethodKind = $hxEnums["haxe.macro.MethodKind"] = { __ename__ : "haxe.macro.MethodKind", __constructs__ : ["MethNormal","MethInline","MethDynamic","MethMacro"]
	,MethNormal: {_hx_index:0,__enum__:"haxe.macro.MethodKind",toString:$estr}
	,MethInline: {_hx_index:1,__enum__:"haxe.macro.MethodKind",toString:$estr}
	,MethDynamic: {_hx_index:2,__enum__:"haxe.macro.MethodKind",toString:$estr}
	,MethMacro: {_hx_index:3,__enum__:"haxe.macro.MethodKind",toString:$estr}
};
haxe_macro_MethodKind.__empty_constructs__ = [haxe_macro_MethodKind.MethNormal,haxe_macro_MethodKind.MethInline,haxe_macro_MethodKind.MethDynamic,haxe_macro_MethodKind.MethMacro];
var haxe_macro_TConstant = $hxEnums["haxe.macro.TConstant"] = { __ename__ : "haxe.macro.TConstant", __constructs__ : ["TInt","TFloat","TString","TBool","TNull","TThis","TSuper"]
	,TInt: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.macro.TConstant",toString:$estr}; },$_.__params__ = ["i"],$_)
	,TFloat: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"haxe.macro.TConstant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"haxe.macro.TConstant",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TBool: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"haxe.macro.TConstant",toString:$estr}; },$_.__params__ = ["b"],$_)
	,TNull: {_hx_index:4,__enum__:"haxe.macro.TConstant",toString:$estr}
	,TThis: {_hx_index:5,__enum__:"haxe.macro.TConstant",toString:$estr}
	,TSuper: {_hx_index:6,__enum__:"haxe.macro.TConstant",toString:$estr}
};
haxe_macro_TConstant.__empty_constructs__ = [haxe_macro_TConstant.TNull,haxe_macro_TConstant.TThis,haxe_macro_TConstant.TSuper];
var haxe_macro_ModuleType = $hxEnums["haxe.macro.ModuleType"] = { __ename__ : "haxe.macro.ModuleType", __constructs__ : ["TClassDecl","TEnumDecl","TTypeDecl","TAbstract"]
	,TClassDecl: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"haxe.macro.ModuleType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnumDecl: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"haxe.macro.ModuleType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TTypeDecl: ($_=function(t) { return {_hx_index:2,t:t,__enum__:"haxe.macro.ModuleType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,TAbstract: ($_=function(a) { return {_hx_index:3,a:a,__enum__:"haxe.macro.ModuleType",toString:$estr}; },$_.__params__ = ["a"],$_)
};
haxe_macro_ModuleType.__empty_constructs__ = [];
var haxe_macro_FieldAccess = $hxEnums["haxe.macro.FieldAccess"] = { __ename__ : "haxe.macro.FieldAccess", __constructs__ : ["FInstance","FStatic","FAnon","FDynamic","FClosure","FEnum"]
	,FInstance: ($_=function(c,params,cf) { return {_hx_index:0,c:c,params:params,cf:cf,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["c","params","cf"],$_)
	,FStatic: ($_=function(c,cf) { return {_hx_index:1,c:c,cf:cf,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["c","cf"],$_)
	,FAnon: ($_=function(cf) { return {_hx_index:2,cf:cf,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["cf"],$_)
	,FDynamic: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["s"],$_)
	,FClosure: ($_=function(c,cf) { return {_hx_index:4,c:c,cf:cf,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["c","cf"],$_)
	,FEnum: ($_=function(e,ef) { return {_hx_index:5,e:e,ef:ef,__enum__:"haxe.macro.FieldAccess",toString:$estr}; },$_.__params__ = ["e","ef"],$_)
};
haxe_macro_FieldAccess.__empty_constructs__ = [];
var haxe_macro_TypedExprDef = $hxEnums["haxe.macro.TypedExprDef"] = { __ename__ : "haxe.macro.TypedExprDef", __constructs__ : ["TConst","TLocal","TArray","TBinop","TField","TTypeExpr","TParenthesis","TObjectDecl","TArrayDecl","TCall","TNew","TUnop","TFunction","TVar","TBlock","TFor","TIf","TWhile","TSwitch","TTry","TReturn","TBreak","TContinue","TThrow","TCast","TMeta","TEnumParameter","TEnumIndex","TIdent"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TLocal: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TArray: ($_=function(e1,e2) { return {_hx_index:2,e1:e1,e2:e2,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e1","e2"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:3,op:op,e1:e1,e2:e2,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TField: ($_=function(e,fa) { return {_hx_index:4,e:e,fa:fa,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e","fa"],$_)
	,TTypeExpr: ($_=function(m) { return {_hx_index:5,m:m,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["m"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:6,e:e,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TObjectDecl: ($_=function(fields) { return {_hx_index:7,fields:fields,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:8,el:el,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TCall: ($_=function(e,el) { return {_hx_index:9,e:e,el:el,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e","el"],$_)
	,TNew: ($_=function(c,params,el) { return {_hx_index:10,c:c,params:params,el:el,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["c","params","el"],$_)
	,TUnop: ($_=function(op,postFix,e) { return {_hx_index:11,op:op,postFix:postFix,e:e,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["op","postFix","e"],$_)
	,TFunction: ($_=function(tfunc) { return {_hx_index:12,tfunc:tfunc,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["tfunc"],$_)
	,TVar: ($_=function(v,expr) { return {_hx_index:13,v:v,expr:expr,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["v","expr"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:14,el:el,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TFor: ($_=function(v,e1,e2) { return {_hx_index:15,v:v,e1:e1,e2:e2,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["v","e1","e2"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:16,econd:econd,eif:eif,eelse:eelse,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TWhile: ($_=function(econd,e,normalWhile) { return {_hx_index:17,econd:econd,e:e,normalWhile:normalWhile,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["econd","e","normalWhile"],$_)
	,TSwitch: ($_=function(e,cases,edef) { return {_hx_index:18,e:e,cases:cases,edef:edef,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e","cases","edef"],$_)
	,TTry: ($_=function(e,catches) { return {_hx_index:19,e:e,catches:catches,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e","catches"],$_)
	,TReturn: ($_=function(e) { return {_hx_index:20,e:e,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBreak: {_hx_index:21,__enum__:"haxe.macro.TypedExprDef",toString:$estr}
	,TContinue: {_hx_index:22,__enum__:"haxe.macro.TypedExprDef",toString:$estr}
	,TThrow: ($_=function(e) { return {_hx_index:23,e:e,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TCast: ($_=function(e,m) { return {_hx_index:24,e:e,m:m,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e","m"],$_)
	,TMeta: ($_=function(m,e1) { return {_hx_index:25,m:m,e1:e1,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["m","e1"],$_)
	,TEnumParameter: ($_=function(e1,ef,index) { return {_hx_index:26,e1:e1,ef:ef,index:index,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e1","ef","index"],$_)
	,TEnumIndex: ($_=function(e1) { return {_hx_index:27,e1:e1,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["e1"],$_)
	,TIdent: ($_=function(s) { return {_hx_index:28,s:s,__enum__:"haxe.macro.TypedExprDef",toString:$estr}; },$_.__params__ = ["s"],$_)
};
haxe_macro_TypedExprDef.__empty_constructs__ = [haxe_macro_TypedExprDef.TBreak,haxe_macro_TypedExprDef.TContinue];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.isInterface = function(t) {
	throw new js__$Boot_HaxeError("Something went wrong");
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getStatics = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.statics == null) {
		return { };
	} else {
		return meta.statics;
	}
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
haxe_xml_Parser.isValidChar = function(c) {
	if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95)) {
		return c == 45;
	} else {
		return true;
	}
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,write: function(input) {
		this.output.b += input == null ? "null" : "" + input;
	}
	,newline: function() {
		if(this.pretty) {
			this.output.b += "\n";
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var hscript_Const = $hxEnums["hscript.Const"] = { __ename__ : "hscript.Const", __constructs__ : ["CInt","CFloat","CString"]
	,CInt: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["f"],$_)
	,CString: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Const",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Const.__empty_constructs__ = [];
var hscript_Expr = $hxEnums["hscript.Expr"] = { __ename__ : "hscript.Expr", __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch","EDoWhile","EMeta","ECheckType"]
	,EConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EIdent: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EVar: ($_=function(n,t,e) { return {_hx_index:2,n:n,t:t,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["n","t","e"],$_)
	,EParent: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EBlock: ($_=function(e) { return {_hx_index:4,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EField: ($_=function(e,f) { return {_hx_index:5,e:e,f:f,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","f"],$_)
	,EBinop: ($_=function(op,e1,e2) { return {_hx_index:6,op:op,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,EUnop: ($_=function(op,prefix,e) { return {_hx_index:7,op:op,prefix:prefix,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["op","prefix","e"],$_)
	,ECall: ($_=function(e,params) { return {_hx_index:8,e:e,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","params"],$_)
	,EIf: ($_=function(cond,e1,e2) { return {_hx_index:9,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,EWhile: ($_=function(cond,e) { return {_hx_index:10,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EFor: ($_=function(v,it,e) { return {_hx_index:11,v:v,it:it,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["v","it","e"],$_)
	,EBreak: {_hx_index:12,__enum__:"hscript.Expr",toString:$estr}
	,EContinue: {_hx_index:13,__enum__:"hscript.Expr",toString:$estr}
	,EFunction: ($_=function(args,e,name,ret) { return {_hx_index:14,args:args,e:e,name:name,ret:ret,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["args","e","name","ret"],$_)
	,EReturn: ($_=function(e) { return {_hx_index:15,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,EArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,EArrayDecl: ($_=function(e) { return {_hx_index:17,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ENew: ($_=function(cl,params) { return {_hx_index:18,cl:cl,params:params,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cl","params"],$_)
	,EThrow: ($_=function(e) { return {_hx_index:19,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e"],$_)
	,ETry: ($_=function(e,v,t,ecatch) { return {_hx_index:20,e:e,v:v,t:t,ecatch:ecatch,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","v","t","ecatch"],$_)
	,EObject: ($_=function(fl) { return {_hx_index:21,fl:fl,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["fl"],$_)
	,ETernary: ($_=function(cond,e1,e2) { return {_hx_index:22,cond:cond,e1:e1,e2:e2,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e1","e2"],$_)
	,ESwitch: ($_=function(e,cases,defaultExpr) { return {_hx_index:23,e:e,cases:cases,defaultExpr:defaultExpr,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","cases","defaultExpr"],$_)
	,EDoWhile: ($_=function(cond,e) { return {_hx_index:24,cond:cond,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["cond","e"],$_)
	,EMeta: ($_=function(name,args,e) { return {_hx_index:25,name:name,args:args,e:e,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["name","args","e"],$_)
	,ECheckType: ($_=function(e,t) { return {_hx_index:26,e:e,t:t,__enum__:"hscript.Expr",toString:$estr}; },$_.__params__ = ["e","t"],$_)
};
hscript_Expr.__empty_constructs__ = [hscript_Expr.EBreak,hscript_Expr.EContinue];
var hscript_CType = $hxEnums["hscript.CType"] = { __ename__ : "hscript.CType", __constructs__ : ["CTPath","CTFun","CTAnon","CTParent","CTOpt","CTNamed"]
	,CTPath: ($_=function(path,params) { return {_hx_index:0,path:path,params:params,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["path","params"],$_)
	,CTFun: ($_=function(args,ret) { return {_hx_index:1,args:args,ret:ret,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["args","ret"],$_)
	,CTAnon: ($_=function(fields) { return {_hx_index:2,fields:fields,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["fields"],$_)
	,CTParent: ($_=function(t) { return {_hx_index:3,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTOpt: ($_=function(t) { return {_hx_index:4,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["t"],$_)
	,CTNamed: ($_=function(n,t) { return {_hx_index:5,n:n,t:t,__enum__:"hscript.CType",toString:$estr}; },$_.__params__ = ["n","t"],$_)
};
hscript_CType.__empty_constructs__ = [];
var hscript_Error = $hxEnums["hscript.Error"] = { __ename__ : "hscript.Error", __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EInvalidPreprocessor","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess","ECustom"]
	,EInvalidChar: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["c"],$_)
	,EUnexpected: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EUnterminatedString: {_hx_index:2,__enum__:"hscript.Error",toString:$estr}
	,EUnterminatedComment: {_hx_index:3,__enum__:"hscript.Error",toString:$estr}
	,EInvalidPreprocessor: ($_=function(msg) { return {_hx_index:4,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,EUnknownVariable: ($_=function(v) { return {_hx_index:5,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidIterator: ($_=function(v) { return {_hx_index:6,v:v,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["v"],$_)
	,EInvalidOp: ($_=function(op) { return {_hx_index:7,op:op,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["op"],$_)
	,EInvalidAccess: ($_=function(f) { return {_hx_index:8,f:f,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["f"],$_)
	,ECustom: ($_=function(msg) { return {_hx_index:9,msg:msg,__enum__:"hscript.Error",toString:$estr}; },$_.__params__ = ["msg"],$_)
};
hscript_Error.__empty_constructs__ = [hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment];
var hscript_ModuleDecl = $hxEnums["hscript.ModuleDecl"] = { __ename__ : "hscript.ModuleDecl", __constructs__ : ["DPackage","DImport","DClass","DTypedef"]
	,DPackage: ($_=function(path) { return {_hx_index:0,path:path,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path"],$_)
	,DImport: ($_=function(path,everything) { return {_hx_index:1,path:path,everything:everything,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["path","everything"],$_)
	,DClass: ($_=function(c) { return {_hx_index:2,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
	,DTypedef: ($_=function(c) { return {_hx_index:3,c:c,__enum__:"hscript.ModuleDecl",toString:$estr}; },$_.__params__ = ["c"],$_)
};
hscript_ModuleDecl.__empty_constructs__ = [];
var hscript_FieldAccess = $hxEnums["hscript.FieldAccess"] = { __ename__ : "hscript.FieldAccess", __constructs__ : ["APublic","APrivate","AInline","AOverride","AStatic","AMacro"]
	,APublic: {_hx_index:0,__enum__:"hscript.FieldAccess",toString:$estr}
	,APrivate: {_hx_index:1,__enum__:"hscript.FieldAccess",toString:$estr}
	,AInline: {_hx_index:2,__enum__:"hscript.FieldAccess",toString:$estr}
	,AOverride: {_hx_index:3,__enum__:"hscript.FieldAccess",toString:$estr}
	,AStatic: {_hx_index:4,__enum__:"hscript.FieldAccess",toString:$estr}
	,AMacro: {_hx_index:5,__enum__:"hscript.FieldAccess",toString:$estr}
};
hscript_FieldAccess.__empty_constructs__ = [hscript_FieldAccess.APublic,hscript_FieldAccess.APrivate,hscript_FieldAccess.AInline,hscript_FieldAccess.AOverride,hscript_FieldAccess.AStatic,hscript_FieldAccess.AMacro];
var hscript_FieldKind = $hxEnums["hscript.FieldKind"] = { __ename__ : "hscript.FieldKind", __constructs__ : ["KFunction","KVar"]
	,KFunction: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["f"],$_)
	,KVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hscript.FieldKind",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hscript_FieldKind.__empty_constructs__ = [];
var hscript__$Interp_Stop = $hxEnums["hscript._Interp.Stop"] = { __ename__ : "hscript._Interp.Stop", __constructs__ : ["SBreak","SContinue","SReturn"]
	,SBreak: {_hx_index:0,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SContinue: {_hx_index:1,__enum__:"hscript._Interp.Stop",toString:$estr}
	,SReturn: {_hx_index:2,__enum__:"hscript._Interp.Stop",toString:$estr}
};
hscript__$Interp_Stop.__empty_constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue,hscript__$Interp_Stop.SReturn];
var hscript_Interp = function() {
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	this.resetVariables();
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = "hscript.Interp";
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,returnValue: null
	,resetVariables: function() {
		var _gthis = this;
		this.variables = new haxe_ds_StringMap();
		var _this = this.variables;
		var value = null;
		if(__map_reserved["null"] != null) {
			_this.setReserved("null",value);
		} else {
			_this.h["null"] = value;
		}
		var _this1 = this.variables;
		if(__map_reserved["true"] != null) {
			_this1.setReserved("true",true);
		} else {
			_this1.h["true"] = true;
		}
		var _this2 = this.variables;
		if(__map_reserved["false"] != null) {
			_this2.setReserved("false",false);
		} else {
			_this2.h["false"] = false;
		}
		var _this3 = this.variables;
		var value1 = Reflect.makeVarArgs(function(el) {
			var inf = _gthis.posInfos();
			var v = el.shift();
			if(el.length > 0) {
				inf.customParams = el;
			}
			haxe_Log.trace(Std.string(v),inf);
		});
		if(__map_reserved["trace"] != null) {
			_this3.setReserved("trace",value1);
		} else {
			_this3.h["trace"] = value1;
		}
	}
	,posInfos: function() {
		return { fileName : "hscript", lineNumber : 0};
	}
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		var _this = this.binops;
		var value = function(e1,e2) {
			return me.expr(e1) + me.expr(e2);
		};
		if(__map_reserved["+"] != null) {
			_this.setReserved("+",value);
		} else {
			_this.h["+"] = value;
		}
		var _this1 = this.binops;
		var value1 = function(e11,e21) {
			return me.expr(e11) - me.expr(e21);
		};
		if(__map_reserved["-"] != null) {
			_this1.setReserved("-",value1);
		} else {
			_this1.h["-"] = value1;
		}
		var _this2 = this.binops;
		var value2 = function(e12,e22) {
			return me.expr(e12) * me.expr(e22);
		};
		if(__map_reserved["*"] != null) {
			_this2.setReserved("*",value2);
		} else {
			_this2.h["*"] = value2;
		}
		var _this3 = this.binops;
		var value3 = function(e13,e23) {
			return me.expr(e13) / me.expr(e23);
		};
		if(__map_reserved["/"] != null) {
			_this3.setReserved("/",value3);
		} else {
			_this3.h["/"] = value3;
		}
		var _this4 = this.binops;
		var value4 = function(e14,e24) {
			return me.expr(e14) % me.expr(e24);
		};
		if(__map_reserved["%"] != null) {
			_this4.setReserved("%",value4);
		} else {
			_this4.h["%"] = value4;
		}
		var _this5 = this.binops;
		var value5 = function(e15,e25) {
			return me.expr(e15) & me.expr(e25);
		};
		if(__map_reserved["&"] != null) {
			_this5.setReserved("&",value5);
		} else {
			_this5.h["&"] = value5;
		}
		var _this6 = this.binops;
		var value6 = function(e16,e26) {
			return me.expr(e16) | me.expr(e26);
		};
		if(__map_reserved["|"] != null) {
			_this6.setReserved("|",value6);
		} else {
			_this6.h["|"] = value6;
		}
		var _this7 = this.binops;
		var value7 = function(e17,e27) {
			return me.expr(e17) ^ me.expr(e27);
		};
		if(__map_reserved["^"] != null) {
			_this7.setReserved("^",value7);
		} else {
			_this7.h["^"] = value7;
		}
		var _this8 = this.binops;
		var value8 = function(e18,e28) {
			return me.expr(e18) << me.expr(e28);
		};
		if(__map_reserved["<<"] != null) {
			_this8.setReserved("<<",value8);
		} else {
			_this8.h["<<"] = value8;
		}
		var _this9 = this.binops;
		var value9 = function(e19,e29) {
			return me.expr(e19) >> me.expr(e29);
		};
		if(__map_reserved[">>"] != null) {
			_this9.setReserved(">>",value9);
		} else {
			_this9.h[">>"] = value9;
		}
		var _this10 = this.binops;
		var value10 = function(e110,e210) {
			return me.expr(e110) >>> me.expr(e210);
		};
		if(__map_reserved[">>>"] != null) {
			_this10.setReserved(">>>",value10);
		} else {
			_this10.h[">>>"] = value10;
		}
		var _this11 = this.binops;
		var value11 = function(e111,e211) {
			return me.expr(e111) == me.expr(e211);
		};
		if(__map_reserved["=="] != null) {
			_this11.setReserved("==",value11);
		} else {
			_this11.h["=="] = value11;
		}
		var _this12 = this.binops;
		var value12 = function(e112,e212) {
			return me.expr(e112) != me.expr(e212);
		};
		if(__map_reserved["!="] != null) {
			_this12.setReserved("!=",value12);
		} else {
			_this12.h["!="] = value12;
		}
		var _this13 = this.binops;
		var value13 = function(e113,e213) {
			return me.expr(e113) >= me.expr(e213);
		};
		if(__map_reserved[">="] != null) {
			_this13.setReserved(">=",value13);
		} else {
			_this13.h[">="] = value13;
		}
		var _this14 = this.binops;
		var value14 = function(e114,e214) {
			return me.expr(e114) <= me.expr(e214);
		};
		if(__map_reserved["<="] != null) {
			_this14.setReserved("<=",value14);
		} else {
			_this14.h["<="] = value14;
		}
		var _this15 = this.binops;
		var value15 = function(e115,e215) {
			return me.expr(e115) > me.expr(e215);
		};
		if(__map_reserved[">"] != null) {
			_this15.setReserved(">",value15);
		} else {
			_this15.h[">"] = value15;
		}
		var _this16 = this.binops;
		var value16 = function(e116,e216) {
			return me.expr(e116) < me.expr(e216);
		};
		if(__map_reserved["<"] != null) {
			_this16.setReserved("<",value16);
		} else {
			_this16.h["<"] = value16;
		}
		var _this17 = this.binops;
		var value17 = function(e117,e217) {
			if(me.expr(e117) != true) {
				return me.expr(e217) == true;
			} else {
				return true;
			}
		};
		if(__map_reserved["||"] != null) {
			_this17.setReserved("||",value17);
		} else {
			_this17.h["||"] = value17;
		}
		var _this18 = this.binops;
		var value18 = function(e118,e218) {
			if(me.expr(e118) == true) {
				return me.expr(e218) == true;
			} else {
				return false;
			}
		};
		if(__map_reserved["&&"] != null) {
			_this18.setReserved("&&",value18);
		} else {
			_this18.h["&&"] = value18;
		}
		var _this19 = this.binops;
		var value19 = $bind(this,this.assign);
		if(__map_reserved["="] != null) {
			_this19.setReserved("=",value19);
		} else {
			_this19.h["="] = value19;
		}
		var _this20 = this.binops;
		var value20 = function(e119,e219) {
			return new IntIterator(me.expr(e119),me.expr(e219));
		};
		if(__map_reserved["..."] != null) {
			_this20.setReserved("...",value20);
		} else {
			_this20.h["..."] = value20;
		}
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var _this = this.locals;
			var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(l == null) {
				var _this1 = this.variables;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,v);
				} else {
					_this1.h[id] = v;
				}
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1.index;
			var e3 = e1.e;
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				arr[index1] = v;
			}
			break;
		default:
			var e4 = hscript_Error.EInvalidOp("=");
			throw new js__$Boot_HaxeError(e4);
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		var _this = this.binops;
		var value = function(e1,e2) {
			return me.evalAssignOp(op,fop,e1,e2);
		};
		if(__map_reserved[op] != null) {
			_this.setReserved(op,value);
		} else {
			_this.h[op] = value;
		}
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1._hx_index) {
		case 1:
			var id = e1.v;
			var _this = this.locals;
			var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				var _this1 = this.variables;
				if(__map_reserved[id] != null) {
					_this1.setReserved(id,v);
				} else {
					_this1.h[id] = v;
				}
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1.f;
			var e = e1.e;
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1.index;
			var e3 = e1.e;
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				v = fop((js_Boot.__cast(arr , haxe_IMap)).get(index1),this.expr(e2));
				(js_Boot.__cast(arr , haxe_IMap)).set(index1,v);
			} else {
				v = fop(arr[index1],this.expr(e2));
				arr[index1] = v;
			}
			break;
		default:
			var e4 = hscript_Error.EInvalidOp(op);
			throw new js__$Boot_HaxeError(e4);
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			var _this = this.locals;
			var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			var v;
			if(l == null) {
				var _this1 = this.variables;
				v = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
			} else {
				v = l.r;
			}
			if(prefix) {
				v += delta;
				if(l == null) {
					var _this2 = this.variables;
					var value = v;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,value);
					} else {
						_this2.h[id] = value;
					}
				} else {
					l.r = v;
				}
			} else if(l == null) {
				var _this3 = this.variables;
				var value1 = v + delta;
				if(__map_reserved[id] != null) {
					_this3.setReserved(id,value1);
				} else {
					_this3.h[id] = value1;
				}
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e.f;
			var e1 = e.e;
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else {
				this.set(obj,f,v1 + delta);
			}
			return v1;
		case 16:
			var index = e.index;
			var e2 = e.e;
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				var v2 = (js_Boot.__cast(arr , haxe_IMap)).get(index1);
				if(prefix) {
					v2 += delta;
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v2);
				} else {
					(js_Boot.__cast(arr , haxe_IMap)).set(index1,v2 + delta);
				}
				return v2;
			} else {
				var v3 = arr[index1];
				if(prefix) {
					v3 += delta;
					arr[index1] = v3;
				} else {
					arr[index1] = v3 + delta;
				}
				return v3;
			}
			break;
		default:
			var e3 = hscript_Error.EInvalidOp(delta > 0 ? "++" : "--");
			throw new js__$Boot_HaxeError(e3);
		}
	}
	,execute: function(expr) {
		this.depth = 0;
		this.locals = new haxe_ds_StringMap();
		this.declared = [];
		return this.exprReturn(expr);
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			if(js_Boot.__instanceof(e2,hscript__$Interp_Stop)) {
				switch(e2._hx_index) {
				case 0:
					throw new js__$Boot_HaxeError("Invalid break");
				case 1:
					throw new js__$Boot_HaxeError("Invalid continue");
				case 2:
					var v = this.returnValue;
					this.returnValue = null;
					return v;
				}
			} else {
				throw e1;
			}
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = h.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var value = __map_reserved[k1] != null ? h.getReserved(k1) : h.h[k1];
			if(__map_reserved[k1] != null) {
				h2.setReserved(k1,value);
			} else {
				h2.h[k1] = value;
			}
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			var key = d.n;
			var value = d.old;
			var _this = this.locals;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,error: function(e,rethrow) {
		if(rethrow == null) {
			rethrow = false;
		}
		if(rethrow) {
			throw js__$Boot_HaxeError.wrap(e);
		} else {
			throw new js__$Boot_HaxeError(e);
		}
	}
	,rethrow: function(e) {
		throw js__$Boot_HaxeError.wrap(e);
	}
	,resolve: function(id) {
		var _this = this.locals;
		var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(l != null) {
			return l.r;
		}
		var _this1 = this.variables;
		var v = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		var tmp;
		if(v == null) {
			var _this2 = this.variables;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			var e = hscript_Error.EUnknownVariable(id);
			throw new js__$Boot_HaxeError(e);
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e._hx_index) {
		case 0:
			var c = e.c;
			switch(c._hx_index) {
			case 0:
				var v = c.v;
				return v;
			case 1:
				var f = c.f;
				return f;
			case 2:
				var s = c.s;
				return s;
			}
			break;
		case 1:
			var id = e.v;
			return this.resolve(id);
		case 2:
			var _g32 = e.t;
			var e1 = e.e;
			var n = e.n;
			var _this = this.locals;
			this.declared.push({ n : n, old : __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]});
			var this1 = this.locals;
			var value = { r : e1 == null ? null : this.expr(e1)};
			var _this1 = this1;
			if(__map_reserved[n] != null) {
				_this1.setReserved(n,value);
			} else {
				_this1.h[n] = value;
			}
			return null;
		case 3:
			var e2 = e.e;
			return this.expr(e2);
		case 4:
			var exprs = e.e;
			var old = this.declared.length;
			var v1 = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e3 = exprs[_g];
				++_g;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e.f;
			var e4 = e.e;
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e.e2;
			var e11 = e.e1;
			var op = e.op;
			var _this2 = this.binops;
			var fop = __map_reserved[op] != null ? _this2.getReserved(op) : _this2.h[op];
			if(fop == null) {
				var e5 = hscript_Error.EInvalidOp(op);
				throw new js__$Boot_HaxeError(e5);
			}
			return fop(e11,e21);
		case 7:
			var e6 = e.e;
			var prefix = e.prefix;
			var op1 = e.op;
			switch(op1) {
			case "!":
				return this.expr(e6) != true;
			case "++":
				return this.increment(e6,prefix,1);
			case "-":
				return -this.expr(e6);
			case "--":
				return this.increment(e6,prefix,-1);
			case "~":
				return ~this.expr(e6);
			default:
				var e7 = hscript_Error.EInvalidOp(op1);
				throw new js__$Boot_HaxeError(e7);
			}
			break;
		case 8:
			var params = e.params;
			var e8 = e.e;
			var args = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				args.push(this.expr(p));
			}
			if(e8._hx_index == 5) {
				var f2 = e8.f;
				var e9 = e8.e;
				var obj = this.expr(e9);
				if(obj == null) {
					var e10 = hscript_Error.EInvalidAccess(f2);
					throw new js__$Boot_HaxeError(e10);
				}
				return this.fcall(obj,f2,args);
			} else {
				return this.call(null,this.expr(e8),args);
			}
			break;
		case 9:
			var e22 = e.e2;
			var e12 = e.e1;
			var econd = e.cond;
			if(this.expr(econd) == true) {
				return this.expr(e12);
			} else if(e22 == null) {
				return null;
			} else {
				return this.expr(e22);
			}
			break;
		case 10:
			var e13 = e.e;
			var econd1 = e.cond;
			this.whileLoop(econd1,e13);
			return null;
		case 11:
			var e14 = e.e;
			var it = e.it;
			var v2 = e.v;
			this.forLoop(v2,it,e14);
			return null;
		case 12:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SBreak);
		case 13:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SContinue);
		case 14:
			var _g44 = e.ret;
			var name = e.name;
			var fexpr = e.e;
			var params1 = e.args;
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var hasOpt = false;
			var minParams = 0;
			var _g2 = 0;
			while(_g2 < params1.length) {
				var p1 = params1[_g2];
				++_g2;
				if(p1.opt) {
					hasOpt = true;
				} else {
					minParams += 1;
				}
			}
			var f3 = function(args1) {
				if((args1 == null ? 0 : args1.length) != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						var e15 = hscript_Error.ECustom(str);
						throw new js__$Boot_HaxeError(e15);
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g11 = 0;
					while(_g11 < params1.length) {
						var p2 = params1[_g11];
						++_g11;
						if(p2.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args1[pos++]);
						}
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g12 = 0;
				var _g21 = params1.length;
				while(_g12 < _g21) {
					var i = _g12++;
					var key = params1[i].name;
					var _this3 = me.locals;
					var value1 = { r : args1[i]};
					if(__map_reserved[key] != null) {
						_this3.setReserved(key,value1);
					} else {
						_this3.h[key] = value1;
					}
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( e16 ) {
						var e17 = ((e16) instanceof js__$Boot_HaxeError) ? e16.val : e16;
						me.locals = old1;
						me.depth = depth;
						throw js__$Boot_HaxeError.wrap(e17);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) {
					var _this4 = this.variables;
					if(__map_reserved[name] != null) {
						_this4.setReserved(name,f4);
					} else {
						_this4.h[name] = f4;
					}
				} else {
					var tmp = this.declared;
					var _this5 = this.locals;
					var tmp1 = __map_reserved[name] != null ? _this5.getReserved(name) : _this5.h[name];
					tmp.push({ n : name, old : tmp1});
					var ref = { r : f4};
					var _this6 = this.locals;
					if(__map_reserved[name] != null) {
						_this6.setReserved(name,ref);
					} else {
						_this6.h[name] = ref;
					}
					if(__map_reserved[name] != null) {
						capturedLocals.setReserved(name,ref);
					} else {
						capturedLocals.h[name] = ref;
					}
				}
			}
			return f4;
		case 15:
			var e18 = e.e;
			this.returnValue = e18 == null ? null : this.expr(e18);
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SReturn);
		case 16:
			var index = e.index;
			var e19 = e.e;
			var arr = this.expr(e19);
			var index1 = this.expr(index);
			if(js_Boot.__implements(arr,haxe_IMap)) {
				return (js_Boot.__cast(arr , haxe_IMap)).get(index1);
			} else {
				return arr[index1];
			}
			break;
		case 17:
			var arr1 = e.e;
			var tmp2;
			if(arr1.length > 0) {
				var _g3 = arr1[0];
				if(_g3._hx_index == 6) {
					var _g31 = _g3.e2;
					var _g22 = _g3.e1;
					tmp2 = _g3.op == "=>";
				} else {
					tmp2 = false;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var isAllString = true;
				var isAllInt = true;
				var isAllObject = true;
				var isAllEnum = true;
				var keys = [];
				var values = [];
				var _g4 = 0;
				while(_g4 < arr1.length) {
					var e20 = arr1[_g4];
					++_g4;
					if(e20._hx_index == 6) {
						if(e20.op == "=>") {
							var eValue = e20.e2;
							var eKey = e20.e1;
							var key1 = this.expr(eKey);
							var value2 = this.expr(eValue);
							isAllString = isAllString && typeof(key1) == "string";
							isAllInt = isAllInt && (typeof(key1) == "number" && ((key1 | 0) === key1));
							isAllObject = isAllObject && Reflect.isObject(key1);
							isAllEnum = isAllEnum && Reflect.isEnumValue(key1);
							keys.push(key1);
							values.push(value2);
						} else {
							throw new js__$Boot_HaxeError("=> expected");
						}
					} else {
						throw new js__$Boot_HaxeError("=> expected");
					}
				}
				var map;
				if(isAllInt) {
					map = new haxe_ds_IntMap();
				} else if(isAllString) {
					map = new haxe_ds_StringMap();
				} else if(isAllEnum) {
					map = new haxe_ds_EnumValueMap();
				} else if(isAllObject) {
					map = new haxe_ds_ObjectMap();
				} else {
					throw new js__$Boot_HaxeError("Inconsistent key types");
				}
				var _g5 = 0;
				var _g6 = keys.length;
				while(_g5 < _g6) {
					var n1 = _g5++;
					(js_Boot.__cast(map , haxe_IMap)).set(keys[n1],values[n1]);
				}
				return map;
			} else {
				var a = [];
				var _g41 = 0;
				while(_g41 < arr1.length) {
					var e23 = arr1[_g41];
					++_g41;
					a.push(this.expr(e23));
				}
				return a;
			}
			break;
		case 18:
			var params2 = e.params;
			var cl = e.cl;
			var a1 = [];
			var _g7 = 0;
			while(_g7 < params2.length) {
				var e24 = params2[_g7];
				++_g7;
				a1.push(this.expr(e24));
			}
			return this.cnew(cl,a1);
		case 19:
			var e25 = e.e;
			throw js__$Boot_HaxeError.wrap(this.expr(e25));
		case 20:
			var _g51 = e.t;
			var ecatch = e.ecatch;
			var n2 = e.v;
			var e26 = e.e;
			var old2 = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v3 = this.expr(e26);
				this.restore(old2);
				this.inTry = oldTry;
				return v3;
			} catch( e27 ) {
				var e28 = ((e27) instanceof js__$Boot_HaxeError) ? e27.val : e27;
				if(js_Boot.__instanceof(e28,hscript__$Interp_Stop)) {
					this.inTry = oldTry;
					throw new js__$Boot_HaxeError(e28);
				} else {
					this.restore(old2);
					this.inTry = oldTry;
					var _this7 = this.locals;
					this.declared.push({ n : n2, old : __map_reserved[n2] != null ? _this7.getReserved(n2) : _this7.h[n2]});
					var _this8 = this.locals;
					var value3 = { r : e28};
					if(__map_reserved[n2] != null) {
						_this8.setReserved(n2,value3);
					} else {
						_this8.h[n2] = value3;
					}
					var v4 = this.expr(ecatch);
					this.restore(old2);
					return v4;
				}
			}
			break;
		case 21:
			var fl = e.fl;
			var o = { };
			var _g8 = 0;
			while(_g8 < fl.length) {
				var f5 = fl[_g8];
				++_g8;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e29 = e.e2;
			var e110 = e.e1;
			var econd2 = e.cond;
			if(this.expr(econd2) == true) {
				return this.expr(e110);
			} else {
				return this.expr(e29);
			}
			break;
		case 23:
			var def = e.defaultExpr;
			var cases = e.cases;
			var e30 = e.e;
			var val = this.expr(e30);
			var match = false;
			var _g9 = 0;
			while(_g9 < cases.length) {
				var c1 = cases[_g9];
				++_g9;
				var _g10 = 0;
				var _g13 = c1.values;
				while(_g10 < _g13.length) {
					var v5 = _g13[_g10];
					++_g10;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) {
				val = def == null ? null : this.expr(def);
			}
			return val;
		case 24:
			var e31 = e.e;
			var econd3 = e.cond;
			this.doWhileLoop(econd3,e31);
			return null;
		case 25:
			var _g52 = e.args;
			var _g511 = e.name;
			var e32 = e.e;
			return this.expr(e32);
		case 26:
			var _g46 = e.t;
			var e33 = e.e;
			return this.expr(e33);
		}
	}
	,doWhileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(true) {
			try {
				this.expr(e);
			} catch( err ) {
				var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
				if(js_Boot.__instanceof(err1,hscript__$Interp_Stop)) {
					var err2 = err1;
					switch(err2._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw new js__$Boot_HaxeError(err2);
					}
				} else {
					throw err;
				}
			}
			if(!(this.expr(econd) == true)) {
				break;
			}
		}
		this.restore(old);
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		_hx_loop1: while(this.expr(econd) == true) try {
			this.expr(e);
		} catch( err ) {
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			if(js_Boot.__instanceof(err1,hscript__$Interp_Stop)) {
				var err2 = err1;
				switch(err2._hx_index) {
				case 0:
					break _hx_loop1;
				case 1:
					break;
				case 2:
					throw new js__$Boot_HaxeError(err2);
				}
			} else {
				throw err;
			}
		}
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $getIterator(v);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		if(v.hasNext == null || v.next == null) {
			var e2 = hscript_Error.EInvalidIterator(v);
			throw new js__$Boot_HaxeError(e2);
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		var _this = this.locals;
		this.declared.push({ n : n, old : __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		_hx_loop1: while(it1.hasNext()) {
			var this1 = this.locals;
			var value = { r : it1.next()};
			var _this1 = this1;
			if(__map_reserved[n] != null) {
				_this1.setReserved(n,value);
			} else {
				_this1.h[n] = value;
			}
			try {
				this.expr(e);
			} catch( err ) {
				var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
				if(js_Boot.__instanceof(err1,hscript__$Interp_Stop)) {
					var err2 = err1;
					switch(err2._hx_index) {
					case 0:
						break _hx_loop1;
					case 1:
						break;
					case 2:
						throw new js__$Boot_HaxeError(err2);
					}
				} else {
					throw err;
				}
			}
		}
		this.restore(old);
	}
	,isMap: function(o) {
		return js_Boot.__implements(o,haxe_IMap);
	}
	,getMapValue: function(map,key) {
		return (js_Boot.__cast(map , haxe_IMap)).get(key);
	}
	,setMapValue: function(map,key,value) {
		(js_Boot.__cast(map , haxe_IMap)).set(key,value);
	}
	,get: function(o,f) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw new js__$Boot_HaxeError(e);
		}
		return Reflect.getProperty(o,f);
	}
	,set: function(o,f,v) {
		if(o == null) {
			var e = hscript_Error.EInvalidAccess(f);
			throw new js__$Boot_HaxeError(e);
		}
		Reflect.setProperty(o,f,v);
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = $hxClasses[cl];
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var hscript_Token = $hxEnums["hscript.Token"] = { __ename__ : "hscript.Token", __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot","TMeta","TPrepro"]
	,TEof: {_hx_index:0,__enum__:"hscript.Token",toString:$estr}
	,TConst: ($_=function(c) { return {_hx_index:1,c:c,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TId: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TOp: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPOpen: {_hx_index:4,__enum__:"hscript.Token",toString:$estr}
	,TPClose: {_hx_index:5,__enum__:"hscript.Token",toString:$estr}
	,TBrOpen: {_hx_index:6,__enum__:"hscript.Token",toString:$estr}
	,TBrClose: {_hx_index:7,__enum__:"hscript.Token",toString:$estr}
	,TDot: {_hx_index:8,__enum__:"hscript.Token",toString:$estr}
	,TComma: {_hx_index:9,__enum__:"hscript.Token",toString:$estr}
	,TSemicolon: {_hx_index:10,__enum__:"hscript.Token",toString:$estr}
	,TBkOpen: {_hx_index:11,__enum__:"hscript.Token",toString:$estr}
	,TBkClose: {_hx_index:12,__enum__:"hscript.Token",toString:$estr}
	,TQuestion: {_hx_index:13,__enum__:"hscript.Token",toString:$estr}
	,TDoubleDot: {_hx_index:14,__enum__:"hscript.Token",toString:$estr}
	,TMeta: ($_=function(s) { return {_hx_index:15,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TPrepro: ($_=function(s) { return {_hx_index:16,s:s,__enum__:"hscript.Token",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hscript_Token.__empty_constructs__ = [hscript_Token.TEof,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot];
var hscript_Parser = function() {
	this.uid = 0;
	this.preprocesorValues = new haxe_ds_StringMap();
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^=","=>"]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = priorities.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g11 = priorities[i];
		while(_g2 < _g11.length) {
			var x = _g11[_g2];
			++_g2;
			var _this = this.opPriority;
			if(__map_reserved[x] != null) {
				_this.setReserved(x,i);
			} else {
				_this.h[x] = i;
			}
			if(i == 9) {
				var _this1 = this.opRightAssoc;
				if(__map_reserved[x] != null) {
					_this1.setReserved(x,true);
				} else {
					_this1.h[x] = true;
				}
			}
		}
	}
	var x1 = "!";
	var _this2 = this.unops;
	var value = x1 == "++" || x1 == "--";
	if(__map_reserved[x1] != null) {
		_this2.setReserved(x1,value);
	} else {
		_this2.h[x1] = value;
	}
	var x2 = "++";
	var _this3 = this.unops;
	var value1 = x2 == "++" || x2 == "--";
	if(__map_reserved[x2] != null) {
		_this3.setReserved(x2,value1);
	} else {
		_this3.h[x2] = value1;
	}
	var x3 = "--";
	var _this4 = this.unops;
	var value2 = x3 == "++" || x3 == "--";
	if(__map_reserved[x3] != null) {
		_this4.setReserved(x3,value2);
	} else {
		_this4.h[x3] = value2;
	}
	var x4 = "-";
	var _this5 = this.unops;
	var value3 = x4 == "++" || x4 == "--";
	if(__map_reserved[x4] != null) {
		_this5.setReserved(x4,value3);
	} else {
		_this5.h[x4] = value3;
	}
	var x5 = "~";
	var _this6 = this.unops;
	var value4 = x5 == "++" || x5 == "--";
	if(__map_reserved[x5] != null) {
		_this6.setReserved(x5,value4);
	} else {
		_this6.h[x5] = value4;
	}
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = "hscript.Parser";
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,preprocesorValues: null
	,allowJSON: null
	,allowTypes: null
	,allowMetadata: null
	,resumeErrors: null
	,input: null
	,readPos: null
	,char: null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,error: function(err,pmin,pmax) {
		if(!this.resumeErrors) {
			throw new js__$Boot_HaxeError(err);
		}
	}
	,invalidChar: function(c) {
		if(!this.resumeErrors) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidChar(c));
		}
	}
	,initParser: function(origin) {
		this.preprocStack = [];
		this.tokens = new haxe_ds_GenericStack();
		this.char = -1;
		this.ops = [];
		this.idents = [];
		this.uid = 0;
		var _g = 0;
		var _g1 = this.opChars.length;
		while(_g < _g1) {
			var i = _g++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g2 = 0;
		var _g3 = this.identChars.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
	}
	,parseString: function(s,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = s;
		this.readPos = 0;
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			this.parseFullExpr(a);
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		var err = hscript_Error.EUnexpected(this.tokenString(tk));
		if(!this.resumeErrors) {
			throw new js__$Boot_HaxeError(err);
		}
		return null;
	}
	,push: function(tk) {
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
	}
	,ensure: function(tk) {
		var t = this.token();
		if(t != tk) {
			this.unexpected(t);
		}
	}
	,ensureToken: function(tk) {
		var t = this.token();
		if(!Type.enumEq(t,tk)) {
			this.unexpected(t);
		}
	}
	,maybe: function(tk) {
		var t = this.token();
		if(Type.enumEq(t,tk)) {
			return true;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(t,_this.head);
		return false;
	}
	,getIdent: function() {
		var tk = this.token();
		if(tk == null) {
			this.unexpected(tk);
			return null;
		} else if(tk._hx_index == 2) {
			var id = tk.s;
			return id;
		} else {
			this.unexpected(tk);
			return null;
		}
	}
	,expr: function(e) {
		return e;
	}
	,pmin: function(e) {
		return 0;
	}
	,pmax: function(e) {
		return 0;
	}
	,mk: function(e,pmin,pmax) {
		return e;
	}
	,isBlock: function(e) {
		if(e == null) {
			return false;
		}
		switch(e._hx_index) {
		case 2:
			var _g20 = e.n;
			var e1 = e.e;
			var t = e.t;
			if(e1 != null) {
				return this.isBlock(e1);
			} else if(t != null) {
				if(t == null) {
					return false;
				} else if(t._hx_index == 2) {
					var _g = t.fields;
					return true;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			var _g10 = e.e;
			return true;
		case 6:
			var _g28 = e.e1;
			var _g27 = e.op;
			var e2 = e.e2;
			return this.isBlock(e2);
		case 7:
			var _g7 = e.op;
			var e3 = e.e;
			var prefix = e.prefix;
			if(!prefix) {
				return this.isBlock(e3);
			} else {
				return false;
			}
			break;
		case 9:
			var _g1 = e.cond;
			var e21 = e.e2;
			var e11 = e.e1;
			if(e21 != null) {
				return this.isBlock(e21);
			} else {
				return this.isBlock(e11);
			}
			break;
		case 10:
			var _g11 = e.cond;
			var e4 = e.e;
			return this.isBlock(e4);
		case 11:
			var _g17 = e.it;
			var _g16 = e.v;
			var e5 = e.e;
			return this.isBlock(e5);
		case 14:
			var _g26 = e.ret;
			var _g25 = e.name;
			var _g23 = e.args;
			var e6 = e.e;
			return this.isBlock(e6);
		case 15:
			var e7 = e.e;
			if(e7 != null) {
				return this.isBlock(e7);
			} else {
				return false;
			}
			break;
		case 20:
			var _g5 = e.t;
			var _g4 = e.v;
			var _g3 = e.e;
			var e8 = e.ecatch;
			return this.isBlock(e8);
		case 21:
			var _g19 = e.fl;
			return true;
		case 23:
			var _g15 = e.defaultExpr;
			var _g14 = e.cases;
			var _g13 = e.e;
			return true;
		case 24:
			var _g30 = e.cond;
			var e9 = e.e;
			return this.isBlock(e9);
		case 25:
			var _g34 = e.args;
			var _g33 = e.name;
			var e10 = e.e;
			return this.isBlock(e10);
		default:
			return false;
		}
	}
	,parseFullExpr: function(exprs) {
		var e = this.parseExpr();
		exprs.push(e);
		var tk = this.token();
		while(true) {
			var tmp;
			if(tk == hscript_Token.TComma && e != null) {
				if(e._hx_index == 2) {
					var _g2 = e.e;
					var _g1 = e.t;
					var _g = e.n;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = false;
			}
			if(!tmp) {
				break;
			}
			e = this.parseStructure("var");
			exprs.push(e);
			tk = this.token();
		}
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
	}
	,parseObject: function(p1) {
		var fl = [];
		_hx_loop1: while(true) {
			var tk = this.token();
			var id = null;
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 1:
					var c = tk.c;
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c._hx_index == 2) {
						var s = c.s;
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk.s;
					id = i;
					break;
				case 7:
					break _hx_loop1;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
			var t = this.token();
			if(t != hscript_Token.TDoubleDot) {
				this.unexpected(t);
			}
			fl.push({ name : id, e : this.parseExpr()});
			tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else {
				switch(tk._hx_index) {
				case 7:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		}
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 1:
				var c = tk.c;
				return this.parseExprNext(hscript_Expr.EConst(c));
			case 2:
				var id = tk.s;
				var e = this.parseStructure(id);
				if(e == null) {
					e = hscript_Expr.EIdent(id);
				}
				return this.parseExprNext(e);
			case 3:
				var op = tk.s;
				var _this = this.unops;
				if(__map_reserved[op] != null ? _this.existsReserved(op) : _this.h.hasOwnProperty(op)) {
					var start = 0;
					var e1 = this.parseExpr();
					if(op == "-" && e1 != null) {
						if(e1._hx_index == 0) {
							var _g = e1.c;
							switch(_g._hx_index) {
							case 0:
								var i = _g.v;
								return hscript_Expr.EConst(hscript_Const.CInt(-i));
							case 1:
								var f = _g.f;
								return hscript_Expr.EConst(hscript_Const.CFloat(-f));
							default:
							}
						}
					}
					return this.makeUnop(op,e1);
				}
				return this.unexpected(tk);
			case 4:
				var e2 = this.parseExpr();
				tk = this.token();
				if(tk != null) {
					switch(tk._hx_index) {
					case 5:
						return this.parseExprNext(hscript_Expr.EParent(e2));
					case 9:
						if(e2._hx_index == 1) {
							var v = e2.v;
							return this.parseLambda([{ name : v}],0);
						}
						break;
					case 14:
						var t = this.parseType();
						tk = this.token();
						if(tk != null) {
							switch(tk._hx_index) {
							case 5:
								return this.parseExprNext(hscript_Expr.ECheckType(e2,t));
							case 9:
								if(e2._hx_index == 1) {
									var v1 = e2.v;
									return this.parseLambda([{ name : v1, t : t}],0);
								}
								break;
							default:
							}
						}
						break;
					default:
					}
				}
				return this.unexpected(tk);
			case 6:
				tk = this.token();
				if(tk == null) {
					var _this1 = this.tokens;
					_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				} else {
					switch(tk._hx_index) {
					case 1:
						var c1 = tk.c;
						if(this.allowJSON) {
							if(c1._hx_index == 2) {
								var _g1 = c1.s;
								var tk2 = this.token();
								var _this2 = this.tokens;
								_this2.head = new haxe_ds_GenericCell(tk2,_this2.head);
								var _this3 = this.tokens;
								_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
								if(tk2 != null) {
									if(tk2._hx_index == 14) {
										return this.parseExprNext(this.parseObject(0));
									}
								}
							} else {
								var _this4 = this.tokens;
								_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
							}
						} else {
							var _this5 = this.tokens;
							_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
						}
						break;
					case 2:
						var _g11 = tk.s;
						var tk21 = this.token();
						var _this6 = this.tokens;
						_this6.head = new haxe_ds_GenericCell(tk21,_this6.head);
						var _this7 = this.tokens;
						_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
						if(tk21 != null) {
							if(tk21._hx_index == 14) {
								return this.parseExprNext(this.parseObject(0));
							}
						}
						break;
					case 7:
						return this.parseExprNext(hscript_Expr.EObject([]));
					default:
						var _this8 = this.tokens;
						_this8.head = new haxe_ds_GenericCell(tk,_this8.head);
					}
				}
				var a = [];
				while(true) {
					this.parseFullExpr(a);
					tk = this.token();
					if(tk == hscript_Token.TBrClose || this.resumeErrors && tk == hscript_Token.TEof) {
						break;
					}
					var _this9 = this.tokens;
					_this9.head = new haxe_ds_GenericCell(tk,_this9.head);
				}
				return hscript_Expr.EBlock(a);
			case 11:
				var a1 = [];
				tk = this.token();
				while(tk != hscript_Token.TBkClose && (!this.resumeErrors || tk != hscript_Token.TEof)) {
					var _this10 = this.tokens;
					_this10.head = new haxe_ds_GenericCell(tk,_this10.head);
					a1.push(this.parseExpr());
					tk = this.token();
					if(tk == hscript_Token.TComma) {
						tk = this.token();
					}
				}
				if(a1.length == 1 && a1[0] != null) {
					var _g2 = a1[0];
					switch(_g2._hx_index) {
					case 10:
						var _g21 = _g2.e;
						var _g12 = _g2.cond;
						var tmp = "__a_" + this.uid++;
						var e3 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a1[0]),hscript_Expr.EIdent(tmp)]);
						return this.parseExprNext(e3);
					case 11:
						var _g5 = _g2.e;
						var _g4 = _g2.it;
						var _g3 = _g2.v;
						var tmp1 = "__a_" + this.uid++;
						var e4 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp1,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp1,a1[0]),hscript_Expr.EIdent(tmp1)]);
						return this.parseExprNext(e4);
					case 24:
						var _g7 = _g2.e;
						var _g6 = _g2.cond;
						var tmp2 = "__a_" + this.uid++;
						var e5 = hscript_Expr.EBlock([hscript_Expr.EVar(tmp2,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp2,a1[0]),hscript_Expr.EIdent(tmp2)]);
						return this.parseExprNext(e5);
					default:
					}
				}
				return this.parseExprNext(hscript_Expr.EArrayDecl(a1));
			case 15:
				var id1 = tk.s;
				if(this.allowMetadata) {
					var args = this.parseMetaArgs();
					return hscript_Expr.EMeta(id1,args,this.parseExpr());
				} else {
					return this.unexpected(tk);
				}
				break;
			default:
				return this.unexpected(tk);
			}
		}
	}
	,parseLambda: function(args,pmin) {
		_hx_loop1: while(true) {
			var id = this.getIdent();
			var t = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
			args.push({ name : id, t : t});
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
				break;
			} else {
				switch(tk._hx_index) {
				case 5:
					break _hx_loop1;
				case 9:
					break;
				default:
					this.unexpected(tk);
					break _hx_loop1;
				}
			}
		}
		var t1 = this.token();
		if(!Type.enumEq(t1,hscript_Token.TOp("->"))) {
			this.unexpected(t1);
		}
		var eret = this.parseExpr();
		return hscript_Expr.EFunction(args,hscript_Expr.EReturn(eret));
	}
	,parseMetaArgs: function() {
		var tk = this.token();
		if(tk != hscript_Token.TPOpen) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return null;
		}
		var args = [];
		tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			_hx_loop1: while(true) {
				args.push(this.parseExpr());
				var _g = this.token();
				if(_g == null) {
					var tk1 = _g;
					this.unexpected(tk1);
				} else {
					switch(_g._hx_index) {
					case 5:
						break _hx_loop1;
					case 9:
						break;
					default:
						var tk2 = _g;
						this.unexpected(tk2);
					}
				}
			}
		}
		return args;
	}
	,mapCompr: function(tmp,e) {
		if(e == null) {
			return null;
		}
		var edef;
		switch(e._hx_index) {
		case 3:
			var e2 = e.e;
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			var _g5 = e.e;
			if(_g5.length == 1) {
				var e1 = _g5[0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e21 = e.e2;
			var e11 = e.e1;
			var cond = e.cond;
			edef = e21 == null ? hscript_Expr.EIf(cond,this.mapCompr(tmp,e11),null) : hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			break;
		case 10:
			var e22 = e.e;
			var cond1 = e.cond;
			edef = hscript_Expr.EWhile(cond1,this.mapCompr(tmp,e22));
			break;
		case 11:
			var e23 = e.e;
			var it = e.it;
			var v = e.v;
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e23));
			break;
		case 24:
			var e24 = e.e;
			var cond2 = e.cond;
			edef = hscript_Expr.EDoWhile(cond2,this.mapCompr(tmp,e24));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		if(e == null && this.resumeErrors) {
			return null;
		}
		switch(e._hx_index) {
		case 6:
			var e2 = e.e2;
			var e1 = e.e1;
			var bop = e.op;
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e.e2;
			var e21 = e.e1;
			var e11 = e.cond;
			return hscript_Expr.ETernary(this.makeUnop(op,e11),e21,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		if(e == null && this.resumeErrors) {
			return hscript_Expr.EBinop(op,e1,e);
		}
		switch(e._hx_index) {
		case 6:
			var e3 = e.e2;
			var e2 = e.e1;
			var op2 = e.op;
			var tmp;
			var _this = this.opPriority;
			var tmp1 = __map_reserved[op] != null ? _this.getReserved(op) : _this.h[op];
			var _this1 = this.opPriority;
			if(tmp1 <= (__map_reserved[op2] != null ? _this1.getReserved(op2) : _this1.h[op2])) {
				var _this2 = this.opRightAssoc;
				tmp = !(__map_reserved[op] != null ? _this2.existsReserved(op) : _this2.h.hasOwnProperty(op));
			} else {
				tmp = false;
			}
			if(tmp) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e.e2;
			var e31 = e.e1;
			var e21 = e.cond;
			var _this3 = this.opRightAssoc;
			if(__map_reserved[op] != null ? _this3.existsReserved(op) : _this3.h.hasOwnProperty(op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "do":
			var e = this.parseExpr();
			var tk = this.token();
			if(tk == null) {
				this.unexpected(tk);
			} else if(tk._hx_index == 2) {
				if(tk.s != "while") {
					this.unexpected(tk);
				}
			} else {
				this.unexpected(tk);
			}
			var econd = this.parseExpr();
			return hscript_Expr.EDoWhile(econd,e);
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var vname = this.getIdent();
			var t1 = this.token();
			if(!Type.enumEq(t1,hscript_Token.TId("in"))) {
				this.unexpected(t1);
			}
			var eiter = this.parseExpr();
			var t2 = this.token();
			if(t2 != hscript_Token.TPClose) {
				this.unexpected(t2);
			}
			var e1 = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e1);
		case "function":
			var tk1 = this.token();
			var name = null;
			if(tk1 == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk1,_this.head);
			} else if(tk1._hx_index == 2) {
				var id1 = tk1.s;
				name = id1;
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk1,_this1.head);
			}
			var inf = this.parseFunctionDecl();
			return hscript_Expr.EFunction(inf.args,inf.body,name,inf.ret);
		case "if":
			var t3 = this.token();
			if(t3 != hscript_Token.TPOpen) {
				this.unexpected(t3);
			}
			var cond = this.parseExpr();
			var t4 = this.token();
			if(t4 != hscript_Token.TPClose) {
				this.unexpected(t4);
			}
			var e11 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk2 = this.token();
			if(tk2 == hscript_Token.TSemicolon) {
				semic = true;
				tk2 = this.token();
			}
			if(Type.enumEq(tk2,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this2 = this.tokens;
				_this2.head = new haxe_ds_GenericCell(tk2,_this2.head);
				if(semic) {
					var _this3 = this.tokens;
					_this3.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this3.head);
				}
			}
			return hscript_Expr.EIf(cond,e11,e2);
		case "inline":
			if(!this.maybe(hscript_Token.TId("function"))) {
				this.unexpected(hscript_Token.TId("inline"));
			}
			return this.parseStructure("function");
		case "new":
			var a = [];
			a.push(this.getIdent());
			_hx_loop1: while(true) {
				var tk3 = this.token();
				if(tk3 == null) {
					this.unexpected(tk3);
					break;
				} else {
					switch(tk3._hx_index) {
					case 4:
						break _hx_loop1;
					case 8:
						a.push(this.getIdent());
						break;
					default:
						this.unexpected(tk3);
						break _hx_loop1;
					}
				}
			}
			var args = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args);
		case "return":
			var tk4 = this.token();
			var _this4 = this.tokens;
			_this4.head = new haxe_ds_GenericCell(tk4,_this4.head);
			var e3 = tk4 == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e3);
		case "switch":
			var e4 = this.parseExpr();
			var def = null;
			var cases = [];
			var t5 = this.token();
			if(t5 != hscript_Token.TBrOpen) {
				this.unexpected(t5);
			}
			_hx_loop2: while(true) {
				var tk5 = this.token();
				if(tk5 == null) {
					this.unexpected(tk5);
					break;
				} else {
					switch(tk5._hx_index) {
					case 2:
						switch(tk5.s) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							_hx_loop3: while(true) {
								var e5 = this.parseExpr();
								c.values.push(e5);
								tk5 = this.token();
								if(tk5 == null) {
									this.unexpected(tk5);
									break;
								} else {
									switch(tk5._hx_index) {
									case 9:
										break;
									case 14:
										break _hx_loop3;
									default:
										this.unexpected(tk5);
										break _hx_loop3;
									}
								}
							}
							var exprs = [];
							_hx_loop4: while(true) {
								tk5 = this.token();
								var _this5 = this.tokens;
								_this5.head = new haxe_ds_GenericCell(tk5,_this5.head);
								if(tk5 == null) {
									this.parseFullExpr(exprs);
								} else {
									switch(tk5._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop4;
										} else {
											this.parseFullExpr(exprs);
										}
										break;
									case 2:
										switch(tk5.s) {
										case "case":case "default":
											break _hx_loop4;
										default:
											this.parseFullExpr(exprs);
										}
										break;
									case 7:
										break _hx_loop4;
									default:
										this.parseFullExpr(exprs);
									}
								}
							}
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk5);
							}
							var t6 = this.token();
							if(t6 != hscript_Token.TDoubleDot) {
								this.unexpected(t6);
							}
							var exprs1 = [];
							_hx_loop5: while(true) {
								tk5 = this.token();
								var _this6 = this.tokens;
								_this6.head = new haxe_ds_GenericCell(tk5,_this6.head);
								if(tk5 == null) {
									this.parseFullExpr(exprs1);
								} else {
									switch(tk5._hx_index) {
									case 0:
										if(this.resumeErrors) {
											break _hx_loop5;
										} else {
											this.parseFullExpr(exprs1);
										}
										break;
									case 2:
										switch(tk5.s) {
										case "case":case "default":
											break _hx_loop5;
										default:
											this.parseFullExpr(exprs1);
										}
										break;
									case 7:
										break _hx_loop5;
									default:
										this.parseFullExpr(exprs1);
									}
								}
							}
							def = exprs1.length == 1 ? exprs1[0] : exprs1.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs1);
							break;
						default:
							this.unexpected(tk5);
							break _hx_loop2;
						}
						break;
					case 7:
						break _hx_loop2;
					default:
						this.unexpected(tk5);
						break _hx_loop2;
					}
				}
			}
			return hscript_Expr.ESwitch(e4,cases,def);
		case "throw":
			var e6 = this.parseExpr();
			return hscript_Expr.EThrow(e6);
		case "try":
			var e7 = this.parseExpr();
			var t7 = this.token();
			if(!Type.enumEq(t7,hscript_Token.TId("catch"))) {
				this.unexpected(t7);
			}
			var t8 = this.token();
			if(t8 != hscript_Token.TPOpen) {
				this.unexpected(t8);
			}
			var vname1 = this.getIdent();
			var t9 = this.token();
			if(t9 != hscript_Token.TDoubleDot) {
				this.unexpected(t9);
			}
			var t10 = null;
			if(this.allowTypes) {
				t10 = this.parseType();
			} else {
				var t11 = this.token();
				if(!Type.enumEq(t11,hscript_Token.TId("Dynamic"))) {
					this.unexpected(t11);
				}
			}
			var t12 = this.token();
			if(t12 != hscript_Token.TPClose) {
				this.unexpected(t12);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e7,vname1,t10,ec);
		case "var":
			var ident = this.getIdent();
			var tk6 = this.token();
			var t13 = null;
			if(tk6 == hscript_Token.TDoubleDot && this.allowTypes) {
				t13 = this.parseType();
				tk6 = this.token();
			}
			var e8 = null;
			if(Type.enumEq(tk6,hscript_Token.TOp("="))) {
				e8 = this.parseExpr();
			} else {
				var _this7 = this.tokens;
				_this7.head = new haxe_ds_GenericCell(tk6,_this7.head);
			}
			return hscript_Expr.EVar(ident,t13,e8);
		case "while":
			var econd1 = this.parseExpr();
			var e9 = this.parseExpr();
			return hscript_Expr.EWhile(econd1,e9);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return e1;
		} else {
			switch(tk._hx_index) {
			case 3:
				var op = tk.s;
				if(op == "->") {
					switch(e1._hx_index) {
					case 1:
						var i = e1.v;
						var eret = this.parseExpr();
						return hscript_Expr.EFunction([{ name : i}],hscript_Expr.EReturn(eret));
					case 3:
						var _hx_tmp = e1.e;
						if(_hx_tmp._hx_index == 1) {
							var i1 = _hx_tmp.v;
							var eret1 = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i1}],hscript_Expr.EReturn(eret1));
						}
						break;
					case 26:
						var _hx_tmp1 = e1.e;
						if(_hx_tmp1._hx_index == 1) {
							var t = e1.t;
							var i2 = _hx_tmp1.v;
							var eret2 = this.parseExpr();
							return hscript_Expr.EFunction([{ name : i2, t : t}],hscript_Expr.EReturn(eret2));
						}
						break;
					default:
					}
					this.unexpected(tk);
				}
				var _this1 = this.unops;
				if(__map_reserved[op] != null ? _this1.getReserved(op) : _this1.h[op]) {
					var tmp;
					if(!this.isBlock(e1)) {
						if(e1._hx_index == 3) {
							var _g = e1.e;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = true;
					}
					if(tmp) {
						var _this2 = this.tokens;
						_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
						return e1;
					}
					return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
				}
				return this.makeBinop(op,e1,this.parseExpr());
			case 4:
				return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
			case 8:
				var field = this.getIdent();
				return this.parseExprNext(hscript_Expr.EField(e1,field));
			case 11:
				var e2 = this.parseExpr();
				var t1 = this.token();
				if(t1 != hscript_Token.TBkClose) {
					this.unexpected(t1);
				}
				return this.parseExprNext(hscript_Expr.EArray(e1,e2));
			case 13:
				var e21 = this.parseExpr();
				var t2 = this.token();
				if(t2 != hscript_Token.TDoubleDot) {
					this.unexpected(t2);
				}
				var e3 = this.parseExpr();
				return hscript_Expr.ETernary(e1,e21,e3);
			default:
				var _this3 = this.tokens;
				_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
				return e1;
			}
		}
	}
	,parseFunctionArgs: function() {
		var args = [];
		var tk = this.token();
		if(tk != hscript_Token.TPClose) {
			var done = false;
			while(!done) {
				var name = null;
				var opt = false;
				if(tk != null) {
					if(tk._hx_index == 13) {
						opt = true;
						tk = this.token();
					}
				}
				if(tk == null) {
					this.unexpected(tk);
					break;
				} else if(tk._hx_index == 2) {
					var id = tk.s;
					name = id;
				} else {
					this.unexpected(tk);
					break;
				}
				var arg = { name : name};
				args.push(arg);
				if(opt) {
					arg.opt = true;
				}
				if(this.allowTypes) {
					if(this.maybe(hscript_Token.TDoubleDot)) {
						arg.t = this.parseType();
					}
					if(this.maybe(hscript_Token.TOp("="))) {
						arg.value = this.parseExpr();
					}
				}
				tk = this.token();
				if(tk == null) {
					this.unexpected(tk);
				} else {
					switch(tk._hx_index) {
					case 5:
						done = true;
						break;
					case 9:
						tk = this.token();
						break;
					default:
						this.unexpected(tk);
					}
				}
			}
		}
		return args;
	}
	,parseFunctionDecl: function() {
		var t = this.token();
		if(t != hscript_Token.TPOpen) {
			this.unexpected(t);
		}
		var args = this.parseFunctionArgs();
		var ret = null;
		if(this.allowTypes) {
			var tk = this.token();
			if(tk != hscript_Token.TDoubleDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				ret = this.parseType();
			}
		}
		return { args : args, ret : ret, body : this.parseExpr()};
	}
	,parsePath: function() {
		var path = [this.getIdent()];
		while(true) {
			var t = this.token();
			if(t != hscript_Token.TDot) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				break;
			}
			path.push(this.getIdent());
		}
		return path;
	}
	,parseType: function() {
		var _gthis = this;
		var t = this.token();
		if(t == null) {
			return this.unexpected(t);
		} else {
			switch(t._hx_index) {
			case 2:
				var v = t.s;
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(t,_this.head);
				var path = this.parsePath();
				var params = null;
				t = this.token();
				if(t == null) {
					var _this1 = this.tokens;
					_this1.head = new haxe_ds_GenericCell(t,_this1.head);
				} else if(t._hx_index == 3) {
					var op = t.s;
					if(op == "<") {
						params = [];
						_hx_loop1: while(true) {
							params.push(this.parseType());
							t = this.token();
							if(t != null) {
								switch(t._hx_index) {
								case 3:
									var op1 = t.s;
									if(op1 == ">") {
										break _hx_loop1;
									}
									if(HxOverrides.cca(op1,0) == 62) {
										var _this2 = this.tokens;
										_this2.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op1,1,null)),_this2.head);
										break _hx_loop1;
									}
									break;
								case 9:
									continue;
								default:
								}
							}
							this.unexpected(t);
							break;
						}
					} else {
						var _this3 = this.tokens;
						_this3.head = new haxe_ds_GenericCell(t,_this3.head);
					}
				} else {
					var _this4 = this.tokens;
					_this4.head = new haxe_ds_GenericCell(t,_this4.head);
				}
				return this.parseTypeNext(hscript_CType.CTPath(path,params));
			case 4:
				var a = this.token();
				var b = this.token();
				var _this5 = this.tokens;
				_this5.head = new haxe_ds_GenericCell(b,_this5.head);
				var _this6 = this.tokens;
				_this6.head = new haxe_ds_GenericCell(a,_this6.head);
				var withReturn = function(args) {
					var _g = _gthis.token();
					if(_g == null) {
						var t1 = _g;
						_gthis.unexpected(t1);
					} else if(_g._hx_index == 3) {
						if(_g.s != "->") {
							var t2 = _g;
							_gthis.unexpected(t2);
						}
					} else {
						var t3 = _g;
						_gthis.unexpected(t3);
					}
					return hscript_CType.CTFun(args,_gthis.parseType());
				};
				if(a == null) {
					var t4 = this.parseType();
					var _g1 = this.token();
					if(_g1 == null) {
						var t5 = _g1;
						return this.unexpected(t5);
					} else {
						switch(_g1._hx_index) {
						case 5:
							return this.parseTypeNext(hscript_CType.CTParent(t4));
						case 9:
							var args1 = [t4];
							while(true) {
								args1.push(this.parseType());
								if(!this.maybe(hscript_Token.TComma)) {
									break;
								}
							}
							var t6 = this.token();
							if(t6 != hscript_Token.TPClose) {
								this.unexpected(t6);
							}
							return withReturn(args1);
						default:
							var t7 = _g1;
							return this.unexpected(t7);
						}
					}
				} else {
					switch(a._hx_index) {
					case 2:
						var _g2 = a.s;
						if(b == null) {
							var t8 = this.parseType();
							var _g3 = this.token();
							if(_g3 == null) {
								var t9 = _g3;
								return this.unexpected(t9);
							} else {
								switch(_g3._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t8));
								case 9:
									var args2 = [t8];
									while(true) {
										args2.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t10 = this.token();
									if(t10 != hscript_Token.TPClose) {
										this.unexpected(t10);
									}
									return withReturn(args2);
								default:
									var t11 = _g3;
									return this.unexpected(t11);
								}
							}
						} else if(b._hx_index == 14) {
							var _g4 = [];
							var _g11 = 0;
							var _g21 = this.parseFunctionArgs();
							while(_g11 < _g21.length) {
								var arg = _g21[_g11];
								++_g11;
								var _g12 = arg.value;
								if(_g12 != null) {
									var v1 = _g12;
									if(!this.resumeErrors) {
										throw new js__$Boot_HaxeError(hscript_Error.ECustom("Default values not allowed in function types"));
									}
								}
								_g4.push(hscript_CType.CTNamed(arg.name,arg.opt ? hscript_CType.CTOpt(arg.t) : arg.t));
							}
							var args3 = _g4;
							return withReturn(args3);
						} else {
							var t12 = this.parseType();
							var _g5 = this.token();
							if(_g5 == null) {
								var t13 = _g5;
								return this.unexpected(t13);
							} else {
								switch(_g5._hx_index) {
								case 5:
									return this.parseTypeNext(hscript_CType.CTParent(t12));
								case 9:
									var args4 = [t12];
									while(true) {
										args4.push(this.parseType());
										if(!this.maybe(hscript_Token.TComma)) {
											break;
										}
									}
									var t14 = this.token();
									if(t14 != hscript_Token.TPClose) {
										this.unexpected(t14);
									}
									return withReturn(args4);
								default:
									var t15 = _g5;
									return this.unexpected(t15);
								}
							}
						}
						break;
					case 5:
						var _g6 = [];
						var _g13 = 0;
						var _g22 = this.parseFunctionArgs();
						while(_g13 < _g22.length) {
							var arg1 = _g22[_g13];
							++_g13;
							var _g14 = arg1.value;
							if(_g14 != null) {
								var v2 = _g14;
								if(!this.resumeErrors) {
									throw new js__$Boot_HaxeError(hscript_Error.ECustom("Default values not allowed in function types"));
								}
							}
							_g6.push(hscript_CType.CTNamed(arg1.name,arg1.opt ? hscript_CType.CTOpt(arg1.t) : arg1.t));
						}
						var args5 = _g6;
						return withReturn(args5);
					default:
						var t16 = this.parseType();
						var _g7 = this.token();
						if(_g7 == null) {
							var t17 = _g7;
							return this.unexpected(t17);
						} else {
							switch(_g7._hx_index) {
							case 5:
								return this.parseTypeNext(hscript_CType.CTParent(t16));
							case 9:
								var args6 = [t16];
								while(true) {
									args6.push(this.parseType());
									if(!this.maybe(hscript_Token.TComma)) {
										break;
									}
								}
								var t18 = this.token();
								if(t18 != hscript_Token.TPClose) {
									this.unexpected(t18);
								}
								return withReturn(args6);
							default:
								var t19 = _g7;
								return this.unexpected(t19);
							}
						}
					}
				}
				break;
			case 6:
				var fields = [];
				var meta = null;
				_hx_loop8: while(true) {
					t = this.token();
					if(t == null) {
						this.unexpected(t);
						break;
					} else {
						switch(t._hx_index) {
						case 2:
							var _g8 = t.s;
							if(_g8 == "var") {
								var name = this.getIdent();
								var t20 = this.token();
								if(t20 != hscript_Token.TDoubleDot) {
									this.unexpected(t20);
								}
								fields.push({ name : name, t : this.parseType(), meta : meta});
								meta = null;
								var t21 = this.token();
								if(t21 != hscript_Token.TSemicolon) {
									this.unexpected(t21);
								}
							} else {
								var name1 = _g8;
								var t22 = this.token();
								if(t22 != hscript_Token.TDoubleDot) {
									this.unexpected(t22);
								}
								fields.push({ name : name1, t : this.parseType(), meta : meta});
								t = this.token();
								if(t == null) {
									this.unexpected(t);
								} else {
									switch(t._hx_index) {
									case 7:
										break _hx_loop8;
									case 9:
										break;
									default:
										this.unexpected(t);
									}
								}
							}
							break;
						case 7:
							break _hx_loop8;
						case 15:
							var name2 = t.s;
							if(meta == null) {
								meta = [];
							}
							meta.push({ name : name2, params : this.parseMetaArgs()});
							break;
						default:
							this.unexpected(t);
							break _hx_loop8;
						}
					}
				}
				return this.parseTypeNext(hscript_CType.CTAnon(fields));
			default:
				return this.unexpected(t);
			}
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk == null) {
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			return t;
		} else if(tk._hx_index == 3) {
			var op = tk.s;
			if(op != "->") {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				return t;
			}
		} else {
			var _this2 = this.tokens;
			_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2._hx_index == 1) {
			var _g2 = t2.ret;
			var args = t2.args;
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk == null) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			} else if(tk._hx_index != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
				break;
			}
		}
		return args;
	}
	,parseModule: function(content,origin) {
		if(origin == null) {
			origin = "hscript";
		}
		this.initParser(origin);
		this.input = content;
		this.readPos = 0;
		this.allowTypes = true;
		this.allowMetadata = true;
		var decls = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			decls.push(this.parseModuleDecl());
		}
		return decls;
	}
	,parseMetadata: function() {
		var meta = [];
		while(true) {
			var tk = this.token();
			if(tk == null) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			} else if(tk._hx_index == 15) {
				var name = tk.s;
				meta.push({ name : name, params : this.parseMetaArgs()});
			} else {
				var _this1 = this.tokens;
				_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
				break;
			}
		}
		return meta;
	}
	,parseParams: function() {
		if(this.maybe(hscript_Token.TOp("<"))) {
			if(!this.resumeErrors) {
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp("Unsupported class type parameters"));
			}
		}
		return { };
	}
	,parseModuleDecl: function() {
		var meta = this.parseMetadata();
		var ident = this.getIdent();
		var isPrivate = false;
		var isExtern = false;
		_hx_loop1: while(true) {
			switch(ident) {
			case "extern":
				isExtern = true;
				break;
			case "private":
				isPrivate = true;
				break;
			default:
				break _hx_loop1;
			}
			ident = this.getIdent();
		}
		switch(ident) {
		case "class":
			var name = this.getIdent();
			var params = this.parseParams();
			var extend = null;
			var implement = [];
			_hx_loop2: while(true) {
				var t = this.token();
				if(t == null) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(t,_this.head);
					break;
				} else if(t._hx_index == 2) {
					switch(t.s) {
					case "extends":
						extend = this.parseType();
						break;
					case "implements":
						implement.push(this.parseType());
						break;
					default:
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(t,_this1.head);
						break _hx_loop2;
					}
				} else {
					var _this2 = this.tokens;
					_this2.head = new haxe_ds_GenericCell(t,_this2.head);
					break;
				}
			}
			var fields = [];
			var t1 = this.token();
			if(t1 != hscript_Token.TBrOpen) {
				this.unexpected(t1);
			}
			while(!this.maybe(hscript_Token.TBrClose)) fields.push(this.parseField());
			return hscript_ModuleDecl.DClass({ name : name, meta : meta, params : params, extend : extend, implement : implement, fields : fields, isPrivate : isPrivate, isExtern : isExtern});
		case "import":
			var path = [this.getIdent()];
			var star = false;
			while(true) {
				var t2 = this.token();
				if(t2 != hscript_Token.TDot) {
					var _this3 = this.tokens;
					_this3.head = new haxe_ds_GenericCell(t2,_this3.head);
					break;
				}
				t2 = this.token();
				if(t2 == null) {
					this.unexpected(t2);
				} else {
					switch(t2._hx_index) {
					case 2:
						var id = t2.s;
						path.push(id);
						break;
					case 3:
						if(t2.s == "*") {
							star = true;
						} else {
							this.unexpected(t2);
						}
						break;
					default:
						this.unexpected(t2);
					}
				}
			}
			var t3 = this.token();
			if(t3 != hscript_Token.TSemicolon) {
				this.unexpected(t3);
			}
			return hscript_ModuleDecl.DImport(path,star);
		case "package":
			var path1 = this.parsePath();
			var t4 = this.token();
			if(t4 != hscript_Token.TSemicolon) {
				this.unexpected(t4);
			}
			return hscript_ModuleDecl.DPackage(path1);
		case "typedef":
			var name1 = this.getIdent();
			var params1 = this.parseParams();
			var t5 = this.token();
			if(!Type.enumEq(t5,hscript_Token.TOp("="))) {
				this.unexpected(t5);
			}
			var t6 = this.parseType();
			return hscript_ModuleDecl.DTypedef({ name : name1, meta : meta, params : params1, isPrivate : isPrivate, t : t6});
		default:
			this.unexpected(hscript_Token.TId(ident));
		}
		return null;
	}
	,parseField: function() {
		var meta = this.parseMetadata();
		var access = [];
		_hx_loop1: while(true) {
			var id = this.getIdent();
			switch(id) {
			case "function":
				var name = this.getIdent();
				var inf = this.parseFunctionDecl();
				return { name : name, meta : meta, access : access, kind : hscript_FieldKind.KFunction({ args : inf.args, expr : inf.body, ret : inf.ret})};
			case "inline":
				access.push(hscript_FieldAccess.AInline);
				break;
			case "macro":
				access.push(hscript_FieldAccess.AMacro);
				break;
			case "override":
				access.push(hscript_FieldAccess.AOverride);
				break;
			case "private":
				access.push(hscript_FieldAccess.APrivate);
				break;
			case "public":
				access.push(hscript_FieldAccess.APublic);
				break;
			case "static":
				access.push(hscript_FieldAccess.AStatic);
				break;
			case "var":
				var name1 = this.getIdent();
				var get = null;
				var set = null;
				if(this.maybe(hscript_Token.TPOpen)) {
					get = this.getIdent();
					var t = this.token();
					if(t != hscript_Token.TComma) {
						this.unexpected(t);
					}
					set = this.getIdent();
					var t1 = this.token();
					if(t1 != hscript_Token.TPClose) {
						this.unexpected(t1);
					}
				}
				var type = this.maybe(hscript_Token.TDoubleDot) ? this.parseType() : null;
				var expr = this.maybe(hscript_Token.TOp("=")) ? this.parseExpr() : null;
				if(expr != null) {
					if(this.isBlock(expr)) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t2 = this.token();
						if(t2 != hscript_Token.TSemicolon) {
							this.unexpected(t2);
						}
					}
				} else {
					var tmp;
					if(type != null) {
						if(type == null) {
							tmp = false;
						} else if(type._hx_index == 2) {
							var _g = type.fields;
							tmp = true;
						} else {
							tmp = false;
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						this.maybe(hscript_Token.TSemicolon);
					} else {
						var t3 = this.token();
						if(t3 != hscript_Token.TSemicolon) {
							this.unexpected(t3);
						}
					}
				}
				return { name : name1, meta : meta, access : access, kind : hscript_FieldKind.KVar({ get : get, set : set, type : type, expr : expr})};
			default:
				this.unexpected(hscript_Token.TId(id));
				break _hx_loop1;
			}
		}
		return null;
	}
	,readChar: function() {
		return this.input.charCodeAt(this.readPos++);
	}
	,readString: function(until) {
		var c = 0;
		var b_b = "";
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			var c1 = this.input.charCodeAt(this.readPos++);
			if(c1 != c1) {
				this.line = old;
				if(!this.resumeErrors) {
					throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
				}
				break;
			}
			if(esc) {
				esc = false;
				switch(c1) {
				case 34:case 39:case 92:
					b_b += String.fromCodePoint(c1);
					break;
				case 47:
					if(this.allowJSON) {
						b_b += String.fromCodePoint(c1);
					} else {
						this.invalidChar(c1);
					}
					break;
				case 110:
					b_b += String.fromCodePoint(10);
					break;
				case 114:
					b_b += String.fromCodePoint(13);
					break;
				case 116:
					b_b += String.fromCodePoint(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c1);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var char = this.input.charCodeAt(this.readPos++);
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							k += char - 48;
							break;
						case 65:case 66:case 67:case 68:case 69:case 70:
							k += char - 55;
							break;
						case 97:case 98:case 99:case 100:case 101:case 102:
							k += char - 87;
							break;
						default:
							if(char != char) {
								this.line = old;
								if(!this.resumeErrors) {
									throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
								}
							}
							this.invalidChar(char);
						}
					}
					b_b += String.fromCodePoint(k);
					break;
				default:
					this.invalidChar(c1);
				}
			} else if(c1 == 92) {
				esc = true;
			} else if(c1 == until) {
				break;
			} else {
				if(c1 == 10) {
					this.line++;
				}
				b_b += String.fromCodePoint(c1);
			}
		}
		return b_b;
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var char;
		if(this.char < 0) {
			char = this.input.charCodeAt(this.readPos++);
		} else {
			char = this.char;
			this.char = -1;
		}
		while(true) {
			if(char != char) {
				this.char = char;
				return hscript_Token.TEof;
			}
			switch(char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 35:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char]) {
					var id = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return this.preprocess(id);
						}
						id += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 34:case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(char)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				char = this.input.charCodeAt(this.readPos++);
				switch(char) {
				case 46:
					char = this.input.charCodeAt(this.readPos++);
					if(char != 46) {
						this.invalidChar(char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = char - 48;
					var exp = 1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						exp *= 10;
						switch(char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + (char - 48);
							break;
						default:
							this.char = char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this.char = char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = (char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					char = this.input.charCodeAt(this.readPos++);
					exp1 *= 10;
					switch(char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.input.charCodeAt(this.readPos++) == 46) {
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this1.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar(char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + (char - 48);
						break;
					case 69:case 101:
						var tk = this.token();
						var pow = null;
						if(tk == null) {
							var _this2 = this.tokens;
							_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
						} else {
							switch(tk._hx_index) {
							case 1:
								var _g = tk.c;
								if(_g._hx_index == 0) {
									var e = _g.v;
									pow = e;
								} else {
									var _this3 = this.tokens;
									_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
								}
								break;
							case 3:
								if(tk.s == "-") {
									tk = this.token();
									if(tk == null) {
										var _this4 = this.tokens;
										_this4.head = new haxe_ds_GenericCell(tk,_this4.head);
									} else if(tk._hx_index == 1) {
										var _g1 = tk.c;
										if(_g1._hx_index == 0) {
											var e1 = _g1.v;
											pow = -e1;
										} else {
											var _this5 = this.tokens;
											_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
										}
									} else {
										var _this6 = this.tokens;
										_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
									}
								} else {
									var _this7 = this.tokens;
									_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
								}
								break;
							default:
								var _this8 = this.tokens;
								_this8.head = new haxe_ds_GenericCell(tk,_this8.head);
							}
						}
						if(pow == null) {
							this.invalidChar(char);
						}
						return hscript_Token.TConst(hscript_Const.CFloat(Math.pow(10,pow) / exp1 * n1 * 10));
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar(char);
						}
						var n2 = 0;
						while(true) {
							char = this.input.charCodeAt(this.readPos++);
							switch(char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + (char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + (char - 87);
								break;
							default:
								this.char = char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this.char = char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				char = this.input.charCodeAt(this.readPos++);
				if(char == 61) {
					return hscript_Token.TOp("==");
				} else if(char == 62) {
					return hscript_Token.TOp("=>");
				}
				this.char = char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 64:
				char = this.input.charCodeAt(this.readPos++);
				if(this.idents[char] || char == 58) {
					var id1 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TMeta(id1);
						}
						id1 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
				break;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[char]) {
					var op = String.fromCodePoint(char);
					var prev = -1;
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.ops[char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,char);
							}
							this.char = char;
							return hscript_Token.TOp(op);
						}
						prev = char;
						op += String.fromCodePoint(char);
					}
				}
				if(this.idents[char]) {
					var id2 = String.fromCodePoint(char);
					while(true) {
						char = this.input.charCodeAt(this.readPos++);
						if(char != char) {
							char = 0;
						}
						if(!this.idents[char]) {
							this.char = char;
							return hscript_Token.TId(id2);
						}
						id2 += String.fromCodePoint(char);
					}
				}
				this.invalidChar(char);
			}
			char = this.input.charCodeAt(this.readPos++);
		}
	}
	,preprocValue: function(id) {
		var _this = this.preprocesorValues;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,preprocStack: null
	,parsePreproCond: function() {
		var tk = this.token();
		if(tk == null) {
			return this.unexpected(tk);
		} else {
			switch(tk._hx_index) {
			case 2:
				var id = tk.s;
				return hscript_Expr.EIdent(id);
			case 3:
				if(tk.s == "!") {
					return hscript_Expr.EUnop("!",true,this.parsePreproCond());
				} else {
					return this.unexpected(tk);
				}
				break;
			case 4:
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(hscript_Token.TPOpen,_this.head);
				return this.parseExpr();
			default:
				return this.unexpected(tk);
			}
		}
	}
	,evalPreproCond: function(e) {
		switch(e._hx_index) {
		case 1:
			var id = e.v;
			return this.preprocValue(id) != null;
		case 3:
			var e1 = e.e;
			return this.evalPreproCond(e1);
		case 6:
			var _g6 = e.e2;
			var _g5 = e.e1;
			switch(e.op) {
			case "&&":
				var e2 = _g6;
				var e11 = _g5;
				if(this.evalPreproCond(e11)) {
					return this.evalPreproCond(e2);
				} else {
					return false;
				}
				break;
			case "||":
				var e21 = _g6;
				var e12 = _g5;
				if(!this.evalPreproCond(e12)) {
					return this.evalPreproCond(e21);
				} else {
					return true;
				}
				break;
			default:
				if(!this.resumeErrors) {
					throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		case 7:
			var _g1 = e.prefix;
			if(e.op == "!") {
				var e3 = e.e;
				return !this.evalPreproCond(e3);
			} else {
				if(!this.resumeErrors) {
					throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
				}
				return false;
			}
			break;
		default:
			if(!this.resumeErrors) {
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Can't eval " + $hxEnums[e.__enum__].__constructs__[e._hx_index]));
			}
			return false;
		}
	}
	,preprocess: function(id) {
		switch(id) {
		case "else":case "elseif":
			if(this.preprocStack.length > 0) {
				if(this.preprocStack[this.preprocStack.length - 1].r) {
					this.preprocStack[this.preprocStack.length - 1].r = false;
					this.skipTokens();
					return this.token();
				} else if(id == "else") {
					this.preprocStack.pop();
					this.preprocStack.push({ r : true});
					return this.token();
				} else {
					this.preprocStack.pop();
					return this.preprocess("if");
				}
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "end":
			if(this.preprocStack.length > 0) {
				this.preprocStack.pop();
				return this.token();
			} else {
				return hscript_Token.TPrepro(id);
			}
			break;
		case "if":
			var e = this.parsePreproCond();
			if(this.evalPreproCond(e)) {
				this.preprocStack.push({ r : true});
				return this.token();
			}
			this.preprocStack.push({ r : false});
			this.skipTokens();
			return this.token();
		default:
			return hscript_Token.TPrepro(id);
		}
	}
	,skipTokens: function() {
		var spos = this.preprocStack.length - 1;
		var obj = this.preprocStack[spos];
		var pos = this.readPos;
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				if(!this.resumeErrors) {
					throw new js__$Boot_HaxeError(hscript_Error.EInvalidPreprocessor("Unclosed"));
				}
			}
			if(this.preprocStack[spos] != obj) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				break;
			}
		}
	}
	,tokenComment: function(op,char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			while(char != 13 && char != 10) {
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					break;
				}
			}
			this.char = char;
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this.char = char;
				return this.token();
			}
			while(true) {
				while(char != 42) {
					if(char == 10) {
						this.line++;
					}
					char = this.input.charCodeAt(this.readPos++);
					if(char != char) {
						this.line = old;
						if(!this.resumeErrors) {
							throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
						}
						break;
					}
				}
				char = this.input.charCodeAt(this.readPos++);
				if(char != char) {
					this.line = old;
					if(!this.resumeErrors) {
						throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
					}
					break;
				}
				if(char == 47) {
					break;
				}
			}
			return this.token();
		}
		this.char = char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c._hx_index) {
		case 0:
			var v = c.v;
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c.f;
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c.s;
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t._hx_index) {
		case 0:
			return "<eof>";
		case 1:
			var c = t.c;
			return this.constString(c);
		case 2:
			var s = t.s;
			return s;
		case 3:
			var s1 = t.s;
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		case 15:
			var id = t.s;
			return "@" + id;
		case 16:
			var id1 = t.s;
			return "#" + id1;
		}
	}
	,__class__: hscript_Parser
};
var hscript_Tools = function() { };
$hxClasses["hscript.Tools"] = hscript_Tools;
hscript_Tools.__name__ = "hscript.Tools";
hscript_Tools.iter = function(e,f) {
	switch(e._hx_index) {
	case 0:
		var _g19 = e.c;
		break;
	case 1:
		var _g27 = e.v;
		break;
	case 2:
		var _g32 = e.t;
		var _g31 = e.n;
		var e1 = e.e;
		if(e1 != null) {
			f(e1);
		}
		break;
	case 3:
		var e2 = e.e;
		f(e2);
		break;
	case 4:
		var el = e.e;
		var _g = 0;
		while(_g < el.length) {
			var e3 = el[_g];
			++_g;
			f(e3);
		}
		break;
	case 5:
		var _g49 = e.f;
		var e4 = e.e;
		f(e4);
		break;
	case 6:
		var _g36 = e.op;
		var e21 = e.e2;
		var e11 = e.e1;
		f(e11);
		f(e21);
		break;
	case 7:
		var _g13 = e.prefix;
		var _g12 = e.op;
		var e5 = e.e;
		f(e5);
		break;
	case 8:
		var args = e.params;
		var e6 = e.e;
		f(e6);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var e22 = e.e2;
		var e12 = e.e1;
		var c = e.cond;
		f(c);
		f(e12);
		if(e22 != null) {
			f(e22);
		}
		break;
	case 10:
		var e7 = e.e;
		var c1 = e.cond;
		f(c1);
		f(e7);
		break;
	case 11:
		var _g28 = e.v;
		var e8 = e.e;
		var it = e.it;
		f(it);
		f(e8);
		break;
	case 12:case 13:
		break;
	case 14:
		var _g44 = e.ret;
		var _g43 = e.name;
		var _g41 = e.args;
		var e9 = e.e;
		f(e9);
		break;
	case 15:
		var e10 = e.e;
		if(e10 != null) {
			f(e10);
		}
		break;
	case 16:
		var i = e.index;
		var e13 = e.e;
		f(e13);
		f(i);
		break;
	case 17:
		var el1 = e.e;
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e14 = el1[_g2];
			++_g2;
			f(e14);
		}
		break;
	case 18:
		var _g17 = e.cl;
		var el2 = e.params;
		var _g3 = 0;
		while(_g3 < el2.length) {
			var e15 = el2[_g3];
			++_g3;
			f(e15);
		}
		break;
	case 19:
		var e16 = e.e;
		f(e16);
		break;
	case 20:
		var _g5 = e.t;
		var _g4 = e.v;
		var c2 = e.ecatch;
		var e17 = e.e;
		f(e17);
		f(c2);
		break;
	case 21:
		var fl = e.fl;
		var _g6 = 0;
		while(_g6 < fl.length) {
			var fi = fl[_g6];
			++_g6;
			f(fi.e);
		}
		break;
	case 22:
		var e23 = e.e2;
		var e18 = e.e1;
		var c3 = e.cond;
		f(c3);
		f(e18);
		f(e23);
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e19 = e.e;
		f(e19);
		var _g7 = 0;
		while(_g7 < cases.length) {
			var c4 = cases[_g7];
			++_g7;
			var _g8 = 0;
			var _g11 = c4.values;
			while(_g8 < _g11.length) {
				var v = _g11[_g8];
				++_g8;
				f(v);
			}
			f(c4.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 24:
		var e20 = e.e;
		var c5 = e.cond;
		f(c5);
		f(e20);
		break;
	case 25:
		var e24 = e.e;
		var args1 = e.args;
		var name = e.name;
		if(args1 != null) {
			var _g9 = 0;
			while(_g9 < args1.length) {
				var a1 = args1[_g9];
				++_g9;
				f(a1);
			}
		}
		f(e24);
		break;
	case 26:
		var _g46 = e.t;
		var e25 = e.e;
		f(e25);
		break;
	}
};
hscript_Tools.map = function(e,f) {
	var edef;
	switch(e._hx_index) {
	case 0:
		var _g19 = e.c;
		edef = e;
		break;
	case 1:
		var _g27 = e.v;
		edef = e;
		break;
	case 2:
		var e1 = e.e;
		var t = e.t;
		var n = e.n;
		edef = hscript_Expr.EVar(n,t,e1 != null ? f(e1) : null);
		break;
	case 3:
		var e2 = e.e;
		edef = hscript_Expr.EParent(f(e2));
		break;
	case 4:
		var el = e.e;
		var _g = [];
		var _g1 = 0;
		while(_g1 < el.length) {
			var e3 = el[_g1];
			++_g1;
			_g.push(f(e3));
		}
		edef = hscript_Expr.EBlock(_g);
		break;
	case 5:
		var fi = e.f;
		var e4 = e.e;
		edef = hscript_Expr.EField(f(e4),fi);
		break;
	case 6:
		var e21 = e.e2;
		var e11 = e.e1;
		var op = e.op;
		edef = hscript_Expr.EBinop(op,f(e11),f(e21));
		break;
	case 7:
		var e5 = e.e;
		var pre = e.prefix;
		var op1 = e.op;
		edef = hscript_Expr.EUnop(op1,pre,f(e5));
		break;
	case 8:
		var args = e.params;
		var e6 = e.e;
		var edef1 = f(e6);
		var _g2 = [];
		var _g11 = 0;
		while(_g11 < args.length) {
			var a = args[_g11];
			++_g11;
			_g2.push(f(a));
		}
		edef = hscript_Expr.ECall(edef1,_g2);
		break;
	case 9:
		var e22 = e.e2;
		var e12 = e.e1;
		var c = e.cond;
		edef = hscript_Expr.EIf(f(c),f(e12),e22 != null ? f(e22) : null);
		break;
	case 10:
		var e7 = e.e;
		var c1 = e.cond;
		edef = hscript_Expr.EWhile(f(c1),f(e7));
		break;
	case 11:
		var e8 = e.e;
		var it = e.it;
		var v = e.v;
		edef = hscript_Expr.EFor(v,f(it),f(e8));
		break;
	case 12:case 13:
		edef = e;
		break;
	case 14:
		var t1 = e.ret;
		var name = e.name;
		var e9 = e.e;
		var args1 = e.args;
		edef = hscript_Expr.EFunction(args1,f(e9),name,t1);
		break;
	case 15:
		var e10 = e.e;
		edef = hscript_Expr.EReturn(e10 != null ? f(e10) : null);
		break;
	case 16:
		var i = e.index;
		var e13 = e.e;
		edef = hscript_Expr.EArray(f(e13),f(i));
		break;
	case 17:
		var el1 = e.e;
		var _g3 = [];
		var _g12 = 0;
		while(_g12 < el1.length) {
			var e14 = el1[_g12];
			++_g12;
			_g3.push(f(e14));
		}
		edef = hscript_Expr.EArrayDecl(_g3);
		break;
	case 18:
		var el2 = e.params;
		var cl = e.cl;
		var _g4 = [];
		var _g13 = 0;
		while(_g13 < el2.length) {
			var e15 = el2[_g13];
			++_g13;
			_g4.push(f(e15));
		}
		edef = hscript_Expr.ENew(cl,_g4);
		break;
	case 19:
		var e16 = e.e;
		edef = hscript_Expr.EThrow(f(e16));
		break;
	case 20:
		var c2 = e.ecatch;
		var t2 = e.t;
		var v1 = e.v;
		var e17 = e.e;
		edef = hscript_Expr.ETry(f(e17),v1,t2,f(c2));
		break;
	case 21:
		var fl = e.fl;
		var _g5 = [];
		var _g14 = 0;
		while(_g14 < fl.length) {
			var fi1 = fl[_g14];
			++_g14;
			_g5.push({ name : fi1.name, e : f(fi1.e)});
		}
		edef = hscript_Expr.EObject(_g5);
		break;
	case 22:
		var e23 = e.e2;
		var e18 = e.e1;
		var c3 = e.cond;
		edef = hscript_Expr.ETernary(f(c3),f(e18),f(e23));
		break;
	case 23:
		var def = e.defaultExpr;
		var cases = e.cases;
		var e19 = e.e;
		var edef2 = f(e19);
		var _g6 = [];
		var _g15 = 0;
		while(_g15 < cases.length) {
			var c4 = cases[_g15];
			++_g15;
			var _g16 = [];
			var _g21 = 0;
			var _g31 = c4.values;
			while(_g21 < _g31.length) {
				var v2 = _g31[_g21];
				++_g21;
				_g16.push(f(v2));
			}
			_g6.push({ values : _g16, expr : f(c4.expr)});
		}
		edef = hscript_Expr.ESwitch(edef2,_g6,def == null ? null : f(def));
		break;
	case 24:
		var e20 = e.e;
		var c5 = e.cond;
		edef = hscript_Expr.EDoWhile(f(c5),f(e20));
		break;
	case 25:
		var e24 = e.e;
		var args2 = e.args;
		var name1 = e.name;
		var edef3;
		if(args2 == null) {
			edef3 = null;
		} else {
			var _g7 = [];
			var _g17 = 0;
			while(_g17 < args2.length) {
				var a1 = args2[_g17];
				++_g17;
				_g7.push(f(a1));
			}
			edef3 = _g7;
		}
		edef = hscript_Expr.EMeta(name1,edef3,f(e24));
		break;
	case 26:
		var t3 = e.t;
		var e25 = e.e;
		edef = hscript_Expr.ECheckType(f(e25),t3);
		break;
	}
	return edef;
};
hscript_Tools.expr = function(e) {
	return e;
};
hscript_Tools.mk = function(e,p) {
	return e;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isInterface = function(o) {
	return o.__isInterface__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
js_Browser.getSessionStorage = function() {
	try {
		var s = window.sessionStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
js_Browser.createXMLHttpRequest = function() {
	if(typeof XMLHttpRequest != "undefined") {
		return new XMLHttpRequest();
	}
	if(typeof ActiveXObject != "undefined") {
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	throw new js__$Boot_HaxeError("Unable to create XMLHttpRequest object.");
};
js_Browser.alert = function(v) {
	window.alert(Std.string(v));
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = "js.Lib";
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.debug = function() {
	debugger;
};
js_Lib.alert = function(v) {
	alert(js_Boot.__string_rec(v,""));
};
js_Lib.eval = function(code) {
	return eval(code);
};
js_Lib.get_undefined = function() {
	return undefined;
};
js_Lib.rethrow = function() {
};
js_Lib.getOriginalException = function() {
	return null;
};
js_Lib.getNextHaxeUID = function() {
	return $global.$haxeUID++;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_lib__$Object_ObjectEntry_$Impl_$ = {};
$hxClasses["js.lib._Object.ObjectEntry_Impl_"] = js_lib__$Object_ObjectEntry_$Impl_$;
js_lib__$Object_ObjectEntry_$Impl_$.__name__ = "js.lib._Object.ObjectEntry_Impl_";
js_lib__$Object_ObjectEntry_$Impl_$.__properties__ = {get_value:"get_value",get_key:"get_key"};
js_lib__$Object_ObjectEntry_$Impl_$.get_key = function(this1) {
	return this1[0];
};
js_lib__$Object_ObjectEntry_$Impl_$.get_value = function(this1) {
	return this1[1];
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
EReg.escapeRe = new RegExp("[.*+?^${}()|[\\]\\\\]","g");
com_genome2d_proto_GPrototypeHelper.GComponent = "com.genome2d.components.GComponent";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GComponent = "com.genome2d.components.GComponent";
com_genome2d_proto_GPrototypeHelper.GCameraController = "com.genome2d.components.GCameraController";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GCameraController = "com.genome2d.components.GCameraController";
com_genome2d_proto_GPrototypeHelper.CameraController = "com.dinox.model.CameraController";
com_genome2d_proto_GPrototypeHelper.com_dinox_model_CameraController = "com.dinox.model.CameraController";
com_genome2d_proto_GPrototypeHelper.GTextureSettings = "com.genome2d.textures.GTextureSettings";
com_genome2d_proto_GPrototypeHelper.com_genome2d_textures_GTextureSettings = "com.genome2d.textures.GTextureSettings";
com_genome2d_proto_GPrototypeHelper.GTextureBase = "com.genome2d.textures.GTextureBase";
com_genome2d_proto_GPrototypeHelper.com_genome2d_textures_GTextureBase = "com.genome2d.textures.GTextureBase";
com_genome2d_proto_GPrototypeHelper.GTextureAtlas = "com.genome2d.textures.GTextureAtlas";
com_genome2d_proto_GPrototypeHelper.com_genome2d_textures_GTextureAtlas = "com.genome2d.textures.GTextureAtlas";
com_genome2d_proto_GPrototypeHelper.GIntPoint = "com.genome2d.geom.GIntPoint";
com_genome2d_proto_GPrototypeHelper.com_genome2d_geom_GIntPoint = "com.genome2d.geom.GIntPoint";
com_genome2d_proto_GPrototypeHelper.GAStarNode = "com.genome2d.utils.astar.GAStarNode";
com_genome2d_proto_GPrototypeHelper.com_genome2d_utils_astar_GAStarNode = "com.genome2d.utils.astar.GAStarNode";
com_genome2d_proto_GPrototypeHelper.GUISkin = "com.genome2d.ui.skin.GUISkin";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUISkin = "com.genome2d.ui.skin.GUISkin";
com_genome2d_proto_GPrototypeHelper.GUIShapeSkin = "com.genome2d.ui.skin.GUIShapeSkin";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUIShapeSkin = "com.genome2d.ui.skin.GUIShapeSkin";
com_genome2d_proto_GPrototypeHelper.GUIParticleSkin = "com.genome2d.ui.skin.GUIParticleSkin";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUIParticleSkin = "com.genome2d.ui.skin.GUIParticleSkin";
com_genome2d_proto_GPrototypeHelper.GUIElement = "com.genome2d.ui.element.GUIElement";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_element_GUIElement = "com.genome2d.ui.element.GUIElement";
com_genome2d_proto_GPrototypeHelper.element = "com.genome2d.ui.element.GUIElement";
com_genome2d_proto_GPrototypeHelper.GUIInputField = "com.genome2d.ui.element.GUIInputField";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_element_GUIInputField = "com.genome2d.ui.element.GUIInputField";
com_genome2d_proto_GPrototypeHelper.GTweenStep = "com.genome2d.tween.GTweenStep";
com_genome2d_proto_GPrototypeHelper.com_genome2d_tween_GTweenStep = "com.genome2d.tween.GTweenStep";
com_genome2d_proto_GPrototypeHelper.tweenStep = "com.genome2d.tween.GTweenStep";
com_genome2d_proto_GPrototypeHelper.GFloatInterp = "com.genome2d.tween.interp.GFloatInterp";
com_genome2d_proto_GPrototypeHelper.com_genome2d_tween_interp_GFloatInterp = "com.genome2d.tween.interp.GFloatInterp";
com_genome2d_proto_GPrototypeHelper.tweenFloat = "com.genome2d.tween.interp.GFloatInterp";
com_genome2d_proto_GPrototypeHelper.GCurveInterp = "com.genome2d.tween.interp.GCurveInterp";
com_genome2d_proto_GPrototypeHelper.com_genome2d_tween_interp_GCurveInterp = "com.genome2d.tween.interp.GCurveInterp";
com_genome2d_proto_GPrototypeHelper.GTweenSequence = "com.genome2d.tween.GTweenSequence";
com_genome2d_proto_GPrototypeHelper.com_genome2d_tween_GTweenSequence = "com.genome2d.tween.GTweenSequence";
com_genome2d_proto_GPrototypeHelper.tweenSequence = "com.genome2d.tween.GTweenSequence";
com_genome2d_proto_GPrototypeHelper.GTransition = "com.genome2d.transitions.GTransition";
com_genome2d_proto_GPrototypeHelper.com_genome2d_transitions_GTransition = "com.genome2d.transitions.GTransition";
com_genome2d_proto_GPrototypeHelper.transition = "com.genome2d.transitions.GTransition";
com_genome2d_proto_GPrototypeHelper.GFont = "com.genome2d.text.GFont";
com_genome2d_proto_GPrototypeHelper.com_genome2d_text_GFont = "com.genome2d.text.GFont";
com_genome2d_proto_GPrototypeHelper.GPostProcess = "com.genome2d.postprocess.GPostProcess";
com_genome2d_proto_GPrototypeHelper.com_genome2d_postprocess_GPostProcess = "com.genome2d.postprocess.GPostProcess";
com_genome2d_proto_GPrototypeHelper.GFilterPP = "com.genome2d.postprocess.GFilterPP";
com_genome2d_proto_GPrototypeHelper.com_genome2d_postprocess_GFilterPP = "com.genome2d.postprocess.GFilterPP";
com_genome2d_proto_GPrototypeHelper.GBloomPP = "com.genome2d.postprocess.GBloomPP";
com_genome2d_proto_GPrototypeHelper.com_genome2d_postprocess_GBloomPP = "com.genome2d.postprocess.GBloomPP";
com_genome2d_proto_GPrototypeHelper.GParticleEmitterModule = "com.genome2d.particles.modules.GParticleEmitterModule";
com_genome2d_proto_GPrototypeHelper.com_genome2d_particles_modules_GParticleEmitterModule = "com.genome2d.particles.modules.GParticleEmitterModule";
com_genome2d_proto_GPrototypeHelper.GSPHVelocityModule = "com.genome2d.particles.modules.GSPHVelocityModule";
com_genome2d_proto_GPrototypeHelper.com_genome2d_particles_modules_GSPHVelocityModule = "com.genome2d.particles.modules.GSPHVelocityModule";
com_genome2d_proto_GPrototypeHelper.GScriptModule = "com.genome2d.particles.modules.GScriptModule";
com_genome2d_proto_GPrototypeHelper.com_genome2d_particles_modules_GScriptModule = "com.genome2d.particles.modules.GScriptModule";
com_genome2d_proto_GPrototypeHelper.GParticleEmitter = "com.genome2d.particles.GParticleEmitter";
com_genome2d_proto_GPrototypeHelper.com_genome2d_particles_GParticleEmitter = "com.genome2d.particles.GParticleEmitter";
com_genome2d_proto_GPrototypeHelper.particle_emitter = "com.genome2d.particles.GParticleEmitter";
com_genome2d_proto_GPrototypeHelper.GIntRectangle = "com.genome2d.geom.GIntRectangle";
com_genome2d_proto_GPrototypeHelper.com_genome2d_geom_GIntRectangle = "com.genome2d.geom.GIntRectangle";
com_genome2d_proto_GPrototypeHelper.GSimpleParticleSystemD = "com.genome2d.deprecated.components.renderable.particles.GSimpleParticleSystemD";
com_genome2d_proto_GPrototypeHelper.com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD = "com.genome2d.deprecated.components.renderable.particles.GSimpleParticleSystemD";
com_genome2d_proto_GPrototypeHelper.GParticleSystemD = "com.genome2d.deprecated.components.renderable.particles.GParticleSystemD";
com_genome2d_proto_GPrototypeHelper.com_genome2d_deprecated_components_renderable_particles_GParticleSystemD = "com.genome2d.deprecated.components.renderable.particles.GParticleSystemD";
com_genome2d_proto_GPrototypeHelper.GCurve = "com.genome2d.geom.GCurve";
com_genome2d_proto_GPrototypeHelper.com_genome2d_geom_GCurve = "com.genome2d.geom.GCurve";
com_genome2d_proto_GPrototypeHelper.GTileMap = "com.genome2d.components.renderable.tilemap.GTileMap";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_tilemap_GTileMap = "com.genome2d.components.renderable.tilemap.GTileMap";
com_genome2d_proto_GPrototypeHelper.GText = "com.genome2d.components.renderable.text.GText";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_text_GText = "com.genome2d.components.renderable.text.GText";
com_genome2d_proto_GPrototypeHelper.GParticleSystemComponent = "com.genome2d.components.renderable.particles.GParticleSystemComponent";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_particles_GParticleSystemComponent = "com.genome2d.components.renderable.particles.GParticleSystemComponent";
com_genome2d_proto_GPrototypeHelper.GParticleSystem = "com.genome2d.particles.GParticleSystem";
com_genome2d_proto_GPrototypeHelper.com_genome2d_particles_GParticleSystem = "com.genome2d.particles.GParticleSystem";
com_genome2d_proto_GPrototypeHelper.particle_system = "com.genome2d.particles.GParticleSystem";
com_genome2d_proto_GPrototypeHelper.GTiledSprite = "com.genome2d.components.renderable.GTiledSprite";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GTiledSprite = "com.genome2d.components.renderable.GTiledSprite";
com_genome2d_proto_GPrototypeHelper.GTexturedQuad = "com.genome2d.components.renderable.GTexturedQuad";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GTexturedQuad = "com.genome2d.components.renderable.GTexturedQuad";
com_genome2d_proto_GPrototypeHelper.GSliceSprite = "com.genome2d.components.renderable.GSliceSprite";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GSliceSprite = "com.genome2d.components.renderable.GSliceSprite";
com_genome2d_proto_GPrototypeHelper.GSlice3Sprite = "com.genome2d.components.renderable.GSlice3Sprite";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GSlice3Sprite = "com.genome2d.components.renderable.GSlice3Sprite";
com_genome2d_proto_GPrototypeHelper.GShape = "com.genome2d.components.renderable.GShape";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GShape = "com.genome2d.components.renderable.GShape";
com_genome2d_proto_GPrototypeHelper.GScriptComponent = "com.genome2d.components.GScriptComponent";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GScriptComponent = "com.genome2d.components.GScriptComponent";
com_genome2d_proto_GPrototypeHelper.GScript = "com.genome2d.scripts.GScript";
com_genome2d_proto_GPrototypeHelper.com_genome2d_scripts_GScript = "com.genome2d.scripts.GScript";
com_genome2d_proto_GPrototypeHelper.GLevel = "com.genome2d.components.GLevel";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GLevel = "com.genome2d.components.GLevel";
com_genome2d_proto_GPrototypeHelper.GAnimator = "com.genome2d.components.GAnimator";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GAnimator = "com.genome2d.components.GAnimator";
com_genome2d_proto_GPrototypeHelper.GFrameAnimator = "com.genome2d.components.GFrameAnimator";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_GFrameAnimator = "com.genome2d.components.GFrameAnimator";
com_genome2d_proto_GPrototypeHelper.GFrameAnimation = "com.genome2d.animation.GFrameAnimation";
com_genome2d_proto_GPrototypeHelper.com_genome2d_animation_GFrameAnimation = "com.genome2d.animation.GFrameAnimation";
com_genome2d_proto_GPrototypeHelper.GTexture = "com.genome2d.textures.GTexture";
com_genome2d_proto_GPrototypeHelper.com_genome2d_textures_GTexture = "com.genome2d.textures.GTexture";
com_genome2d_proto_GPrototypeHelper.GNode = "com.genome2d.node.GNode";
com_genome2d_proto_GPrototypeHelper.com_genome2d_node_GNode = "com.genome2d.node.GNode";
com_genome2d_proto_GPrototypeHelper.node = "com.genome2d.node.GNode";
com_genome2d_proto_GPrototypeHelper.GSprite = "com.genome2d.components.renderable.GSprite";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_GSprite = "com.genome2d.components.renderable.GSprite";
com_genome2d_proto_GPrototypeHelper.GUIFontSkin = "com.genome2d.ui.skin.GUIFontSkin";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUIFontSkin = "com.genome2d.ui.skin.GUIFontSkin";
com_genome2d_proto_GPrototypeHelper.fontSkin = "com.genome2d.ui.skin.GUIFontSkin";
com_genome2d_proto_GPrototypeHelper.GTextureFont = "com.genome2d.text.GTextureFont";
com_genome2d_proto_GPrototypeHelper.com_genome2d_text_GTextureFont = "com.genome2d.text.GTextureFont";
com_genome2d_proto_GPrototypeHelper.GUITextureSkin = "com.genome2d.ui.skin.GUITextureSkin";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUITextureSkin = "com.genome2d.ui.skin.GUITextureSkin";
com_genome2d_proto_GPrototypeHelper.textureSkin = "com.genome2d.ui.skin.GUITextureSkin";
com_genome2d_proto_GPrototypeHelper.GUISkinSheet = "com.genome2d.ui.skin.GUISkinSheet";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_skin_GUISkinSheet = "com.genome2d.ui.skin.GUISkinSheet";
com_genome2d_proto_GPrototypeHelper.skinSheet = "com.genome2d.ui.skin.GUISkinSheet";
com_genome2d_proto_GPrototypeHelper.GUILayout = "com.genome2d.ui.layout.GUILayout";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_layout_GUILayout = "com.genome2d.ui.layout.GUILayout";
com_genome2d_proto_GPrototypeHelper.layout = "com.genome2d.ui.layout.GUILayout";
com_genome2d_proto_GPrototypeHelper.GUIVerticalLayout = "com.genome2d.ui.layout.GUIVerticalLayout";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_layout_GUIVerticalLayout = "com.genome2d.ui.layout.GUIVerticalLayout";
com_genome2d_proto_GPrototypeHelper.vertical = "com.genome2d.ui.layout.GUIVerticalLayout";
com_genome2d_proto_GPrototypeHelper.GUIHorizontalLayout = "com.genome2d.ui.layout.GUIHorizontalLayout";
com_genome2d_proto_GPrototypeHelper.com_genome2d_ui_layout_GUIHorizontalLayout = "com.genome2d.ui.layout.GUIHorizontalLayout";
com_genome2d_proto_GPrototypeHelper.horizontal = "com.genome2d.ui.layout.GUIHorizontalLayout";
com_genome2d_proto_GPrototypeHelper.GUI = "com.genome2d.components.renderable.ui.GUI";
com_genome2d_proto_GPrototypeHelper.com_genome2d_components_renderable_ui_GUI = "com.genome2d.components.renderable.ui.GUI";
haxe_SysTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
StringTools.winMetaCharacters = haxe_SysTools.winMetaCharacters;
StringTools.MIN_SURROGATE_CODE_POINT = 65536;
_$Xml_XmlType_$Impl_$.Element = 0;
_$Xml_XmlType_$Impl_$.PCData = 1;
_$Xml_XmlType_$Impl_$.CData = 2;
_$Xml_XmlType_$Impl_$.Comment = 3;
_$Xml_XmlType_$Impl_$.DocType = 4;
_$Xml_XmlType_$Impl_$.ProcessingInstruction = 5;
_$Xml_XmlType_$Impl_$.Document = 6;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
com_genome2d_components_GComponent.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_GComponent.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_GComponent.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_GComponent.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_GComponent.PROTOTYPE_NAME = "GComponent";
com_genome2d_components_GComponent.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_GCameraController.__meta__ = { fields : { mouseEnabled : { prototype : null}}};
com_genome2d_components_GCameraController.PROTOTYPE_PROPERTY_DEFAULTS = [true];
com_genome2d_components_GCameraController.PROTOTYPE_PROPERTY_NAMES = ["mouseEnabled"];
com_genome2d_components_GCameraController.PROTOTYPE_PROPERTY_TYPES = ["Bool"];
com_genome2d_components_GCameraController.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_components_GCameraController.PROTOTYPE_NAME = "GCameraController";
com_genome2d_components_GCameraController.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_dinox_model_CameraController.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_dinox_model_CameraController.PROTOTYPE_PROPERTY_NAMES = [];
com_dinox_model_CameraController.PROTOTYPE_PROPERTY_TYPES = [];
com_dinox_model_CameraController.PROTOTYPE_PROPERTY_EXTRAS = [];
com_dinox_model_CameraController.PROTOTYPE_NAME = "CameraController";
com_dinox_model_CameraController.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_dinox_model_LandMap.MAX_SCALE = 2;
com_dinox_model_LandMap.MIN_SCALE = 0.1;
com_genome2d_Genome2D.VERSION = "1.2";
com_genome2d_Genome2D.BUILD = "7630e6dc9de7fb0b31260b5b213a8cb4";
com_genome2d_Genome2D.DATE = "2022-05-04 14:16:38";
com_genome2d_Genome2D.g2d_instantiable = false;
com_genome2d_animation_GFrameAnimation.__meta__ = { fields : { timeDilation : { prototype : null}, repeatable : { prototype : null}, reversed : { prototype : null}, frameRate : { prototype : null}}};
com_genome2d_animation_GFrameAnimation.PROTOTYPE_PROPERTY_DEFAULTS = [1,true,false,0];
com_genome2d_animation_GFrameAnimation.PROTOTYPE_PROPERTY_NAMES = ["timeDilation","repeatable","reversed","frameRate"];
com_genome2d_animation_GFrameAnimation.PROTOTYPE_PROPERTY_TYPES = ["Float","Bool","Bool","Int"];
com_genome2d_animation_GFrameAnimation.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0];
com_genome2d_animation_GFrameAnimation.PROTOTYPE_NAME = "GFrameAnimation";
com_genome2d_animation_GFrameAnimation.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_assets_GAsset.__meta__ = { obj : { prototypeName : ["asset"]}, fields : { id : { prototype : null}, url : { prototype : null}}};
com_genome2d_assets_GAssetManager.PATH_REGEX = new EReg("([^\\?/\\\\]+?)(?:\\.([\\w\\-]+))?(?:\\?.*)?$","");
com_genome2d_assets_GAssetManager.URL_TO_ID_REGEX = new EReg("\\\\","g");
com_genome2d_components_GAnimator.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_GAnimator.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_GAnimator.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_GAnimator.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_GAnimator.PROTOTYPE_NAME = "GAnimator";
com_genome2d_components_GAnimator.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_GFrameAnimator.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_GFrameAnimator.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_GFrameAnimator.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_GFrameAnimator.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_GFrameAnimator.PROTOTYPE_NAME = "GFrameAnimator";
com_genome2d_components_GFrameAnimator.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_GLevel.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_GLevel.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_GLevel.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_GLevel.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_GLevel.PROTOTYPE_NAME = "GLevel";
com_genome2d_components_GLevel.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_GScriptComponent.__meta__ = { fields : { script : { prototype : ["getReference"]}}};
com_genome2d_components_GScriptComponent.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_components_GScriptComponent.PROTOTYPE_PROPERTY_NAMES = ["script"];
com_genome2d_components_GScriptComponent.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.scripts.GScript"];
com_genome2d_components_GScriptComponent.PROTOTYPE_PROPERTY_EXTRAS = [2];
com_genome2d_components_GScriptComponent.PROTOTYPE_NAME = "GScriptComponent";
com_genome2d_components_GScriptComponent.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GShape.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_renderable_GShape.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_renderable_GShape.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_renderable_GShape.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_renderable_GShape.PROTOTYPE_NAME = "GShape";
com_genome2d_components_renderable_GShape.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GTiledSprite.__meta__ = { fields : { width : { prototype : null}, height : { prototype : null}}};
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_PROPERTY_DEFAULTS = [0.0,0.0];
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_PROPERTY_NAMES = ["width","height"];
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_PROPERTY_TYPES = ["Float","Float"];
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_PROPERTY_EXTRAS = [0,0];
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_NAME = "GTiledSprite";
com_genome2d_components_renderable_GTiledSprite.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_NAME = "GSlice3Sprite";
com_genome2d_components_renderable_GSlice3Sprite.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GSliceSprite.__meta__ = { fields : { sliceLeft : { prototype : null}, sliceTop : { prototype : null}, sliceRight : { prototype : null}, sliceBottom : { prototype : null}, tiled : { prototype : null}, width : { prototype : null}, height : { prototype : null}}};
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_PROPERTY_DEFAULTS = [0,0,0,0,false,0.0,0.0];
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_PROPERTY_NAMES = ["sliceLeft","sliceTop","sliceRight","sliceBottom","tiled","width","height"];
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_PROPERTY_TYPES = ["Int","Int","Int","Int","Bool","Float","Float"];
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0];
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_NAME = "GSliceSprite";
com_genome2d_components_renderable_GSliceSprite.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GTexturedQuad.__meta__ = { fields : { blendMode : { prototype : null}, texture : { prototype : ["getReference"]}}};
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_PROPERTY_DEFAULTS = [null,null];
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_PROPERTY_NAMES = ["blendMode","texture"];
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.context.GBlendMode","com.genome2d.textures.GTexture"];
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_PROPERTY_EXTRAS = [0,2];
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_NAME = "GTexturedQuad";
com_genome2d_components_renderable_GTexturedQuad.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_GSprite.__meta__ = { fields : { frameAnimation : { prototype : null}}};
com_genome2d_components_renderable_GSprite.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_components_renderable_GSprite.PROTOTYPE_PROPERTY_NAMES = ["frameAnimation"];
com_genome2d_components_renderable_GSprite.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.animation.GFrameAnimation"];
com_genome2d_components_renderable_GSprite.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_components_renderable_GSprite.PROTOTYPE_NAME = "GSprite";
com_genome2d_components_renderable_GSprite.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_particles_GParticleSystemComponent.__meta__ = { fields : { particleSystem : { prototype : null}}};
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_PROPERTY_NAMES = ["particleSystem"];
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.particles.GParticleSystem"];
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_NAME = "GParticleSystemComponent";
com_genome2d_components_renderable_particles_GParticleSystemComponent.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_text_GText.__meta__ = { fields : { tracking : { prototype : null}, lineSpace : { prototype : null}, vAlign : { prototype : null}, hAlign : { prototype : null}, text : { prototype : null}, autoSize : { prototype : null}, wordWrap : { prototype : null}, wordWrapWhitespace : { prototype : null}, width : { prototype : null}, height : { prototype : null}}};
com_genome2d_components_renderable_text_GText.PROTOTYPE_PROPERTY_DEFAULTS = [0.0,0.0,null,null,"",false,false,false,0.0,0.0];
com_genome2d_components_renderable_text_GText.PROTOTYPE_PROPERTY_NAMES = ["tracking","lineSpace","vAlign","hAlign","text","autoSize","wordWrap","wordWrapWhitespace","width","height"];
com_genome2d_components_renderable_text_GText.PROTOTYPE_PROPERTY_TYPES = ["Float","Float","com.genome2d.utils.GVAlignType","com.genome2d.utils.GHAlignType","String","Bool","Bool","Bool","Float","Float"];
com_genome2d_components_renderable_text_GText.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,0,0,0];
com_genome2d_components_renderable_text_GText.PROTOTYPE_NAME = "GText";
com_genome2d_components_renderable_text_GText.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_NAME = "GTileMap";
com_genome2d_components_renderable_tilemap_GTileMap.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_NAME = "GUI";
com_genome2d_components_renderable_ui_GUI.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_context_GBlendModeFunc.blendFactors = (function($this) {
	var $r;
	var _g = new haxe_ds_EnumValueMap();
	_g.set(com_genome2d_context_GBlendMode.NONE,[1,0]);
	_g.set(com_genome2d_context_GBlendMode.NORMAL,[770,771]);
	_g.set(com_genome2d_context_GBlendMode.ADD,[770,32970]);
	_g.set(com_genome2d_context_GBlendMode.MULTIPLY,[32968,771]);
	_g.set(com_genome2d_context_GBlendMode.SCREEN,[770,1]);
	_g.set(com_genome2d_context_GBlendMode.ERASE,[0,771]);
	var _g1 = new haxe_ds_EnumValueMap();
	_g1.set(com_genome2d_context_GBlendMode.NONE,[1,0]);
	_g1.set(com_genome2d_context_GBlendMode.NORMAL,[1,771]);
	_g1.set(com_genome2d_context_GBlendMode.ADD,[1,1]);
	_g1.set(com_genome2d_context_GBlendMode.MULTIPLY,[32968,771]);
	_g1.set(com_genome2d_context_GBlendMode.SCREEN,[1,769]);
	_g1.set(com_genome2d_context_GBlendMode.ERASE,[0,771]);
	$r = [_g,_g1];
	return $r;
}(this));
com_genome2d_context_GBlendModeFunc.NONE = 0;
com_genome2d_context_GBlendModeFunc.NORMAL = 1;
com_genome2d_context_GBlendModeFunc.ADD = 2;
com_genome2d_context_GBlendModeFunc.MULTIPLY = 3;
com_genome2d_context_GBlendModeFunc.SCREEN = 4;
com_genome2d_context_GBlendModeFunc.ERASE = 5;
com_genome2d_context_GContextFeature.STENCIL_MASKING = 1;
com_genome2d_context_GContextFeature.RECTANGLE_TEXTURES = 2;
com_genome2d_geom_GMatrix3D.helperMatrix = new com_genome2d_geom_GMatrix3D();
com_genome2d_context_GProjectionMatrix.NEAR = 0;
com_genome2d_context_GProjectionMatrix.FAR = 4000;
com_genome2d_context_filters_GFilter.g2d_count = 0;
com_genome2d_context_renderers_G3DRenderer.VERTEX_SHADER_CODE = "\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\r\n\t\t\tattribute vec3 aPosition;\r\n\t\t\tattribute vec2 aUv;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvUv = aUv;\r\n\t\t\t\tgl_Position =  vec4(aPosition.x, aPosition.y, aPosition.z, 1);\r\n\t\t\t\tgl_Position = gl_Position * modelMatrix;\r\n\t\t\t\tgl_Position = gl_Position * cameraMatrix;\r\n\t\t\t\tgl_Position = gl_Position * projectionMatrix;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_G3DRenderer.FRAGMENT_SHADER_CODE = "\r\n\t\t\t#ifdef GL_ES\r\n\t\t\tprecision highp float;\r\n\t\t\t#endif\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vUv);\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_G3DRenderer.VERTEX_SHADER_CODE_NORMAL = "\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform mat4 cameraMatrix;\r\n\t\t\tuniform mat4 modelMatrix;\r\n\t\t\tuniform mat4 invertedMatrix;\r\n\r\n\t\t\tattribute vec3 aPosition;\r\n\t\t\tattribute vec2 aUv;\r\n\t\t\tattribute vec3 aNormal;\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying vec3 vNormal;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvUv = aUv;\r\n\r\n\t\t\t\tvNormal = (vec4(aNormal.x, aNormal.y, aNormal.z, 1) * invertedMatrix).xyz;\r\n\t\t\t\tvNormal = normalize(vNormal);\r\n\r\n\t\t\t\tgl_Position = vec4(aPosition.x, aPosition.y, aPosition.z, 1);\r\n\t\t\t\tgl_Position = gl_Position * modelMatrix;\r\n\t\t\t\tgl_Position = gl_Position * cameraMatrix;\r\n\t\t\t\tgl_Position = gl_Position * projectionMatrix;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_G3DRenderer.FRAGMENT_SHADER_CODE_NORMAL = "\r\n\t\t\t#ifdef GL_ES\r\n\t\t\tprecision highp float;\r\n\t\t\t#endif\r\n\r\n\t\t\tvarying vec2 vUv;\r\n\t\t\tvarying vec3 vNormal;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tuniform vec3 lightDirection;\r\n\t\t\tuniform vec3 lightColor;\r\n\t\t\tuniform vec3 ambientColor;\r\n\t\t\tuniform vec4 tintColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvec4 texColor = texture2D(sTexture, vUv);\r\n\r\n\t\t\t\tfloat light = -dot(vNormal, lightDirection);\r\n\t\t\t\tlight = clamp(light, 0.0, 1.0);\r\n\r\n\t\t\t\tvec3 directionColor = texColor.xyz * light * lightColor;\r\n\t\t\t\tvec3 ambientColor = texColor.xyz * ambientColor.xyz;\r\n\r\n\t\t\t\ttexColor.xyz = directionColor + ambientColor;\r\n\t\t\t\tgl_FragColor = tintColor * texColor;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_G3DRenderer.STRIDE = 24;
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.BATCH_SIZE = 30;
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.TRANSFORM_PER_VERTEX = 3;
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.TRANSFORM_PER_VERTEX_ALPHA = 4;
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.VERTEX_SHADER_CODE_ALPHA = "\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform vec4 transforms[" + 120 + "];\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aConstantIndex;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tvec2 temp1 = vec2(aPosition.x * transforms[int(aConstantIndex.y)].z, aPosition.y * transforms[int(aConstantIndex.y)].w);\r\n\t\t\t\tvec2 temp2 = vec2(temp1.x * transforms[int(aConstantIndex.x)].x, temp1.y * transforms[int(aConstantIndex.x)].y);\r\n\t\t\t\ttemp2.x += temp2.y;\r\n\t\t\t\ttemp2.x += transforms[int(aConstantIndex.y)].x;\r\n\r\n\t\t\t\tvec2 temp3 = vec2(temp1.x * transforms[int(aConstantIndex.x)].z, temp1.y * transforms[int(aConstantIndex.x)].w);\r\n\t\t\t\ttemp3.x += temp3.y;\r\n\t\t\t\ttemp3.x += transforms[int(aConstantIndex.y)].y;\r\n\r\n\t\t\t\tgl_Position = vec4(temp2.x, temp3.x, 0, 1) * projectionMatrix;\r\n\r\n\t\t\t\tvTexCoord = vec2(aTexCoord.x*transforms[int(aConstantIndex.z)].z+transforms[int(aConstantIndex.z)].x, aTexCoord.y*transforms[int(aConstantIndex.z)].w+transforms[int(aConstantIndex.z)].y);\r\n\t\t\t\tvColor = transforms[int(aConstantIndex.w)];\r\n\t\t\t}\r\n\t\t ";
com_genome2d_context_renderers_GMatrixQuadTextureShaderRenderer.FRAGMENT_SHADER_CODE_ALPHA = "\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_GQuadTextureShaderRenderer.BATCH_SIZE = 30;
com_genome2d_context_renderers_GQuadTextureShaderRenderer.TRANSFORM_PER_VERTEX = 3;
com_genome2d_context_renderers_GQuadTextureShaderRenderer.TRANSFORM_PER_VERTEX_ALPHA = 4;
com_genome2d_context_renderers_GQuadTextureShaderRenderer.VERTEX_SHADER_CODE_ALPHA = "\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\t\t\tuniform vec4 transforms[" + 120 + "];\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aConstantIndex;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t    vec2 temp = vec2(aPosition.x*transforms[int(aConstantIndex.z)].x, aPosition.y*transforms[int(aConstantIndex.z)].y);\r\n\t\t\t    temp.x -= transforms[int(aConstantIndex.z)].z;\r\n\t\t\t    temp.y -= transforms[int(aConstantIndex.z)].w;\r\n\t\t\t\tfloat c = cos(transforms[int(aConstantIndex.x)].z);\r\n\t\t\t\tfloat s = sin(transforms[int(aConstantIndex.x)].z);\r\n\t\t\t\ttemp = vec2(temp.x * c - temp.y * s, temp.x * s + temp.y * c);\r\n                temp.x += transforms[int(aConstantIndex.x)].x;\r\n                temp.y += transforms[int(aConstantIndex.x)].y;\r\n\t\t\t\tgl_Position = vec4(temp.x, temp.y, 0, 1) * projectionMatrix;\r\n\r\n\t\t\t\tvTexCoord = vec2(aTexCoord.x*transforms[int(aConstantIndex.y)].z+transforms[int(aConstantIndex.y)].x, aTexCoord.y*transforms[int(aConstantIndex.y)].w+transforms[int(aConstantIndex.y)].y);\r\n\t\t\t\tvColor = transforms[int(aConstantIndex.w)];\r\n\t\t\t}\r\n\t\t ";
com_genome2d_context_renderers_GQuadTextureShaderRenderer.FRAGMENT_SHADER_CODE_ALPHA = "\r\n\t\t\tprecision lowp float;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t";
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.BATCH_SIZE = 1200;
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.DATA_PER_VERTEX = 4;
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.DATA_PER_VERTEX_ALPHA = 8;
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.VERTEX_SHADER_CODE = "\r\n\t\t\tuniform mat4 projectionMatrix;\r\n\r\n\t\t\tattribute vec2 aPosition;\r\n\t\t\tattribute vec2 aTexCoord;\r\n\t\t\tattribute vec4 aColor;\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_Position = vec4(aPosition.x, aPosition.y, 0, 1) * projectionMatrix;\r\n\t\t\t\tvTexCoord = aTexCoord;\r\n\t\t\t\tvColor = aColor;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.FRAGMENT_SHADER_CODE = "\r\n\t\t\t#ifdef GL_ES\r\n\t\t\tprecision highp float;\r\n\t\t\t#endif\r\n\r\n\t\t\tvarying vec2 vTexCoord;\r\n\t\t\tvarying vec4 vColor;\r\n\r\n\t\t\tuniform sampler2D sTexture;\r\n\r\n\t\t\tvoid main(void)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor = texture2D(sTexture, vTexCoord) * vColor;\r\n\t\t\t}\r\n\t\t";
com_genome2d_context_renderers_GTriangleTextureBufferCPURenderer.STRIDE = 8;
com_genome2d_context_stats_GStats.fps = 0;
com_genome2d_context_stats_GStats.drawCalls = 0;
com_genome2d_context_stats_GStats.nodeCount = 0;
com_genome2d_context_stats_GStats.x = 0;
com_genome2d_context_stats_GStats.y = 0;
com_genome2d_context_stats_GStats.scaleX = 1;
com_genome2d_context_stats_GStats.scaleY = 1;
com_genome2d_context_stats_GStats.visible = false;
com_genome2d_debug_GDebug.g2d_log = "";
com_genome2d_debug_GDebug.debugDrawCall = 0;
com_genome2d_debug_GDebug.showPriority = 1;
com_genome2d_debug_GDebug.useNativeTrace = true;
com_genome2d_debug_GDebug.stackTrace = true;
com_genome2d_debug_GDebugPriority.TRACE = -1;
com_genome2d_debug_GDebugPriority.INTERNAL_DUMP = 0;
com_genome2d_debug_GDebugPriority.AUTO_DUMP = 1;
com_genome2d_debug_GDebugPriority.DUMP = 2;
com_genome2d_debug_GDebugPriority.INFO = 3;
com_genome2d_debug_GDebugPriority.WARNING = 4;
com_genome2d_debug_GDebugPriority.ERROR = 5;
com_genome2d_debug_GDebugPriority.G2D_WARNING = 14;
com_genome2d_debug_GDebugPriority.G2D_ERROR = 15;
com_genome2d_debug_GDebugPriority.PROFILE = 100;
com_genome2d_debug_GDebugPriority.EDITOR = 1000;
com_genome2d_debug_GProfiler.showProfileCallStarts = false;
com_genome2d_debug_GProfiler.showProfileCallEnds = true;
com_genome2d_debug_GProfiler.g2d_profiles = new haxe_ds_StringMap();
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_NAME = "GParticleSystemD";
com_genome2d_deprecated_components_renderable_particles_GParticleSystemD.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.__meta__ = { fields : { blendMode : { category : ["rendering"], prototype : null}, useWorldSpace : { prototype : null}, initialScale : { category : ["rendering"], range : [0,10,.05], prototype : null}, initialScaleVariance : { category : ["rendering"], range : [0,10,.05], prototype : null}, endScale : { category : ["rendering"], range : [0,10,.05], prototype : null}, endScaleVariance : { category : ["rendering"], range : [0,10,.05], prototype : null}, emit : { category : ["emission"], prototype : null}, burst : { category : ["emission"], prototype : null}, energy : { category : ["emission"], range : [0,10,.05], prototype : null}, energyVariance : { category : ["emission"], range : [0,10,.05], prototype : null}, emission : { category : ["emission"], range : [0,1024,1], prototype : null}, emissionVariance : { category : ["emission"], range : [0,1024,1], prototype : null}, emissionTime : { category : ["emission"], range : [0,100,.05], prototype : null}, emissionDelay : { category : ["emission"], range : [0,100,.05], prototype : null}, initialVelocity : { category : ["velocity"], range : [0,100,1], prototype : null}, initialVelocityVariance : { category : ["velocity"], range : [0,100,1], prototype : null}, initialAcceleration : { category : ["velocity"], range : [0,10,.1], prototype : null}, initialAccelerationVariance : { category : ["velocity"], range : [0,10,.1], prototype : null}, initialAngularVelocity : { category : ["velocity"], range : [0,2,.05], prototype : null}, initialAngularVelocityVariance : { category : ["velocity"], range : [0,2,.05], prototype : null}, initialAngle : { range : [0,6.28,.05], prototype : null}, initialAngleVariance : { range : [0,6.28,.05], prototype : null}, initialRedVariance : { category : ["color"], range : [0,1,.01], prototype : null}, initialGreenVariance : { category : ["color"], range : [0,1,.01], prototype : null}, initialBlueVariance : { category : ["color"], range : [0,1,.01], prototype : null}, initialAlpha : { category : ["color"], range : [0,1,.01], prototype : null}, initialAlphaVariance : { category : ["color"], range : [0,1,.01], prototype : null}, initialColor : { type : ["color"], category : ["color"], prototype : null}, endRedVariance : { category : ["color"], range : [0,1,.01], prototype : null}, endGreenVariance : { category : ["color"], range : [0,1,.01], prototype : null}, endBlueVariance : { category : ["color"], range : [0,1,.01], prototype : null}, endAlpha : { category : ["color"], range : [0,1,.01], prototype : null}, endAlphaVariance : { category : ["color"], range : [0,1,.01], prototype : null}, endColor : { type : ["color"], category : ["color"], prototype : null}, dispersionXVariance : { category : ["dispersion"], range : [0,100,1], prototype : null}, dispersionYVariance : { category : ["dispersion"], range : [0,100,1], prototype : null}, dispersionAngle : { category : ["dispersion"], range : [0,6.28,.05], prototype : null}, dispersionAngleVariance : { category : ["dispersion"], range : [0,6.28,.05], prototype : null}, paused : { prototype : null}, texture : { category : ["rendering"], prototype : ["getReference"]}}};
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_PROPERTY_DEFAULTS = [null,false,1,0,1,0,false,false,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,false,null];
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_PROPERTY_NAMES = ["blendMode","useWorldSpace","initialScale","initialScaleVariance","endScale","endScaleVariance","emit","burst","energy","energyVariance","emission","emissionVariance","emissionTime","emissionDelay","initialVelocity","initialVelocityVariance","initialAcceleration","initialAccelerationVariance","initialAngularVelocity","initialAngularVelocityVariance","initialAngle","initialAngleVariance","initialRedVariance","initialGreenVariance","initialBlueVariance","initialAlpha","initialAlphaVariance","initialColor","endRedVariance","endGreenVariance","endBlueVariance","endAlpha","endAlphaVariance","endColor","dispersionXVariance","dispersionYVariance","dispersionAngle","dispersionAngleVariance","paused","texture"];
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.context.GBlendMode","Bool","Float","Float","Float","Float","Bool","Bool","Float","Float","Int","Int","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Int","Float","Float","Float","Float","Float","Int","Float","Float","Float","Float","Bool","com.genome2d.textures.GTexture"];
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2];
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_NAME = "GSimpleParticleSystemD";
com_genome2d_deprecated_components_renderable_particles_GSimpleParticleSystemD.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_deprecated_particles_GParticlePoolD.g2d_defaultPool = new com_genome2d_deprecated_particles_GParticlePoolD();
com_genome2d_deprecated_particles_GSimpleParticleD.g2d_instanceCount = 0;
com_genome2d_g3d_G3DFactory.g2d_ids = 0;
com_genome2d_g3d_importers_G3DImporter.g2d_version = 102;
com_genome2d_geom_GCurve.__meta__ = { fields : { path : { prototype : null}}};
com_genome2d_geom_GCurve.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_geom_GCurve.PROTOTYPE_PROPERTY_NAMES = ["path"];
com_genome2d_geom_GCurve.PROTOTYPE_PROPERTY_TYPES = ["Array:Float"];
com_genome2d_geom_GCurve.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_geom_GCurve.PROTOTYPE_NAME = "GCurve";
com_genome2d_geom_GCurve.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_geom_GIntPoint.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_geom_GIntPoint.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_geom_GIntPoint.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_geom_GIntPoint.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_geom_GIntPoint.PROTOTYPE_NAME = "GIntPoint";
com_genome2d_geom_GIntPoint.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_geom_GIntRectangle.__meta__ = { fields : { x : { prototype : null}, y : { prototype : null}, width : { prototype : null}, height : { prototype : null}}};
com_genome2d_geom_GIntRectangle.PROTOTYPE_PROPERTY_DEFAULTS = [0,0,0,0];
com_genome2d_geom_GIntRectangle.PROTOTYPE_PROPERTY_NAMES = ["x","y","width","height"];
com_genome2d_geom_GIntRectangle.PROTOTYPE_PROPERTY_TYPES = ["Int","Int","Int","Int"];
com_genome2d_geom_GIntRectangle.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0];
com_genome2d_geom_GIntRectangle.PROTOTYPE_NAME = "GIntRectangle";
com_genome2d_geom_GIntRectangle.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_input_GKeyboardInputType.KEY_DOWN = "keyDown";
com_genome2d_input_GKeyboardInputType.KEY_UP = "keyUp";
com_genome2d_input_GMouseInput.DOUBLE_CLICK_TIME = 250;
com_genome2d_input_GMouseInputType.MOUSE_DOWN = "mouseDown";
com_genome2d_input_GMouseInputType.MOUSE_MOVE = "mouseMove";
com_genome2d_input_GMouseInputType.MOUSE_STILL = "mouseStill";
com_genome2d_input_GMouseInputType.MOUSE_UP = "mouseUp";
com_genome2d_input_GMouseInputType.MOUSE_OVER = "mouseOver";
com_genome2d_input_GMouseInputType.MOUSE_OUT = "mouseOut";
com_genome2d_input_GMouseInputType.RIGHT_MOUSE_DOWN = "rightMouseDown";
com_genome2d_input_GMouseInputType.RIGHT_MOUSE_UP = "rightMouseUp";
com_genome2d_input_GMouseInputType.MOUSE_WHEEL = "mouseWheel";
com_genome2d_input_GMouseInputType.CLICK = "click";
com_genome2d_input_GMouseInputType.RIGHT_CLICK = "rightClick";
com_genome2d_node_GNode.__meta__ = { obj : { prototypeName : ["node"]}, fields : { cameraGroup : { prototype : null}, maskRect : { prototype : null}, name : { prototype : null}, sameNameChildren : { prototype : null}, postProcess : { prototype : null}, useWorldSpace : { category : ["transform"], prototype : null}, useWorldColor : { category : ["color"], prototype : null}, visible : { prototype : null}, x : { category : ["transform"], prototype : null}, y : { category : ["transform"], prototype : null}, scaleX : { category : ["transform"], range : [0,0,.01], prototype : null}, scaleY : { category : ["transform"], range : [0,0,.01], prototype : null}, rotation : { category : ["transform"], range : [0,0,.01], prototype : null}, alpha : { category : ["color"], range : [0,1,.01], prototype : null}, color : { category : ["color"], type : ["color"], prototype : null}}};
com_genome2d_node_GNode.g2d_nodeCount = 0;
com_genome2d_node_GNode.PROTOTYPE_PROPERTY_DEFAULTS = [0,null,"",true,null,false,false,true,0.0,0.0,0.0,0.0,0.0,0.0,0];
com_genome2d_node_GNode.PROTOTYPE_PROPERTY_NAMES = ["cameraGroup","maskRect","name","sameNameChildren","postProcess","useWorldSpace","useWorldColor","visible","x","y","scaleX","scaleY","rotation","alpha","color"];
com_genome2d_node_GNode.PROTOTYPE_PROPERTY_TYPES = ["Int","com.genome2d.geom.GRectangle","String","Bool","com.genome2d.postprocess.GPostProcess","Bool","Bool","Bool","Float","Float","Float","Float","Float","Float","Int"];
com_genome2d_node_GNode.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
com_genome2d_node_GNode.PROTOTYPE_NAME = "node";
com_genome2d_node_GNode.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_particles_GParticle.g2d_instanceId = 0;
com_genome2d_particles_GParticleEmitter.__meta__ = { obj : { prototypeName : ["particle_emitter"], prototypeDefaultChildGroup : ["*"]}, fields : { useWorldSpace : { prototype : null}, enableSph : { prototype : null}, emit : { prototype : null}, texture : { prototype : ["getReference"]}, duration : { prototype : null}, durationVariance : { prototype : null}, loop : { prototype : null}, delay : { prototype : null}, delayVariance : { prototype : null}, rate : { prototype : null}, burstDistribution : { prototype : null}}};
com_genome2d_particles_GParticleEmitter.PROTOTYPE_PROPERTY_DEFAULTS = [true,false,true,null,0,0,false,0,0,null,null];
com_genome2d_particles_GParticleEmitter.PROTOTYPE_PROPERTY_NAMES = ["useWorldSpace","enableSph","emit","texture","duration","durationVariance","loop","delay","delayVariance","rate","burstDistribution"];
com_genome2d_particles_GParticleEmitter.PROTOTYPE_PROPERTY_TYPES = ["Bool","Bool","Bool","com.genome2d.textures.GTexture","Float","Float","Bool","Float","Float","com.genome2d.geom.GCurve","Array:Float"];
com_genome2d_particles_GParticleEmitter.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,2,0,0,0,0,0,0,0];
com_genome2d_particles_GParticleEmitter.PROTOTYPE_NAME = "particle_emitter";
com_genome2d_particles_GParticleEmitter.PROTOTYPE_DEFAULT_CHILD_GROUP = "*";
com_genome2d_particles_GParticleGroup.g2d_id = 0;
com_genome2d_particles_GParticlePool.g2d_defaultPool = new com_genome2d_particles_GParticlePool();
com_genome2d_particles_GParticleSystem.__meta__ = { obj : { prototypeName : ["particle_system"], prototypeDefaultChildGroup : ["particle_emitter"]}, fields : { timeDilation : { prototype : null}, enableSph : { prototype : null}, x : { prototype : null}, y : { prototype : null}, scaleX : { prototype : null}, scaleY : { prototype : null}, enabled : { prototype : null}}};
com_genome2d_particles_GParticleSystem.PRESSURE = 1;
com_genome2d_particles_GParticleSystem.NEAR_PRESSURE = 1;
com_genome2d_particles_GParticleSystem.RANGE = 16;
com_genome2d_particles_GParticleSystem.RANGE2 = 256.;
com_genome2d_particles_GParticleSystem.PROTOTYPE_PROPERTY_DEFAULTS = [1,false,0,0,1,1,true];
com_genome2d_particles_GParticleSystem.PROTOTYPE_PROPERTY_NAMES = ["timeDilation","enableSph","x","y","scaleX","scaleY","enabled"];
com_genome2d_particles_GParticleSystem.PROTOTYPE_PROPERTY_TYPES = ["Float","Bool","Float","Float","Float","Float","Bool"];
com_genome2d_particles_GParticleSystem.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0];
com_genome2d_particles_GParticleSystem.PROTOTYPE_NAME = "particle_system";
com_genome2d_particles_GParticleSystem.PROTOTYPE_DEFAULT_CHILD_GROUP = "particle_emitter";
com_genome2d_particles_modules_GParticleEmitterModule.__meta__ = { fields : { spawnParticleModule : { prototype : null}, updateParticleModule : { prototype : null}, updateEmitterModule : { prototype : null}, enabled : { prototype : null}}};
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_PROPERTY_DEFAULTS = [false,false,false,true];
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_PROPERTY_NAMES = ["spawnParticleModule","updateParticleModule","updateEmitterModule","enabled"];
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_PROPERTY_TYPES = ["Bool","Bool","Bool","Bool"];
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0];
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_NAME = "GParticleEmitterModule";
com_genome2d_particles_modules_GParticleEmitterModule.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_NAME = "GSPHVelocityModule";
com_genome2d_particles_modules_GSPHVelocityModule.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_particles_modules_GScriptModule.__meta__ = { fields : { script : { prototype : ["getReference"]}}};
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_PROPERTY_NAMES = ["script"];
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.scripts.GScript"];
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_PROPERTY_EXTRAS = [2];
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_NAME = "GScriptModule";
com_genome2d_particles_modules_GScriptModule.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_postprocess_GPostProcess.__meta__ = { fields : { bounds : { prototype : null}}};
com_genome2d_postprocess_GPostProcess.g2d_count = 0;
com_genome2d_postprocess_GPostProcess.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_postprocess_GPostProcess.PROTOTYPE_PROPERTY_NAMES = ["bounds"];
com_genome2d_postprocess_GPostProcess.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.geom.GRectangle"];
com_genome2d_postprocess_GPostProcess.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_postprocess_GPostProcess.PROTOTYPE_NAME = "GPostProcess";
com_genome2d_postprocess_GPostProcess.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_postprocess_GBloomPP.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_postprocess_GBloomPP.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_postprocess_GBloomPP.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_postprocess_GBloomPP.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_postprocess_GBloomPP.PROTOTYPE_NAME = "GBloomPP";
com_genome2d_postprocess_GBloomPP.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_postprocess_GFilterPP.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_postprocess_GFilterPP.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_postprocess_GFilterPP.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_postprocess_GFilterPP.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_postprocess_GFilterPP.PROTOTYPE_NAME = "GFilterPP";
com_genome2d_postprocess_GFilterPP.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_proto_GPrototype.resolveEnum = null;
com_genome2d_proto_GPrototype.getClass = null;
com_genome2d_proto_GPrototypeExtras.REFERENCE_GETTER = 2;
com_genome2d_proto_GPrototypeExtras.IGNORE_AUTO_BIND = 4;
com_genome2d_proto_GPrototypeFactory.g2d_lookupsInitialized = false;
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_NAME = "PROTOTYPE_NAME";
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_PROPERTY_NAMES = "PROTOTYPE_PROPERTY_NAMES";
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_PROPERTY_TYPES = "PROTOTYPE_PROPERTY_TYPES";
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_PROPERTY_EXTRAS = "PROTOTYPE_PROPERTY_EXTRAS";
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_PROPERTY_DEFAULTS = "PROTOTYPE_PROPERTY_DEFAULTS";
com_genome2d_proto_GPrototypeSpecs.PROTOTYPE_DEFAULT_CHILD_GROUP = "PROTOTYPE_DEFAULT_CHILD_GROUP";
com_genome2d_scripts_GScript.__meta__ = { fields : { id : { prototype : null}, includeMath : { prototype : null}}};
com_genome2d_scripts_GScript.PROTOTYPE_PROPERTY_DEFAULTS = ["",true];
com_genome2d_scripts_GScript.PROTOTYPE_PROPERTY_NAMES = ["id","includeMath"];
com_genome2d_scripts_GScript.PROTOTYPE_PROPERTY_TYPES = ["String","Bool"];
com_genome2d_scripts_GScript.PROTOTYPE_PROPERTY_EXTRAS = [0,0];
com_genome2d_scripts_GScript.PROTOTYPE_NAME = "GScript";
com_genome2d_scripts_GScript.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_signals_GMouseSignalType.MOUSE_DOWN = "mouseDown";
com_genome2d_signals_GMouseSignalType.MOUSE_MOVE = "mouseMove";
com_genome2d_signals_GMouseSignalType.MOUSE_UP = "mouseUp";
com_genome2d_signals_GMouseSignalType.MOUSE_OVER = "mouseOver";
com_genome2d_signals_GMouseSignalType.MOUSE_OUT = "mouseOut";
com_genome2d_signals_GMouseSignalType.RIGHT_MOUSE_DOWN = "rightmousedown";
com_genome2d_signals_GMouseSignalType.RIGHT_MOUSE_UP = "rightmouseup";
com_genome2d_text_GFont.__meta__ = { fields : { id : { prototype : null}}};
com_genome2d_text_GFont.PROTOTYPE_PROPERTY_DEFAULTS = [""];
com_genome2d_text_GFont.PROTOTYPE_PROPERTY_NAMES = ["id"];
com_genome2d_text_GFont.PROTOTYPE_PROPERTY_TYPES = ["String"];
com_genome2d_text_GFont.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_text_GFont.PROTOTYPE_NAME = "GFont";
com_genome2d_text_GFont.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_text_GTextRenderer.__meta__ = { fields : { tracking : { prototype : null}, lineSpace : { prototype : null}, vAlign : { prototype : null}, hAlign : { prototype : null}, text : { prototype : null}, autoSize : { prototype : null}, width : { prototype : null}, height : { prototype : null}, textWidth : { prototype : null}, textHeight : { prototype : null}}};
com_genome2d_text_GTextureFont.__meta__ = { fields : { texture : { prototype : ["getReference"]}, lineHeight : { prototype : null}, base : { prototype : null}, face : { prototype : null}, italic : { prototype : null}, bold : { prototype : null}, regionOffsetX : { prototype : null}, regionOffsetY : { prototype : null}}};
com_genome2d_text_GTextureFont.PROTOTYPE_PROPERTY_DEFAULTS = [null,0,0,"",false,false,0,0];
com_genome2d_text_GTextureFont.PROTOTYPE_PROPERTY_NAMES = ["texture","lineHeight","base","face","italic","bold","regionOffsetX","regionOffsetY"];
com_genome2d_text_GTextureFont.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.textures.GTexture","Int","Int","String","Bool","Bool","Int","Int"];
com_genome2d_text_GTextureFont.PROTOTYPE_PROPERTY_EXTRAS = [2,0,0,0,0,0,0,0];
com_genome2d_text_GTextureFont.PROTOTYPE_NAME = "GTextureFont";
com_genome2d_text_GTextureFont.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_text_GTextureTextRenderer.warnMissingCharTextures = false;
com_genome2d_text_GTextureTextRenderer.fontScaleMultiplier = 1;
com_genome2d_textures_GTextureBase.g2d_instanceCount = 0;
com_genome2d_textures_GTextureBase.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_textures_GTextureBase.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_textures_GTextureBase.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_textures_GTextureBase.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_textures_GTextureBase.PROTOTYPE_NAME = "GTextureBase";
com_genome2d_textures_GTextureBase.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_textures_GTexture.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_textures_GTexture.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_textures_GTexture.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_textures_GTexture.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_textures_GTexture.PROTOTYPE_NAME = "GTexture";
com_genome2d_textures_GTexture.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_textures_GTextureAtlas.__meta__ = { fields : { id : { prototype : null}}};
com_genome2d_textures_GTextureAtlas.PROTOTYPE_PROPERTY_DEFAULTS = [""];
com_genome2d_textures_GTextureAtlas.PROTOTYPE_PROPERTY_NAMES = ["id"];
com_genome2d_textures_GTextureAtlas.PROTOTYPE_PROPERTY_TYPES = ["String"];
com_genome2d_textures_GTextureAtlas.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_textures_GTextureAtlas.PROTOTYPE_NAME = "GTextureAtlas";
com_genome2d_textures_GTextureAtlas.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_textures_GTextureManager.defaultFilteringType = com_genome2d_textures_GTextureFilteringType.LINEAR;
com_genome2d_textures_GTextureManager.useAsyncUpload = false;
com_genome2d_textures_GTextureManager.g2d_asyncForce = false;
com_genome2d_textures_GTextureSettings.__meta__ = { fields : { repeatable : { prototype : null}, u : { range : [0,1,.1], prototype : null}, v : { range : [0,1,.1], prototype : null}, uScale : { range : [0,10,1], prototype : null}, vScale : { range : [0,10,1], prototype : null}, filteringType : { prototype : null}}};
com_genome2d_textures_GTextureSettings.PROTOTYPE_PROPERTY_DEFAULTS = [false,0.0,0.0,0.0,0.0,null];
com_genome2d_textures_GTextureSettings.PROTOTYPE_PROPERTY_NAMES = ["repeatable","u","v","uScale","vScale","filteringType"];
com_genome2d_textures_GTextureSettings.PROTOTYPE_PROPERTY_TYPES = ["Bool","Float","Float","Float","Float","com.genome2d.textures.GTextureFilteringType"];
com_genome2d_textures_GTextureSettings.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0];
com_genome2d_textures_GTextureSettings.PROTOTYPE_NAME = "GTextureSettings";
com_genome2d_textures_GTextureSettings.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_transitions_GTransition.__meta__ = { obj : { prototypeName : ["transition"]}, fields : { id : { prototype : null}, time : { prototype : null}, delay : { prototype : null}}};
com_genome2d_transitions_GTransition.PROTOTYPE_PROPERTY_DEFAULTS = ["",0,0];
com_genome2d_transitions_GTransition.PROTOTYPE_PROPERTY_NAMES = ["id","time","delay"];
com_genome2d_transitions_GTransition.PROTOTYPE_PROPERTY_TYPES = ["String","Float","Float"];
com_genome2d_transitions_GTransition.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0];
com_genome2d_transitions_GTransition.PROTOTYPE_NAME = "transition";
com_genome2d_transitions_GTransition.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_tween_GTween.timeScale = 1.0;
com_genome2d_tween_GTween.defaultEase = com_genome2d_tween_easing_GLinear.none;
com_genome2d_tween_GTween.enablePooling = true;
com_genome2d_tween_GTweenSequence.__meta__ = { obj : { prototypeName : ["tweenSequence"]}};
com_genome2d_tween_GTweenSequence.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_tween_GTweenSequence.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_tween_GTweenSequence.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_tween_GTweenSequence.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_tween_GTweenSequence.PROTOTYPE_NAME = "tweenSequence";
com_genome2d_tween_GTweenSequence.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_tween_GTweenStep.__meta__ = { obj : { prototypeName : ["tweenStep"]}, fields : { stepId : { prototype : null}, duration : { prototype : null}, gotoStepId : { prototype : null}, gotoRepeatCount : { prototype : null}, targetId : { prototype : null}}};
com_genome2d_tween_GTweenStep.PROTOTYPE_PROPERTY_DEFAULTS = ["",0.0,"",0,""];
com_genome2d_tween_GTweenStep.PROTOTYPE_PROPERTY_NAMES = ["stepId","duration","gotoStepId","gotoRepeatCount","targetId"];
com_genome2d_tween_GTweenStep.PROTOTYPE_PROPERTY_TYPES = ["String","Float","String","Int","String"];
com_genome2d_tween_GTweenStep.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0];
com_genome2d_tween_GTweenStep.PROTOTYPE_NAME = "tweenStep";
com_genome2d_tween_GTweenStep.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_tween_GTweenTimeline.__meta__ = { obj : { prototypeName : ["tweenTimeline"]}};
com_genome2d_tween_easing_GBack.DRIVE = 1.70158;
com_genome2d_tween_interp_GCurveInterp.__meta__ = { fields : { relative : { prototype : null}, duration : { prototype : null}, to : { prototype : null}, property : { prototype : null}, easeEnum : { prototype : null}}};
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_PROPERTY_DEFAULTS = [false,0.0,null,"",null];
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_PROPERTY_NAMES = ["relative","duration","to","property","easeEnum"];
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_PROPERTY_TYPES = ["Bool","Float","com.genome2d.geom.GCurve","String","com.genome2d.tween.easing.GEaseEnum"];
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0];
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_NAME = "GCurveInterp";
com_genome2d_tween_interp_GCurveInterp.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_tween_interp_GFloatInterp.__meta__ = { obj : { prototypeName : ["tweenFloat"]}, fields : { duration : { prototype : null}, to : { prototype : null}, relative : { prototype : null}, easeEnum : { prototype : null}, property : { prototype : null}}};
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_PROPERTY_DEFAULTS = [0.0,0.0,false,null,""];
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_PROPERTY_NAMES = ["duration","to","relative","easeEnum","property"];
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_PROPERTY_TYPES = ["Float","Float","Bool","com.genome2d.tween.easing.GEaseEnum","String"];
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0];
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_NAME = "tweenFloat";
com_genome2d_tween_interp_GFloatInterp.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_element_GUIElement.__meta__ = { obj : { prototypeName : ["element"], prototypeDefaultChildGroup : ["element"]}, fields : { alpha : { category : ["color"], range : [0,1,.01], prototype : null}, useMask : { category : ["color"], prototype : null}, color : { category : ["color"], type : ["color"], prototype : null}, useWorldColor : { prototype : null}, useWorldAlpha : { prototype : null}, mouseEnabled : { prototype : null}, mousePaddingTop : { prototype : null}, mousePaddingBottom : { prototype : null}, mousePaddingLeft : { prototype : null}, mousePaddingRight : { prototype : null}, mouseChildren : { prototype : null}, visible : { prototype : null}, flushBatch : { prototype : null}, name : { prototype : null}, anchorAlign : { prototype : null}, pivotAlign : { prototype : null}, model : { prototype : null}, layout : { prototype : null}, skin : { prototype : ["getReference"]}, anchorX : { prototype : null}, anchorY : { prototype : null}, anchorLeft : { range : [0,1,.01], prototype : null}, anchorTop : { range : [0,1,.01], prototype : null}, anchorRight : { range : [0,1,.01], prototype : null}, anchorBottom : { range : [0,1,.01], prototype : null}, left : { prototype : null}, top : { prototype : null}, right : { prototype : null}, bottom : { prototype : null}, pivotX : { range : [0,1,.01], prototype : null}, pivotY : { range : [0,1,.01], prototype : null}, expand : { prototype : null}, preferredWidth : { prototype : null}, preferredHeight : { prototype : null}, mouseDown : { editable : [false], prototype : null}, rightMouseDown : { editable : [false], prototype : null}, mouseUp : { editable : [false], prototype : null}, rightMouseUp : { editable : [false], prototype : null}, mouseWheel : { editable : [false], prototype : null}, mouseClick : { editable : [false], prototype : null}, rightMouseClick : { editable : [false], prototype : null}, mouseOver : { editable : [false], prototype : null}, mouseOut : { editable : [false], prototype : null}, mouseMove : { editable : [false], prototype : null}}};
com_genome2d_ui_element_GUIElement.g2d_foundMouseDisabled = true;
com_genome2d_ui_element_GUIElement.PROTOTYPE_PROPERTY_DEFAULTS = [1,false,0,true,true,true,0,0,0,0,true,false,false,"",null,null,"",null,null,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,true,0.0,0.0,"","","","","","","","","",""];
com_genome2d_ui_element_GUIElement.PROTOTYPE_PROPERTY_NAMES = ["alpha","useMask","color","useWorldColor","useWorldAlpha","mouseEnabled","mousePaddingTop","mousePaddingBottom","mousePaddingLeft","mousePaddingRight","mouseChildren","visible","flushBatch","name","anchorAlign","pivotAlign","model","layout","skin","anchorX","anchorY","anchorLeft","anchorTop","anchorRight","anchorBottom","left","top","right","bottom","pivotX","pivotY","expand","preferredWidth","preferredHeight","mouseDown","rightMouseDown","mouseUp","rightMouseUp","mouseWheel","mouseClick","rightMouseClick","mouseOver","mouseOut","mouseMove"];
com_genome2d_ui_element_GUIElement.PROTOTYPE_PROPERTY_TYPES = ["Float","Bool","Int","Bool","Bool","Bool","Float","Float","Float","Float","Bool","Bool","Bool","String","com.genome2d.ui.GUIAlignType","com.genome2d.ui.GUIAlignType","String","com.genome2d.ui.layout.GUILayout","com.genome2d.ui.skin.GUISkin","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Float","Bool","Float","Float","String","String","String","String","String","String","String","String","String","String"];
com_genome2d_ui_element_GUIElement.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
com_genome2d_ui_element_GUIElement.PROTOTYPE_NAME = "element";
com_genome2d_ui_element_GUIElement.PROTOTYPE_DEFAULT_CHILD_GROUP = "element";
com_genome2d_ui_element_GUIInputField.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_ui_element_GUIInputField.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_ui_element_GUIInputField.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_ui_element_GUIInputField.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_ui_element_GUIInputField.PROTOTYPE_NAME = "GUIInputField";
com_genome2d_ui_element_GUIInputField.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_layout_GUILayout.__meta__ = { obj : { prototypeName : ["layout"]}, fields : { type : { prototype : null}}};
com_genome2d_ui_layout_GUILayout.PROTOTYPE_PROPERTY_DEFAULTS = [com_genome2d_ui_layout_GUILayoutType.HORIZONTAL];
com_genome2d_ui_layout_GUILayout.PROTOTYPE_PROPERTY_NAMES = ["type"];
com_genome2d_ui_layout_GUILayout.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.ui.layout.GUILayoutType"];
com_genome2d_ui_layout_GUILayout.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_ui_layout_GUILayout.PROTOTYPE_NAME = "layout";
com_genome2d_ui_layout_GUILayout.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_layout_GUIHorizontalLayout.__meta__ = { obj : { prototypeName : ["horizontal"]}, fields : { gap : { prototype : null}, useChildrenHeight : { prototype : null}, skipLastGap : { prototype : null}}};
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_PROPERTY_DEFAULTS = [0,false,false];
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_PROPERTY_NAMES = ["gap","useChildrenHeight","skipLastGap"];
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_PROPERTY_TYPES = ["Float","Bool","Bool"];
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0];
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_NAME = "horizontal";
com_genome2d_ui_layout_GUIHorizontalLayout.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_layout_GUIVerticalLayout.__meta__ = { obj : { prototypeName : ["vertical"]}, fields : { gap : { prototype : null}}};
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_PROPERTY_DEFAULTS = [0];
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_PROPERTY_NAMES = ["gap"];
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_PROPERTY_TYPES = ["Float"];
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_NAME = "vertical";
com_genome2d_ui_layout_GUIVerticalLayout.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_skin_GUISkin.__meta__ = { fields : { id : { prototype : null}, forcePixelAccuracy : { prototype : null}, red : { prototype : null}, green : { prototype : null}, blue : { prototype : null}, blendMode : { prototype : null}, color : { prototype : null}, alpha : { prototype : null}}};
com_genome2d_ui_skin_GUISkin.useBatch = true;
com_genome2d_ui_skin_GUISkin.PROTOTYPE_PROPERTY_DEFAULTS = ["",true,1,1,1,null,0,1];
com_genome2d_ui_skin_GUISkin.PROTOTYPE_PROPERTY_NAMES = ["id","forcePixelAccuracy","red","green","blue","blendMode","color","alpha"];
com_genome2d_ui_skin_GUISkin.PROTOTYPE_PROPERTY_TYPES = ["String","Bool","Float","Float","Float","com.genome2d.context.GBlendMode","Int","Float"];
com_genome2d_ui_skin_GUISkin.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,0];
com_genome2d_ui_skin_GUISkin.PROTOTYPE_NAME = "GUISkin";
com_genome2d_ui_skin_GUISkin.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_skin_GUIFontSkin.__meta__ = { obj : { prototypeName : ["fontSkin"]}, fields : { rotation : { prototype : null}, wordWrap : { prototype : null}, vAlign : { prototype : null}, hAlign : { prototype : null}, autoSize : { prototype : null}, fontScale : { prototype : null}, lineSpace : { prototype : null}, font : { prototype : ["getReference"]}, inputEnabled : { prototype : null}}};
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_PROPERTY_DEFAULTS = [0,false,null,null,false,0.0,0.0,null,false];
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_PROPERTY_NAMES = ["rotation","wordWrap","vAlign","hAlign","autoSize","fontScale","lineSpace","font","inputEnabled"];
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_PROPERTY_TYPES = ["Float","Bool","com.genome2d.utils.GVAlignType","com.genome2d.utils.GHAlignType","Bool","Float","Float","com.genome2d.text.GTextureFont","Bool"];
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_PROPERTY_EXTRAS = [0,0,0,0,0,0,0,2,0];
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_NAME = "fontSkin";
com_genome2d_ui_skin_GUIFontSkin.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_skin_GUIParticleSkin.__meta__ = { fields : { particleSystem : { prototype : null}}};
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_PROPERTY_DEFAULTS = [null];
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_PROPERTY_NAMES = ["particleSystem"];
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.particles.GParticleSystem"];
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_PROPERTY_EXTRAS = [0];
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_NAME = "GUIParticleSkin";
com_genome2d_ui_skin_GUIParticleSkin.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_NAME = "GUIShapeSkin";
com_genome2d_ui_skin_GUIShapeSkin.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_ui_skin_GUISkinSheet.__meta__ = { obj : { prototypeName : ["skinSheet"], prototypeDefaultChildGroup : ["*"]}};
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_NAME = "skinSheet";
com_genome2d_ui_skin_GUISkinSheet.PROTOTYPE_DEFAULT_CHILD_GROUP = "*";
com_genome2d_ui_skin_GUITextureSkin.__meta__ = { obj : { prototypeName : ["textureSkin"]}, fields : { texture : { prototype : ["getReference"]}, sliceLeft : { prototype : null}, sliceTop : { prototype : null}, sliceRight : { prototype : null}, sliceBottom : { prototype : null}, autoSize : { prototype : null}, scaleX : { prototype : null}, scaleY : { prototype : null}, rotation : { prototype : null}, renderScaleX : { prototype : null}, renderScaleY : { prototype : null}, tiled : { prototype : null}, tiledHeight : { prototype : null}, tiledWidth : { prototype : null}, usePivot : { prototype : null}, bindTextureToModel : { prototype : null}}};
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_PROPERTY_DEFAULTS = [null,0,0,0,0,true,1,1,0,1,1,false,false,false,false,false];
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_PROPERTY_NAMES = ["texture","sliceLeft","sliceTop","sliceRight","sliceBottom","autoSize","scaleX","scaleY","rotation","renderScaleX","renderScaleY","tiled","tiledHeight","tiledWidth","usePivot","bindTextureToModel"];
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_PROPERTY_TYPES = ["com.genome2d.textures.GTexture","Int","Int","Int","Int","Bool","Float","Float","Float","Float","Float","Bool","Bool","Bool","Bool","Bool"];
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_PROPERTY_EXTRAS = [2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_NAME = "textureSkin";
com_genome2d_ui_skin_GUITextureSkin.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
com_genome2d_utils_GMaxRectPacker.BOTTOM_LEFT = 0;
com_genome2d_utils_GMaxRectPacker.SHORT_SIDE_FIT = 1;
com_genome2d_utils_GMaxRectPacker.LONG_SIDE_FIT = 2;
com_genome2d_utils_GMaxRectPacker.AREA_FIT = 3;
com_genome2d_utils_GMaxRectPacker.SORT_NONE = 0;
com_genome2d_utils_GMaxRectPacker.SORT_ASCENDING = 1;
com_genome2d_utils_GMaxRectPacker.SORT_DESCENDING = 2;
com_genome2d_utils_GMaxRectPacker.nonValidTextureSizePrecision = 5;
com_genome2d_utils_GQuadTreeNode.MIN_WIDTH = 100;
com_genome2d_utils_GQuadTreeNode.MIN_HEIGHT = 100;
com_genome2d_utils_astar_GAStar.ADJANCED_COST = 10;
com_genome2d_utils_astar_GAStar.DIAGONAL_COST = 14;
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_PROPERTY_DEFAULTS = [];
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_PROPERTY_NAMES = [];
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_PROPERTY_TYPES = [];
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_PROPERTY_EXTRAS = [];
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_NAME = "GAStarNode";
com_genome2d_utils_astar_GAStarNode.PROTOTYPE_DEFAULT_CHILD_GROUP = "default";
haxe__$Int32_Int32_$Impl_$._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe_io_FPHelper.LN2 = 0.6931471805599453;
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
hscript_Parser.p1 = 0;
hscript_Parser.tokenMin = 0;
hscript_Parser.tokenMax = 0;
com_dinox_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test.js.map